
#Область ПЕРЕМЕННЫЕ_ПЛАТФОРМЫ

	Перем Манифест Экспорт;

	Перем КэшМодулей, КэшНаВремяВызова, КэшНаВремяСеанса, ПодключенныеОбработки, НеСуществующиеОбработки;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

	Функция МетодСервера(Знач ИмяМодуля= "", ИмяМетода, 
			Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
			Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
		
		Если ПустаяСтрока(ИмяМодуля) Тогда
			ИмяМодуля= ПараметрыКлиентСервер.ИмяОбработки;
		КонецЕсли;
		
		Если НРег(ИмяМетода) <> НРег("МанифестМодуляПовтИсп") Тогда // Условие необходимо чтобы исключить зацикливание, т.к. метод "МанифестМодуляПовтИсп" вызывается стандартно через встроенную платформу.
			
			МодульМанифест= МанифестМодуля(ИмяМодуля);
			Если МодульМанифест = Неопределено Тогда
				
				ВызватьИсключение "Модуль объекта не обнаружен ("+ИмяМодуля+")
				|	"+ИмяМодуля+"."+ИмяМетода+"()";
				
			ИначеЕсли НЕ МодульМанифест.Функции.Свойство(ИмяМетода) И НЕ МодульМанифест.Процедуры.Свойство(ИмяМетода) Тогда
				
				ВызватьИсключение "Метод объекта не обнаружен ("+ИмяМетода+")
				|	"+ИмяМодуля+"."+ИмяМетода+"()";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Модуль= ПолучитьМодуль(ИмяМодуля);
		
		ПараметрыСтрокой= ПараметрыСтрокой(
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
		Результат= ВыполнитьМетод(Модуль, ИмяМетода, ПараметрыСтрокой,
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
		Если Модуль <> ЭтотОбъект Тогда
			Модуль.ОчиститьПеременные();
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	Функция ВыполнитьМетод(Модуль, ИмяМетода, ПараметрыСтрокой,
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
		
		Перем СтруктураМетода, ПереопределениеВыполнено;
		
		Если Модуль.Манифест.Функции.Свойство(ИмяМетода, СтруктураМетода) Тогда
			
			Если СтруктураМетода.Переопределение Тогда
				
				Результат= Переопределение(Модуль, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
				Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
				Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
				
				Если ПереопределениеВыполнено Тогда
					Возврат Результат;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураМетода.ВариантКэширования <> "НеИспользовать" Тогда
				Возврат ПовторноеИспользование(Модуль, СтруктураМетода, ПараметрыСтрокой,
				Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
				Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
			КонецЕсли;
			
			Возврат Вычислить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
			
		ИначеЕсли Модуль.Манифест.Процедуры.Свойство(ИмяМетода, СтруктураМетода) Тогда
			
			Если СтруктураМетода.Переопределение Тогда
				
				Результат= Переопределение(Модуль, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
				Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
				Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
				
				Если ПереопределениеВыполнено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
			Выполнить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
			
		КонецЕсли;
		
	КонецФункции

	Функция ПолучитьМодуль(ИмяМодуля) Экспорт
		
		Если НРег(ИмяМодуля) = НРег(ПараметрыКлиентСервер.ИмяОбработки) Тогда // Вызывается текущий модуль
			
			// Если это первый вызов то нужно заполнить манифест
			Если Манифест = Неопределено Тогда
				ЗаполнитьМанифест(ЭтотОбъект, ПараметрыКлиентСервер.ИмяОбработки);
			КонецЕсли;
			
			Возврат ЭтотОбъект;
			
		КонецЕсли;
		
		Если НЕ ПараметрыКлиентСервер.РежимОтладкиСервера 
			И НеСуществующиеОбработки()[ИмяМодуля] = Истина Тогда // Модуль получить невозможно т.к. в сеансе не существует его обработки.
			Возврат Неопределено;
		КонецЕсли;
		
		// Кэш на время вызова сервера.
		Если КэшМодулей = Неопределено Тогда
			КэшМодулей= Новый Соответствие;
		КонецЕсли;
		
		Модуль= КэшМодулей[ИмяМодуля];
		
		Если Модуль = Неопределено Тогда // Модуль еще не создан
			
			Модуль= СоздатьМодуль(ИмяМодуля);
			
			Если Модуль <> Неопределено Тогда
				КэшМодулей.Вставить(ИмяМодуля, ?(Модуль = Неопределено, Ложь, Модуль));
			КонецЕсли;
			
		ИначеЕсли Модуль = Ложь Тогда // Модуль получить невозможно
			Модуль= Неопределено;
		Иначе
			// Повторная инициализация модуля
			Модуль.ОбработкаОбъект= 	  ЭтотОбъект;
			Модуль.ПараметрыКлиентСервер= ПараметрыКлиентСервер;
			Модуль.Инициализировать(ИмяМодуля);
		КонецЕсли;
		
		Возврат Модуль;
		
	КонецФункции

	Функция СоздатьМодуль(ИмяМодуля)
		
		Перем Модуль;
		
		// Подключаемый модуль всегда вызывается под именем "Модуль_ДиадокУФПереопределяемый", т.к. он сам может переопределять методы текущего модуля.
		Если ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль И НРег(ИмяМодуля) = НРег(ПараметрыКлиентСервер.ИмяОбработки+"Переопределяемый") Тогда
			 
			Если ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "ВСоставеКонфигурации" Тогда
				
				Попытка
					Модуль= Обработки[ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю].Создать();
				Исключение
				КонецПопытки;
				
			ИначеЕсли ПараметрыКлиентСервер.РежимОтладкиСервера И ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "НаДиске" Тогда
				
				Если НЕ МетодСервера(,"ДопустимыйРежимРаботы") Тогда
					Возврат Модуль;
				КонецЕсли;
				
				Попытка
					Модуль= ВнешниеОбработки.Создать(ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю, Ложь);
				Исключение
				КонецПопытки;
				
			Иначе
				
				Попытка
					Модуль= ВнешниеОбработки.Создать("Диадок" + ПараметрыКлиентСервер.ИмяОбработки+"Переопределяемый", Ложь);
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если выполняется отладка, то обработка модуля может находится в специальном каталоге на диске.
		Если Модуль = Неопределено И ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
			
			Если НЕ МетодСервера(,"ДопустимыйРежимРаботы") Тогда
				Возврат Модуль;
			КонецЕсли;
			
			НайденныеФайлы= НайтиФайлы(ПараметрыКлиентСервер.КаталогМодулейСервера, ИмяМодуля + ".epf", Истина);
			
			Если НайденныеФайлы.Количество() > 0 Тогда
				
				Попытка
					Модуль= ВнешниеОбработки.Создать(НайденныеФайлы[0].ПолноеИмя, Ложь);
				Исключение
					Сообщить(ОписаниеОшибки(),СтатусСообщения.Важное);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Модуль = Неопределено Тогда
			
			// Попытка получения модуля если его обработка уже подключена к сеансу.
			Попытка
				
				Модуль= ВнешниеОбработки.Создать("Диадок" + ИмяМодуля, Ложь);
			Исключение
			КонецПопытки;
			
			Если Модуль <> Неопределено Тогда
				
				// Если полученный модуль это заглушка сбрасываем его и продолжаем поиск.
				Попытка
					Если Модуль.ЭтоЗаглушка Тогда 
						Модуль= Неопределено 
					КонецЕсли;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			// Если мы ищем НЕ переопределяемый модуль, то возможно это его первый вызов и обработка еще не подключена к сеансу.
			// Попытаемся подключить обработку и снова получить модуль.
			Если Модуль = Неопределено И НРег(Прав(ИмяМодуля, 16)) <> "переопределяемый" Тогда
				
				Если НЕ МетодСервера(,"ДопустимыйРежимРаботы") Тогда
					Возврат Модуль;
				КонецЕсли;
				
				Попытка
					Обработка= ПолучитьМакет(ИмяМодуля);
				Исключение
				КонецПопытки;
				
				Если ТипЗнч(Обработка) = Тип("ДвоичныеДанные") Тогда
					
					АдресОбработки= ПоместитьВоВременноеХранилище(Обработка);
					Попытка
						ВнешниеОбработки.Подключить(АдресОбработки, "Диадок" + ИмяМодуля, Ложь);
						Модуль= ВнешниеОбработки.Создать("Диадок" + ИмяМодуля, Ложь);
					Исключение
					КонецПопытки;
					УдалитьИзВременногоХранилища(АдресОбработки);
					
					Если Модуль <> Неопределено Тогда
						// Запомним обработку для того чтобы удалить её из сеанса при закрытии Диадока или инициализации подключаемого модуля.
						ПодключенныеОбработки().Добавить(ИмяМодуля);
						ПоместитьВоВременноеХранилище(ПодключенныеОбработки(), ПараметрыКлиентСервер.ВременноеХранилище.АдресПодключенныеОбработки);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Модуль <> Неопределено Тогда
			// Инициализация модуля
			Попытка
				Модуль.ОбработкаОбъект= 	  ЭтотОбъект;
				Модуль.ПараметрыКлиентСервер= ПараметрыКлиентСервер;
				Модуль.Инициализировать(ИмяМодуля);
			Исключение
				Модуль = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если Модуль = Неопределено И НЕ ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
			НеСуществующиеОбработки().Вставить(ИмяМодуля, Истина);
			СохранитьКоллекцию_НеСуществующиеОбработки();
		КонецЕсли;
		
		Если Модуль <> Неопределено И ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
			Модуль.ПриглашениеОтладки();
		КонецЕсли;
		
		Возврат Модуль;
		
	КонецФункции


	Функция МанифестМодуля(ИмяМодуля) Экспорт
		
		// В период отладки модули могуть быть модифицированны, поэтому кэш манифеста использовать нельзя.
		Если ПараметрыКлиентСервер.РежимОтладкиСервера И ИмяМодуля <> ПараметрыКлиентСервер.ИмяОбработки Тогда
			ПовторноеИспользованиеСброситьЗначение(,"МанифестМодуляПовтИсп", ИмяМодуля);
		КонецЕсли;
		
		Возврат МетодСервера(,"МанифестМодуляПовтИсп", ИмяМодуля);
		
	КонецФункции

	Функция МанифестМодуляПовтИсп(ИмяМодуля) Экспорт
		
		Модуль= ПолучитьМодуль(ИмяМодуля);
		
		Если Модуль <> Неопределено Тогда
			
			Попытка
				
				МодульМанифест= Модуль.Манифест;
				
				Если Модуль <> ЭтотОбъект Тогда
					Модуль.ОчиститьПеременные();
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
			Возврат МодульМанифест;
			
		КонецЕсли;
		
	КонецФункции

	Функция ШаблонМанифеста(ИмяМодуля) Экспорт
		
		Возврат Новый Структура("ИмяМодуля, Функции, Процедуры", ИмяМодуля, Новый Структура, Новый Структура);
		
	КонецФункции


	Функция Переопределение(СтандартныйМодуль, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
		
		ПереопределениеВыполнено= Ложь;
		
		ИмяМодуляПереопределяемый= СтандартныйМодуль.Манифест.ИмяМодуля+"Переопределяемый";
		
		МодульПереопределяемыйМанифест= МанифестМодуля(ИмяМодуляПереопределяемый);
		
		Если МодульПереопределяемыйМанифест = Неопределено
			ИЛИ (НЕ МодульПереопределяемыйМанифест.Функции.Свойство(ИмяМетода) 
				 И НЕ МодульПереопределяемыйМанифест.Процедуры.Свойство(ИмяМетода)) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МодульПереопределяемый= ПолучитьМодуль(ИмяМодуляПереопределяемый);
		
		МодульПереопределяемый.СтандартныйМодуль= 		 СтандартныйМодуль;
		МодульПереопределяемый.ПереопределениеВыполнено= ПереопределениеВыполнено;
		
		Результат= ВыполнитьМетодПереопределения(МодульПереопределяемый, ПереопределениеВыполнено, ИмяМетода, ПараметрыСтрокой,
												 Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
												 Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
		МодульПереопределяемый.ОчиститьПеременные();
		
		Возврат Результат;
		
	КонецФункции

	Функция ВыполнитьМетодПереопределения(Модуль, ПереопределениеВыполнено, ИмяМетода, ПараметрыСтрокой,
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
		
		Перем СтруктураМетода, Результат;
		
		Если Модуль.Манифест.Функции.Свойство(ИмяМетода, СтруктураМетода) Тогда
			
			Если СтруктураМетода.ВариантКэширования <> "НеИспользовать" Тогда
				Возврат ПовторноеИспользованиеПереопределения(ПереопределениеВыполнено, Модуль, СтруктураМетода, ПараметрыСтрокой,
				Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
				Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
			КонецЕсли;
			
			Результат= Вычислить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
			
		ИначеЕсли Модуль.Манифест.Процедуры.Свойство(ИмяМетода, СтруктураМетода) Тогда
			
			Выполнить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
			
		КонецЕсли;
		
		ПереопределениеВыполнено= Модуль.ПереопределениеВыполнено;
		
		Возврат Результат;
		
	КонецФункции


	Функция ПовторноеИспользование(Модуль, СтруктураМетода, ПараметрыСтрокой,
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
		
		Перем Результат;
		
		МассивПараметров= МассивПараметров(
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
		ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Получить", Модуль.Манифест.ИмяМодуля, СтруктураМетода.ИмяМетода, МассивПараметров, Результат);
		
		Если Результат <> Неопределено Тогда
			Возврат Результат.Результат;
		Иначе
			
			Результат= Вычислить("Модуль."+СтруктураМетода.ИмяМетода+"("+ПараметрыСтрокой+")");
			
			ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Обновить", Модуль.Манифест.ИмяМодуля, СтруктураМетода.ИмяМетода, МассивПараметров, Новый Структура("Результат", Результат));
			
			МассивПараметров= Неопределено;
			
			Возврат Результат;
			
		КонецЕсли;
		
	КонецФункции

	Функция ПовторноеИспользованиеПереопределения(ПереопределениеВыполнено, Модуль, СтруктураМетода, ПараметрыСтрокой,
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
		
		Перем Результат;
		
		МассивПараметров= МассивПараметров(
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
		ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Получить", Модуль.Манифест.ИмяМодуля, СтруктураМетода.ИмяМетода, МассивПараметров, Результат);
		
		Если Результат <> Неопределено Тогда
			ПереопределениеВыполнено= Истина;
			Возврат Результат.Результат;
		Иначе
			
			Результат= Вычислить("Модуль."+СтруктураМетода.ИмяМетода+"("+ПараметрыСтрокой+")");
			
			ПереопределениеВыполнено= Модуль.ПереопределениеВыполнено;
			
			Если ПереопределениеВыполнено Тогда
				ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Обновить", Модуль.Манифест.ИмяМодуля, СтруктураМетода.ИмяМетода, МассивПараметров, Новый Структура("Результат", Результат));
			КонецЕсли;
			
			МассивПараметров= Неопределено;
			
			Возврат Результат;
			
		КонецЕсли;
		
	КонецФункции

	Процедура ПовторноеИспользованиеДействияСКэшем(ВариантКэширования, Действие, ИмяМодуля, ИмяМетода, МассивПараметров, Результат= Неопределено)
		
		Если ВариантКэширования = "НаВремяСеанса" Тогда
			
			Если КэшНаВремяСеанса = Неопределено Тогда
				КэшНаВремяСеанса= ПолучитьИзВременногоХранилища(ПараметрыКлиентСервер.ВременноеХранилище.АдресКэшаСервераНаВремяСеанса);
				Кэш= КэшНаВремяСеанса;
			Иначе
				Кэш= КэшНаВремяСеанса; // Снижение издержек на чтение временного хранилища, при повторном обращении в одном серверном вызове.
			КонецЕсли;
			
		ИначеЕсли ВариантКэширования = "НаВремяВызова" Тогда
			Кэш= КэшНаВремяВызова;
		КонецЕсли;
		
		Если Кэш = Неопределено Тогда
			Кэш= Новый Структура;
		КонецЕсли;
		
		// Ветка модуля в дереве кэша
		Если НЕ Кэш.Свойство(ИмяМодуля) Тогда
			Кэш.Вставить(ИмяМодуля, Новый Структура); 
		КонецЕсли;
		
		// Ветка метода в ветке модуля в дереве кэша
		Если НЕ Кэш[ИмяМодуля].Свойство(ИмяМетода) Тогда
			Кэш[ИмяМодуля].Вставить(ИмяМетода, Новый Структура("МатрицаАдресов, Хранилище, НовыйКлюч", Новый Соответствие, Новый Соответствие, 1));
		КонецЕсли;
		
		КэшМетода= Кэш[ИмяМодуля][ИмяМетода];
		
		АдресКэша= "";
		Разделитель= "";
		
		МассивПараметровВГраница= МассивПараметров.ВГраница();
		
		Для ИндексПараметра=0 ПО МассивПараметровВГраница Цикл
			
			Параметр = МассивПараметров[ИндексПараметра];
			
			Если Параметр = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если КэшМетода.МатрицаАдресов[ИндексПараметра] = Неопределено Тогда
				КэшМетода.МатрицаАдресов.Вставить(ИндексПараметра, Новый Соответствие); // Соответствие уникальных значений параметра и их ключей.
			КонецЕсли;
			
			// Если значение параметра не уникально, ключ уже есть в матрице адресов.
			КлючЯчейкиПараметра= КэшМетода.МатрицаАдресов[ИндексПараметра][Параметр]; 
			
			// Обновление матрицы адресов для уникального значения параметра.
			Если КлючЯчейкиПараметра = Неопределено Тогда
				КлючЯчейкиПараметра= Формат(КэшМетода.НовыйКлюч, "ЧГ="); // Новый ключ для уникального значения параметра.
				КэшМетода.НовыйКлюч= КэшМетода.НовыйКлюч + 1;			 // Инкрементация общего нумератора ключей для адресации следующего уникального значения любого параметра метода.
				КэшМетода.МатрицаАдресов[ИндексПараметра].Вставить(Параметр, КлючЯчейкиПараметра);
			КонецЕсли;
			
			// Полный адрес в хранилище результатов в соответствии с сигнатурой параметров метода.
			АдресКэша= АдресКэша + Разделитель + КлючЯчейкиПараметра;
			Разделитель= ".";
			
		КонецЦикла;
		
		Если Действие = "Получить" Тогда
			Результат = КэшМетода.Хранилище[АдресКэша];
		ИначеЕсли Действие = "Обновить" Тогда
			КэшМетода.Хранилище.Вставить(АдресКэша, Результат);
		ИначеЕсли Действие = "Удалить" Тогда
			КэшМетода.Хранилище.Удалить(АдресКэша);
		КонецЕсли;
		
		Если ВариантКэширования = "НаВремяСеанса" Тогда
			
			Если Действие <> "Получить" Тогда
				// Синхронизация копии кэша на время сеанса в оперативной памяти и во временном хранилище.
				ПоместитьВоВременноеХранилище(Кэш, ПараметрыКлиентСервер.ВременноеХранилище.АдресКэшаСервераНаВремяСеанса);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры

	Процедура ПовторноеИспользованиеСброситьЗначение(ИмяМодуля= "", ИмяМетода,
			  Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
			  Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
		
		Перем СтруктураМетода, СтруктураМетодаПереопределяемый;
		
		Если ПустаяСтрока(ИмяМодуля) Тогда
			ИмяМодуля= ПараметрыКлиентСервер.ИмяОбработки;
		КонецЕсли;
		
		МодульМанифест= МанифестМодуля(ИмяМодуля);
		
		Если МодульМанифест = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если МодульМанифест.Функции.Свойство(ИмяМетода, СтруктураМетода) И СтруктураМетода.ВариантКэширования <> "НеИспользовать" Тогда
			
			Если СтруктураМетода.Переопределение Тогда
				
				МодульПереопределяемыйМанифест= МанифестМодуля(ИмяМодуля+"Переопределяемый");
				
				Если МодульПереопределяемыйМанифест <> Неопределено Тогда
					Если МодульПереопределяемыйМанифест.Функции.Свойство(ИмяМетода, СтруктураМетодаПереопределяемый) Тогда
						Если СтруктураМетодаПереопределяемый.ВариантКэширования <> "НеИспользовать" Тогда
							
							МассивПараметров= МассивПараметров(
							Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
							Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
							
							ПовторноеИспользованиеДействияСКэшем(СтруктураМетодаПереопределяемый.ВариантКэширования, "Удалить", МодульПереопределяемыйМанифест.ИмяМодуля, ИмяМетода, МассивПараметров);
							
							Возврат;
							
						Иначе // Это значит переопределяемая функция меняет входящие параметры продуктовой функции, придется её выполнить чтобы получить сигнатуру измененных параметров.
							
							ПараметрыСтрокой= ПараметрыСтрокой(
							Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
							Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
							
							ПереопределениеВыполнено= Ложь;
							
							СтандартныйМодуль= ПолучитьМодуль(ИмяМодуля);
							
							Переопределение(СтандартныйМодуль, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
							Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
							Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
							
							СтандартныйМодуль.ОчиститьПеременные();
							
							Если ПереопределениеВыполнено Тогда // Функция все-же вернула результат, значит кэш продуктовой функции не существует.
								Возврат;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			МассивПараметров= МассивПараметров(
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
			
			ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Удалить", МодульМанифест.ИмяМодуля, ИмяМетода, МассивПараметров);
			
		КонецЕсли;
		
	КонецПроцедуры


	Функция ПараметрыСтрокой(Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
							 Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
		
		Разделитель= 			"";
		ПараметрыСтрокой= 		"";
		ДобавитьПустойПараметр= Ложь;
		
		Если Параметр9 <> NULL Тогда
			ПараметрыСтрокой= "Параметр9"+Разделитель+ПараметрыСтрокой;
			Разделитель= ", ";
			ДобавитьПустойПараметр= Истина;
			ИндексПоследнегоПараметра= 9;
		Иначе
			Если ДобавитьПустойПараметр Тогда
				ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
				Разделитель= ",";
			Иначе
				Разделитель= "";
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр8 <> NULL Тогда
			ПараметрыСтрокой= "Параметр8"+Разделитель+ПараметрыСтрокой;
			Разделитель= ", ";
			ДобавитьПустойПараметр= Истина;
		Иначе
			Если ДобавитьПустойПараметр Тогда
				ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
				Разделитель= ",";
			Иначе
				Разделитель= "";
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр7 <> NULL Тогда
			ПараметрыСтрокой= "Параметр7"+Разделитель+ПараметрыСтрокой;
			Разделитель= ", ";
			ДобавитьПустойПараметр= Истина;
		Иначе
			Если ДобавитьПустойПараметр Тогда
				ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
				Разделитель= ",";
			Иначе
				Разделитель= "";
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр6 <> NULL Тогда
			ПараметрыСтрокой= "Параметр6"+Разделитель+ПараметрыСтрокой;
			Разделитель= ", ";
			ДобавитьПустойПараметр= Истина;
		Иначе
			Если ДобавитьПустойПараметр Тогда
				ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
				Разделитель= ",";
			Иначе
				Разделитель= "";
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр5 <> NULL Тогда
			ПараметрыСтрокой= "Параметр5"+Разделитель+ПараметрыСтрокой;
			Разделитель= ", ";
			ДобавитьПустойПараметр= Истина;
		Иначе
			Если ДобавитьПустойПараметр Тогда
				ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
				Разделитель= ",";
			Иначе
				Разделитель= "";
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр4 <> NULL Тогда
			ПараметрыСтрокой= "Параметр4"+Разделитель+ПараметрыСтрокой;
			Разделитель= ", ";
			ДобавитьПустойПараметр= Истина;
		Иначе
			Если ДобавитьПустойПараметр Тогда
				ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
				Разделитель= ",";
			Иначе
				Разделитель= "";
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр3 <> NULL Тогда
			ПараметрыСтрокой= "Параметр3"+Разделитель+ПараметрыСтрокой;
			Разделитель= ", ";
			ДобавитьПустойПараметр= Истина;
		Иначе
			Если ДобавитьПустойПараметр Тогда
				ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
				Разделитель= ",";
			Иначе
				Разделитель= "";
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр2 <> NULL Тогда
			ПараметрыСтрокой= "Параметр2"+Разделитель+ПараметрыСтрокой;
			Разделитель= ", ";
			ДобавитьПустойПараметр= Истина;
		Иначе
			Если ДобавитьПустойПараметр Тогда
				ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
				Разделитель= ",";
			Иначе
				Разделитель= "";
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр1 <> NULL Тогда
			ПараметрыСтрокой= "Параметр1"+Разделитель+ПараметрыСтрокой;
			Разделитель= ", ";
			ДобавитьПустойПараметр= Истина;
		Иначе
			Если ДобавитьПустойПараметр Тогда
				ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
				Разделитель= ",";
			Иначе
				Разделитель= "";
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр0 <> NULL Тогда
			ПараметрыСтрокой= "Параметр0"+Разделитель+ПараметрыСтрокой;
		ИначеЕсли ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
		КонецЕсли;
		
		//МассивПараметровВГраница= МассивПараметров.ВГраница();
		//Разделитель= "";
		//Для ИндексПараметра= 0 ПО МассивПараметровВГраница Цикл
		//	
		//	Если МассивПараметров[ИндексПараметра] = NULL Тогда
		//		ПараметрыСтрокой= ПараметрыСтрокой + Разделитель;
		//	Иначе
		//		ПараметрыСтрокой= ПараметрыСтрокой + Разделитель + "Параметр"+ИндексПараметра
		//	КонецЕсли;
		//	
		//	Разделитель= ", ";
		//	
		//КонецЦикла;
		
		Возврат ПараметрыСтрокой;
		
	КонецФункции

	Функция МассивПараметров(Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
							 Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
		
		МассивПараметров= Новый Массив(10);
		МассивПараметров[0]= Параметр0; МассивПараметров[1]= Параметр1; МассивПараметров[2]= Параметр2; МассивПараметров[3]= Параметр3; МассивПараметров[4]= Параметр4;
		МассивПараметров[5]= Параметр5; МассивПараметров[6]= Параметр6; МассивПараметров[7]= Параметр7; МассивПараметров[8]= Параметр8; МассивПараметров[9]= Параметр9;
		
		ОбратныйИндекс= 9;
		Пока ОбратныйИндекс > -1 Цикл
			Если МассивПараметров[ОбратныйИндекс] = NULL Тогда
				МассивПараметров.Удалить(ОбратныйИндекс);
			Иначе
				Прервать;
			КонецЕсли;
			ОбратныйИндекс= ОбратныйИндекс-1;
		КонецЦикла;
		
		Возврат МассивПараметров;
		
	КонецФункции

	
	Процедура ЗаполнитьМанифест(Модуль, ИмяМодуля) Экспорт
		
		Модуль.Манифест= ШаблонМанифеста(ИмяМодуля);
		Модуль.Манифест.Функции=   Модуль.ФункцииМодуля();
		Модуль.Манифест.Процедуры= Модуль.ПроцедурыМодуля();
		
	КонецПроцедуры

	Функция ДобавитьФункциюВМанифест(СтруктураМетодов, ИмяМетода, ПараметрыСтрокой= "", ВариантКэширования= "НеИспользовать", Переопределение= Ложь) Экспорт
		
		СтруктураМетодов.Вставить(ИмяМетода, Новый Структура("ИмяМетода, ПараметрыСтрокой, ВариантКэширования, Переопределение", ИмяМетода, ПараметрыСтрокой, ВариантКэширования, Переопределение));
		
	КонецФункции

	Функция ДобавитьПроцедуруВМанифест(СтруктураМетодов, ИмяМетода, ПараметрыСтрокой= "", Переопределение= Ложь) Экспорт
		
		СтруктураМетодов.Вставить(ИмяМетода, Новый Структура("ИмяМетода, ПараметрыСтрокой, Переопределение", ИмяМетода, ПараметрыСтрокой, Переопределение));
		
	КонецФункции


	Функция ИнициализироватьПодключаемыйМодуль() Экспорт
		
		Результат= Новый Структура("Отказ, ОписаниеОшибки, Подробности, ПодключаемыйМодульПутьКФормам", Ложь, "", "", "");
		
		Если КэшМодулей <> Неопределено Тогда
			КэшМодулей.Очистить();
		КонецЕсли;
		
		ИмяМодуля= ПараметрыКлиентСервер.ИмяОбработки+"Переопределяемый";
		
		ПовторноеИспользованиеСброситьЗначение(,"МанифестМодуляПовтИсп", ИмяМодуля);
		
		УдалитьПодключенныеОбработки();
		
		НеСуществующиеОбработки().Очистить();
		СохранитьКоллекцию_НеСуществующиеОбработки();
		
		РезультатИнициализации= ИнициализироватьОбработкуПодключаемогоМодуля(ИмяМодуля);
		
		Если РезультатИнициализации = Истина Тогда
			ИнициализироватьОбработкиСерверныхМодулейПодключаемогоМодуля(ИмяМодуля, Результат);
		Иначе
			Результат.Отказ= 		  Истина;
			Результат.ОписаниеОшибки= "Не удалось инициализировать подключаемый модуль!";
			Результат.Подробности= 	  РезультатИнициализации;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	Функция ИнициализироватьОбработкуПодключаемогоМодуля(ИмяМодуля)
		
		Результат= Истина;
		
		Если НЕ ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		Если ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "НаДиске" Тогда
			
			Если ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
				
				НайденныеФайлы= НайтиФайлы(ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю,,Ложь);
				
				Если НайденныеФайлы.Количество() > 0 Тогда
					
					Попытка
						ВнешниеОбработки.Создать(НайденныеФайлы[0].ПолноеИмя, Ложь);
					Исключение
						Результат= ОписаниеОшибки();
					КонецПопытки;
					
				Иначе
					Результат= "Не найден файл подключаемого модуля! " + ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
				КонецЕсли;
				
			Иначе
				Результат= ПодключитьОбработку(ИмяМодуля, ПараметрыКлиентСервер.ВременноеХранилище.АдресПодключаемыйМодуль);
			КонецЕсли;
			
		ИначеЕсли ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "ВБазеДанных" Тогда
			
			Если ЗначениеЗаполнено(ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю) Тогда
				
				МетаданныеРеквизиты= ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю.Метаданные().Реквизиты;
				
				Для Каждого МетаданныеРеквизит ИЗ МетаданныеРеквизиты Цикл
					
					Если МетаданныеРеквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
						
						Результат= ПодключитьОбработку(ИмяМодуля, ПолучитьНавигационнуюСсылку(ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю, МетаданныеРеквизит.Имя));
						
						Если Результат = Истина Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "ВСоставеКонфигурации" Тогда
			
			Попытка
				Обработки[ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю].Создать();
			Исключение
				Результат= ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	Процедура ИнициализироватьОбработкиСерверныхМодулейПодключаемогоМодуля(ИмяМодуля, Результат)
		
		ПодключаемыйМодуль= ПолучитьМодуль(ИмяМодуля);
		
		Если ПодключаемыйМодуль= Неопределено Тогда
			Результат.Отказ= 		  Истина;
			Результат.ОписаниеОшибки= "Не удалось инициализировать подключаемый модуль!";
			Результат.Подробности= 	  "";
			Возврат;
		КонецЕсли;
		
		ПодключаемыйМодульМетаданные= ПодключаемыйМодуль.Метаданные();
		МетаданныеМакеты= 			  ПодключаемыйМодульМетаданные.Макеты;
		
		Для Каждого МетаданныеМакет Из МетаданныеМакеты Цикл
			
			ИмяМакета= МетаданныеМакет.Имя;
			
			Если НРег(Лев(ИмяМакета, 7)) = НРег("Модуль_") И НРег(Прав(ИмяМакета, 16)) = "переопределяемый" Тогда
				РезультатПодключения= ПодключитьОбработку(ИмяМакета, ПодключаемыйМодуль.ПолучитьМакет(ИмяМакета));
			КонецЕсли;
			
			Если РезультатПодключения <> Истина Тогда
				
				Результат.Отказ= 		  Истина;
				Результат.ОписаниеОшибки= "Не удалось инициализировать подключаемый модуль!";
				Результат.Подробности= 	  РезультатПодключения;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.ПодключаемыйМодульПутьКФормам= ПодключаемыйМодульМетаданные.ПолноеИмя()+".Форма.";
		
		ПодключаемыйМодуль.ОчиститьПеременные();
		
	КонецПроцедуры

	Функция ПодключитьОбработку(ИмяМодуля, ДвоичныеДанныеСтрока)
		
		Перем Модуль;
		
		ОбработкаТипЗнч= ТипЗнч(ДвоичныеДанныеСтрока);
		
		Если ОбработкаТипЗнч = Тип("ДвоичныеДанные") Тогда
			
			Если НЕ МетодСервера(,"ДопустимыйРежимРаботы") Тогда
				Возврат Модуль;
			КонецЕсли;
			
			АдресОбработки= ПоместитьВоВременноеХранилище(ДвоичныеДанныеСтрока);
			
			Попытка
				ВнешниеОбработки.Подключить(АдресОбработки, "Диадок" + ИмяМодуля, Ложь);
			Исключение
				УдалитьИзВременногоХранилища(АдресОбработки);
				Возврат ОписаниеОшибки();
			КонецПопытки;
			
			УдалитьИзВременногоХранилища(АдресОбработки);
			
		ИначеЕсли ОбработкаТипЗнч = Тип("Строка") Тогда
			
			Если НЕ МетодСервера(,"ДопустимыйРежимРаботы") Тогда
				Возврат Модуль;
			КонецЕсли;
			
			Попытка
				ВнешниеОбработки.Подключить(ДвоичныеДанныеСтрока, "Диадок" + ИмяМодуля, Ложь);
			Исключение
				Возврат ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Попытка
			Модуль= ВнешниеОбработки.Создать("Диадок" + ИмяМодуля, Ложь);
		Исключение
			
			Если НЕ МетодСервера(,"ДопустимыйРежимРаботы") Тогда
				Возврат Модуль;
			КонецЕсли;
			
			АдресМодульЗаглушка= ПоместитьВоВременноеХранилище(ПолучитьМакет("Модуль_Заглушка"));
			ВнешниеОбработки.Подключить(АдресМодульЗаглушка, "Диадок" + ИмяМодуля, Ложь);
			УдалитьИзВременногоХранилища(АдресМодульЗаглушка);
			
			Возврат ОписаниеОшибки();
			
		КонецПопытки;
		
		Если Модуль <> Неопределено И ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
			Модуль.ПриглашениеОтладки()
		КонецЕсли;
		
		ПодключенныеОбработки().Добавить(ИмяМодуля);
		ПоместитьВоВременноеХранилище(ПодключенныеОбработки(), ПараметрыКлиентСервер.ВременноеХранилище.АдресПодключенныеОбработки);
		
		Возврат Истина;
		
	КонецФункции


	Функция ПодключенныеОбработки()
		
		Если ПодключенныеОбработки = Неопределено Тогда
			
			ПодключенныеОбработки= ПолучитьИзВременногоХранилища(ПараметрыКлиентСервер.ВременноеХранилище.АдресПодключенныеОбработки);
			
			Если ПодключенныеОбработки = Неопределено Тогда
				ПодключенныеОбработки= Новый Массив;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ПодключенныеОбработки;
		
	КонецФункции

	Процедура УдалитьПодключенныеОбработки() Экспорт
		
		Если НЕ ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		Если ПодключенныеОбработки().Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		АдресМодульЗаглушка= ПоместитьВоВременноеХранилище(ПолучитьМакет("Модуль_Заглушка"));
		
		Для Каждого ИмяМодуля ИЗ ПодключенныеОбработки Цикл
			
			Попытка
				ВнешниеОбработки.Подключить(АдресМодульЗаглушка, "Диадок" + ИмяМодуля, Ложь);
			Исключение
			КонецПопытки;
			
			ПовторноеИспользованиеСброситьЗначение(,"МанифестМодуляПовтИсп", ИмяМодуля);
			
		КонецЦикла;
		
		УдалитьИзВременногоХранилища(АдресМодульЗаглушка);
		
		ПодключенныеОбработки().Очистить();
		УдалитьИзВременногоХранилища(ПараметрыКлиентСервер.ВременноеХранилище.АдресПодключенныеОбработки);
		
	КонецПроцедуры


	Функция НеСуществующиеОбработки()
		
		Если НеСуществующиеОбработки = Неопределено Тогда
			
			НеСуществующиеОбработки= ПолучитьИзВременногоХранилища(ПараметрыКлиентСервер.ВременноеХранилище.АдресНеСуществующиеОбработки);
			
			Если НеСуществующиеОбработки = Неопределено Тогда
				НеСуществующиеОбработки= Новый Соответствие;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат НеСуществующиеОбработки;
		
	КонецФункции

	Функция СохранитьКоллекцию_НеСуществующиеОбработки()
		
		ПоместитьВоВременноеХранилище(НеСуществующиеОбработки(), ПараметрыКлиентСервер.ВременноеХранилище.АдресНеСуществующиеОбработки);
		
	КонецФункции

	Функция ДопустимыйРежимРаботы() Экспорт
		
		ДопустимыйРежимРаботы= БезопасныйРежим() = Ложь;
		
		Если НЕ ДопустимыйРежимРаботы Тогда
			ВызватьИсключение
			"						Недопустимый режим работы модуля Диадок!
			|
			|Для работы модуля Диадок необходимо:
			|
			|Вариант №1: Поместить модуль в справочник ""Дополнительные отчеты и обработки"".
			|
			|Вариант №2: Поместить модуль в состав конфигурации программы.
			|
			|Вариант №3: Запускать модуль под пользователем с правами ""Администратор системы"" или ""Полные права""";
		КонецЕсли;
		
		Возврат ДопустимыйРежимРаботы;
		
	КонецФункции

#КонецОбласти

#Область МАНИФЕСТ

// Все функции и процедуры тела модуля должны быть добавлены в соответствующую структуру!

	Функция ФункцииМодуля() Экспорт
		
		СтруктураМетодов= Новый Структура;
		
		// Шаблон: ДобавитьФункциюВМанифест(СтруктураМетодов, <Имя функции>, <Параметры строкой>, <Вариант кэширования>, <Переопределение>);
		//ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НеИспользовать", Истина);
		//ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяВызова", Истина);
		//ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяСеанса", Истина);
		//...
		
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМодуль", "ИмяМодуля");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "МанифестМодуля", "ИмяМодуля");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "МанифестМодуляПовтИсп", "ИмяМодуля", "НаВремяСеанса");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ШаблонМанифеста", "ИмяМодуля");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ДопустимыйРежимРаботы",,"НаВремяСеанса");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЗначениеКонстанты", "НаименованиеКонстанты", "НаВремяВызова");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбъектКонстант",,"НаВремяСеанса");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЗначениеСвойства", "Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой = """"");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиСвойство", "Наименование", "НеИспользовать");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиСвойствоПовтИсп", "Наименование", "НаВремяСеанса");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиСвойстваПоСтруктуре", "СтруктураСвойствОбъектов");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиПодобныеСвойстваПоСтруктуре", "СтруктураСвойствОбъектов");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьПодключаемыйМодуль");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьОбработкуПодключаемогоМодуля", "ИмяМодуля");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПодключитьОбработку", "ИмяМодуля, ДвоичныеДанныеСтрока");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПодключенныеОбработки");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НеСуществующиеОбработки");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СохранитьКоллекцию_НеСуществующиеОбработки");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВерсияОбработкиДиадокСервер");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ТребуемаяВерсияРасширенияДиадок");
		
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСписокСтатусовВзаимоотношений",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "РасшифровкаТекущегоСостоянияВзаимоотношений", "CurrentStatus",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "КлассификаторВалютПолучитьНаименованиеПоКоду", "Код",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВыделитьСлово", "ИсходнаяСтрока",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПутьКWEBСерверу",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПреобразоватьМассивСтруктурВТаблицуЗначений", "МассивСтруктур",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПреобразоватьТаблицуЗначенийВМассивСтруктур", "ТаблЗнач",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПреобразоватьСтруктуруВТаблицу", "Структура");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ЕстьПериферийныеБазы", "НаименованиеПланаОбмена");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтрокуПоМассиву", "Массив");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМаркерКонфигурации", "ПринудительныйВыбор = Ложь, ОбработчикВыбора = Неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьХарактеристикуКонфигурации",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПрофильКонфигурации",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьДоступКОбъектам");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьПраваНаПВХ");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьВозможностьИнициализацииВУзле", "ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьНеобходимыеСвойстваПВХ", "ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьИнициализациюСвойствПВХ");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПодготовкаКонфигурацииКРаботе",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ЭтоПериферийнаяБД");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьТекущегоПользователя",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНеобходимыеДляРаботыОбъекты");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНеобходимыеДляРаботыПВХ",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНеобходимыеДляРаботыРегистры",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ЕстьРеквизитПрикладногоОбъекта", "ТипОбъекта, ИмяРеквизита", "НаВремяСеанса");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ЕстьРеквизитИлиСвойствоОбъекта", "Объект, ИмяРеквизита");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ЕстьРеквизитыИлиСвойстваОбъекта", "Объект, КоллекцияИменРеквизитов");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ЕстьРеквизитТипаОбъекта", "ТипОбъекта, ИмяРеквизита","НаВремяСеанса");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ТаблицаЗначений_2_МассивСтруктур", "ТаблицаЗначений");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиСтрокуВМассивеСтруктур", "МассивСтруктур, ПараметрыОтбора");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПоместитьИнтеграционныйМодульВДополнительныеОбработки");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаполнитьДанныеОПомещаемомМодуле");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИмяФормыИнтеграции",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеВизирующегоСтруктурой", "ПараметрыПодписания, ИНН = Неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеВизирующегоУПД_Структурой", "ПараметрыПодписания",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НоменклатураЯвляетсяУслугой", "Номенклатура",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВыбратьОсновноеСоглашениеКонтрагента", "Контрагент, Организация",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВыбратьОсновнойДоговорКонтрагента", "Контрагент, Организация, СписокВидовДоговоров",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбновитьДанныеДокумента", "ДокументСсылка, DocumentDate, DocumentNumber",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбновитьМеткиДокумента", "ДокументСсылка, РеквизитДата, РеквизитНомер, DocumentDate, DocumentNumber",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбновитьМеткуПолученияВЭлектронномВиде", "СчетФактура",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтавкуНДСДиадок", "TaxRate", "НаВремяСеанса", Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЕдиницуИзмерения", "КодЕИ, НаименованиеЕИ, Номенклатура",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСписокВидовДоговоров", "ДоговораПродажи = ложь",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСписокАссоциированныхКонтрагентовДиадок",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВозможныеПланыОбменаДляПередачиНастроекПользователяИСвойствОбъектов");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНастройкиПользователя", "МассивНаименованийНастроек",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНастройкуПользователя", "Наименование",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "УстановитьНастройкиПользователей", "СтруктураНастроек",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьНаличиеНастроекПользователя", "ВозможныеНастройкиПользователя",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМЗНастройкиПОльзователя", "Пользователь, НастройкаСсылка");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьИЛИСоздатьГруппуНастроекПользователя_Диадок",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНастройкиПрокси",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНазначениеСвойстваСтрокой", "СвойствоСтрокой");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СвойстваОбъектов_НайтиОбъектыПоТЗ", "ТаблицаПараметров",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СвойстваОбъектов_НайтиОбъект", "НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2=неопределено, ЗначениеСвойства2=неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СвойстваОбъектов_НайтиМассивОбъектов", "НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2 = неопределено, ЗначениеСвойства2 = неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиОбъект", "НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2 = Неопределено, НазначениеСвойстваСтрокой2 = неопределено ,ЗначениеСвойства2 = Неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиМассивОбъектов", "НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2 = Неопределено, НазначениеСвойстваСтрокой2 = неопределено ,ЗначениеСвойства2 = Неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМЗСвойстваОбъектов", "Объект, СвойствоСсылка",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиПодобныеСвойства", "Наименование",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиНастройкиПользователейИзБП20", "Наименование",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СоздатьНеобходимыеСвойстваВПВХ", "ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, ЗафиксированаРеструктуризация");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СоздатьСвойство", "ОписаниеСвойства");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СоздатьСвойстваОбъектов", "СтруктураСвойствОбъектов",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НеобходимоИнициализироватьВозможныеНастройки", "ВозможныеНастройки");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НеобходимоИнициализироватьВозможныеСвойства", "ВозможныеСвойстваОбъектов");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НеобходимоИнициализироватьСтарыеСвойстваИз20", "СтарыеСвойстваОбъектовИз20");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьНеобходимостьИнициализацииСвойств", "ВозможныеНастройки, ВозможныеСвойстваОбъектов, СтарыеСвойстваОбъектовИз20");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВозможныеНастройкиПользователя");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВозможныеСвойстваОбъектов",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтарыеСвойстваОбъектовИз20",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьНаличиеСвойствОбъектов", "ВозможныеСвойстваОбъектов",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПереместитьЗначенияСтарыхСвойств", "ОсновноеСвойство, СтароеСвойство, ЗафиксированаРеструктуризация");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПереместитьНастройкиПользователей", "ВозможныеНастройкиПользователя, МассивПеремещенныхНастроек");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПереписатьНовыеЗначенияНеправильныхСвойств", "МассивПереписанныхСвойств");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбработатьНеправильныеСвойства", "ВозможныеНастройкиПользователя, ВозможныеСвойстваОбъектов, ЗафиксированаРеструктуризация");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПереименоватьСтарыеНастройкиИз20", "СтарыеСвойстваОбъектовИз20, МассивПереименованныхНастроек");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбработатьСвойстваОбъектовИз20", "ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20, ЗафиксированаРеструктуризация");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СведенияОВнешнейОбработке",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьТаблицуКоманд");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваЯщикОрганизации",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПодразделениеОрганизации",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваЯщикОрганизацииПредставление",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваЯщикКонтрагентаПрефикс",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваНаименованиеПодразделенияКонтрагента", "BoxId",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИДПодразделенияКонтрагента", "BoxId",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИдентификаторДокументаВДиадок",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваДопДокументаИдентификаторДокументаВДиадок",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваДиадокCustomDocumentId",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваДиадокCustomDocumentIdСчет",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИдентификаторЯщикДопДокументаВДиадок",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваСертификатПользователя",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПредставлениеСертификатаПользователя",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваАдреспроксиСервера",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПользовательПроксиСервера",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПарольПроксиСервера",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваСпособПодписанияТ12",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваОбластьПолномочийПодписанияУПД",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваДолжностьПодписанта",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПечатнаяФормаДляТоваров",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПечатнаяФормаДляУслуг",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваОтправлятьНеПроведенные",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваФормироватьУПД",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваФормироватьУПДКонтрагент",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваВнешняяПечатнаяФормаСчета",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваФормироватьСчетНаОсновании",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваВнешняяПечатнаяФормаАкта",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваСпособФормированияАкта",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваСпособФормированияАктаСверки",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПодставлятьКППГрузоотправителя",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификатрСвойстваТекстКомментарияДиадок",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваЕдиницаИзмеренияНоменклатуры",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваIdПодписантаСогласование",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваДолжностьПодписантаСогласование",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваСтатусОтправляемыхВПФ",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваНомерВПФ",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваСписокДопВПФ",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "DocumentID_2_ДокументМассовое", "ТЗИд",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "DocumentID_2_Документ", "DocumentID, BoxID, ЭтоУПД_ТипаСЧФДОП = Ложь, DocumentDirection = """"",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "DocumentID_2_МассивДокументов", "DocumentID, BoxID");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "Документ_2_DocumentID", "СсылкаНаОбъект, ИспользоватьИдентификаторСчета=ложь",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "Организация_2_BoxID", "Организация",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "Установить_BoxID_для_Организация", "Организация, BoxID, НаименованиеЯщика, DepartmentKpp = Неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "BoxID_2_Организация", "BoxID, DepartmentKpp = """"",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "CounteragentBoxID_2_МассивКонтрагентов", "CounteragentID, BoxID = Неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "CounteragentBoxID_2_Контрагент", "CounteragentID, BoxID = Неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "Контрагент_2_CounteragentBoxID", "Контрагент, BoxID = Неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "УстановитьПараметрыМаршрутизацииДляКонтрагента", "Контрагент, BoxID = Неопределено, НаименованиеПодразделения, ИДПодразделения",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "УстановитьПараметрыМаршрутизацииДляДоговора", "Договор, НаименованиеПодразделения, ИДПодразделения",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ДобавитьНулиВПредставлениеЧисла", "чс, длина");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ТаблицаПерекодировки",, "НаВремяСеанса", Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЧисло64ИзЧисла16", "число");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЧисло16ИзГуида", "Гуид");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьГуидИзЧисла16", "Число16");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЧисло2изЧисла64", "Число64");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЧисло16изЧисла2", "Число");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "КонвертироватьГуидВЧисло64", "гуид",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "КонвертироватьЧисло64вГуид", "число64",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "РазобратьДопПоле_СтарыйФормат", "AdditionalInfo");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "РазобратьДопПоле", "StructedAdditionalInfos");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ДобавитьРазделитель", "Стр, Префикс = """"");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НаименованияРегионовРоссии",,"НаВремяСеанса");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НаименованиеРегиона", "КодРегиона");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "КодРегиона", "НаименованиеРегиона");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ТолькоЦифры", "строкаПроверки");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ОтрезатьПравуюЗапятую", "стр");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьОКЕИ",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьОКСМ",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьОКВ",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "КлассификаторыДляДиадок",, "НаВремяСеанса", Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СтруктураКонтентаЗаполнена", "СтруктураКонтента");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "Эквивалентны", "стр1, стр2");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СтрокаЧтоМенять", "ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ЧисловойКодЕИ", "Знач КодЕИ");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьЕИ", "ЕИ, КодЕИ, СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод, ЭтоАкт = Ложь");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьСтрану", "СтранаПроисхождения, КодПроисх, СписокПроверенныхСтран, ОшибкаСтраныНенайдена, ОшибкаСтраныНеТотКод");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьВалюту", "валюта, ВалютаКод, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНаименованиеЕИПоКоду", "КодЕИ");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВнешнююПечатнуюФормуСчета", "ДокументСсылка",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВнешнююПечатнуюФормуАкта", "ДокументСсылка",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВнешнююПечатнуюФормуАктаСверки", "ДокументСсылка",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПечатныхФормСчета", "ДокументСсылка",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПечатныхФормАкта", "ДокументСсылка",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПечатныхФормАктаСверки", "ДокументСсылка",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьНеСтандартнуюПечатнуюФорму", "ИдПечатнойФормы, ДокументСсылка");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьТитулПолучателя", "СтруктураПодписи, Type, DocumentDate",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеСтавкиНДС", "TaxRate");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПредставлениеАдресаПоContent", "AddressContent");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПредставлениеИННКПП", "Inn, Kpp");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПредставлениеКонтрагентаПоContent", "CounteragentContent");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьФИОПоКонтенту", "official");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеДоверенностьВыдана", "attorney");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеДоверенностьПолучена", "attorney");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПечатнуюФормуПоXmlTorg12Content", "Знач Content, Знач ВизуализироватьДопПоля",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПечатнуюФормуУПДПоUTDSellerContent", "Знач Content, Знач ВизуализироватьДопПоля",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПечатнуюФормуУПДСЧФПоUTDSellerContent", "Знач Content, Знач ВизуализироватьДопПоля",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьФИОСИнициалами", "ФИО",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВизуализироватьПолеСВладельцем", "SignatureStructure, ЭтоСФ = Ложь");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбластьПодписи", "SignatureStructure, ЭтоСФ= Ложь");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьМаксимальнуюДлинуПрото", "ЗначениеПоля, ПредставлениеПоля, МаксимальнаяДлина, род=""м"", ОбязательноеЗаполнение = ложь");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьФорматДатыПрото", "ЗначениеПоля, ПредставлениеПоля, ОбязательноеЗаполнение = ложь");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "УмножитьВектора", "ИНН, Множители");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "КонтрольнаяСуммаИННЮЛСовпадает", "ИНН");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "КонтрольнаяСуммаИННФЛСовпадает", "ИНН");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьСтруктуруКонтрагентаДляТОРГ12", "OrganizationInfo, ТипСтруктуры, ПроверкаДляСФ=ложь");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВалидацияXmlTorg12Content", "Знач XmlTorg12Content",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеИННКПП", "CounteragentContent");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеГОП", "Counteragent");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНаименованиеСтраныПоКоду", "КодОКСМ");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПечатнуюФормуПоInvoiceContent", "Знач Content, Знач ВизуализироватьДопПоля",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьОшибкиВСтрокеСФ", "item");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьСсылкуНаДокумент", "ИдЯщика, ИдДокумента, ТекстСсылки");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьСвязиИСФ", "InvoiceContent, ДокументСсылка");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьКлассификаторыСФ", "InvoiceContent");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВалидацияInvoiceContent", "InvoiceContent, ДокументСсылка",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "Заполнитьпустое", "зн");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПечатнуюФормуПоInvoiceCorrectionContent", "Content, ВизуализироватьДопПоля",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьОшибкиВСтрокеКСФ", "Item");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьСвязиКСФ", "InvoiceContent, ДокументСсылка");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьКлассификаторыКСФ", "InvoiceCorrectionContent");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВалидацияInvoiceCorrectionContent", "InvoiceCorrectionContent, ДокументССылка",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьРеквизитыКонтрагентаДляАкта", "OrgInfo");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent", "Content, ВизуализироватьДопПоля",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВалидацияXmlAcceptanceCertificateContent", "xmlAcceptanceCertificateContent",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьКоличествоДнейОтсрочки", "Организация",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьТаблицуДокументовПоИдДиадока", "ТаблицаИД",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПараметрыПодписанияТ12вДиадок", "Организация",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПараметрыПодписанта", "Наименование",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСписокРазличающихсяРеквизитов", "ДокументСсылка, DocumentNumber, DocumentDate",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНастройкиПодписантаСогласование",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруОшибкиВнешнейКомпоненты", "Подробности",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВСтрокеНРегЕстьСлова", "стрПар, слово1, слово2 = """", слово3 = """", слово4 = """"");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСправа", "стр, маркер");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "КраткоеСообщениеОбОшибке", "текстОшибки");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьТаблицуОрганизацийКоторыеНеПодключеныКДиадоку",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СклеитьПредставлениеОрганизацииДиадок", "Строка");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьОтпечатокСертификатаДляДиадок", "Организация",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьТаблицуЯщиковДиадокОрганизации", "Организация = неопределено, КонтекстОрганизации_ОрганизацииФилиалыСопоставленныеСДиадоком = Неопределено,КонтекстРаботаССерверомДиадок_ПредставлениеПользователя= неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВернутьТаблицуМаршрутизацииПоТаблицеКонтрагентов", "ТаблицаКонтрагентов",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВернутьТаблицуМаршрутизацииПоДоговорам", "Организация, Контрагент",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМаршрутизациюПоДоговору", "ДоговорКонтрагента",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМаршрутизациюПоКонтрагенту", "Контрагент",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ТочностьЦеныСФ",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьОрганизацииФилиалыСопоставленныеСДиадоком", "ДанныеOrganizationDepartment",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСловарь",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСловарьЛайф");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСловарьСеоДок");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСловарьНФК");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИспользоватьКастомныеДопПоля",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИспользоватьКастомныйАдресГрузополучателя",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаполнитьКастомныеДопПоля",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьШаблонКлючейДопСведений", "ИдКонтрагента, DocumentType",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСловарьШаблоновКлючейДопСведений");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "НужноФормироватьДопИнфоПоШаблону", "ИдКонтрагента",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьСтрокуДопИнфоПоШаблону", "ДопСведения",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьКастомныйАдресГрузополучателя",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПреобразоватьСтрокуВМассивПодстрок", "Знач Строка, Знач Разделитель = "","", Знач ПропускатьПустыеСтроки = Неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ДопустимыеМаркерыКонфигураций",,,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СтранаЧленТС", "КодСтраны",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ИмяТипаОбъекта", "ОбъектСсылка");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СуществуетОбъектМетаданных", "ПолноеИмяОбъекта", "НаВремяСеанса");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СсылкаСуществует", "Ссылка");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "СравнитьВерсии", "Знач ПерваяВерсия, Знач ВтораяВерсия");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "РазделительПакетаЗапросов");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "РазделительОбъединенияЗапросов");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбработкаСобытияПодключаемогоМодуля", "ИмяСобытия, ПараметрыСобытия = Неопределено",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьДанныеПодписиСогласующим", "Организация");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "МассивВПФИзСоответствиеВПФСсылке", "ЭлементСоответствия");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПустуюТЗдляГТД");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ВалидацияUTD", "UTDContent");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ТипДокументаУПД", "ФункцияУПД",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ФункцияУПД", "ТипДокументаУПД",,Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "Item_UnitCode", "ЕдиницаИзмерения, КодЕдиницыИзмерения", , Истина);
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ОформитьОшибкиВHTML", "ОшибкиСтруктуры, Заголовок");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьФункциональнуюОпциюНаСервере", "Имя");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ЭДО_БиблиотекаКартинок");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "УстановитьРасширениеКонфигурации");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "УдалитьРасширениеКонфигурации");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьНеобходимостьУстановкиРасширения");
		ДобавитьФункциюВМанифест(СтруктураМетодов, "Значение1C_В_СтрокаCOM", "Значение1С, ФорматнаяСтрока= """"",,Истина);
		
		Возврат СтруктураМетодов;
		
	КонецФункции

	Функция ПроцедурыМодуля() Экспорт
		
		СтруктураМетодов= Новый Структура;
		
		// Шаблон: ДобавитьПроцедуруВМанифест(СтруктураМетодов, <Имя процедуры>, <Параметры строкой>, <Переопределение>);
		//ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПримерПроцедуры", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", Истина);
		//...
		
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьМанифест", "Модуль, ИмяМодуля");
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УдалитьПодключенныеОбработки");
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПовторноеИспользованиеСброситьЗначение", "ИмяМодуля= """", ИмяМетода, Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL");
		
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "СоздатьНовыйЭлементДополнительныеОбработки", "ДанныеДляЗаполнения, Результат", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьНастройкуПользователя", "Наименование, Значение", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьНастройкиПрокси", "СтруктураНастроек", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьЗначениеСвойства", "Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой = """", ЗначениеСвойства", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "Установить_DocumentID_Для_Документ", "Документ, DocumentID, BoxID, ИспользоватьИдентификаторСчета = Ложь", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "Установить_CounteragentBoxID_для_Контрагент", "Контрагент, CounteragentID, BoxID = Неопределено", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьЗначениеКонстанты", "НаименованиеКонстанты, Знач ЗначениеКонстанты", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьПодписантаДляXmlTorg12", "Official,  Визирующий", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьФИОПодписанта", "official, фио", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьStructedAdditionalInfos", "StructedAdditionalInfos, ДопСведения", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьПараметрыПодписанияТ12вДиадок", "ПараметрыПодписания", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьНастройкиПодписантаСогласование", "ФИОПодписантаПолучателя, ДолжностьПодписанта", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьDocumentIDДляКоллекции", "Коллекция", Истина);
		ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОчиститьCustomDocumentId", "Документ, ИспользоватьИдентификаторСчета= Ложь", Истина);
		
		Возврат СтруктураМетодов;
		
	КонецФункции

#КонецОбласти

//{ ВЕРСИЯ
	
	Функция ВерсияОбработкиДиадокСервер() Экспорт
		
		Возврат  "UF_5_16_15";
		
	КонецФункции
	
	Функция ТребуемаяВерсияРасширенияДиадок() Экспорт
		
		Возврат "1.0.1.17";
		
	КонецФункции
	
//} ВЕРСИЯ

//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	Функция ПолучитьСписокСтатусовВзаимоотношений() Экспорт
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		СписокСтатусов=	Новый СписокЗначений;
		
		СписокСтатусов.Добавить("IsMyCounteragent", 		"Партнерские отношения");
		СписокСтатусов.Добавить("InvitesMe", 				"Получен запрос");
		СписокСтатусов.Добавить("IsInvitedByMe", 			"Ожидается ответ");
		СписокСтатусов.Добавить("RejectsMe", 				"Заблокировал меня");
		СписокСтатусов.Добавить("IsRejectedByMe", 			"Заблокирован мной");
		СписокСтатусов.Добавить("NotInCounteragentList", 	"Есть в " + СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж);
		СписокСтатусов.Добавить("IsOrganization", 			"Совпадает с организацией");
		СписокСтатусов.Добавить("Unknown", 					"Нет в " + СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж);
		СписокСтатусов.Добавить("InnNotValid", 				"ИНН неверный");
		
		Возврат СписокСтатусов;
		
	КонецФункции
	
	Функция РасшифровкаТекущегоСостоянияВзаимоотношений(CurrentStatus) Экспорт
		
		СписокСтатусов=	ПолучитьСписокСтатусовВзаимоотношений();
		
		НайденныйСтатус=	СписокСтатусов.НайтиПоЗначению(CurrentStatus);
		Если НЕ НайденныйСтатус = Неопределено Тогда
			Возврат НайденныйСтатус.Представление;
		Иначе
			Возврат "";
		КонецЕсли;
		
	КонецФункции
	
	Функция КлассификаторВалютПолучитьНаименованиеПоКоду(Код) Экспорт
		
		Если СокрЛП(Строка(Код)) = "643" Тогда
			Возврат "RUB";
		ИначеЕсли СокрЛП(Строка(Код)) = "978" Тогда
			Возврат "EUR";
		Иначе
			Возврат "";
		КонецЕсли;
		
	КонецФункции
	
	Функция ВыделитьСлово(ИсходнаяСтрока) Экспорт
		
		Буфер = СокрЛ(ИсходнаяСтрока);
		ПозицияПослПробела = Найти(Буфер, " ");
		
		Если ПозицияПослПробела = 0 Тогда
			ИсходнаяСтрока = "";
			Возврат Буфер;
		КонецЕсли;
		
		ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		
		Возврат ВыделенноеСлово;
		
	КонецФункции
	
	Функция ПолучитьПутьКWEBСерверу() Экспорт
		
		ТекстURL = "https://diadoc.kontur.ru/";
		Возврат ТекстURL;
		
	КонецФункции
	
	Функция ПреобразоватьМассивСтруктурВТаблицуЗначений(МассивСтруктур) Экспорт
		
		Результат=	Новый ТаблицаЗначений;
		
		Для Каждого ЯчейкаМассива Из МассивСтруктур Цикл
			НоваяСтрока=	Результат.Добавить();
			Для Каждого ЯчейкаСтруктуры Из ЯчейкаМассива Цикл
				Если Результат.Колонки.Найти(ЯчейкаСтруктуры.Ключ) = Неопределено Тогда
					КлючКолонки=	Результат.Колонки.Добавить(ЯчейкаСтруктуры.Ключ).Имя;
				Иначе
					КлючКолонки=	ЯчейкаСтруктуры.Ключ;
				КонецЕсли;
				НоваяСтрока[КлючКолонки]=	ЯчейкаСтруктуры.Значение;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТаблЗнач) Экспорт
		
		Результат = Новый Массив;
		
		СтрокаКлючей = "";
		
		Для Каждого Колонка из ТаблЗнач.Колонки Цикл
			СтрокаКлючей = СтрокаКлючей + ?(ПустаяСтрока(СтрокаКлючей),"",",") + Колонка.Имя;
		КонецЦикла;
		
		Если ТипЗнч(ТаблЗнач) = Тип("ТаблицаЗначений") Тогда
			Для Каждого Стр Из ТаблЗнач Цикл
				ЭлементСписка = Новый  Структура(СтрокаКлючей);
				ЗаполнитьЗначенияСвойств(ЭлементСписка,Стр);
				Результат.Добавить(ЭлементСписка);             
			КонецЦикла;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПреобразоватьСтруктуруВТаблицу(Структура)
		
		ОписаниеСтроки = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)); 
				
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Ключ", ОписаниеСтроки);
		Таблица.Колонки.Добавить("Значение", ОписаниеСтроки);
		
		Для каждого Стр Из Структура Цикл
			Строка = Таблица.Добавить();
			Строка.Ключ 	= Стр.Ключ;
			Строка.Значение = Стр.Значение;
		КонецЦикла;
		
		Возврат Таблица;
	
	КонецФункции 	
	
	Функция ЕстьПериферийныеБазы(НаименованиеПланаОбмена)
		
		Если Метаданные.ПланыОбмена.Найти(НаименованиеПланаОбмена) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПланОбмена.Ссылка
		|ИЗ
		|	ПланОбмена."+НаименованиеПланаОбмена+" КАК ПланОбмена
		|ГДЕ
		|	ПланОбмена.ПометкаУдаления = ЛОЖЬ";
		Возврат (запрос.Выполнить().Выгрузить().Количество()>1)			   
		
	КонецФункции
	
	Процедура ПрисоединитьМассив(МассивПриемник, МассивИсточник)
		
		Для Каждого ЭлементМассива Из МассивИсточник Цикл
			МассивПриемник.Добавить(ЭлементМассива);
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ПолучитьСтрокуПоМассиву(Массив)
		
		Результат=	"";
		Для Каждого СтрокаДляВключения Из Массив Цикл
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + ", ";
			КонецЕсли;
			Результат = Результат + СтрокаДляВключения.Ключ;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПолучитьМаркерКонфигурации(ПринудительныйВыбор= Ложь, ОбработчикВыбора= Неопределено) Экспорт
		
		Если (Метаданные.Имя = "УправлениеТорговлей" И (ЛЕВ(Метаданные.Версия, 4) = "11.1" ИЛИ ЛЕВ(Метаданные.Версия, 4) = "11.2" ИЛИ ЛЕВ(Метаданные.Версия, 4) = "11.3"))
			ИЛИ Найти(Метаданные.Синоним, "Управление торговлей и взаимоотношениями с клиентами (CRM), редакция 2.") <> 0 Тогда
			Возврат "УТ11";
		ИначеЕсли Найти(Метаданные.Синоним, "Бухгалтерия") <> 0 И Найти(Метаданные.Синоним, "предприятия") <> 0 И Найти(Метаданные.Синоним, "редакция 3.") <> 0 Тогда
			Возврат "БП30";
		ИначеЕсли Найти(Метаданные.Синоним, "Управление холдингом") <> 0 Тогда
			Возврат "БП30";
		ИначеЕсли Найти(Метаданные.Синоним, "Бухгалтерия государственного учреждения, редакция 2.") <> 0 Тогда
			Возврат "БГУ20";
		ИначеЕсли Найти(Метаданные.Синоним, "ERP") <> 0 Тогда
			Возврат "УТ11";
		ИначеЕсли (Найти(Метаданные.Синоним, "Бухгалтерия строительной организации") <> 0) И (Найти(Метаданные.Синоним, "редакция 3.") <> 0) 
			ИЛИ (Найти(Метаданные.Синоним, "1С-Рарус:Учет ценных бумаг") <> 0) И (Найти(Метаданные.Синоним, "редакция 3 для 1С:Бухгалтерии 8") <> 0) Тогда
			Возврат "БП30";
		ИначеЕсли Метаданные.Имя = "КомплекснаяАвтоматизация" Тогда
			Возврат "УТ11";
		ИначеЕсли Метаданные.Имя = "УправлениеНебольшойФирмой" И (ЛЕВ(Метаданные.Версия, 3) = "1.4" ИЛИ ЛЕВ(Метаданные.Версия, 3) = "1.5" ИЛИ ЛЕВ(Метаданные.Версия, 3) = "1.6") Тогда
			Возврат "УНФ16";
		КонецЕсли;
		
		Выборка= ХранилищеОбщихНастроек.Выбрать(Новый Структура("КлючОбъекта, КлючНастроек", "МодульДиадок", "МаркерКонфигурации"));
		Если Выборка.Следующий() Тогда
			
			ЭлементДопустимогоМаркера= ДопустимыеМаркерыКонфигураций().НайтиПоЗначению(Выборка.Настройки);
			
			Если ЭлементДопустимогоМаркера <> Неопределено Тогда
				Возврат ЭлементДопустимогоМаркера.Значение;
			Иначе
				ХранилищеОбщихНастроек.Удалить("МодульДиадок", "МаркерКонфигурации", ИмяПользователя());
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат "";
		
	КонецФункции
	
	Функция СформироватьХарактеристикуКонфигурации() Экспорт
		
		Характеристика= Новый Структура();

		Характеристика.Вставить("Конфигурация", ПолучитьМаркерКонфигурации());
		Характеристика.Вставить("ПрофильКонфигурации", СформироватьПрофильКонфигурации());
		Характеристика.Вставить("ИмяФормыИнтеграции", ИмяФормыИнтеграции());
		Характеристика.Вставить("НастройкиПрокси", ПолучитьНастройкиПрокси());
		
		Возврат Характеристика;
		
	КонецФункции
	
	Функция СформироватьПрофильКонфигурации() Экспорт
		
		стПрофильКонфигурации=	Новый Структура;
		
		стПрофильКонфигурации.Вставить("ХранениеНоменклатурыПоставщиков", Новый Структура("Вариант", "Справочник_НоменклатураПоставщиков"));
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			стПрофильКонфигурации.Вставить("Услуги", Новый Структура("Вариант", "ПоПеречислению"));
		Иначе
			стПрофильКонфигурации.Вставить("Услуги", Новый Структура("Вариант", "ПоРеквизиту"));
		КонецЕсли;
		
		стПрофильКонфигурации.Вставить("ЕстьАртикул", НЕ Метаданные.Справочники.Номенклатура.Реквизиты.Найти("Артикул") = Неопределено);
		
		стПрофильКонфигурации.Вставить("ХранениеНастроекПользователей", Новый Структура("Вариант", "1С_УФ"));
		
		стОперацииПоступления = Новый Структура;
		стОперацииПоступления.Вставить("ПоступлениеОборудования",Истина );
		стОперацииПоступления.Вставить("ПоступлениеНМА", Истина);
		
		стПрофильКонфигурации.Вставить("НастройкиПоступления",  стОперацииПоступления);
		
		Возврат стПрофильКонфигурации;
		
	КонецФункции
	
	Функция ПроверитьДоступКОбъектам()
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ТребуемыеОбъекты=	"";
		МассивНеобходимыхОбъектов=	ПолучитьНеобходимыеДляРаботыОбъекты();
		Для каждого ОбъектБД Из МассивНеобходимыхОбъектов Цикл
			Если НЕ ПравоДоступа(ОбъектБД.Право, ОбъектБД.Объект) Тогда
				ТребуемыеОбъекты= 	ТребуемыеОбъекты + " 
				|" + ОбъектБД.Раздел + " " + ОбъектБД.Объект + " - на " + НРег(ОбъектБД.Право);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ТребуемыеОбъекты = "" Тогда
			Результат.ОписаниеОшибки=	"Отсутствуют необходимые права";
			Результат.Подробности= 		"Под правами текущего пользователя невозможно получить свойства объектов и их значения.
											|
											|Обратитесь к администраторам и получите доступ к следующим объектам:" + ТребуемыеОбъекты;
			Результат.Отказ=			Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПроверитьПраваНаПВХ()
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ТребуемыеОбъекты=	"";
		Для каждого НеобходимыйПВХ Из ПолучитьНеобходимыеДляРаботыПВХ() Цикл
			Если НЕ ПравоДоступа("Добавление", НеобходимыйПВХ) Тогда
				ТребуемыеОбъекты= 	ТребуемыеОбъекты + " 
									|План видов характеристик: " + НеобходимыйПВХ.Синоним + " - на добавление";
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ТребуемыеОбъекты = "" Тогда
			Результат.ОписаниеОшибки=	"Отсутствуют необходимые права";
			Результат.Подробности= 		"В модуле добавлены новые свойства, но у вас отсутствуют права на запись их в базу данных.
										|
										|Обратитесь к администраторам или выполните запуск от имени пользователя имеющему следующие права:" + ТребуемыеОбъекты;
			Результат.Отказ=			Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПроверитьВозможностьИнициализацииВУзле(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		НедостающиеСвойстваОбъектов=		ПроверитьНаличиеСвойствОбъектов(ВозможныеСвойстваОбъектов);
		НедостающиеНастройкиПользователя= 	ПроверитьНаличиеНастроекПользователя(ВозможныеНастройкиПользователя);
		ПрисоединитьМассив(НедостающиеСвойстваОбъектов, НедостающиеНастройкиПользователя);
		
		Если НедостающиеСвойстваОбъектов.Количество() <> 0 Тогда
			ВозможныеПланыОбмена = ПолучитьВозможныеПланыОбменаДляПередачиНастроекПользователяИСвойствОбъектов();
			Если НЕ ВозможныеПланыОбмена.Количество() = 0 Тогда
				Результат.ОписаниеОшибки=	"Ошибка инициализации свойств объектов";
				Результат.Подробности=		"В периферийной базе данных не проинициализированы свойства объектов. 
											|
											|Необходимо запустить обработку в центральной базе данных, после чего выполнить обмен данными.
											|Выполните обмен по одному из следующих планов обмена:";
											Для каждого ПланОбмена Из ВозможныеПланыОбмена Цикл
												Результат.Подробности = Результат.Подробности + "
												|	" + Строка(ПланОбмена);
											КонецЦикла;
											Результат.Подробности = Результат.Подробности + "
											|
											|Отладочная информация: " + ПолучитьСтрокуПоМассиву(НедостающиеСвойстваОбъектов);
				
				Результат.Отказ=	Истина;
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ИнициализироватьНеобходимыеСвойстваПВХ(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		НаличиеПравНаПВХ=	ПроверитьПраваНаПВХ();
		Если НаличиеПравНаПВХ.Отказ = Истина Тогда
			ЗаполнитьЗначенияСвойств(Результат, НаличиеПравНаПВХ);
			Возврат Результат;
		КонецЕсли;
		
		ЗафиксированаРеструктуризация=	Ложь;
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			РезультатОбработкиСвойств=	ОбработатьСвойстваОбъектовИз20(ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20, ЗафиксированаРеструктуризация);
			Если РезультатОбработкиСвойств.Отказ = Истина Тогда
				ЗаполнитьЗначенияСвойств(Результат, РезультатОбработкиСвойств);
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		РезультатРеструктуризации=	ОбработатьНеправильныеСвойства(ВозможныеНастройкиПользователя, ВозможныеСвойстваОбъектов, ЗафиксированаРеструктуризация);
		Если РезультатРеструктуризации.Отказ = Истина Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатРеструктуризации);
			Возврат Результат;
		КонецЕсли;
		
		РезультатСозданияСвойств=	СоздатьНеобходимыеСвойстваВПВХ(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, ЗафиксированаРеструктуризация);
		Если РезультатСозданияСвойств.Отказ = Истина Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатСозданияСвойств);
			Возврат Результат;
		КонецЕсли;
		
		Если ЗафиксированаРеструктуризация = Истина 
			И НЕ ЭтоПериферийнаяБД()
			И (ЕстьПериферийныеБазы("Полный") ИЛИ ЕстьПериферийныеБазы("ПоОрганизации")) Тогда
			
			Результат.ОписаниеОшибки=	"Ошибка реструктуризации свойств объектов";
			Результат.Подробности=		"В конфигурации проинициализированы свойства объектов, необходимые для работы с системой "+ МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы +".
										|Для корректной работы в периферийной базе данных выполните обмен данными.";
			Результат.Отказ=			Истина;
			
		КонецЕсли;

		Возврат Результат;
		
	КонецФункции
	
	Функция ПроверитьИнициализациюСвойствПВХ()
		
		Результат=		Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ВозможныеНастройкиПользователя=	ПолучитьВозможныеНастройкиПользователя();
		ВозможныеСвойстваОбъектов=		ПолучитьВозможныеСвойстваОбъектов();
		СтарыеСвойстваОбъектовИз20=		ПолучитьСтарыеСвойстваОбъектовИз20();
		Если ПроверитьНеобходимостьИнициализацииСвойств(ВозможныеНастройкиПользователя, ВозможныеСвойстваОбъектов, СтарыеСвойстваОбъектовИз20) = Истина Тогда
			
			Если ЭтоПериферийнаяБД() Тогда
				РезультатПроверкиИнициализацииВУзле=	ПроверитьВозможностьИнициализацииВУзле(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя);
				Если РезультатПроверкиИнициализацииВУзле.Отказ = Истина Тогда
					ЗаполнитьЗначенияСвойств(Результат, РезультатПроверкиИнициализацииВУзле);
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
			
			РезультатИнициализации=	ИнициализироватьНеобходимыеСвойстваПВХ(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20);
			ЗаполнитьЗначенияСвойств(Результат, РезультатИнициализации);
				
		КонецЕсли;

		Возврат Результат;
		
	КонецФункции
	
	Функция ПодготовкаКонфигурацииКРаботе() Экспорт
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		РезультатПроверкиДоступаКОбъектам=	ПроверитьДоступКОбъектам();
		Если РезультатПроверкиДоступаКОбъектам.Отказ Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатПроверкиДоступаКОбъектам);
			Возврат Результат;
		КонецЕсли;
		
		РезультатПроверкиИнициализацииСвойствПВХ=	ПроверитьИнициализациюСвойствПВХ();
		Если РезультатПроверкиИнициализацииСвойствПВХ.Отказ Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатПроверкиИнициализацииСвойствПВХ);
			Возврат Результат;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ЭтоПериферийнаяБД()
		
		Возврат ПланыОбмена.ГлавныйУзел() <> Неопределено;
		
	КонецФункции
	
	Функция ПолучитьТекущегоПользователя() Экспорт
		
		ТекущийПользователь = Неопределено;
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			Выполнить("ТекущийПользователь =  ПользователиКлиентСервер.ТекущийПользователь()");;
		Иначе 
			Выполнить("ТекущийПользователь =  Пользователи.ТекущийПользователь()");
		КонецЕсли;	
		
		Возврат ТекущийПользователь;
		
	КонецФункции
	
	Функция ПолучитьНеобходимыеДляРаботыОбъекты()
		
		МассивНеобходимыхОбъектов=	Новый Массив();
		
		Для каждого РегистрСведений Из ПолучитьНеобходимыеДляРаботыРегистры() Цикл
			МассивНеобходимыхОбъектов.Добавить(Новый Структура("Раздел, Объект, Право", "Регистр сведений:", РегистрСведений, "Изменение"));
		КонецЦикла;
		
		Для каждого ПВХ Из ПолучитьНеобходимыеДляРаботыПВХ() Цикл
			МассивНеобходимыхОбъектов.Добавить(Новый Структура("Раздел, Объект, Право", "Планы видов характеристик:", ПВХ, "Чтение"));
		КонецЦикла;
		
		Возврат МассивНеобходимыхОбъектов;
		
	КонецФункции
	
	Функция ПолучитьНеобходимыеДляРаботыПВХ() Экспорт
		НеобходимыеДляРаботыПВХ = Новый Массив;
		НеобходимыеДляРаботыПВХ.Добавить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения);
		Возврат НеобходимыеДляРаботыПВХ;
	КонецФункции
	
	Функция ПолучитьНеобходимыеДляРаботыРегистры() Экспорт
		НеобходимыеДляРаботыРегистры = Новый Массив;
		НеобходимыеДляРаботыРегистры.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения);
		Возврат НеобходимыеДляРаботыРегистры;
	КонецФункции
	
	Функция ЕстьРеквизитПрикладногоОбъекта(ТипОбъекта, ИмяРеквизита) Экспорт
		
		Возврат Метаданные.НайтиПоТипу(ТипОбъекта).Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
		
	КонецФункции
	
	Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита, ЗначениеРеквизита= Неопределено) Экспорт
		
		КлючУникальности   = Новый УникальныйИдентификатор;
		СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
		
		Если СтруктураРеквизита[ИмяРеквизита] = КлючУникальности Тогда
			Возврат Ложь;
		Иначе
			ЗначениеРеквизита= СтруктураРеквизита[ИмяРеквизита];
			Возврат Истина;
		КонецЕсли;
		
	КонецФункции
	
	Функция ЕстьРеквизитТипаОбъекта(ТипОбъекта, ИмяРеквизита) Экспорт
		
		Возврат Метаданные.НайтиПоТипу(ТипОбъекта).Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
		
	КонецФункции
	
	Функция ЕстьРеквизитыИлиСвойстваОбъекта(Объект, КоллекцияИменРеквизитов) Экспорт
		
		СтруктураРеквизитов= Новый Структура;
		КлючУникальности= 	 Новый УникальныйИдентификатор;
		
		Если ТипЗнч(КоллекцияИменРеквизитов) = Тип("Массив") Тогда
			
			Для Каждого ИмяРеквизита ИЗ КоллекцияИменРеквизитов Цикл
				СтруктураРеквизитов.Вставить(ИмяРеквизита, КлючУникальности);
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
			
			ОбратныйИндекс= КоллекцияИменРеквизитов.ВГраница();
			Пока ОбратныйИндекс > -1 Цикл
				Если СтруктураРеквизитов[КоллекцияИменРеквизитов[ОбратныйИндекс]] = КлючУникальности Тогда
					КоллекцияИменРеквизитов.Удалить(ОбратныйИндекс);
				КонецЕсли;
				ОбратныйИндекс= ОбратныйИндекс - 1;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(КоллекцияИменРеквизитов) = Тип("Структура") Тогда
			
			Для Каждого КлючИЗначение ИЗ КоллекцияИменРеквизитов Цикл
				СтруктураРеквизитов.Вставить(КлючИЗначение.Ключ, КлючУникальности);
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
			
			Для Каждого КлючИЗначение ИЗ СтруктураРеквизитов Цикл
				Если КлючИЗначение.Значение = КлючУникальности Тогда
					КоллекцияИменРеквизитов.Удалить(КлючИЗначение.Ключ);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат КоллекцияИменРеквизитов.Количество() > 0;
		
	КонецФункции
	
	Функция ТаблицаЗначений_2_МассивСтруктур(ТаблицаЗначений) Экспорт
		
		КоличествоСтрок= ТаблицаЗначений.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			Возврат Новый Массив;
		КонецЕсли;
		
		МассивСтруктур= Новый Массив(КоличествоСтрок);
		
		СтрокаКлючей= "";
		Разделитель=  "";
		Для Каждого Колонка из ТаблицаЗначений.Колонки Цикл
			СтрокаКлючей = СтрокаКлючей + Разделитель + Колонка.Имя;
			Разделитель= ", ";
		КонецЦикла;                                                        
		
		Для ИндексЦикла= 0 ПО КоличествоСтрок-1 Цикл
		
			МассивСтруктур[ИндексЦикла]= Новый Структура(СтрокаКлючей);
			ЗаполнитьЗначенияСвойств(МассивСтруктур[ИндексЦикла], ТаблицаЗначений[ИндексЦикла]);
			
		КонецЦикла;
		
		Возврат МассивСтруктур;
		
	КонецФункции
	
	Функция НайтиСтрокуВМассивеСтруктур(МассивСтруктур, ПараметрыОтбора) Экспорт //вместо Найти таблицы значений

		Для Каждого Стр из МассивСтруктур Цикл
			СтрокаПодходит = Истина;
			Для Каждого КлючИЗначение из ПараметрыОтбора Цикл
				Если Стр[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
					СтрокаПодходит = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаПодходит Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
		
	КонецФункции
	
	Функция ПоместитьИнтеграционныйМодульВДополнительныеОбработки() Экспорт
		
		Результат= Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		СтруктураДанные = ЗаполнитьДанныеОПомещаемомМодуле();
		ПоместитьИнтеграционныйМодульВДополнительныеОбработки= Истина;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка,
		|	ВЫБОР
		|		КОГДА Т.Версия = &ВерсияОбработки
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТекущаяВерсия
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК Т
		|ГДЕ
		|	Т.ИмяОбъекта = &ИмяОбъекта
		|	И Т.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
		|	И НЕ Т.ПометкаУдаления");
		
		Запрос.УстановитьПараметр("ИмяОбъекта"	   , СтруктураДанные.ИмяОбъекта);
		Запрос.УстановитьПараметр("ВерсияОбработки", СтруктураДанные.ВерсияОбработки);
		
		Выборка= Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ЭтоТекущаяВерсия Тогда
				ПоместитьИнтеграционныйМодульВДополнительныеОбработки= Ложь;
			Иначе
				
				ДополнительнаяОбработкаОбъект= Выборка.Ссылка.ПолучитьОбъект();
				ДополнительнаяОбработкаОбъект.Публикация= ПредопределенноеЗначение("Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена");
				
				Попытка
					ДополнительнаяОбработкаОбъект.Записать();
				Исключение
					Результат.Отказ= Истина;
					Результат.ОписаниеОшибки= "Ошибка записи отключения старого интеграционного модуля в справочнике дополнительных обработок!";
					Результат.Подробности= ОписаниеОшибки();
					Возврат Результат;
				КонецПопытки;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если ПоместитьИнтеграционныйМодульВДополнительныеОбработки Тогда
			СоздатьНовыйЭлементДополнительныеОбработки(СтруктураДанные, Результат);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ЗаполнитьДанныеОПомещаемомМодуле() Экспорт
		
		СтруктураДанные = Новый Структура("АдресОбработки, НаименованиеОбработки, ВерсияОбработки, ИмяОбъекта, ИмяФайла, НаименованиеСистемы");
		
		НаименованиеСистемы 				= МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы;
		СтруктураДанные.НаименованиеСистемы	= НаименованиеСистемы;
		
		НаименованиеИнтеграционногоМодуля 		= "Модуль работы с электронными первичными документами через " + НаименованиеСистемы;
		СтруктураДанные.НаименованиеОбработки 	= НаименованиеИнтеграционногоМодуля;
		
		
		ВерсияОбработкиДиадок 			= МетодСервера(,"ВерсияОбработкиДиадокСервер");
		ВерсияОбработкиДиадок 			= СтрЗаменить(ВерсияОбработкиДиадок, "_", ".");
		СтруктураДанные.ВерсияОбработки = ВерсияОбработкиДиадок;
		
		
		ОбработкаОбъектСтрокой 		= Строка(ЭтотОбъект);
		ИмяОбъекта 					= Сред(ОбработкаОбъектСтрокой, Найти(ОбработкаОбъектСтрокой, "ВнешняяОбработкаОбъект.")+23, СтрДлина(ОбработкаОбъектСтрокой));
		СтруктураДанные.ИмяОбъекта 	= ИмяОбъекта;
		
		АдресОбработки 					= Вычислить("ИспользуемоеИмяФайла");
		СтруктураДанные.АдресОбработки 	= АдресОбработки;
		
		МассивСтрок 				= МетодСервера(,"ПреобразоватьСтрокуВМассивПодстрок", АдресОбработки, "\");
		ПоследнийЭлементМассива 	= МассивСтрок.ВГраница();
		ИмяФайлаОбработки 			= МассивСтрок[ПоследнийЭлементМассива];
		СтруктураДанные.ИмяФайла 	= ИмяФайлаОбработки;
		
		
		Возврат СтруктураДанные; 
		
	КонецФункции
	
	Процедура СоздатьНовыйЭлементДополнительныеОбработки(ДанныеДляЗаполнения, Результат) Экспорт
		
		НоваяВнешняяОбработка = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		
		НоваяВнешняяОбработка.Наименование		= ДанныеДляЗаполнения.НаименованиеОбработки;
	
		НоваяВнешняяОбработка.БезопасныйРежим 	= Ложь;
		НоваяВнешняяОбработка.Версия 			= ДанныеДляЗаполнения.ВерсияОбработки;
		НоваяВнешняяОбработка.Вид				= Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
		НоваяВнешняяОбработка.ИмяОбъекта		= ДанныеДляЗаполнения.ИмяОбъекта;
		НоваяВнешняяОбработка.ИмяФайла			= ДанныеДляЗаполнения.ИмяФайла;
		НоваяВнешняяОбработка.Информация		= "Дополнительная внешняя обработка для работы с ЭДО через " + ДанныеДляЗаполнения.НаименованиеСистемы;
		НоваяВнешняяОбработка.Публикация		= Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	
		ТЧКоманды = НоваяВнешняяОбработка.Команды;
	
		НоваяКоманда = ТЧКоманды.Добавить();
	
		НоваяКоманда.Идентификатор 			= "Форма_Основная";
		НоваяКоманда.ВариантЗапуска 		= Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы;
		НоваяКоманда.Представление 			= "Открыть модуль работы с электронными первичными документами через " + ДанныеДляЗаполнения.НаименованиеСистемы;
		НоваяКоманда.ПоказыватьОповещение 	= Ложь;
		НоваяКоманда.Модификатор			= "";
	
		НоваяВнешняяОбработка.ХранилищеОбработки = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ДанныеДляЗаполнения.АдресОбработки));
	
		Попытка
			НоваяВнешняяОбработка.Записать();
			Результат.ОписаниеОшибки= "Интеграционный модуль помещен в справочник дополнительных обработок.";
		Исключение
			Результат.Отказ= Истина;
			Результат.ОписаниеОшибки= "Ошибка записи интеграционного модуля в справочник дополнительных обработок!";
			Результат.Подробности= ОписаниеОшибки();
		КонецПопытки;
		
	КонецПроцедуры
	
	Функция ИмяТипаОбъекта(ОбъектСсылка) Экспорт
		
		XMLТип= XMLТипЗнч(ОбъектСсылка);
		
		Если XMLТип = Неопределено Тогда
			Возврат "";
		КонецЕсли;
		
		НачальнаяПозиция= Найти(XMLТип.ИмяТипа, ".");
		Если НачальнаяПозиция > 0 Тогда
			НачальнаяПозиция= НачальнаяПозиция + 1;
		КонецЕсли;
		
		Возврат Сред(XMLТип.ИмяТипа, НачальнаяПозиция);
		
	КонецФункции
	
	Функция СуществуетОбъектМетаданных(ПолноеИмяОбъекта) Экспорт
		
		Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта) <> Неопределено;
		
	КонецФункции
	
	Функция СсылкаСуществует(Ссылка) Экспорт
		
		Запрос= Новый Запрос("ВЫБРАТЬ ИСТИНА ИЗ "+Ссылка.Метаданные().ПолноеИмя()+" ГДЕ Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Возврат НЕ Запрос.Выполнить().Пустой();
		
	КонецФункции
	
	Функция СравнитьВерсии(Знач ПерваяВерсия, Знач ВтораяВерсия) Экспорт
		
		Пока НЕ ПустаяСтрока(ПерваяВерсия) ИЛИ НЕ ПустаяСтрока(ВтораяВерсия) Цикл
			
			ПозицияРазделителя= Найти(ПерваяВерсия, ".");
			Если ПозицияРазделителя > 0 Тогда
				НомерПервойВерсии= Число(Лев(ПерваяВерсия, ПозицияРазделителя-1));
				ПерваяВерсия= Сред(ПерваяВерсия, ПозицияРазделителя+1);
			Иначе
				НомерПервойВерсии= ?(ПустаяСтрока(ПерваяВерсия), 0, Число(ПерваяВерсия));
				ПерваяВерсия= "";
			КонецЕсли;
			
			ПозицияРазделителя= Найти(ВтораяВерсия, ".");
			Если ПозицияРазделителя > 0 Тогда
				НомерВторойВерсии=	Число(Лев(ВтораяВерсия, ПозицияРазделителя-1));
				ВтораяВерсия= Сред(ВтораяВерсия, ПозицияРазделителя+1);
			Иначе
				НомерВторойВерсии= ?(ПустаяСтрока(ВтораяВерсия), 0, Число(ВтораяВерсия));
				ВтораяВерсия= "";
			КонецЕсли;
			
			Если НомерПервойВерсии > НомерВторойВерсии Тогда
				Возврат "ПерваяВерсияСтарше";
			ИначеЕсли НомерПервойВерсии < НомерВторойВерсии Тогда
				Возврат "ПерваяВерсияМладше";
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат "ВерсииРавны";
		
	КонецФункции
	
	Функция РазделительПакетаЗапросов() Экспорт
		
		Возврат "		
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"
		
	КонецФункции
	
	Функция РазделительОбъединенияЗапросов() Экспорт
		
		Возврат "		
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|"
		
	КонецФункции
	
	Функция МассивВПФИзСоответствиеВПФСсылке(ЭлементСоответствия) Экспорт
		
		СоответствиеСущности= 		ЭлементСоответствия.Значение;
		МассивДополнительныхВПФ= 	Новый Массив;
		
		Для каждого ЭлементСущности из СоответствиеСущности Цикл
			
			СтруктураХарактеристики= 	ЭлементСущности.Значение;
			ВременныйМассив= 			СтруктураХарактеристики.МассивВПФ;
			
			Если ВременныйМассив.Количество() > 0 Тогда
				
				Если МассивДополнительныхВПФ.Количество() = 0 Тогда
					МассивДополнительныхВПФ= ВременныйМассив;
				Иначе
					Для каждого ЭлементВременногоМассива из ВременныйМассив Цикл
						МассивДополнительныхВПФ.Добавить(ЭлементВременногоМассива);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат МассивДополнительныхВПФ;
		
	КонецФункции

	Функция ТипДокументаУПД(ФункцияУПД) Экспорт
		
		Если ФункцияУПД = "СЧФДОП" ИЛИ ФункцияУПД = "InvoiceAndBasic" Тогда
			Возврат "УПД Счф Доп";
		ИначеЕсли ФункцияУПД = "ДОП" ИЛИ ФункцияУПД = "Basic" Тогда
			Возврат "УПД Доп";
		ИначеЕсли ФункцияУПД = "СЧФ" ИЛИ ФункцияУПД = "Invoice" Тогда
			Возврат "УПД Счф";
		КонецЕсли;
		
	КонецФункции
	
	Функция ФункцияУПД(ТипДокументаУПД) Экспорт
		
		Если ТипДокументаУПД = ТипДокументаУПД("СЧФДОП") ИЛИ ТипДокументаУПД = ТипДокументаУПД("СЧФДОП") + " (тестовый)" Тогда
			Возврат "СЧФДОП";
		ИначеЕсли ТипДокументаУПД = ТипДокументаУПД("ДОП") ИЛИ ТипДокументаУПД = ТипДокументаУПД("ДОП") + " (тестовый)" Тогда
			Возврат "ДОП";
		ИначеЕсли ТипДокументаУПД = ТипДокументаУПД("СЧФ") ИЛИ ТипДокументаУПД = ТипДокументаУПД("СЧФ") + " (тестовый)" Тогда
			Возврат "СЧФ";
		КонецЕсли;
		
	КонецФункции
	
	Функция СформироватьПараметрыПодписанта(Наименование) Экспорт
		
		Инд = 1;
		
		Фамилия = "";
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) <> " " Цикл
			Фамилия = Фамилия + Сред(Наименование, Инд, 1);
			Инд = Инд + 1;
		КонецЦикла;
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) = " " Цикл
			Инд = Инд + 1;
		КонецЦикла;
		
		Имя = "";
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) <> " " Цикл
			Имя = Имя + Сред(Наименование, Инд, 1);
			Инд = Инд + 1;
		КонецЦикла;
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) = " " Цикл
			Инд = Инд + 1;
		КонецЦикла;
		
		Отчество = "";
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) <> " " Цикл
			Отчество = Отчество + Сред(Наименование, Инд, 1);
			Инд = Инд + 1;
		КонецЦикла;
		
		Рез = Новый Структура;
		Рез.Вставить("ПодписантФамилия", Фамилия);
		Рез.Вставить("ПодписантИмя", Имя);
		Рез.Вставить("ПодписантОтчество", Отчество);
		
		Возврат Рез;
		
	КонецФункции
	
	Функция ПолучитьСписокРазличающихсяРеквизитов(ДокументСсылка, DocumentNumber, DocumentDate) Экспорт
		
		ВидДокумента= МетодСервера(,"ИмяТипаОбъекта", ДокументСсылка);
		
		Если 	ВидДокумента = "ПоступлениеТоваровУслуг"
			ИЛИ ВидДокумента = "ПоступлениеДопРасходов"
			ИЛИ ВидДокумента = "ПоступлениеУслугПрочихАктивов"
		Тогда
		
			ИмяПоляДатаВходящегоДокумента=  "ДатаВходящегоДокумента";
			ИмяПоляНомерВходящегоДокумента= "НомерВходящегоДокумента";
			
		ИначеЕсли 	ВидДокумента = "ПоступлениеМЗ" 
				ИЛИ ВидДокумента = "ПоступлениеУслугРабот"
				ИЛИ ВидДокумента = "ПоступлениеОС"
		Тогда
			
			ИмяПоляДатаВходящегоДокумента=  "ДатаПервичногоДокумента";
			ИмяПоляНомерВходящегоДокумента= "НомерПервичногоДокумента";
			
		ИначеЕсли ВидДокумента = "СчетФактураПолученный" Тогда
			
			Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				ИмяПоляДатаВходящегоДокумента=  "Дата";
				ИмяПоляНомерВходящегоДокумента= "Номер";
			ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				ИмяПоляДатаВходящегоДокумента=  "ДатаВходящегоДокумента";
				ИмяПоляНомерВходящегоДокумента= "НомерВходящегоДокумента";
			ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				ИмяПоляДатаВходящегоДокумента=  "ДатаПервичногоДокумента";
				ИмяПоляНомерВходящегоДокумента= "НомерПервичногоДокумента";
			КонецЕсли;
			
		КонецЕсли;
		
		Результат=   "";
		Разделитель= "";
		
		Если ИмяПоляДатаВходящегоДокумента <> Неопределено Тогда
			Если НачалоДня(ДокументСсылка[ИмяПоляДатаВходящегоДокумента]) <> НачалоДня(DocumentDate) Тогда
				Результат= Результат + Разделитель + """Дата входящего документа""";
				Разделитель= ", ";
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПоляНомерВходящегоДокумента <> Неопределено Тогда
			Если СокрЛП(ДокументСсылка[ИмяПоляНомерВходящегоДокумента]) <> СокрЛП(DocumentNumber) Тогда
				Результат = Результат + Разделитель + """Номер входящего документа""";				
				Разделитель= ", ";
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции	
	
	Функция СтрокаCOM_В_Строка1С(ЗначениеCOM, ПустоеЗначение= Неопределено)
		
		Попытка
			Значение1С= Строка(ЗначениеCOM);
		Исключение
			Значение1С= ЗначениеCOM;
		КонецПопытки;
		
		Если ПустоеЗначение <> Неопределено И НЕ ЗначениеЗаполнено(Значение1С) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Значение1С;
		КонецЕсли;
		
	КонецФункции
	
	Функция СтрокаЧислоCOM_В_СтрокаЧисло1С(ЗначениеCOM, ФорматнаяСтрока= "", ПустоеЗначение= Неопределено)
		
		Попытка
			Значение1С= Число(ЗначениеCOM);
		Исключение
			Значение1С= ЗначениеCOM;
		КонецПопытки;
		
		Если ПустоеЗначение <> Неопределено И НЕ ЗначениеЗаполнено(Значение1С) Тогда
			Возврат ПустоеЗначение;
		Иначе
			
			Если НЕ ПустаяСтрока(ФорматнаяСтрока) Тогда
				Возврат Формат(Значение1С, ФорматнаяСтрока);
			Иначе
				Возврат Значение1С;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецФункции
	
	Функция СтрокаДатаCOM_В_СтрокаДата1С(ЗначениеCOM, ФорматнаяСтрока= "", ПустоеЗначение= Неопределено)
		
		Попытка
			Значение1С= Дата(ЗначениеCOM);
		Исключение
			Значение1С= ЗначениеCOM;
		КонецПопытки;
		
		Если ПустоеЗначение <> Неопределено И НЕ ЗначениеЗаполнено(Значение1С) Тогда
			Возврат ПустоеЗначение;
		Иначе
			
			Если НЕ ПустаяСтрока(ФорматнаяСтрока) Тогда
				Возврат Формат(Значение1С, ФорматнаяСтрока);
			Иначе
				Возврат Значение1С;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецФункции
	
	Функция Значение1C_В_СтрокаCOM(Значение1С, ФорматнаяСтрока= "") Экспорт
		
		Если НЕ ЗначениеЗаполнено(Значение1С) Тогда
			Возврат "";
		ИначеЕсли НЕ ПустаяСтрока(ФорматнаяСтрока) Тогда
			Возврат Формат(Значение1С, ФорматнаяСтрока);
		Иначе
			Возврат СокрЛП(Значение1С);
		КонецЕсли;
		
	КонецФункции
	
	Функция Item_UnitCode(ЕдиницаИзмерения, КодЕдиницыИзмерения) Экспорт
			
		// См. аналитику https://jira.diadoc.ru/browse/DCP-84
		
		Ошибка_ЕИНеНайдена=	Ложь;
		Ошибка_ЕИНеТотКод=	Ложь;
		
		МетодСервера(, "ПроверитьЕИ", ЕдиницаИзмерения, КодЕдиницыИзмерения, Новый СписокЗначений, Ошибка_ЕИНеНайдена, Ошибка_ЕИНеТотКод);
		
		Если Ошибка_ЕИНеНайдена ИЛИ Ошибка_ЕИНеТотКод Тогда
			Возврат "";
		Иначе
			Возврат КодЕдиницыИзмерения;
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьФункциональнуюОпциюНаСервере(Имя) Экспорт
		
		Если Метаданные.ФункциональныеОпции.Найти(Имя) <> Неопределено Тогда
			Возврат ПолучитьФункциональнуюОпцию(Имя);
		КонецЕсли;
		
	КонецФункции
	
	Функция ЭДО_БиблиотекаКартинок() Экспорт
		
		ЭДО_БиблиотекаКартинок = Новый Структура;
		
		Для Каждого Рисунок Из ПолучитьМакет("БиблиотекаКартинок").Рисунки Цикл
			ЭДО_БиблиотекаКартинок.Вставить(Рисунок.Имя, Рисунок.Картинка);
		КонецЦикла;
		
		Возврат ЭДО_БиблиотекаКартинок;
		
	КонецФункции
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//{ ИНТЕГРАЦИЯ
	
	Функция ИмяФормыИнтеграции() Экспорт
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			Возврат "Модуль_ИнтеграцияБП30";
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			Возврат "Модуль_ИнтеграцияУТ11";
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			Возврат "Модуль_ИнтеграцияБГУ20";
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			Возврат "Модуль_ИнтеграцияУНФ16";
		КонецЕсли;
		
	Конецфункции 

	функция ПредставлениеВизирующегоСтруктурой(ПараметрыПодписания, ИНН= Неопределено) Экспорт
		
		ФИО=	   ПараметрыПодписания.ФиоПодписанта;
		
		Official=  Новый Структура;
		Подписант= СформироватьПараметрыПодписанта(фио);
		Official.Вставить("Surname",    Подписант.ПодписантФамилия);
		Official.Вставить("FirstName",  Подписант.ПодписантИмя);
		Official.Вставить("Patronymic", Подписант.ПодписантОтчество);
		
		Official.Вставить("JobTitle" , ПараметрыПодписания.ДолжностьПодписанта);
		Если НЕ ИНН = Неопределено Тогда
			Official.Вставить("Inn" , ИНН);
		КонецЕсли;	
		
		Возврат   Official;
		
	КонецФункции 

	Функция ПредставлениеВизирующегоУПД_Структурой(ПараметрыПодписания) Экспорт 
		
		Организация= 		 BoxID_2_Организация(ПараметрыПодписания.BoxID);
		Подписант= 			 СформироватьПараметрыПодписанта(ПараметрыПодписания.ФиоПодписанта);
		
		ExtendedSignerDetails = МетодСервера("Модуль_ИнтеграцияУниверсальный", "Новый_ExtendedSignerDetails");
		
		ExtendedSignerDetails.Surname= 	  Подписант.ПодписантФамилия;
		ExtendedSignerDetails.FirstName=  Подписант.ПодписантИмя;
		ExtendedSignerDetails.Patronymic= Подписант.ПодписантОтчество;
		
		ExtendedSignerDetails.Status= "SellerEmployee";
		
		ExtendedSignerDetails.INN= ПараметрыПодписания.ИНН;
		
		ExtendedSignerDetails.SignerType = ?(СтрДлина(ExtendedSignerDetails.INN) = 12, "IndividualEntity", "LegalEntity");
		
		ExtendedSignerDetails.OrganizationName= ПараметрыПодписания.НаименованиеОрганизации;
		ExtendedSignerDetails.Powers= 	"PersonDocumentedOperation";
		ExtendedSignerDetails.JobTitle= ПараметрыПодписания.ДолжностьПодписанта;
		
		Возврат ExtendedSignerDetails;
		
	КонецФункции

	Функция НоменклатураЯвляетсяУслугой(Номенклатура) Экспорт
		
		стПрофильКонфигурации=	СформироватьПрофильКонфигурации();
		Если стПрофильКонфигурации.Услуги.Вариант = "ПоРеквизиту" Тогда
			Если НЕ Номенклатура.ПолучитьОбъект().Метаданные().Реквизиты.Найти("Услуга") = Неопределено Тогда
				Возврат Номенклатура.Услуга;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли стПрофильКонфигурации.Услуги.Вариант = "ПоПеречислению" Тогда
			Возврат ?(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"), Истина, Ложь);
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	Функция ВыбратьОсновноеСоглашениеКонтрагента(Контрагент, Организация) Экспорт
		
		Запрос=	Новый Запрос;
		Запрос.Текст=	
		"ВЫБРАТЬ
		|	СоглашенияСПоставщиками.Ссылка КАК Соглашение
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|ГДЕ
		|	СоглашенияСПоставщиками.Партнер = &Партнер
		|	И СоглашенияСПоставщиками.Контрагент = &Контрагент
		|	И СоглашенияСПоставщиками.Организация = &Организация";
		Запрос.УстановитьПараметр("Партнер", Контрагент.Партнер);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Возврат Запрос.Выполнить().Выбрать();
		
	КонецФункции
	
	Функция ВыбратьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров) Экспорт
		
		Запрос= Новый Запрос; 
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Запрос.Текст= 
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка КАК Договор,
				|	ВЫБОР
				|		КОГДА Контрагенты.Ссылка ЕСТЬ НЕ NULL 
				|			ТОГДА 1
				|		ИНАЧЕ 2
				|	КОНЕЦ КАК ПриоритетДоговора
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
				|		ПО ДоговорыКонтрагентов.Контрагент = Контрагенты.Ссылка
				|ГДЕ
				|	ДоговорыКонтрагентов.Контрагент = &Владелец
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
				|	И ДоговорыКонтрагентов.ТипДоговора В(&СписокДоговоров)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПриоритетДоговора";
			
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Если Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ОсновнойДоговорКонтрагента") = Неопределено Тогда	//начиная с 3.0.43.29 рекизит удален, вместо него ввели регистр сведений
				Запрос.Текст= 
					"ВЫБРАТЬ                                                                                         
					|	ДоговорыКонтрагентов.Ссылка КАК Договор,
					|	ВЫБОР
					|		КОГДА ОсновныеДоговорыКонтрагентов.Договор ЕСТЬ НЕ NULL 
					|			ТОГДА 1
					|		ИНАЧЕ 2
					|	КОНЕЦ КАК ПриоритетДоговора
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагентов
					|		ПО ДоговорыКонтрагентов.Владелец = ОсновныеДоговорыКонтрагентов.Контрагент
					|			И ДоговорыКонтрагентов.Ссылка = ОсновныеДоговорыКонтрагентов.Договор
					|ГДЕ
					|	ДоговорыКонтрагентов.Владелец = &Владелец
					|	И ДоговорыКонтрагентов.Организация = &Организация
					|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
					|	И ДоговорыКонтрагентов.ВидДоговора В(&СписокДоговоров)
					|  	
					|УПОРЯДОЧИТЬ ПО
					|	ПриоритетДоговора";
			Иначе
				
				Запрос.Текст= 
					"ВЫБРАТЬ
					|	ДоговорыКонтрагентов.Ссылка КАК Договор,
					|	ВЫБОР
					|		КОГДА Контрагенты.Ссылка ЕСТЬ НЕ NULL 
					|			ТОГДА 1
					|		ИНАЧЕ 2
					|	КОНЕЦ КАК ПриоритетДоговора
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
					|		ПО ДоговорыКонтрагентов.Владелец = Контрагенты.Ссылка
					|			И ДоговорыКонтрагентов.Ссылка = Контрагенты.ОсновнойДоговорКонтрагента
					|ГДЕ
					|	ДоговорыКонтрагентов.Владелец = &Владелец
					|	И ДоговорыКонтрагентов.Организация = &Организация
					|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
					|	И ДоговорыКонтрагентов.ВидДоговора В(&СписокДоговоров)
					|
					|УПОРЯДОЧИТЬ ПО
					|	ПриоритетДоговора";
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
		
			Запрос.Текст= 
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка КАК Договор,
				|	ВЫБОР
				|		КОГДА Контрагенты.Ссылка ЕСТЬ НЕ NULL 
				|			ТОГДА 1
				|		ИНАЧЕ 2
				|	КОНЕЦ КАК ПриоритетДоговора
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
				|		ПО ДоговорыКонтрагентов.Владелец = Контрагенты.Ссылка
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Владелец
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
				|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокДоговоров)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПриоритетДоговора";
			
		Иначе	
			
			Запрос.Текст= 
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка КАК Договор,
				|	ВЫБОР
				|		КОГДА СпрКонтрагенты.Ссылка ЕСТЬ НЕ NULL 
				|			ТОГДА 1
				|		ИНАЧЕ 2
				|	КОНЕЦ КАК ПриоритетДоговора
				|ИЗ
				|	Справочник.Договоры КАК ДоговорыКонтрагентов
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпрКонтрагенты
				|		ПО ДоговорыКонтрагентов.Контрагент = СпрКонтрагенты.Ссылка
				|ГДЕ
				|	ДоговорыКонтрагентов.Контрагент = &Владелец
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
				|	И ДоговорыКонтрагентов.ВидДоговора В(&СписокДоговоров)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПриоритетДоговора";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СписокДоговоров", СписокВидовДоговоров);
		
		Возврат Запрос.Выполнить().Выбрать();
		
	КонецФункции
	
	Функция ОбновитьДанныеДокумента(ДокументСсылка, DocumentDate, DocumentNumber) Экспорт
		
		Результат=	Новый Структура("ДанныеОбновлены, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ИзмененыДатаИНомер=		Ложь;
		ИзмененыМеткиПолучения=	Ложь;
		КраткоеНаименованиеСистемыРодительныйПадеж= МетодСервера(,"ПолучитьСловарь").КраткоеНаименованиеСистемыРодительныйПадеж;
		
		Если НЕ Метаданные.Документы.Найти("ПоступлениеТоваровУслуг") = Неопределено
			И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			Если НЕ НачалоДня(ДокументСсылка.ДатаВходящегоДокумента) = НачалоДня(DocumentDate) ИЛИ НЕ СокрЛП(ДокументСсылка.НомерВходящегоДокумента) = СокрЛП(DocumentNumber) Тогда
				ИзмененыДатаИНомер= ОбновитьМеткиДокумента(ДокументСсылка, "ДатаВходящегоДокумента", "НомерВходящегоДокумента", DocumentDate, DocumentNumber);
				Если НЕ ИзмененыДатаИНомер Тогда
					Результат.ОписаниеОшибки= "Входящий номер или дата в документе 1С не совпадают с номером или датой сопоставляемого документа из "+КраткоеНаименованиеСистемыРодительныйПадеж+"!";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ Метаданные.Документы.Найти("ПоступлениеДопРасходов") = Неопределено
			И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			
			Если НЕ НачалоДня(ДокументСсылка.ДатаВходящегоДокумента) = НачалоДня(DocumentDate) ИЛИ НЕ СокрЛП(ДокументСсылка.НомерВходящегоДокумента) = СокрЛП(DocumentNumber) Тогда
				ИзмененыДатаИНомер= ОбновитьМеткиДокумента(ДокументСсылка, "ДатаВходящегоДокумента", "НомерВходящегоДокумента", DocumentDate, DocumentNumber);
				Если НЕ ИзмененыДатаИНомер Тогда
					Результат.ОписаниеОшибки= "Входящий номер или дата в документе 1С не совпадают с номером или датой сопоставляемого документа из "+КраткоеНаименованиеСистемыРодительныйПадеж+"!";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ Метаданные.Документы.Найти("ПоступлениеУслугПрочихАктивов") = Неопределено
			И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда
			
			Если НЕ НачалоДня(ДокументСсылка.ДатаВходящегоДокумента) = НачалоДня(DocumentDate) ИЛИ НЕ СокрЛП(ДокументСсылка.НомерВходящегоДокумента) = СокрЛП(DocumentNumber) Тогда
				ИзмененыДатаИНомер= ОбновитьМеткиДокумента(ДокументСсылка, "ДатаВходящегоДокумента", "НомерВходящегоДокумента", DocumentDate, DocumentNumber);
				Если НЕ ИзмененыДатаИНомер Тогда
					Результат.ОписаниеОшибки= "Входящий номер или дата в документе 1С не совпадают с номером или датой сопоставляемого документа из "+КраткоеНаименованиеСистемыРодительныйПадеж+"!";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ Метаданные.Документы.Найти("ПоступлениеМЗ") = Неопределено
			И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеМЗ") Тогда
			
			Если НЕ НачалоДня(ДокументСсылка.ДатаПервичногоДокумента) = НачалоДня(DocumentDate) ИЛИ НЕ СокрЛП(ДокументСсылка.НомерПервичногоДокумента) = СокрЛП(DocumentNumber) Тогда
				ИзмененыДатаИНомер= ОбновитьМеткиДокумента(ДокументСсылка, "ДатаПервичногоДокумента", "НомерПервичногоДокумента", DocumentDate, DocumentNumber);
				Если НЕ ИзмененыДатаИНомер Тогда
					Результат.ОписаниеОшибки= "Входящий номер или дата в документе 1С не совпадают с номером или датой сопоставляемого документа из "+КраткоеНаименованиеСистемыРодительныйПадеж+"!";
				КонецЕсли;			
			КонецЕсли;
			
		ИначеЕсли  ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				ДатаВходящегоДокумента=		ДокументСсылка.Дата;
				НомерВходящегоДокумента=	ДокументСсылка.Номер;
			ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				ДатаВходящегоДокумента=		ДокументСсылка.ДатаВходящегоДокумента;
				НомерВходящегоДокумента=	ДокументСсылка.НомерВходящегоДокумента;
			ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				ДатаВходящегоДокумента=		ДокументСсылка.ДатаПервичногоДокумента;
				НомерВходящегоДокумента=	ДокументСсылка.НомерПервичногоДокумента;
			ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				ДатаВходящегоДокумента=		ДокументСсылка.ДатаВходящегоДокумента;
				НомерВходящегоДокумента=	ДокументСсылка.НомерВходящегоДокумента;
			КонецЕсли;
			
			Если НЕ НачалоДня(ДатаВходящегоДокумента) = НачалоДня(DocumentDate) ИЛИ НЕ СокрЛП(НомерВходящегоДокумента) = СокрЛП(DocumentNumber) Тогда
				Результат.ОписаниеОшибки= "Входящий номер или дата в документе 1С не совпадают с номером или датой сопоставляемого документа из "+КраткоеНаименованиеСистемыРодительныйПадеж+"!";
			КонецЕсли;
			ИзмененыМеткиПолучения=	ОбновитьМеткуПолученияВЭлектронномВиде(ДокументСсылка);
			
		КонецЕсли;
		
		Результат.ДанныеОбновлены= (ИзмененыДатаИНомер ИЛИ ИзмененыМеткиПолучения);
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ОбновитьМеткиДокумента(ДокументСсылка, РеквизитДата, РеквизитНомер, DocumentDate, DocumentNumber) Экспорт
		
		ВсеОк=	Ложь;
		
		Попытка
			ДокументОбъект=					ДокументСсылка.ПолучитьОбъект();
			
			ДокументОбъект[РеквизитДата]=	DocumentDate;
			ДокументОбъект[РеквизитНомер]= 	DocumentNumber;
			ДокументОбъект.Записать();
			
			ТекстСообщения=	"";
			ВсеОк=	Истина;
		Исключение
			ТекстСообщения=	"Не удалось изменить реквизиты: номер и дата входящего документа у документа: " + ДокументСсылка + Символы.ПС + ОписаниеОшибки();
			ВсеОк=	Ложь;
		КонецПопытки;
		
		Если НЕ ТекстСообщения = "" Тогда
			СообщениеПользователю=			Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	ТекстСообщения;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		Возврат ВсеОк;
		
	КонецФункции
	
	Функция ОбновитьМеткуПолученияВЭлектронномВиде(СчетФактура) Экспорт
		
		ВсеОк=				Ложь;
		ЗаписатьДокумент=	Ложь;
		
		ОбъектСФ=	СчетФактура.ПолучитьОбъект();
		//УТ
		Если НЕ ОбъектСФ.Метаданные().Реквизиты.Найти("ПолученВЭлектронномВиде") = Неопределено тогда
			Если ОбъектСФ.ПолученВЭлектронномВиде = Ложь Тогда
				ОбъектСФ.ПолученВЭлектронномВиде=	Истина;
				ЗаписатьДокумент=					Истина;
			КонецЕсли;
			//БП
		ИначеЕсли НЕ ОбъектСФ.Метаданные().Реквизиты.Найти("КодСпособаПолучения") = Неопределено тогда 
			Если НЕ ОбъектСФ.КодСпособаПолучения = 2 Тогда
				ОбъектСФ.КодСпособаПолучения=	2;
				ЗаписатьДокумент=				Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписатьДокумент Тогда
			
			Попытка
				Если ОбъектСФ.Проведен Тогда
					ОбъектСФ.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ОбъектСФ.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				ТекстСообщения=	"";
				ВсеОк=			Истина;
			Исключение
				ТекстСообщения=	"Не удалось изменить реквизит документа: ""Получен в электронном виде"" у документа" + СчетФактура + Символы.ПС + ОписаниеОшибки();
				ВсеОк=			Ложь;
			КонецПопытки;
			
			Если НЕ ТекстСообщения = "" Тогда
				СообщениеПользователю=			Новый СообщениеПользователю;
				СообщениеПользователю.Текст=	ТекстСообщения;
				СообщениеПользователю.Сообщить();
			КонецЕсли;
			
			Возврат ВсеОк;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьСтавкуНДСДиадок(Знач TaxRate) Экспорт
		
		TaxRate= Лев(TaxRate, 2);
		TaxRate= СтрЗаменить(TaxRate, "%", "");
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			
			Если TaxRate = "10" Тогда
				Возврат Справочники.СтавкиНДС.НайтиПоНаименованию("10%", Истина);
			ИначеЕсли TaxRate = "18" Тогда
				Возврат Справочники.СтавкиНДС.НайтиПоНаименованию("18%", Истина);
			ИначеЕсли TaxRate = "0" Тогда
				Возврат Справочники.СтавкиНДС.НайтиПоНаименованию("0%", Истина);
			КонецЕсли;
			
		Иначе
			
			Если TaxRate = "10" Тогда
				Возврат Перечисления.СтавкиНДС.НДС10;
			ИначеЕсли TaxRate = "18" Тогда
				Возврат Перечисления.СтавкиНДС.НДС18;
			ИначеЕсли TaxRate = "0" Тогда
				Возврат Перечисления.СтавкиНДС.НДС0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьЕдиницуИзмерения(КодЕИ, НаименованиеЕИ, Номенклатура) Экспорт
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Запрос= Новый Запрос(
			"ВЫБРАТЬ
			|	Т.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ЕдиницыИзмерения КАК Т
			|ГДЕ
			|	Т.Наименование = &Наименование
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка
			|ИЗ
			|	Справочник.ЕдиницыИзмерения КАК Т
			|ГДЕ
			|	Т.Код = &Код
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)");
			
			Запрос.УстановитьПараметр("Наименование", НаименованиеЕИ);
			Запрос.УстановитьПараметр("Код", КодЕИ);

			Если МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.УпаковкиЕдиницыИзмерения") Тогда
				Запрос.Текст= СтрЗаменить(Запрос.Текст, "Справочник.ЕдиницыИзмерения", "Справочник.УпаковкиЕдиницыИзмерения");
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
			
		Иначе
			
			Выборка = Справочники.КлассификаторЕдиницИзмерения.Выбрать(,, Новый Структура("Наименование", НаименованиеЕИ));
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
			
			Выборка = Справочники.КлассификаторЕдиницИзмерения.Выбрать(,, Новый Структура("Код", КодЕИ));
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
			
			Возврат Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьСписокВидовДоговоров(ДоговораПродажи= Ложь) Экспорт
		
		//Закладка делал вид операции
		СписокВидовДоговоров=	Новый СписокЗначений;
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком"), "С поставщиком");
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентом"), "С комитентом");
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером"), "С комиссионером");
			
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Если ДоговораПродажи Тогда 
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"), "С покупателем");
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"), "С комиссионером (агентом) на продажу");
			Иначе 	
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"), "С поставщиком");
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"), "С комитентом (принципалом) на продажу");
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"), "С комиссионером (агентом) на закупку");
			КонецЕсли;
			
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПоставщиком"), 		"С поставщиком");
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомитентом"), 		"С комитентом");
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомиссионером"), 	"С комиссионером");
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПокупателем"), 		"С покупателем");
			
		Иначе
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"), "С поставщиком");
		КонецЕсли;
		
		Возврат	СписокВидовДоговоров;
		
	КонецФункции
	
	Функция ПолучитьСписокАссоциированныхКонтрагентовДиадок() Экспорт
		
		Запрос = новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ  различные
		|	ДополнительныеСведения.Объект как Контрагент
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект  ССЫЛКА Справочник.Контрагенты
		|	И ДополнительныеСведения.Значение <> """"
		|	И ПОДСТРОКА(ДополнительныеСведения.Свойство.Наименование, 1, " 
		+ СтрДлина(ИдентификаторСвойстваЯщикКонтрагентаПрефикс()) 
		+ ") = &НаименованиеСвойстваПрефикс";
		Запрос.УстановитьПараметр("НаименованиеСвойстваПрефикс", ИдентификаторСвойстваЯщикКонтрагентаПрефикс());
		мас = запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
		сп = новый СписокЗначений;
		сп.ЗагрузитьЗначения(мас);
		
		Возврат сп;
		
	КонецФункции
	
//} ИНТЕГРАЦИЯ

//{ УПРАВЛЕНИЕ НАСТРОЙКАМИ
	
	Функция ПолучитьВозможныеПланыОбменаДляПередачиНастроекПользователяИСвойствОбъектов()
		
		НеобходимыеДляРаботыПВХ = ПолучитьНеобходимыеДляРаботыПВХ();
		
		ВозможныеПланыОбмена = Новый Массив;
		Для каждого ПланОбмена Из ПланыОбмена Цикл
			ПланОбменаСодержитВсеНеобходимыеТипы = Истина;
			Для каждого необходимыйТип Из НеобходимыеДляРаботыПВХ Цикл
				Если НЕ планОбмена.ПолучитьСсылку().Метаданные().Состав.Содержит(необходимыйТип) Тогда
					ПланОбменаСодержитВсеНеобходимыеТипы = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПланОбменаСодержитВсеНеобходимыеТипы Тогда
				ВозможныеПланыОбмена.Добавить(ПланОбмена);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ВозможныеПланыОбмена;
		
	КонецФункции
	
	Функция ПолучитьНастройкиПользователя(МассивНаименованийНастроек) Экспорт
		
		//На входе массив
		Результат = Новый Структура;
		Для Каждого Наименование из МассивНаименованийНастроек Цикл
			Настройка = ПолучитьНастройкуПользователя(Наименование);
			Результат.Вставить(Наименование, Настройка);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПолучитьНастройкуПользователя(Наименование) Экспорт
		
		Если ПустаяСтрока(Наименование) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НастройкаСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Наименование);
		Если НЕ ЗначениеЗаполнено(НастройкаСсылка) тогда 
			Возврат Неопределено;
		КонецЕсли; 
		
		МЗ = ПолучитьМЗНастройкиПОльзователя(ПолучитьТекущегоПользователя(), НастройкаСсылка);
		Если МЗ.Выбран() Тогда
			Возврат МЗ.Значение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции
	
	Функция УстановитьНастройкиПользователей(СтруктураНастроек) Экспорт
		
		Для Каждого Стр из СтруктураНастроек Цикл
			УстановитьНастройкуПользователя(Стр.Ключ, Стр.Значение);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецФункции
	
	Процедура УстановитьНастройкуПользователя(Наименование, Значение) Экспорт
		
		Если ПустаяСтрока(Наименование) Тогда
			Возврат;
		КонецЕсли;
		
		НастройкаСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Наименование);
		Если НЕ ЗначениеЗаполнено(НастройкаСсылка) тогда 
			
			Если ПустаяСтрока(Значение) Тогда
				Возврат;
			КонецЕсли;
			
			ВызватьИсключение "Запись настройки пользователя:""" + Наименование + """ невозможна. Настройка не создана";
			
		КонецЕсли; 
		
		МЗ = ПолучитьМЗНастройкиПОльзователя(ПолучитьТекущегоПользователя(), НастройкаСсылка);
		Если НЕ МЗ.Выбран() Тогда
			МЗ.Объект = ПолучитьТекущегоПользователя();
			МЗ.Свойство = НастройкаСсылка;
		КонецЕсли;
		МЗ.Значение = Значение;
		МЗ.Записать();
		
	КонецПроцедуры
	
	Функция ПроверитьНаличиеНастроекПользователя(ВозможныеНастройкиПользователя) Экспорт
		
		НенайденныеНастройки = Новый Массив;
		Для каждого ОписаниеНастройки Из ВозможныеНастройкиПользователя Цикл
			Если НайтиСвойство(ОписаниеНастройки.Ключ) = Неопределено Тогда
				НенайденныеНастройки.Добавить(ОписаниеНастройки);
			КонецЕсли;
		КонецЦикла;
		
		Возврат НенайденныеНастройки;
		
	КонецФункции
	
	Функция ПолучитьМЗНастройкиПОльзователя(Пользователь, НастройкаСсылка)
		
		МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МЗ.Объект = Пользователь;
		МЗ.Свойство = НастройкаСсылка;
		МЗ.Прочитать();
		
		Возврат МЗ;
		
	КонецФункции
	
	Функция ПолучитьИЛИСоздатьГруппуНастроекПользователя_Диадок()   Экспорт
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		ГруппаНастроекСсылка= планыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Параметры подсистемы " + ВРег(СловарьWL.НаименованиеСистемы));
		
		Если ЗначениеЗаполнено(ГруппаНастроекСсылка) Тогда 
			Возврат ГруппаНастроекСсылка;
		КонецЕсли;
		
		ГруппаНастроекОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьГруппу();
		ГруппаНастроекОбъект.Наименование =  "Параметры подсистемы " + ВРег(СловарьWL.НаименованиеСистемы);
		ГруппаНастроекОбъект.УстановитьНовыйКод();
		ГруппаНастроекОбъект.Записать();
		
		Возврат ГруппаНастроекОбъект.Ссылка;
		
	КонецФункции
	
	Функция ПолучитьНастройкиПрокси() Экспорт
		
		МассивНаименованийНастроек= Новый Массив;
		МассивНаименованийНастроек.Добавить("ДиадокНастройкиПрокси");
		МассивНаименованийНастроек.Добавить("ДиадокАдресПроксиСервера");
		МассивНаименованийНастроек.Добавить("ДиадокПользовательПроксиСервера");
		МассивНаименованийНастроек.Добавить("ДиадокПарольПроксиСервера");
		
		НастройкиПрокси= ПолучитьНастройкиПользователя(МассивНаименованийНастроек);
		
		Возврат Новый Структура("ВариантИспользования, Адрес, Логин, Пароль",
		?(ЗначениеЗаполнено(НастройкиПрокси.ДиадокНастройкиПрокси), НастройкиПрокси.ДиадокНастройкиПрокси, "ИспользоватьНастройкиIE"),
		НастройкиПрокси.ДиадокАдресПроксиСервера,
		НастройкиПрокси.ДиадокПользовательПроксиСервера,
		НастройкиПрокси.ДиадокПарольПроксиСервера);
		
	КонецФункции
	
	Процедура УстановитьНастройкиПрокси(НастройкиПрокси) Экспорт
		
		УстановитьНастройкуПользователя("ДиадокНастройкиПрокси", НастройкиПрокси.ВариантИспользования);
		
		Если НастройкиПрокси.ВариантИспользования = "ИспользоватьПроксиСервер" Тогда
			УстановитьНастройкуПользователя("ДиадокАдресПроксиСервера", 		НастройкиПрокси.Адрес);
			УстановитьНастройкуПользователя("ДиадокПользовательПроксиСервера", 	НастройкиПрокси.Логин);
			УстановитьНастройкуПользователя("ДиадокПарольПроксиСервера", 		НастройкиПрокси.Пароль);
		Иначе 
			УстановитьНастройкуПользователя("ДиадокАдресПроксиСервера"		 , "");
			УстановитьНастройкуПользователя("ДиадокПользовательПроксиСервера", "");
			УстановитьНастройкуПользователя("ДиадокПарольПроксиСервера"		 , "");
		КонецЕсли;
		
	КонецПроцедуры	
	
//} УПРАВЛЕНИЕ НАСТРОЙКАМИ

//{ УПРАВЛЕНИЕ СВОЙСТВАМИ
	
	функция ПолучитьНазначениеСвойстваСтрокой(СвойствоСтрокой)
		Назначение =   ПолучитьВозможныеСвойстваОбъектов()[СвойствоСтрокой];
		
		если (назначение = неопределено) и (найти(СвойствоСтрокой, "ДДНомКонтр_") = 0 ) тогда
			вызватьИсключение("Неизвестное свойство объекта "+СвойствоСтрокой);
		КонецЕсли;
		
		возврат Назначение;
	КонецФункции	

	Функция СвойстваОбъектов_НайтиОбъектыПоТЗ(ТаблицаПараметров) Экспорт
		//на входе  массив структур
		Результат = Новый Массив;
		
		Сч = 0;
		Пока Сч < ТаблицаПараметров.Количество() Цикл
			Стр = ТаблицаПараметров[Сч];
			Если ПустаяСтрока(Стр.НаименованиеСвойства) ИЛИ ПустаяСтрока(Стр.НаименованиеСвойства2) Тогда
				ТаблицаПараметров.Удалить(Стр);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПараметров.НаименованиеСвойства КАК НаименованиеСвойства,
		|	ТаблицаПараметров.ЗначениеСвойства КАК ЗначениеСвойства,
		|	ТаблицаПараметров.НаименованиеСвойства2 КАК НаименованиеСвойства2,
		|	ТаблицаПараметров.ЗначениеСвойства2 КАК ЗначениеСвойства2
		|ПОМЕСТИТЬ НаименованияИЗначенияСвойств
		|ИЗ
		|	&ТаблицаПараметров КАК ТаблицаПараметров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеСвойства2,
		|	НаименованиеСвойства2,
		|	ЗначениеСвойства,
		|	НаименованиеСвойства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК СвойствоСсылка,
		|	ТаблицаПараметров.ЗначениеСвойства КАК ЗначениеСвойства,
		|	ДополнительныеРеквизитыИСведения2.Ссылка КАК СвойствоСсылка2,
		|	ТаблицаПараметров.ЗначениеСвойства2 КАК ЗначениеСвойства2
		|ПОМЕСТИТЬ СсылкиНаСвойстваИЗначенияСвойств
		|ИЗ
		|	НаименованияИЗначенияСвойств КАК ТаблицаПараметров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|		ПО ТаблицаПараметров.НаименованиеСвойства = ДополнительныеРеквизитыИСведения.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения2
		|		ПО ТаблицаПараметров.НаименованиеСвойства2 = ДополнительныеРеквизитыИСведения2.Наименование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СвойствоСсылка,
		|	ЗначениеСвойства2,
		|	СвойствоСсылка2,
		|	ЗначениеСвойства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеСведения.Объект КАК Объект
		|ПОМЕСТИТЬ ОбъектыПоСвойству1
		|ИЗ
		|	СсылкиНаСвойстваИЗначенияСвойств КАК СсылкиНаСвойстваИЗначенияСвойств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО СсылкиНаСвойстваИЗначенияСвойств.СвойствоСсылка = ДополнительныеСведения.Свойство
		|			И СсылкиНаСвойстваИЗначенияСвойств.ЗначениеСвойства = ДополнительныеСведения.Значение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеСведения.Объект КАК Объект
		|ПОМЕСТИТЬ ОбъектыПоСвойству2
		|ИЗ
		|	СсылкиНаСвойстваИЗначенияСвойств КАК СсылкиНаСвойстваИЗначенияСвойств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО СсылкиНаСвойстваИЗначенияСвойств.СвойствоСсылка2 = ДополнительныеСведения.Свойство
		|			И СсылкиНаСвойстваИЗначенияСвойств.ЗначениеСвойства2 = ДополнительныеСведения.Значение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыПоСвойству1.Объект
		|ИЗ
		|	ОбъектыПоСвойству1 КАК ОбъектыПоСвойству1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыПоСвойству2 КАК ОбъектыПоСвойству2
		|		ПО ОбъектыПоСвойству1.Объект = ОбъектыПоСвойству2.Объект";
		
		Запрос.УстановитьПараметр("ТаблицаПараметров",ТаблицаПараметров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Объект);
		КонецЦикла;

		Возврат Результат;
	КонецФункции
	
	Функция СвойстваОбъектов_НайтиОбъект(НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2= Неопределено, ЗначениеСвойства2= Неопределено) Экспорт
		Если ЗначениеЗаполнено(НаименованиеСвойства2) тогда 
			Возврат НайтиОбъект(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства, НаименованиеСвойства2, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства2),  ЗначениеСвойства2);
		Иначе 
			Возврат НайтиОбъект(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства);
		КонецЕсли;
	КонецФункции

	Функция СвойстваОбъектов_НайтиМассивОбъектов(НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2= Неопределено, ЗначениеСвойства2= Неопределено) Экспорт
		
		Если ЗначениеЗаполнено(НаименованиеСвойства2) Тогда
			Возврат НайтиМассивОбъектов(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства, НаименованиеСвойства2, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства2),  ЗначениеСвойства2);
		Иначе 
			Возврат НайтиМассивОбъектов(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства);
		КонецЕсли;
		
	КонецФункции
	
	Функция НайтиОбъект(НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2= Неопределено, НазначениеСвойстваСтрокой2= Неопределено, ЗначениеСвойства2= Неопределено) Экспорт
		Если ПустаяСтрока(НаименованиеСвойства) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НаименованиеСвойства2 <> Неопределено 
			И ПустаяСтрока(НаименованиеСвойства2) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НаименованиеСвойства2) Тогда
			СвойствоСсылка2 = НайтиСвойство(НаименованиеСвойства2);
			Если Не ЗначениеЗаполнено(СвойствоСсылка2) Тогда
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			СвойствоСсылка2 = Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Если ЗначениеЗаполнено(СвойствоСсылка2) Тогда
			Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
			Запрос.УстановитьПараметр("Значение", Строка(ЗначениеСвойства));
			Запрос.УстановитьПараметр("Свойство2", СвойствоСсылка2);
			Запрос.УстановитьПараметр("Значение2", Строка(ЗначениеСвойства2));
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	З.Объект,
			|	З.Значение2
			|ИЗ
			|(
			|	ВЫБРАТЬ
			|		ЗначенияСвойств.Объект,
			|		ЕСТЬNULL(ЗначенияСвойств2.Значение, """") Значение2
			|	ИЗ
			|		РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств2
			|		ПО
			|			ЗначенияСвойств.Объект = ЗначенияСвойств2.Объект
			|			И ЗначенияСвойств2.Свойство = &Свойство2
			|		ГДЕ
			|			ЗначенияСвойств.Свойство = &Свойство
			|			И ЗначенияСвойств.Значение = &Значение
			|) З
			|ГДЕ
			|	З.Значение2 = &Значение2";
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ЗначенияСвойств.Объект
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств
			|ГДЕ
			|	ЗначенияСвойств.Свойство = &Свойство
			|	И ЗначенияСвойств.Значение = &Значение";
			Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
			Запрос.УстановитьПараметр("Значение", ЗначениеСвойства);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Возврат ?(Выборка.Следующий(), Выборка.Объект, Неопределено);
	КонецФункции
	
	Функция НайтиМассивОбъектов(НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2= Неопределено, НазначениеСвойстваСтрокой2= Неопределено, ЗначениеСвойства2= Неопределено) Экспорт
		
		Если ПустаяСтрока(НаименованиеСвойства) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НаименованиеСвойства2 <> Неопределено 
			И ПустаяСтрока(НаименованиеСвойства2) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НаименованиеСвойства2) Тогда
			СвойствоСсылка2 = НайтиСвойство(НаименованиеСвойства2);
			Если Не ЗначениеЗаполнено(СвойствоСсылка2) Тогда
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			СвойствоСсылка2 = Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Если ЗначениеЗаполнено(СвойствоСсылка2) Тогда
			Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
			Запрос.УстановитьПараметр("Значение", Строка(ЗначениеСвойства));
			Запрос.УстановитьПараметр("Свойство2", СвойствоСсылка2);
			Запрос.УстановитьПараметр("Значение2", Строка(ЗначениеСвойства2));
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	З.Объект,
			|	З.Значение2
			|ИЗ
			|(
			|	ВЫБРАТЬ
			|		ЗначенияСвойств.Объект,
			|		ЕСТЬNULL(ЗначенияСвойств2.Значение, """") Значение2
			|	ИЗ
			|		РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств2
			|		ПО
			|			ЗначенияСвойств.Объект = ЗначенияСвойств2.Объект
			|			И ЗначенияСвойств2.Свойство = &Свойство2
			|		ГДЕ
			|			ЗначенияСвойств.Свойство = &Свойство
			|			И ЗначенияСвойств.Значение = &Значение
			|) З
			|ГДЕ
			|	З.Значение2 = &Значение2";
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ЗначенияСвойств.Объект
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств
			|ГДЕ
			|	ЗначенияСвойств.Свойство = &Свойство
			|	И ЗначенияСвойств.Значение = &Значение";
			Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
			Запрос.УстановитьПараметр("Значение", ЗначениеСвойства);
		КонецЕсли;
		
		ТаблицаДанных= Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаДанных.ВыгрузитьКолонку("Объект");
		
	КонецФункции
	
	Процедура УстановитьПравильноеЗначениеФормироватьСчетНаОсновании(МассивПереписанныхСвойств)
		
		СвойствоСсылка=	НайтиСвойство(ИдентификаторСвойстваФормироватьСчетНаОсновании());
		Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			НаборНеправильныхНастроек=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборНеправильныхНастроек.Отбор.Свойство.Установить(СвойствоСсылка);
			НаборНеправильныхНастроек.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборНеправильныхНастроек Цикл
				Если ТипЗнч(ЗаписьНабора.Значение) = Тип("Число") Тогда
					Продолжить;
				Иначе
					МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МЗ.Объект=		ЗаписьНабора.Объект;
					МЗ.Свойство=	ЗаписьНабора.Свойство;
					Если ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
						Если ВРег(ЗаписьНабора.Значение) = "СЧЕТНАОПЛАТУ" Тогда
							МЗ.Значение=	0;
						ИначеЕсли ВРег(ЗаписьНабора.Значение) = "РЕАЛИЗАЦИЯТОВАРОВ" Тогда
							МЗ.Значение=	1;
						ИначеЕсли ВРег(ЗаписьНабора.Значение) = "НЕФОРМИРОВАТЬ" Тогда
							МЗ.Значение=	2;
						КонецЕсли;
					Иначе
						МЗ.Значение=	0;
					КонецЕсли;
					МЗ.Записать();
					
					МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура УстановитьПравильноеЗначениеСвойстваТипаБулево(МассивПереписанныхСвойств, СвойствоСсылка)
		
		Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			НаборНеправильныхНастроек=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборНеправильныхНастроек.Отбор.Свойство.Установить(СвойствоСсылка);
			НаборНеправильныхНастроек.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборНеправильныхНастроек Цикл
				Если ТипЗнч(ЗаписьНабора.Значение) = Тип("Булево") Тогда
					Продолжить;
				Иначе
					МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МЗ.Объект=		ЗаписьНабора.Объект;
					МЗ.Свойство=	ЗаписьНабора.Свойство;
					Если ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
						Если ВРег(ЗаписьНабора.Значение) = "ДА" Тогда
							МЗ.Значение=	Истина;
						Иначе
							МЗ.Значение=	Ложь;
						КонецЕсли;
					Иначе
						МЗ.Значение=	Ложь;
					КонецЕсли;
					МЗ.Записать();
					
					МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ОбновитьЗначениеСвойстваДиадокВнешняяПечатнаяФормаАкта(МассивПереписанныхСвойств)
		
		СвойствоСсылка=	НайтиСвойство(ИдентификаторСвойстваВнешняяПечатнаяФормаАкта());
		Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			НаборНеправильныхНастроек=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборНеправильныхНастроек.Отбор.Свойство.Установить(СвойствоСсылка);
			НаборНеправильныхНастроек.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборНеправильныхНастроек Цикл
				
				НеобходимоЗаписать= Ложь;
				Если ЗначениеЗаполнено(ЗаписьНабора.Значение)
					И ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
					
					Попытка
						УИНПечатнойФормыАкта= Новый УникальныйИдентификатор(ЗаписьНабора.Значение);
					Исключение
						УИНПечатнойФормыАкта= Неопределено;
					КонецПопытки;
					
					Если УИНПечатнойФормыАкта = Неопределено Тогда
						ЗначениеМенеджера= "";
						НеобходимоЗаписать= Истина;
					Иначе
						ВнешняяПечатнаяФорма= Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(УИНПечатнойФормыАкта);
						Если ВнешняяПечатнаяФорма.ПолучитьОбъект() = Неопределено Тогда
							ЗначениеМенеджера= "";
							НеобходимоЗаписать= Истина;	
						КонецЕсли;
					КонецЕсли;
															
				ИначеЕсли НЕ ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
					
					ЗначениеМенеджера= "";
					НеобходимоЗаписать= Истина;
					
				КонецЕсли;
				
				Если НеобходимоЗаписать = Истина Тогда
					
					МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МЗ.Объект=		ЗаписьНабора.Объект;
					МЗ.Свойство=	ЗаписьНабора.Свойство;
					МЗ.Значение=	"";
					МЗ.Записать();
					
					МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
				КонецЕсли;
								
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ОбновитьЗначениеСвойстваДиадокВнешняяПечатнаяФормаСчета(МассивПереписанныхСвойств)
		
		СвойствоСсылка=	НайтиСвойство(ИдентификаторСвойстваВнешняяПечатнаяФормаСчета());
		Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			НаборНеправильныхНастроек=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборНеправильныхНастроек.Отбор.Свойство.Установить(СвойствоСсылка);
			НаборНеправильныхНастроек.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборНеправильныхНастроек Цикл
				
				МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				МЗ.Объект=		ЗаписьНабора.Объект;
				МЗ.Свойство=	ЗаписьНабора.Свойство;
				Если ЗначениеЗаполнено(ЗаписьНабора.Значение)
					И ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
					
					ВнешняяПечатнаяФорма=	Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗаписьНабора.Значение));
					Если ВнешняяПечатнаяФорма.ПолучитьОбъект() = Неопределено Тогда
						МЗ.Значение=	"";
						МЗ.Записать();
						МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					КонецЕсли;
					
				ИначеЕсли НЕ ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
					
					МЗ.Значение=	"";
					МЗ.Записать();
					МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ПолучитьЗначениеСвойства(Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой= "") Экспорт
		Если НЕ ЗначениеЗаполнено(Объект) ИЛИ ПустаяСтрока(НаименованиеСвойства) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МЗ = ПолучитьМЗСвойстваОбъектов(Объект, СвойствоСсылка);
		Если МЗ.Выбран() Тогда
			Возврат МЗ.Значение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецФункции

	Функция ПолучитьМЗСвойстваОбъектов(Объект, СвойствоСсылка) Экспорт
		
		МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МЗ.Объект = Объект;
		МЗ.Свойство = СвойствоСсылка;
		МЗ.Прочитать();
		
		Возврат МЗ;
		
	КонецФункции

	Функция НайтиПодобныеСвойства(Наименование) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Свойства.Ссылка Свойство
			|ИЗ
			|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
			|ГДЕ
			|	Свойства.Наименование ПОДОБНО &ПодобноеНаименованиеСвойства
			|	И НЕ Свойства.Наименование = &НаименованиеСвойства";
		
		Запрос.УстановитьПараметр("ПодобноеНаименованиеСвойства", Наименование + " (%)");
		Запрос.УстановитьПараметр("НаименованиеСвойства", Наименование);
		ТаблицаСвойств= Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаСвойств;
		
	КонецФункции
	
	Функция НайтиСвойство(Наименование) Экспорт
		
		Свойство= МетодСервера(,"НайтиСвойствоПовтИсп", Наименование);
		
		Если Свойство = Неопределено Тогда
			МетодСервера(,"ПовторноеИспользованиеСброситьЗначение",,"НайтиСвойствоПовтИсп", Наименование);
		КонецЕсли;
		
		Свойство= МетодСервера(,"НайтиСвойствоПовтИсп", Наименование);
		
		Возврат Свойство;
		
	КонецФункции
	
	Функция НайтиСвойствоПовтИсп(Наименование) Экспорт
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	Т.Ссылка КАК Ссылка,
		|	1 КАК Порядок
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Т
		|ГДЕ
		|	Т.Наименование = &Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	2
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок");
		
		//В запросе явно указан порядок - для совместимости с IBM DB2: при выполнении запроса, "Неопределено" - автоматом будет первой записью в выборке
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		Выборка= Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 3 Тогда
			ВызватьИсключение "В плане видов характеристик ""Дополнительные реквизиты и сведения"" обнаружено несколько свойств с одинаковым наименованием """ + Наименование + """!";
		КонецЕсли;
		
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;

	КонецФункции
		
	
	Функция НайтиСвойстваПоСтруктуре(СтруктураСвойствОбъектов)
		
		ТаблицаСвойствОбъектов 	= ПреобразоватьСтруктуруВТаблицу(СтруктураСвойствОбъектов);
		ТаблицаДопРеквизитов 	= Новый ТаблицаЗначений;
		
		ТаблицаДопРеквизитов.Колонки.Добавить("Наименование");
		ТаблицаДопРеквизитов.Колонки.Добавить("Ссылка");
		
		Если ТаблицаСвойствОбъектов.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаСвойствОбъектов.Ключ КАК Ключ,
			|	ТаблицаСвойствОбъектов.Значение КАК Значение
			|ПОМЕСТИТЬ ТаблицаСвойствОбъектов
			|ИЗ
			|	&ТаблицаСвойствОбъектов КАК ТаблицаСвойствОбъектов
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Значение,
			|	Ключ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДополнительныеРеквизитыИСведения.Ссылка,
			|	ДополнительныеРеквизитыИСведения.Наименование
			|ИЗ
			|	ТаблицаСвойствОбъектов КАК ТаблицаСвойствОбъектов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|		ПО ТаблицаСвойствОбъектов.Ключ = ДополнительныеРеквизитыИСведения.Наименование";
			
			Запрос.УстановитьПараметр("ТаблицаСвойствОбъектов",ТаблицаСвойствОбъектов);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Строка = ТаблицаДопРеквизитов.Добавить();
				
				Строка.Наименование = Выборка.Наименование;
				Строка.Ссылка = Выборка.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат ТаблицаДопРеквизитов;
	
	КонецФункции // ()
	
	Функция НайтиПодобныеСвойстваПоСтруктуре(СтруктураСвойствОбъектов)
	
		ТаблицаСвойствОбъектов 	= ПреобразоватьСтруктуруВТаблицу(СтруктураСвойствОбъектов);
		ТаблицаДопРеквизитов 	= Новый ТаблицаЗначений;
		
		ТаблицаДопРеквизитов.Колонки.Добавить("Наименование");
		ТаблицаДопРеквизитов.Колонки.Добавить("НаименованиеПодобногоСвойства");
		ТаблицаДопРеквизитов.Колонки.Добавить("ПодобноеСвойствоСсылка");
		
		Если ТаблицаСвойствОбъектов.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаСвойствОбъектов.Ключ КАК НаименованиеСвойства,
			|	ТаблицаСвойствОбъектов.Ключ + "" (%)"" КАК НаименованиеПодобногоСвойства
			|ПОМЕСТИТЬ ТаблицаСвойствОбъектов
			|ИЗ
			|	&ТаблицаСвойствОбъектов КАК ТаблицаСвойствОбъектов
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НаименованиеПодобногоСвойства,
			|	НаименованиеСвойства
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаСвойствОбъектов.НаименованиеСвойства,
			|	ТаблицаСвойствОбъектов.НаименованиеПодобногоСвойства,
			|	ДополнительныеРеквизитыИСведения.Ссылка КАК ПодобноеСвойствоСсылка
			|ИЗ
			|	ТаблицаСвойствОбъектов КАК ТаблицаСвойствОбъектов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|		ПО (ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО ТаблицаСвойствОбъектов.НаименованиеПодобногоСвойства)
			|			И (НЕ ДополнительныеРеквизитыИСведения.Наименование = ТаблицаСвойствОбъектов.НаименованиеСвойства)";
			
			Запрос.УстановитьПараметр("ТаблицаСвойствОбъектов",ТаблицаСвойствОбъектов);

			Попытка
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					Строка = ТаблицаДопРеквизитов.Добавить();
					
					Строка.Наименование 					= Выборка.НаименованиеСвойства;
					Строка.НаименованиеПодобногоСвойства 	= Выборка.НаименованиеПодобногоСвойства;
					Строка.ПодобноеСвойствоСсылка 			= Выборка.ПодобноеСвойствоСсылка;
				КонецЦикла;
				
			Исключение
				
				ТекстОшибки = ОписаниеОшибки();
				
				//Если в ошибке есть упоминание про LIKE, то это ошибка "на IBM DB2 шаблон в операторе LIKE может быть только литералом"
				//Для DB2 правый операнд должен быть параметром (актуально DB2 10.5.7)
				//Первый клиент на DB2 появился в ноябре 2016 - поэтому выполнение данной функции не имеет смысла 
				//- она актуальна для старых клиентов, у которых свойства имели старый формат наименований
				
				Если Найти(ТекстОшибки, "LIKE") = 0 Тогда //если проблема не в использовании DB
					ВызватьИсключение;
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат ТаблицаДопРеквизитов;

	
	КонецФункции // НайтиПодобныеСвойстваПоСтруктуре()

	Функция НайтиНастройкиПользователейИзБП20(Наименование) Экспорт
		
		Если Метаданные.ПланыВидовХарактеристик.Найти("УдалитьНастройкиПользователей") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Свойства.Ссылка Свойство
		|ИЗ
		|	ПланВидовХарактеристик.УдалитьНастройкиПользователей КАК Свойства
		|ГДЕ
		|	Свойства.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Возврат ?(Выборка.Следующий(), Выборка.Свойство, Неопределено);
		
	КонецФункции
	
	Функция СоздатьНеобходимыеСвойстваВПВХ(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, ЗафиксированаРеструктуризация)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		Попытка
			СозданныеСвойстваОбъектов=			СоздатьСвойстваОбъектов(ВозможныеСвойстваОбъектов);
			СозданныеНастройкиПользователей=	СоздатьСвойстваОбъектов(ВозможныеНастройкиПользователя);
			ПрисоединитьМассив(СозданныеСвойстваОбъектов, СозданныеНастройкиПользователей);
		Исключение
			Результат.ОписаниеОшибки=	"Ошибка инициализации свойств объектов";
			Результат.Подробности= 		"Не удалось проинициализировать свойства объектов.
										| " + ОписаниеОшибки();
			Результат.Отказ=			Истина;
			
			Возврат Результат;
			
		КонецПопытки;
		
		Если СозданныеСвойстваОбъектов.Количество() > 0 Тогда
			ЗафиксированаРеструктуризация=	Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция СоздатьСвойство(ОписаниеСвойства)
		
		СвойствоОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		Если СвойствоОбъект.Метаданные().Иерархический Тогда
			СвойствоОбъект.Родитель = ПолучитьИЛИСоздатьГруппуНастроекПользователя_Диадок();
		КонецЕсли;
		
		Если НЕ Метаданные.Справочники.Найти("НаборыДополнительныхРеквизитовИСведений") = Неопределено И
			НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("НаборСвойств") = Неопределено Тогда
			СвойствоОбъект.НаборСвойств=	Вычислить("Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка()");
		КонецЕсли;
		СвойствоОбъект.Наименование = ОписаниеСвойства.ключ;
		СвойствоОбъект.ТипЗначения =  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
		СвойствоОбъект.УстановитьНовыйКод();
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("ЭтоДополнительноеСведение") = Неопределено Тогда
			СвойствоОбъект.ЭтоДополнительноеСведение = Ложь;
		КонецЕсли;
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("Заголовок") = Неопределено Тогда
			СвойствоОбъект.Заголовок = ОписаниеСвойства.ключ;
		КонецЕсли;
		
		СвойствоОбъект.Записать();
		
		Возврат СвойствоОбъект;
		
	КонецФункции
	
	Процедура ПереименоватьСвойство(СвойствоСсылка, НовоеНаименование)
		
		СвойствоОбъект=	СвойствоСсылка.ПолучитьОбъект();
		СвойствоОбъект.Наименование = НовоеНаименование;
		СвойствоОбъект.ТипЗначения =  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("ЭтоДополнительноеСведение") = Неопределено Тогда
			СвойствоОбъект.ЭтоДополнительноеСведение = Ложь;
		КонецЕсли;
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("Заголовок") = Неопределено Тогда
			СвойствоОбъект.Заголовок = НовоеНаименование;
		КонецЕсли;
		
		СвойствоОбъект.Записать();
		
	КонецПроцедуры
	
	Процедура ПометитьНаУдалениеСвойство(СвойствоСсылка)
		
		СвойствоОбъект=	СвойствоСсылка.ПолучитьОбъект();
		СвойствоОбъект.УстановитьПометкуУдаления(Истина);
		СвойствоОбъект.Записать();
		
	КонецПроцедуры
	
	Процедура ОчиститьНаборУСвойства(СвойствоСсылка, ЗафиксированаРеструктуризация)
		
		Перем НаборСвойств;
		
		Если ЗначениеЗаполнено(СвойствоСсылка) И ЕстьРеквизитИлиСвойствоОбъекта(СвойствоСсылка, "НаборСвойств", НаборСвойств) И ЗначениеЗаполнено(НаборСвойств) Тогда
			
			СвойствоОбъект= СвойствоСсылка.ПолучитьОбъект();
			СвойствоОбъект.НаборСвойств= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
			СвойствоОбъект.Записать();
			
			ЗафиксированаРеструктуризация= Истина;
			
		КонецЕсли;
	
	КонецПроцедуры
	
	Функция СоздатьСвойстваОбъектов(СтруктураСвойствОбъектов) Экспорт
		
		СозданныеСвойства 	= Новый Массив;
		СвойстваОбъектов 	= НайтиСвойстваПоСтруктуре(СтруктураСвойствОбъектов);
		
		Для каждого ОписаниеСвойства Из СтруктураСвойствОбъектов Цикл
			Если СвойстваОбъектов.Найти(ОписаниеСвойства.Ключ, "Наименование") = Неопределено Тогда
				НовоеСвойство=	СоздатьСвойство(ОписаниеСвойства);
				СозданныеСвойства.Добавить(НовоеСвойство);
			КонецЕсли;
		КонецЦикла;
		
		Возврат СозданныеСвойства;
		
	КонецФункции	
	
	Функция НеобходимоИнициализироватьВозможныеНастройки(ВозможныеНастройки)
		
		СвойстваОбъектов 			= НайтиСвойстваПоСтруктуре(ВозможныеНастройки);
		ПодобныеСвойстваОбъектов 	= НайтиПодобныеСвойстваПоСтруктуре(ВозможныеНастройки);
		
		Для каждого Настройка Из ВозможныеНастройки Цикл
			
			НайденнаяНастройка = Неопределено;
			СтрокаСвойств = СвойстваОбъектов.Найти(Настройка.Ключ, "Наименование");
			Если СтрокаСвойств <> Неопределено Тогда
				НайденнаяНастройка=	СтрокаСвойств.Ссылка;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НайденнаяНастройка) = Истина Тогда
				Возврат Истина;
			ИначеЕсли ЗначениеЗаполнено(НайтиНастройкиПользователейИзБП20(Настройка.Ключ)) Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если НЕ Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Реквизиты.Найти("НаборСвойств") = Неопределено Тогда
				
				Если ЗначениеЗаполнено(НайденнаяНастройка.НаборСвойств) = Истина Тогда
					Возврат Истина;
				КонецЕсли;
				
				НайденныеПодобныеНастройки = ПодобныеСвойстваОбъектов.Найти(Настройка.Ключ, "Наименование");
				Если НайденныеПодобныеНастройки <> Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция НеобходимоИнициализироватьВозможныеСвойства(ВозможныеСвойстваОбъектов)
		
		СвойстваОбъектов 			= НайтиСвойстваПоСтруктуре(ВозможныеСвойстваОбъектов);
		ПодобныеСвойстваОбъектов 	= НайтиПодобныеСвойстваПоСтруктуре(ВозможныеСвойстваОбъектов);
		
		Для каждого Свойство Из ВозможныеСвойстваОбъектов Цикл
			
			НайденноеСвойство = "";
			СтрокаСвойств = СвойстваОбъектов.Найти(Свойство.Ключ, "Наименование");
			Если СтрокаСвойств <> Неопределено Тогда
				НайденноеСвойство=	СтрокаСвойств.Ссылка;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НайденноеСвойство) = Истина Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если НЕ Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Реквизиты.Найти("НаборСвойств") = Неопределено Тогда
				
				Если ЗначениеЗаполнено(НайденноеСвойство.НаборСвойств) = Истина Тогда
					Возврат Истина;
				КонецЕсли;
				
				НайденныеПодобныеСвойства=	ПодобныеСвойстваОбъектов.Найти(Свойство.Ключ, "Наименование");
				Если НайденныеПодобныеСвойства <> Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция НеобходимоИнициализироватьСтарыеСвойстваИз20(СтарыеСвойстваОбъектовИз20)
		
		Для каждого Свойство Из СтарыеСвойстваОбъектовИз20 Цикл
			Если НЕ ЗначениеЗаполнено(НайтиСвойство(Свойство.Ключ)) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПроверитьНеобходимостьИнициализацииСвойств(ВозможныеНастройки, ВозможныеСвойстваОбъектов, СтарыеСвойстваОбъектовИз20)
		
		Если НеобходимоИнициализироватьВозможныеНастройки(ВозможныеНастройки) = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НеобходимоИнициализироватьВозможныеСвойства(ВозможныеСвойстваОбъектов) = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" И НеобходимоИнициализироватьСтарыеСвойстваИз20(СтарыеСвойстваОбъектовИз20) = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПолучитьВозможныеНастройкиПользователя()
		
		ВозможныеНастройкиПользователя = Новый Структура;
		
		ВозможныеНастройкиПользователя.Вставить("ДиадокПоследнийСертификатПользователя", 			"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокПоследнееПредставлениеПользователя",			"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокСпособПодписанияТ12",						"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокОбластьПолномочийПодписанияУПД",				"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокИдентификаторСвойстваДолжностьПодписанта",	"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокАдресПроксиСервера",							"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокПользовательПроксиСервера",					"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокПарольПроксиСервера",						"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокНастройкиПрокси",							"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокСоздаватьСопоставлятьНакладные",				"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокСоздаватьСопоставлятьСчетаФактуры",			"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокСтраницаВыбораПериодаПоУмолчанию",			"Пользователь");
		
		//Свойства отправки на согласование
		ВозможныеНастройкиПользователя.Вставить("ДиадокIDПодписантаОтправкаНаСогласование",			"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокДолжностьПодписантаОтправкаНаСогласование",	"Пользователь");
		
		//Расширение
		ВозможныеНастройкиПользователя.Вставить("ДиадокНеИспользоватьРасширениеВерсия",				"Пользователь");
				
		Возврат ВозможныеНастройкиПользователя;
		
	КонецФункции
	
	Функция ПолучитьВозможныеСвойстваОбъектов() Экспорт
		
		ВозможныеСвойстваОбъектов = Новый Структура;
		
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДокументаВДиадок", 		"");
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДокументаВДиадок", 	"");
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДопДокументаВДиадок", 		"");
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДопДокументаВДиадок", 	"");
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДокументаВДиадокСчет", 	""); //ИдентификаторДокументаВДиадокСч
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДокументаВДиадокСч", 	"");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокCustomDocumentId",				"");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокCustomDocumentIdСчет",			"");
		
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизации", 								"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление", 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление1", 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление2", 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление3", 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление4", 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокИдентификаторСвойстваПечатнаяФормаДляТоваров",	"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокИдентификаторСвойстваПечатнаяФормаДляУслуг", 		"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ПодрДиадокДляОрганизации", 								"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокОтправкаНепроведенных", 							"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокФормироватьУПД", 									"Организация");
		
		ВозможныеСвойстваОбъектов.Вставить("ДиадокВнешняяПечатнаяФормаСчета", 						"Организация"); //ДиадокВнешняяПечатнаяФорма
		ВозможныеСвойстваОбъектов.Вставить("ДиадокФормироватьСчетНаОсновании", 						"Организация"); //ДиадокСпособОтправкиСчета
		ВозможныеСвойстваОбъектов.Вставить("ДиадокВнешняяПечатнаяФормаАкта", 						"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокВнешняяПечатнаяФормаАктаСверки", 					"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокСпособФормированияАктаСверки", 					"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокСпособФормированияАкта",			 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокПодставлятьКППГрузоотправителя", 					"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокСписокДополнительныхВПФ", 						"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ТекстКомментарияДиадок", 								"Организация");
		
		ВозможныеСвойстваОбъектов.Вставить("ДДКонтр_", 						 "Контрагент");
		ВозможныеСвойстваОбъектов.Вставить("ДДНП_", 						 "Контрагент");
		ВозможныеСвойстваОбъектов.Вставить("ДДИДП_", 						 "Контрагент");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокФормироватьУПДКонтрагент", "Контрагент");
		
		ВозможныеСвойстваОбъектов.Вставить("ДиадокЕдиницаИзмеренияНоменклатуры", 	"Номенклатура");
		
		ВозможныеСвойстваОбъектов.Вставить("DDPact", 				"Договор контрагента");
		ВозможныеСвойстваОбъектов.Вставить("DDContract", 			"Договор контрагента");
		
		ВозможныеСвойстваОбъектов.Вставить("Дог_DepartmentName", 	"Подразделение");
		ВозможныеСвойстваОбъектов.Вставить("Дог_DepartmentID", 		"Подразделение");
		
		ВозможныеСвойстваОбъектов.Вставить("ДиадокНомерВПФ", 					""); 
		ВозможныеСвойстваОбъектов.Вставить("СтатусОтправляемыхВПФ_Диадок", 		"");
		
		ВозможныеСвойстваОбъектов.Вставить("МаксимальноеОтклонениеСуммыНДС",	"Организация");
		ВозможныеСвойстваОбъектов.Вставить("МаксимальноеОтклонениеСуммыСНДС",	"Организация");
		ВозможныеСвойстваОбъектов.Вставить("РазрешенныйПериодКорректировки",	"Организация");
		
		ВозможныеСвойстваОбъектов.Вставить("РазрешитьНеструктурированныеАдреса", "Константа");
				
		Возврат ВозможныеСвойстваОбъектов;
		
	КонецФункции
	
	Функция ПолучитьСтарыеСвойстваОбъектовИз20() Экспорт
		
		СтарыеСвойстваОбъектовИз20=	Новый Структура();
		СтарыеСвойстваОбъектовИз20.Вставить("ИдентификаторДокументаВДиадокСч", 	"ИдентификаторДокументаВДиадокСчет");
		СтарыеСвойстваОбъектовИз20.Вставить("ДиадокСпособОтправкиСчета", 		"ДиадокФормироватьСчетНаОсновании");
		СтарыеСвойстваОбъектовИз20.Вставить("ДиадокВнешняяПечатнаяФорма", 		"ДиадокВнешняяПечатнаяФормаСчета");
		
		Возврат СтарыеСвойстваОбъектовИз20;
		
	КонецФункции
	
	Функция ПроверитьНаличиеСвойствОбъектов(ВозможныеСвойстваОбъектов) Экспорт
		
		НенайденныеСвойства = Новый Массив;
		Для каждого ОписаниеСвойства из ВозможныеСвойстваОбъектов цикл 
			Если НайтиСвойство(ОписаниеСвойства.Ключ) = Неопределено Тогда
				НенайденныеСвойства.Добавить(ОписаниеСвойства);
			КонецЕсли;
		КонецЦикла;
		
		возврат  НенайденныеСвойства
		
	КонецФункции	
	
	Функция ПереместитьЗначенияСтарыхСвойств(ОсновноеСвойство, СтароеСвойство, ЗафиксированаРеструктуризация)
		
		НаборСтарыхСвойств=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборСтарыхСвойств.Отбор.Свойство.Установить(СтароеСвойство);
		НаборСтарыхСвойств.Прочитать();
		
		Для каждого НаборСтарогоСвойства Из НаборСтарыхСвойств Цикл
			
			ЗаписьОсновногоСвойства=			РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			ЗаписьОсновногоСвойства.Объект=		НаборСтарогоСвойства.Объект;
			ЗаписьОсновногоСвойства.Свойство=	ОсновноеСвойство;
			ЗаписьОсновногоСвойства.Прочитать();
			
			Если НЕ ЗначениеЗаполнено(ЗаписьОсновногоСвойства.Значение) Тогда
				ЗаписьОсновногоСвойства.Объект=		НаборСтарогоСвойства.Объект;
				ЗаписьОсновногоСвойства.Свойство=	ОсновноеСвойство;
				ЗаписьОсновногоСвойства.Значение=	НаборСтарогоСвойства.Значение;
				ЗаписьОсновногоСвойства.Записать();
				
				ЗафиксированаРеструктуризация=		Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецФункции
	
	Функция ПереместитьНастройкиПользователей(ВозможныеНастройкиПользователя, МассивПеремещенныхНастроек)
		
		Для каждого Настройка Из ВозможныеНастройкиПользователя Цикл
			СтараяНастройка=	НайтиНастройкиПользователейИзБП20(Настройка.Ключ);
			Если ЗначениеЗаполнено(СтараяНастройка) Тогда
				
				ПравильнаяНастройка=	НайтиСвойство(Настройка.Ключ);
				Если НЕ ЗначениеЗаполнено(ПравильнаяНастройка) Тогда
					Попытка
						ПравильнаяНастройка=	СоздатьСвойство(Настройка);
					Исключение
						ВызватьИсключение "Не удалось создать новое свойства " + Настройка.Ключ + " " + ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
			
				Попытка
					НаборСтарыхНастроек=	РегистрыСведений.УдалитьНастройкиПользователей.СоздатьНаборЗаписей();
					НаборСтарыхНастроек.Отбор.Настройка.Установить(СтараяНастройка);
					НаборСтарыхНастроек.Прочитать();
					Для каждого ЗаписьНабора Из НаборСтарыхНастроек Цикл
						
						МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
						МЗ.Объект=		ЗаписьНабора.Пользователь;
						МЗ.Свойство=	ПравильнаяНастройка.Ссылка;
						МЗ.Значение=	ЗаписьНабора.Значение;
						МЗ.Записать();
						
						МассивПеремещенныхНастроек.Добавить(ПравильнаяНастройка);
						
					КонецЦикла;
				Исключение
					ВызватьИсключение  "Не удалось переместить старые значения свойств " + Настройка.Ключ + " в регистр ДополнительныеСведения " + ОписаниеОшибки();
				КонецПопытки;
				
				Попытка
					ПереименоватьСвойство(СтараяНастройка, "Удалить" + СтараяНастройка.Наименование);
				Исключение
					ВызватьИсключение "Не удалось переименовать свойство " + СтараяНастройка.Наименование + "
										|Обратитесь к вашему системному администратору.
										|Отладочная информация: " + ОписаниеОшибки();
				КонецПопытки;

			КонецЕсли;
		КонецЦикла;
		
		Возврат МассивПеремещенныхНастроек;
		
	КонецФункции
	
	Функция ПереписатьНовыеЗначенияНеправильныхСвойств(МассивПереписанныхСвойств)
		
		УстановитьПравильноеЗначениеСвойстваТипаБулево(МассивПереписанныхСвойств, НайтиСвойство(ИдентификаторСвойстваОтправлятьНеПроведенные())); // ОтправлятьНеПроведенные
		УстановитьПравильноеЗначениеФормироватьСчетНаОсновании(МассивПереписанныхСвойств);
		ОбновитьЗначениеСвойстваДиадокВнешняяПечатнаяФормаСчета(МассивПереписанныхСвойств);
		ОбновитьЗначениеСвойстваДиадокВнешняяПечатнаяФормаАкта(МассивПереписанныхСвойств);
			
		Возврат МассивПереписанныхСвойств;
		
	КонецФункции
	
	Процедура РеструктуризироватьПодобныеСвойства(ОсновноеСвойство, НаименованиеСвойства, ЗафиксированаРеструктуризация, ТаблицаНайденныхСвойств)
		
		Для каждого СтрокаТаблицы Из ТаблицаНайденныхСвойств Цикл
			
			СтароеСвойство=		СтрокаТаблицы.Свойство;
			Если ОсновноеСвойство = Неопределено Тогда
				ПереименоватьСвойство(СтароеСвойство, НаименованиеСвойства);
				ОсновноеСвойство=	СтароеСвойство;
			Иначе
				ПереместитьЗначенияСтарыхСвойств(ОсновноеСвойство, СтароеСвойство, ЗафиксированаРеструктуризация);
				ОчиститьНаборУСвойства(СтароеСвойство, ЗафиксированаРеструктуризация);
				ПереименоватьСвойство(СтароеСвойство, "Удалить" + НаименованиеСвойства);
				ПометитьНаУдалениеСвойство(СтароеСвойство);
			КонецЕсли;
			
			ЗафиксированаРеструктуризация=	Истина;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ОбработатьНеправильныеСвойства(ВозможныеНастройкиПользователя, ВозможныеСвойстваОбъектов, ЗафиксированаРеструктуризация)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ОбрабатываемыеСвойстваОбъектов=	Новый Массив();
		ПрисоединитьМассив(ОбрабатываемыеСвойстваОбъектов, ВозможныеНастройкиПользователя);
		ПрисоединитьМассив(ОбрабатываемыеСвойстваОбъектов, ВозможныеСвойстваОбъектов);
		
		ТаблицаСвойств = НайтиСвойстваПоСтруктуре(ОбрабатываемыеСвойстваОбъектов);
		ТаблицаПодобныхСвойств = НайтиПодобныеСвойстваПоСтруктуре(ОбрабатываемыеСвойстваОбъектов);
		
		НачатьТранзакцию();
		Для каждого Свойство Из ОбрабатываемыеСвойстваОбъектов Цикл
			
			НаименованиеСвойства=	Свойство.Ключ;
			СтрокаСвойств 		= ТаблицаСвойств.Найти(НаименованиеСвойства, "Наименование");
			Если СтрокаСвойств <> Неопределено Тогда
				ОсновноеСвойство=	СтрокаСвойств.Ссылка;
			КонецЕсли;
			
			ТаблицаНайденныхСвойств = Новый ТаблицаЗначений;         
			ТаблицаНайденныхСвойств.Колонки.Добавить("Свойство");
			
			ПараметрыОтбора = Новый Структура("Наименование", НаименованиеСвойства);
			СтрокиПодобныхСвойств = ТаблицаПодобныхСвойств.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокиПодобныхСвойств <> Неопределено Тогда
				Для каждого Стр Из СтрокиПодобныхСвойств Цикл
					НовСтр = ТаблицаНайденныхСвойств.Добавить();
					НовСтр.Свойство = Стр.ПодобноеСвойствоСсылка;
				КонецЦикла;			
			КонецЕсли;
			
			Попытка
				ОчиститьНаборУСвойства(ОсновноеСвойство, ЗафиксированаРеструктуризация);
				РеструктуризироватьПодобныеСвойства(ОсновноеСвойство, НаименованиеСвойства, ЗафиксированаРеструктуризация, ТаблицаНайденныхСвойств);
			Исключение
				Результат.ОписаниеОшибки=	"Ошибка реструктуризации неправильных свойств объектов";
				Результат.Подробности=		"Не удалось реструктуризировать неправильное свойство " + НаименованиеСвойства + "
											|Обратитесь к вашему системному администратору.
											|Отладочная информация: " + ОписаниеОшибки();
				Результат.Отказ=			Истина;
				
				ОтменитьТранзакцию();
				
				Возврат Результат;
				
			КонецПопытки;
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПереименоватьСтарыеНастройкиИз20(СтарыеСвойстваОбъектовИз20, МассивПереименованныхНастроек)
		
		Для каждого РеинициализируемоеСвойство Из СтарыеСвойстваОбъектовИз20 Цикл
			
			СтароеНаименованиеСвойства=		РеинициализируемоеСвойство.Ключ;
			НаименованиеСвойства30=			РеинициализируемоеСвойство.Значение;
			
			СтароеСвойствоСсылка=	НайтиСвойство(СтароеНаименованиеСвойства);
			Если ЗначениеЗаполнено(СтароеСвойствоСсылка) Тогда
				Свойство30Ссылка=	НайтиСвойство(НаименованиеСвойства30);
				Если НЕ ЗначениеЗаполнено(Свойство30Ссылка) Тогда
					ПереименоватьСвойство(СтароеСвойствоСсылка, НаименованиеСвойства30);
					МассивПереименованныхНастроек.Добавить(СтароеСвойствоСсылка);
				Иначе
					ВызватьИсключение 	"Старое свойство """ + СтароеНаименованиеСвойства + """ нельзя реинициализировать, 
										|так как в базе уже определено свойство """ + НаименованиеСвойства30 + """
										|Обратитесь к системному администратору:  
										|Требуется перенести значения свойства """ + СтароеНаименованиеСвойства + """ в """ + НаименованиеСвойства30 + """";
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат МассивПереименованныхНастроек;
		
	КонецФункции
			
	Функция ОбработатьСвойстваОбъектовИз20(ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20, ЗафиксированаРеструктуризация)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		МассивПереименованныхНастроек=	Новый Массив();
		МассивПеремещенныхНастроек=		Новый Массив();
		МассивПереписанныхСвойств=		Новый Массив();
		
		НачатьТранзакцию();
		
		Попытка
			МассивПереименованныхНастроек=	ПереименоватьСтарыеНастройкиИз20(СтарыеСвойстваОбъектовИз20, МассивПереименованныхНастроек);
		Исключение
			
			Результат.ОписаниеОшибки=	"Ошибка реинициализации свойств объектов при обновлении с БП20 на БП30";
			Результат.Подробности=		"Не удалось выполнить переименование старых свойств.
										|Обратитесь к вашему системному администратору.
										|Отладочная информация: " + ОписаниеОшибки();
			Результат.Отказ=			Истина;
			ОтменитьТранзакцию();
			
			Возврат Результат;
			
		КонецПопытки;
		
		Если НЕ Метаданные.ПланыВидовХарактеристик.Найти("УдалитьНастройкиПользователей") = Неопределено Тогда
			
			Попытка
				МассивПеремещенныхНастроек=	ПереместитьНастройкиПользователей(ВозможныеНастройкиПользователя, МассивПеремещенныхНастроек);
			Исключение
				
				Результат.ОписаниеОшибки=	"Ошибка реинициализации свойств объектов при обновлении с БП20 на БП30";
				Результат.Подробности=		"Не удалось выполнить перемещение старых настроек пользователей.
											|Обратитесь к вашему системному администратору.
											|Отладочная информация: " + ОписаниеОшибки();
				Результат.Отказ=			Истина;
				ОтменитьТранзакцию();
				
				Возврат Результат;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Попытка
			МассивПереписанныхСвойств=	ПереписатьНовыеЗначенияНеправильныхСвойств(МассивПереписанныхСвойств);
		Исключение
			Результат.ОписаниеОшибки=	"Ошибка реинициализации свойств объектов при обновлении с БП 20 на БП30";
			Результат.Подробности= 		"Не удалось обновить некорректные значения свойств на правильные
										|Отладочная информация: " + ОписаниеОшибки();
			Результат.Отказ=			Истина;
			ОтменитьТранзакцию();

			Возврат Результат;
			
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
		Если МассивПереименованныхНастроек.Количество() > 0 
			ИЛИ МассивПеремещенныхНастроек.Количество() > 0 
			ИЛИ МассивПереписанныхСвойств.Количество() > 0 Тогда
			ЗафиксированаРеструктуризация=	Истина;
		КонецЕсли;

		Возврат Результат;

	КонецФункции
	
	Процедура УстановитьЗначениеСвойства(Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой= "", ЗначениеСвойства) Экспорт
		
		Если ПустаяСтрока(НаименованиеСвойства) ИЛИ НЕ ЗначениеЗаполнено(Объект) Тогда
			Возврат;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			Если ПустаяСтрока(ЗначениеСвойства) Тогда
				Возврат;
			КонецЕсли;
			
			ВызватьИсключение "Запись свойства объекта: """ + НаименованиеСвойства + """ невозможна. Свойство не создано";
			
		КонецЕсли;
		
		МЗ = ПолучитьМЗСвойстваОбъектов(Объект, СвойствоСсылка);
		Если НЕ МЗ.Выбран() Тогда
			МЗ.Объект = Объект;
			МЗ.Свойство = СвойствоСсылка;
		КонецЕсли;
		
		МЗ.Значение = ЗначениеСвойства;
		МЗ.Записать();
		
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ СВОЙСТВАМИ

//{ ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ
	
	Функция СведенияОВнешнейОбработке() Экспорт
		
		СловарьWL= ПолучитьСловарь();
		
		ПараметрыРегистрации = Новый Структура;
		ПараметрыРегистрации.Вставить("Вид",			 	"ДополнительнаяОбработка");
		ПараметрыРегистрации.Вставить("Наименование", 		"Модуль работы с электронными первичными документами через " + СловарьWL.НаименованиеСистемы);
		ПараметрыРегистрации.Вставить("БезопасныйРежим", 	Ложь);
		ПараметрыРегистрации.Вставить("Версия", 			СтрЗаменить(ВерсияОбработкиДиадокСервер(), "_", "."));
		ПараметрыРегистрации.Вставить("Информация", 		"Дополнительная внешняя обработка для работы с ЭДО через " + СловарьWL.НаименованиеСистемы);
		
		ТаблицаКоманд = ПолучитьТаблицуКоманд();
		ДобавитьКоманду(ТаблицаКоманд, "Модуль работы с электронными первичными документами через " + СловарьWL.НаименованиеСистемы, "Форма_Основная", "ОткрытиеФормы", Ложь, "");
		
		ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
		
		Возврат ПараметрыРегистрации;
		
	КонецФункции
	
	Функция ПолучитьТаблицуКоманд()
		
		Команды = Новый ТаблицаЗначений;
		
		Команды.Колонки.Добавить("Представление", 			Новый ОписаниеТипов("Строка")); 
		Команды.Колонки.Добавить("Идентификатор", 			Новый ОписаниеТипов("Строка"));
		Команды.Колонки.Добавить("Использование", 			Новый ОписаниеТипов("Строка"));
		Команды.Колонки.Добавить("ПоказыватьОповещение", 	Новый ОписаниеТипов("Булево"));
		Команды.Колонки.Добавить("Модификатор", 			Новый ОписаниеТипов("Строка"));
		
		Возврат Команды;
		
	КонецФункции
	
	Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение= Ложь, Модификатор= "")
		
		НоваяКоманда=						ТаблицаКоманд.Добавить();
		НоваяКоманда.Представление=			Представление;
		НоваяКоманда.Идентификатор=			Идентификатор;
		НоваяКоманда.Использование=			Использование;
		НоваяКоманда.ПоказыватьОповещение=	ПоказыватьОповещение;
		НоваяКоманда.Модификатор=			Модификатор;
		
	КонецПроцедуры
	
//} ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ

//{ ИДЕНТИФИКАТОРЫ
	
	Функция ИдентификаторСвойстваЯщикОрганизации() Экспорт
		возврат "ЯщикДиадокДляОрганизации"
	КонецФункции	
	
	Функция ИдентификаторСвойстваПодразделениеОрганизации() Экспорт
		возврат "ПодрДиадокДляОрганизации"
	КонецФункции	
	
	Функция ИдентификаторСвойстваЯщикОрганизацииПредставление() Экспорт
		возврат "ЯщикДиадокДляОрганизацииПредставление"
	КонецФункции
	
	Функция ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору() Экспорт
		Возврат "Дог_DepartmentName";
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору() Экспорт
		Возврат "Дог_DepartmentID";
	КонецФункции
	
	Функция ИдентификаторСвойстваЯщикКонтрагентаПрефикс() Экспорт
		Возврат "ДДКонтр_";
	КонецФункции
	
	Функция ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс() Экспорт
		возврат "ДДНП_";
	КонецФункции	
	
	Функция ИдентификаторСвойстваНаименованиеПодразделенияКонтрагента(BoxId) Экспорт
		возврат ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс() + BoxId;
	КонецФункции	
	
	Функция ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс() Экспорт
		Возврат "ДДИДП_";
	КонецФункции
	
	Функция ИдентификаторСвойстваИДПодразделенияКонтрагента(BoxId) Экспорт
		возврат ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс() + BoxId;
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадок() Экспорт
		Возврат "ИдентификаторДокументаВДиадок"
	Конецфункции 
	
	Функция ИдентификаторСвойстваДиадокCustomDocumentId() Экспорт
		Возврат "ДиадокCustomDocumentId";
	Конецфункции	
	
	Функция ИдентификаторСвойстваДиадокCustomDocumentIdСчет() Экспорт
		Возврат "ДиадокCustomDocumentIdСчет";
	Конецфункции
	
	Функция ИдентификаторСвойстваДопДокументаИдентификаторДокументаВДиадок() Экспорт
		Возврат "ИдентификаторДопДокументаВДиадок"
	Конецфункции 
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДопДокументаВДиадок() Экспорт
		Возврат "ИдентификаторЯщикДопДокументаВДиадок"
	Конецфункции 
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок() Экспорт
		Возврат "ИдентификаторЯщикДокументаВДиадок"
	Конецфункции 
	
	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет() Экспорт
		Возврат "ИдентификаторДокументаВДиадокСчет";
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет()
		Возврат "ИдентификаторЯщикДокументаВДиадокСч";
	КонецФункции
	
	Функция ИдентификаторСвойстваСертификатПользователя()Экспорт
		возврат "ДиадокСертификатПользователя"
	Конецфункции 	
	
	Функция ИдентификаторСвойстваПредставлениеСертификатаПользователя() Экспорт
		Возврат "ДиадокПредставлениеСертификатаПользователя"
	Конецфункции
	
	Функция ИдентификаторСвойстваАдреспроксиСервера() Экспорт
		Возврат "ДиадокАдресПроксиСервера"
	Конецфункции
	
	Функция ИдентификаторСвойстваПользовательПроксиСервера() Экспорт
		Возврат "ДиадокПользовательПроксиСервера"
	Конецфункции
	
	Функция ИдентификаторСвойстваПарольПроксиСервера() Экспорт
		Возврат "ДиадокПарольПроксиСервера"
	Конецфункции
	
	Функция ИдентификаторСвойстваСпособПодписанияТ12() Экспорт
		Возврат "ДиадокСпособПодписанияТ12"
	КонецФункции

	Функция ИдентификаторСвойстваОбластьПолномочийПодписанияУПД() Экспорт
		Возврат "ДиадокОбластьПолномочийПодписанияУПД"
	КонецФункции

	Функция ИдентификаторСвойстваДолжностьПодписанта() Экспорт
		Возврат "ДиадокИдентификаторСвойстваДолжностьПодписанта"
	КонецФункции	
	
	Функция ИдентификаторСвойстваПечатнаяФормаДляТоваров()Экспорт
		Возврат "ДиадокИдентификаторСвойстваПечатнаяФормаДляТоваров"
	КонецФункции
	
	Функция ИдентификаторСвойстваПечатнаяФормаДляУслуг() Экспорт
		Возврат "ДиадокИдентификаторСвойстваПечатнаяФормаДляУслуг"
	КонецФункции
	
	Функция ИдентификаторСвойстваОтправлятьНеПроведенные()Экспорт
		Возврат "ДиадокОтправкаНепроведенных"
	КонецФункции

	Функция ИдентификаторСвойстваФормироватьУПД()Экспорт
		Возврат "ДиадокФормироватьУПД"
	КонецФункции
	
	Функция ИдентификаторСвойстваФормироватьУПДКонтрагент()Экспорт
		Возврат "ДиадокФормироватьУПДКонтрагент"
	КонецФункции

	Функция ИдентификаторСвойстваВнешняяПечатнаяФормаСчета()Экспорт
		Возврат "ДиадокВнешняяПечатнаяФормаСчета"
	КонецФункции
	
	Функция ИдентификаторСвойстваФормироватьСчетНаОсновании()Экспорт
		Возврат "ДиадокФормироватьСчетНаОсновании"
	КонецФункции
	
	Функция ИдентификаторСвойстваВнешняяПечатнаяФормаАкта()Экспорт
		Возврат "ДиадокВнешняяПечатнаяФормаАкта"
	КонецФункции
	
	Функция ИдентификаторСвойстваСпособФормированияАкта()Экспорт
		Возврат "ДиадокСпособФормированияАкта"
	КонецФункции
	
	Функция ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки()Экспорт
		Возврат "ДиадокВнешняяПечатнаяФормаАктаСверки"
	КонецФункции
	
	Функция ИдентификаторСвойстваСпособФормированияАктаСверки()Экспорт
		Возврат "ДиадокСпособФормированияАктаСверки"
	КонецФункции
	
	Функция ИдентификаторСвойстваПодставлятьКППГрузоотправителя() Экспорт
		Возврат "ДиадокПодставлятьКППГрузоотправителя";
	КонецФункции
	
	Функция ИдентификатрСвойстваТекстКомментарияДиадок() Экспорт
		Возврат "ТекстКомментарияДиадок";
	КонецФункции	
	
	Функция ИдентификаторСвойстваЕдиницаИзмеренияНоменклатуры()Экспорт
		Возврат "ДиадокЕдиницаИзмеренияНоменклатуры";
	КонецФункции
	
	Функция ИдентификаторСвойстваIdПодписантаСогласование() Экспорт
		Возврат "ДиадокIDПодписантаОтправкаНаСогласование";
	КонецФункции
	
	Функция ИдентификаторСвойстваДолжностьПодписантаСогласование() Экспорт
		Возврат "ДиадокДолжностьПодписантаОтправкаНаСогласование";
	КонецФункции

	Функция ИдентификаторСвойстваСтатусОтправляемыхВПФ() Экспорт
		Возврат "СтатусОтправляемыхВПФ_Диадок";
	КонецФункции
	
	Функция ИдентификаторСвойстваНомерВПФ() Экспорт
		Возврат "ДиадокНомерВПФ";
	КонецФункции
	
	Функция ИдентификаторСвойстваСписокДопВПФ() Экспорт
		
		Возврат "ДиадокСписокДополнительныхВПФ";
		
	КонецФункции
	
//} ИДЕНТИФИКАТОРЫ

//{ АДАПТЕР
	
	Функция DocumentID_2_ДокументМассовое(ТЗИд) Экспорт
		
		ТаблицаПерекодировки= МетодСервера(,"ТаблицаПерекодировки");
		
		ТаблицаПерекодировки.Индексы.Добавить("Число16");
		
		ТЗИд.колонки.Добавить("DocumentId64",   Новый ОписаниеТипов("Строка"));
		ТЗИд.колонки.Добавить("BoxId", 			Новый ОписаниеТипов("Строка")); //на всяк, вдруг там тип неопределенный, чтоб запрос егг сжевал
		
		Для Каждого Стр из ТЗИд Цикл
			Стр.DocumentId64 =  КонвертироватьГуидВЧисло64(Стр.DocumentID);
			Стр.BoxId 	  	 =  Стр.OrganizationId;
		КонецЦикла;
		ИдентификаторСвойстваИдентификаторДокументаВДиадок 		= ИдентификаторСвойстваИдентификаторДокументаВДиадок();
		ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок 	= ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок();
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	выразить(ТЗ.DocumentId64 как строка(150))  как DocumentId64,
		|	выразить(ТЗ.DocumentId как строка(150)) как DocumentId,
		|	выразить(ТЗ.BoxId как строка(150)) как BoxId
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвойствоDocumentId.Объект,
		|	ТЗ.DocumentId,
		|	ТЗ.BoxId
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоDocumentId
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СвойствоBoxId
		|		ПО СвойствоDocumentId.Объект = СвойствоBoxId.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
		|		ПО СвойствоDocumentId.Значение = ТЗ.DocumentId64
		|			И (СвойствоDocumentId.Свойство.Наименование = &НаименованиеDocumentId)
		|			И (СвойствоBoxId.Свойство.Наименование = &НаименованиеBoxId)
		|			И (СвойствоBoxId.Значение = ТЗ.BoxId)";
		Запрос.УстановитьПараметр("ТЗ", ТЗИд);
		//Запрос.УстановитьПараметр("ЗначениеDocumentId", DocumentId64);
		//Запрос.УстановитьПараметр("ЗначениеBoxId", BoxId);
		Запрос.УстановитьПараметр("НаименованиеDocumentId", ИдентификаторСвойстваИдентификаторДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеBoxId", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок());
		
		результат = Новый Соответствие;
		Выборка = запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Новый Структура("DocumentId,BoxId", Выборка.DocumentId,Выборка.BoxId), Выборка.Объект);
		КонецЦикла;
		
		//мас = запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		Возврат Результат;
		
	КонецФункции	
	
	Функция DocumentID_2_Документ(DocumentID, BoxID, ЭтоУПД_ТипаСЧФДОП= Ложь, DocumentDirection= "") Экспорт
		
		DocumentId64 = КонвертироватьГуидВЧисло64(DocumentID);
		
		УсловиеТипОбъекта= "";
		Если ЭтоУПД_ТипаСЧФДОП Тогда
			Если DocumentDirection = "Inbound" Тогда
				УсловиеТипОбъекта= "И СвойствоDocumentId.Объект ССЫЛКА Документ.СчетФактураПолученный";
			Иначе
				Если ЗначениеЗаполнено(ПараметрыКлиентСервер.ПредставлениеДокументов.СчетФактураВыданный) Тогда
					УсловиеТипОбъекта= "И СвойствоDocumentId.Объект ССЫЛКА Документ." + ПараметрыКлиентСервер.ПредставлениеДокументов.СчетФактураВыданный;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Запрос=	Новый Запрос;
		Запрос.Текст=	
		"ВЫБРАТЬ
		|	СвойствоDocumentId.Объект
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоDocumentId,
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоBoxId
		|ГДЕ
		|	СвойствоDocumentId.Свойство.Наименование В (&НаименованиеDocumentId, &НаименованиеDocumentIdСчет)
		|	И СвойствоDocumentId.Значение = &ЗначениеDocumentId
		|	И СвойствоBoxId.Свойство.Наименование В (&НаименованиеBoxId, &НаименованиеBoxIdСчет)
		|	И СвойствоBoxId.Значение = &ЗначениеBoxId
		|	И СвойствоDocumentId.Объект = СвойствоBoxId.Объект
		|	" + УсловиеТипОбъекта;

		Запрос.УстановитьПараметр("ЗначениеDocumentId", DocumentId64);
		Запрос.УстановитьПараметр("ЗначениеBoxId", BoxId);
		Запрос.УстановитьПараметр("НаименованиеDocumentId", ИдентификаторСвойстваИдентификаторДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеBoxId", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеDocumentIdСчет", ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет());
		Запрос.УстановитьПараметр("НаименованиеBoxIdСчет", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет());
		
		мас = запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		Возврат ?(мас.Количество() = 0, Неопределено, мас[0]);
		
	КонецФункции

	Функция DocumentID_2_МассивДокументов(DocumentID, BoxID) Экспорт
		
		МассивДокументов= Новый Массив;
		
		DocumentId64 = КонвертироватьГуидВЧисло64(DocumentID);
		
		Запрос=	Новый Запрос;
		Запрос.Текст=	
		"ВЫБРАТЬ
		|	СвойствоDocumentId.Объект
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоDocumentId,
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоBoxId
		|ГДЕ
		|	СвойствоDocumentId.Свойство.Наименование В (&НаименованиеDocumentId, &НаименованиеDocumentIdСчет)
		|	И СвойствоDocumentId.Значение = &ЗначениеDocumentId
		|	И СвойствоBoxId.Свойство.Наименование В (&НаименованиеBoxId, &НаименованиеBoxIdСчет)
		|	И СвойствоBoxId.Значение = &ЗначениеBoxId
		|	И СвойствоDocumentId.Объект = СвойствоBoxId.Объект";

		Запрос.УстановитьПараметр("ЗначениеDocumentId", DocumentId64);
		Запрос.УстановитьПараметр("ЗначениеBoxId", BoxId);
		Запрос.УстановитьПараметр("НаименованиеDocumentId", ИдентификаторСвойстваИдентификаторДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеBoxId", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеDocumentIdСчет", ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет());
		Запрос.УстановитьПараметр("НаименованиеBoxIdСчет", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет());
		
		РезультатЗапроса= Запрос.Выполнить();
		Запрос= Неопределено;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка= РезультатЗапроса.Выбрать();
			РезультатЗапроса= Неопределено;
			
			Пока Выборка.Следующий() Цикл
				МассивДокументов.Добавить(Выборка.Объект);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат МассивДокументов;
		
	КонецФункции

	Процедура УстановитьDocumentIDДляКоллекции(Коллекция) Экспорт
		
		Для каждого ЭлементКоллекции из Коллекция Цикл
			
			Если ЗначениеЗаполнено(ЭлементКоллекции.Документ1С) Тогда
				Установить_DocumentID_Для_Документ(ЭлементКоллекции.Документ1С, ЭлементКоллекции.DocumentId, ЭлементКоллекции.OrganizationId, ЭлементКоллекции.ИспользоватьИдентификаторСчета, ЭлементКоллекции.ЭтоУПД_ТипаСЧФДОП);			
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецПроцедуры
	
	Процедура Установить_DocumentID_Для_Документ(Документ, DocumentID, BoxID, ИспользоватьИдентификаторСчета= Ложь, ЭтоУПД_ТипаСЧФДОП= Ложь) Экспорт
		
		base64DocId=	КонвертироватьГуидВЧисло64(DocumentID);
		
		Если ИспользоватьИдентификаторСчета Тогда
			УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет(), , base64DocId); 
			УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет(), , BoxID); 
		Иначе
			СвойствоDocumentId = ИдентификаторСвойстваИдентификаторДокументаВДиадок();
			СвойствоBoxId	   = ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок();	
			Если ПустаяСтрока(DocumentID) И ЭтоУПД_ТипаСЧФДОП Тогда // очищаем ID всех связанных с УПД СЧФ ДОП документов 1С
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ВсеОбъекты_BoxId.Объект
				|ИЗ
				|	РегистрСведений.ДополнительныеСведения КАК DocumentId
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК BoxId
				|		ПО DocumentId.Объект = BoxId.Объект
				|			И (BoxId.Свойство = &СвойствоBoxId)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ВсеОбъекты_DocumentId
				|		ПО (ВсеОбъекты_DocumentId.Свойство = &СвойствоDocumentId)
				|			И DocumentId.Значение = ВсеОбъекты_DocumentId.Значение
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ВсеОбъекты_BoxId
				|		ПО (ВсеОбъекты_DocumentId.Объект = ВсеОбъекты_BoxId.Объект)
				|			И (ВсеОбъекты_BoxId.Свойство = &СвойствоBoxId)
				|			И (BoxId.Значение = ВсеОбъекты_BoxId.Значение)
				|ГДЕ
				|	DocumentId.Объект = &Документ
				|	И DocumentId.Свойство = &СвойствоDocumentId");
				Запрос.УстановитьПараметр("СвойствоDocumentId", НайтиСвойство(СвойствоDocumentId));
				Запрос.УстановитьПараметр("СвойствоBoxId"	  , НайтиСвойство(СвойствоBoxId));
				Запрос.УстановитьПараметр("Документ", Документ);
				Выборка= Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					УстановитьЗначениеСвойства(Выборка.Объект, СвойствоDocumentId, , ""); 
					УстановитьЗначениеСвойства(Выборка.Объект, СвойствоBoxId, , ""); 
				КонецЦикла;
			Иначе
				УстановитьЗначениеСвойства(Документ, СвойствоDocumentId, , base64DocId); 
				УстановитьЗначениеСвойства(Документ, СвойствоBoxId, , BoxID); 
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ОчиститьCustomDocumentId(Документ, ИспользоватьИдентификаторСчета= Ложь) Экспорт
		
		Если ИспользоватьИдентификаторСчета Тогда
			УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваДиадокCustomDocumentIdСчет(), , ""); 
		Иначе
			УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваДиадокCustomDocumentId(), , ""); 
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция Документ_2_DocumentID(СсылкаНаОбъект, ИспользоватьИдентификаторСчета= Ложь) Экспорт
		
		ИдентификаторСвойстваДокумент = ?(ИспользоватьИдентификаторСчета , ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет(),ИдентификаторСвойстваИдентификаторДокументаВДиадок());
		число64 =   ПолучитьЗначениеСвойства(СсылкаНаОбъект,  ИдентификаторСвойстваДокумент);
		если ЗначениеЗаполнено( число64) тогда
			возврат  КонвертироватьЧисло64вГуид(число64)
		Иначе 
			возврат ""
		КонецЕсли;	
	КонецФункции	
	
	Функция Организация_2_BoxID(Организация) Экспорт 
		возврат ПолучитьЗначениеСвойства(Организация,  ИдентификаторСвойстваЯщикОрганизации());
	КонецФункции
	
	Функция Установить_BoxID_для_Организация(Организация, BoxID, НаименованиеЯщика, DepartmentKpp= Неопределено) Экспорт 
		
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваЯщикОрганизации(), , BoxID);
		
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваПодразделениеОрганизации(), , DepartmentKpp);
		
		
		Длина_на_30 = СтрДлина(НаименованиеЯщика) / 30;
		Кол = Цел(Длина_на_30) + ?(Длина_на_30 - Цел(Длина_на_30) > 0, 1, 0);
		Для Инд = 1 По Кол Цикл
			Текст = Сред(НаименованиеЯщика, 30 * (Инд - 1) + 1, 30);
			Постфикс = ?(Инд = 1, "", Инд);
			УстановитьЗначениеСвойства(Организация,ИдентификаторСвойстваЯщикОрганизацииПредставление() + Постфикс, ,Текст);
		КонецЦикла;
		УстановитьЗначениеСвойства(Организация,ИдентификаторСвойстваЯщикОрганизацииПредставление() + Строка(Кол + 1), ,"");
		
		Возврат Истина;
		
	КонецФункции
		
	Функция BoxID_2_Организация(BoxID, DepartmentKpp= "") Экспорт 
		
		Возврат СвойстваОбъектов_НайтиОбъект(ИдентификаторСвойстваЯщикОрганизации(), BoxID, ИдентификаторСвойстваПодразделениеОрганизации(), DepartmentKpp);
		
	КонецФункции
	
	Функция CounteragentBoxID_2_МассивКонтрагентов(CounteragentID, BoxID= Неопределено) Экспорт 
		
		Возврат СвойстваОбъектов_НайтиМассивОбъектов(ИдентификаторСвойстваЯщикКонтрагентаПрефикс(), CounteragentID);

	КонецФункции
	
	Функция CounteragentBoxID_2_Контрагент(CounteragentID, BoxID= Неопределено) Экспорт 
		КонтрагентСсылка = СвойстваОбъектов_НайтиОбъект(ИдентификаторСвойстваЯщикКонтрагентаПрефикс(), CounteragentID);
		Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			Возврат КонтрагентСсылка;
		Иначе
			возврат неопределено;
		КонецЕсли;
	КонецФункции
	
	Функция Контрагент_2_CounteragentBoxID(Контрагент, BoxID= Неопределено) Экспорт 
		CounteragentID = ПолучитьЗначениеСвойства(Контрагент,  ИдентификаторСвойстваЯщикКонтрагентаПрефикс());
		Возврат CounteragentID;
		
	КонецФункции
	
	Процедура Установить_CounteragentBoxID_для_Контрагент(Контрагент, CounteragentID, BoxID= Неопределено) Экспорт
		УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваЯщикКонтрагентаПрефикс(), , CounteragentID);
	КонецПроцедуры	
	
	Функция УстановитьПараметрыМаршрутизацииДляКонтрагента(Контрагент, BoxID= Неопределено, НаименованиеПодразделения, ИДПодразделения) Экспорт
		УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс(), , НаименованиеПодразделения);
		УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс(), , ИДПодразделения);
	КонецФункции	
	
	Функция УстановитьПараметрыМаршрутизацииДляДоговора(Договор, НаименованиеПодразделения, ИДПодразделения) Экспорт 
		УстановитьЗначениеСвойства(Договор, ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору(), , НаименованиеПодразделения);
		УстановитьЗначениеСвойства(Договор, ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору(), , ИДПодразделения);
	КонецФункции	
	
	Процедура УстановитьЗначениеКонстанты(НаименованиеКонстанты, Знач ЗначениеКонстанты) Экспорт
		
		Если НайтиСвойство(НаименованиеКонстанты) = Неопределено Тогда
			СоздатьСвойство(Новый Структура("Ключ", НаименованиеКонстанты));
		КонецЕсли;
		
		XMLТип= XMLТипЗнч(ЗначениеКонстанты);
		
		Если XMLТип <> Неопределено И Найти(НРег(XMLТип.ИмяТипа), НРег("Ref.")) > 0 Тогда
			
			ЗаписьXML= Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			
			ЗаписатьXML(ЗаписьXML, ЗначениеКонстанты);
			
			ЗначениеКонстанты= ЗаписьXML.Закрыть();
			
		КонецЕсли;
		
		УстановитьЗначениеСвойства(МетодСервера(,"ОбъектКонстант"), НаименованиеКонстанты, "Константа", ЗначениеКонстанты);
		
	КонецПроцедуры
	
	Функция ПолучитьЗначениеКонстанты(НаименованиеКонстанты) Экспорт
		
		ЗначениеКонстанты= ПолучитьЗначениеСвойства(МетодСервера(,"ОбъектКонстант"), НаименованиеКонстанты, "Константа");
		
		Если ТипЗнч(ЗначениеКонстанты) = Тип("Строка") И Лев(ЗначениеКонстанты, 1) = "<" Тогда
			
			ЧтениеXML= Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ЗначениеКонстанты);
			
			Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				ЗначениеКонстанты= ПрочитатьXML(ЧтениеXML);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ЗначениеКонстанты;
		
	КонецФункции
	
	Функция ОбъектКонстант() Экспорт
		
		Если НЕ Метаданные.Константы.Найти("ВалютаРегламентированногоУчета") = Неопределено Тогда
			Возврат Константы.ВалютаРегламентированногоУчета.Получить();
		Иначе
			Возврат Константы.ВалютаУчета.Получить();
		КонецЕсли;
		
	КонецФункции
	
//} АДАПТЕР

//{ РАБОТАСBASE64
	
	Функция ДобавитьНулиВПредставлениеЧисла(чс, Длина)
		
		результат = Формат(чс,"ЧН=; ЧГ=");
		Пока стрДлина(результат) < Длина Цикл 
			результат = "0"+результат
		Конеццикла;
		
		Возврат результат;
		
	конецФункции
	
	Функция ТаблицаПерекодировки() Экспорт
		
		//Формируем таблицу соответствия 3-хсимвольных 16-ричных слов и 2-х символьных 64-ричных слов
		//Готовую сформированную таблицу берем из подготовленного макета
		
		МассивТ = Новый Массив;
		МассивТ.Добавить(Тип("Строка"));
		
		Макет=			ПолучитьМакет("ТаблицаПерекодировки");
		ОбластьТела=	Макет.ПолучитьОбласть("ТелоМакета");
		
		ТабДок=			Новый ТабличныйДокумент;
		ТабДок.Вывести(ОбластьТела);
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Число2", Новый ОписаниеТипов(МассивТ));
		ТЗ.Колонки.Добавить("Число16", Новый ОписаниеТипов(МассивТ));
		ТЗ.Колонки.Добавить("Число64", Новый ОписаниеТипов(МассивТ));
		ТЗ.Индексы.Добавить("Число16");
		
		Для НомерСтроки = 1 По 4096 Цикл
			СтрокаТЗ=			ТЗ.Добавить();
			СтрокаТЗ.Число2=	ТабДок.Область(НомерСтроки, 1).Текст;
			СтрокаТЗ.Число16=	ТабДок.Область(НомерСтроки, 2).Текст;
			СтрокаТЗ.Число64=	ТабДок.Область(НомерСтроки, 3).Текст;
		КонецЦикла;
		
		Возврат ТЗ;
		
	КонецФункции	
	
	Функция ПолучитьЧисло64ИзЧисла16(Число)
		
		ТаблицаПерекодировки= МетодСервера(,"ТаблицаПерекодировки");
		
		Число16 = Число;
		Число64 = "";
		
		пока стрДлина(Число16)>0 цикл 
			разряд = ДобавитьНулиВПредставлениеЧисла(прав(Число16, 3),3);
			Число16 = ?(  стрДлина(Число16)<4  , "" , лев(Число16, стрДлина(Число16)-3)    );
			выборкаСтрок = ТаблицаПерекодировки.НайтиСтроки(Новый Структура("Число16", разряд));
			Если выборкаСтрок.количество()>0 тогда 
				Число64 =  выборкаСтрок[0].Число64+Число64
			Иначе 
				вызватьИсключение("Не удается перекодировать число "+число+"из 16-х в 64-х")
			КонецЕсли; 	  
		КонецЦикла;	
		
		возврат Число64;
	КонецФункции 
	
	Функция ПолучитьЧисло16ИзГуида(Гуид)
		возврат стрЗаменить(гуид, "-", "");
	конецфункции	
	
	Функция ПолучитьГуидИзЧисла16(Число16)
		
		Возврат сред(Число16, 1, 8)+"-"+сред(Число16, 9, 4)+"-"+сред(Число16, 13, 4)+"-"+сред(число16, 17, 4)+"-"+сред(число16, 21, 20)+"-"+сред(число16, 41, 4)+"-"+
				сред(число16, 45, 4)+"-"+сред(число16, 49, 4)+"-"+сред(число16, 53, 12);
		
	КонецФункции
	
	Функция ПолучитьЧисло2изЧисла64(Число64)
		Число64_ =   Формат(число64,"ЧН=;  ЧГ=");
		Число2 = "";
		Для ц = 1 по стрДлина(Число64_) цикл 
			символ64 = сред(число64, ц,1);
			Если символ64="A" тогда 
				Символ2 = "000000"
			ИначеЕсли символ64="B" тогда 
				Символ2 = "000001"
			ИначеЕсли символ64="C" тогда 
				Символ2 = "000010"
			ИначеЕсли символ64="D" тогда 
				Символ2 = "000011"
			ИначеЕсли символ64="E" тогда 
				Символ2 = "000100"
			ИначеЕсли символ64="F" тогда 
				Символ2 = "000101"
			ИначеЕсли символ64="G" тогда 
				Символ2 = "000110"
			ИначеЕсли символ64="H" тогда 
				Символ2 = "000111"
			ИначеЕсли символ64="I" тогда 
				Символ2 = "001000"
			ИначеЕсли символ64="J" тогда 
				Символ2 = "001001"
			ИначеЕсли символ64="K" тогда 
				Символ2 = "001010"
			ИначеЕсли символ64="L" тогда 
				Символ2 = "001011"
			ИначеЕсли символ64="M" тогда 
				Символ2 = "001100"
			ИначеЕсли символ64="N" тогда 
				Символ2 = "001101"
			ИначеЕсли символ64="O" тогда 
				Символ2 = "001110"
			ИначеЕсли символ64="P" тогда 
				Символ2 = "001111"
			ИначеЕсли символ64="Q" тогда 
				Символ2 = "010000"
			ИначеЕсли символ64="R" тогда 
				Символ2 = "010001"
			ИначеЕсли символ64="S" тогда 
				Символ2 = "010010"
			ИначеЕсли символ64="T" тогда 
				Символ2 = "010011"
			ИначеЕсли символ64="U" тогда 
				Символ2 = "010100"
			ИначеЕсли символ64="V" тогда 
				Символ2 = "010101"
			ИначеЕсли символ64="W" тогда 
				Символ2 = "010110"
			ИначеЕсли символ64="X" тогда 
				Символ2 = "010111"
			ИначеЕсли символ64="Y" тогда 
				Символ2 = "011000"
			ИначеЕсли символ64="Z" тогда 
				Символ2 = "011001"
			ИначеЕсли символ64="a" тогда 
				Символ2 = "011010"
			ИначеЕсли символ64="b" тогда 
				Символ2 = "011011"
			ИначеЕсли символ64="c" тогда 
				Символ2 = "011100"
			ИначеЕсли символ64="d" тогда 
				Символ2 = "011101"
			ИначеЕсли символ64="e" тогда 
				Символ2 = "011110"
			ИначеЕсли символ64="f" тогда 
				Символ2 = "011111"
			ИначеЕсли символ64="g" тогда 
				Символ2 = "100000"
			ИначеЕсли символ64="h" тогда 
				Символ2 = "100001"
			ИначеЕсли символ64="i" тогда 
				Символ2 = "100010"
			ИначеЕсли символ64="j" тогда 
				Символ2 = "100011"
			ИначеЕсли символ64="k" тогда 
				Символ2 = "100100"
			ИначеЕсли символ64="l" тогда 
				Символ2 = "100101"
			ИначеЕсли символ64="m" тогда 
				Символ2 = "100110"
			ИначеЕсли символ64="n" тогда 
				Символ2 = "100111"
			ИначеЕсли символ64="o" тогда 
				Символ2 = "101000"
			ИначеЕсли символ64="p" тогда 
				Символ2 = "101001"
			ИначеЕсли символ64="q" тогда 
				Символ2 = "101010"
			ИначеЕсли символ64="r" тогда 
				Символ2 = "101011"
			ИначеЕсли символ64="s" тогда 
				Символ2 = "101100"
			ИначеЕсли символ64="t" тогда 
				Символ2 = "101101"
			ИначеЕсли символ64="u" тогда 
				Символ2 = "101110"
			ИначеЕсли символ64="v" тогда 
				Символ2 = "101111"
			ИначеЕсли символ64="w" тогда 
				Символ2 = "110000"
			ИначеЕсли символ64="x" тогда 
				Символ2 = "110001"
			ИначеЕсли символ64="y" тогда 
				Символ2 = "110010"
			ИначеЕсли символ64="z" тогда 
				Символ2 = "110011"
				
			ИначеЕсли символ64="0" тогда 
				Символ2 = "110100"
			ИначеЕсли символ64="1" тогда 
				Символ2 = "110101"
			ИначеЕсли символ64="2" тогда 
				Символ2 = "110110"
			ИначеЕсли символ64="3" тогда 
				Символ2 = "110111"
			ИначеЕсли символ64="4" тогда 
				Символ2 = "111000"
			ИначеЕсли символ64="5" тогда 
				Символ2 = "111001"
			ИначеЕсли символ64="6" тогда 
				Символ2 = "111010"
			ИначеЕсли символ64="7" тогда 
				Символ2 = "111011"
			ИначеЕсли символ64="8" тогда 
				Символ2 = "111100"
			ИначеЕсли символ64="9" тогда 
				Символ2 = "111101"
			ИначеЕсли символ64="+" тогда 
				Символ2 = "111110"
			ИначеЕсли символ64="/" тогда 
				Символ2 = "111111"
			Иначе 
				вызватьИсключение("ошибочный символ "+символ64+" в 64-ричном представлении числа")
			КонецЕсли; 
			Число2 = Число2+ Символ2;
		КонецЦикла;
		Возврат Число2;
	КонецФункции	
	
	Функция ПолучитьЧисло16изЧисла2(Число)
		Число2 = Формат(Число,"ЧН=; ЧВН=; ЧГ=");
		ОстатокСимволов = (4 - стрДлина(Число2) % 4) % 4;
		Пока остатокСимволов>0 цикл 
			число2 = "0"+Число2;
			ОстатокСимволов = ОстатокСимволов - 1; 
		КонецЦикла;
		
		Число16 = "";
		//отрезаем слева куски по 4 бит и делаем число-16
		Пока число2<>"" цикл 
			Символ2 = лев(Число2, 4);
			Если Символ2 = "0000" тогда 
				Символ16 = "0"
			ИначеЕсли Символ2 = "0001" тогда 
				Символ16  = "1"
			ИначеЕсли Символ2 = "0010" тогда 
				Символ16  = "2"
			ИначеЕсли Символ2 = "0011" тогда 
				Символ16  = "3"
			ИначеЕсли Символ2 = "0100" тогда 
				Символ16  = "4"
			ИначеЕсли Символ2 = "0101" тогда 
				Символ16  = "5"
			ИначеЕсли Символ2 = "0110" тогда 
				Символ16  = "6"
			ИначеЕсли Символ2 = "0111" тогда 
				Символ16  = "7"
			ИначеЕсли Символ2 = "1000" тогда 
				Символ16  = "8"
			ИначеЕсли Символ2 = "1001" тогда 
				Символ16  = "9"
			ИначеЕсли Символ2 = "1010" тогда 
				Символ16  = "a"
			ИначеЕсли Символ2 = "1011" тогда 
				Символ16  = "b"
			ИначеЕсли Символ2 = "1100" тогда 
				Символ16  = "c"
			ИначеЕсли Символ2 = "1101" тогда 
				Символ16  = "d"
			ИначеЕсли Символ2 = "1110" тогда 
				Символ16  = "e"
			ИначеЕсли Символ2 = "1111" тогда 
				Символ16  = "f"
			Иначе 
				вызватьИсключение("ошибочный символ "+Символ2+" в двоичном представлении числа") 
			КонецЕсли;
			
			Число16 = Число16 + Символ16;
			
			Число2 = прав(число2 , стрДлина(Число2)-4);	
		КонецЦикла;
		
		возврат число16;
		
		
	КонецФункции 	
	
	Функция КонвертироватьГуидВЧисло64(Гуид) Экспорт 
		
		Число16 =   ПолучитьЧисло16ИзГуида(гуид);
		Число64  =  ПолучитьЧисло64ИзЧисла16(Число16);
		
		Число64 = Прав(Число64, Окр(СтрДлина(Число16) / 1.5));
		
		Возврат   Число64;
		
	КонецФункции	
	
	Функция КонвертироватьЧисло64вГуид(Число64) Экспорт 
		число16 = ПолучитьЧисло16изЧисла2(ПолучитьЧисло2изЧисла64(Число64));
		если стрДлина(число16)>64 тогда 
			число16 = прав(Число16, 64);
		КонецЕсли;
		
		возврат  ПолучитьГуидИзЧисла16(Число16);
		
	КонецФункции
	
//} РАБОТАСBASE64

Функция ОформитьОшибкиВHTML(ОшибкиСтруктуры, Заголовок) Экспорт
	
	Если ОшибкиСтруктуры <> "" тогда 
		
		Возврат  
		
		"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
		|
		|<html xmlns=""http://www.w3.org/1999/xhtml"">
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/>
		|<style type=""text/css"">
		| h3 {
		|  margin-top: 0.5em; /* Отступ сверху */
		|  margin-bottom: 0em; /* Отступ снизу */
		| }
		| p {
		|  margin-top: 0.2em; /* Отступ сверху */
		|  margin-bottom: 0em; /* Отступ снизу */
		| }
		|</style>
		|</head>
		|<body>
		|<h2>"+Заголовок+"</h2>"+ОшибкиСтруктуры+"
		|</body>
		|</html>";
		
	Иначе 
		Возврат "";
	КонецЕсли;	
	
КонецФункции

Процедура ЗаполнитьПодписантаДляXmlTorg12(Official, Визирующий) Экспорт
	
	Official.Surname 	=  Визирующий.Surname;
	Official.FirstName  =  Визирующий.FirstName;
	Official.Patronymic =  Визирующий.Patronymic;
	Official.JobTitle   =  Визирующий.JobTitle;
	
КонецПроцедуры	

Процедура ЗаполнитьФИОПодписанта(official, фио) Экспорт
	
	ф = фио;
	
	Official.Surname =		ВыделитьСлово(ф);
	Official.FirstName=		ВыделитьСлово(ф);
	Official.Patronymic=	ВыделитьСлово(ф);
	
КонецПроцедуры

Функция РазобратьДопПоле_СтарыйФормат(AdditionalInfo)
	
	СтруктураДопПолей=    Новый Структура("head, top, bottom, ground");
	
	НашлиТег=    Ложь;
	
	Для каждого ДопПоле Из СтруктураДопПолей Цикл
		
		ОткрывающийТег= "<" + ДопПоле.Ключ + ">";
		ЗакрывающийТег=	"</" + ДопПоле.Ключ + ">";
		
		Если НЕ Найти(AdditionalInfo, ОткрывающийТег) = 0
			И НЕ Найти(AdditionalInfo, ЗакрывающийТег) = 0 Тогда
			
			НачалоДопПоля=    Найти(ВРег(AdditionalInfo), ВРег(ОткрывающийТег)) + СтрДлина(ОткрывающийТег);
			
			ТекстДопПоля=    Сред(AdditionalInfo, НачалоДопПоля, СтрДлина(AdditionalInfo));
			
			ТекстДопПоля= 	Сред(ТекстДопПоля, 0, Найти(ТекстДопПоля, "</") - 1);
			СтруктураДопПолей.Вставить(ДопПоле.Ключ, СокрЛП(ТекстДопПоля));
			
			НашлиТег=    	Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НашлиТег И ЗначениеЗаполнено(AdditionalInfo) Тогда
		СтруктураДопПолей.Вставить("top", СокрЛП(AdditionalInfo));
	КонецЕсли;
	
	Возврат СтруктураДопПолей;
	
КонецФункции

Функция РазобратьДопПоле(StructedAdditionalInfos)
		
	СтруктураДопПолей	= Новый Структура("head, top, bottom, ground");
	СтрокаДопПолей 		= "";
	Сч = 1;
	
	Для Каждого Стр Из StructedAdditionalInfos Цикл
		Если Стр.Key <> "_" Тогда
			СтрокаДопПолей = СтрокаДопПолей + Стр.Key + ": " + Стр.Value;
			Если Сч <> StructedAdditionalInfos.Количество() Тогда
				СтрокаДопПолей = СтрокаДопПолей + ", ";
			КонецЕсли;
			Сч = Сч + 1;
		Иначе
			СтрокаДопПолей = СтрокаДопПолей + Стр.Value;
		КонецЕсли;	
	КонецЦикла;
	
	СтруктураДопПолей.Вставить("top", СокрЛП(СтрокаДопПолей));
	
	Возврат СтруктураДопПолей;
	
КонецФункции

Функция ДобавитьРазделитель(Стр, Префикс= "") 
	возврат ?(ЗначениеЗаполнено(стр), Префикс+сокрЛП(Стр)+", ", "");
конецфункции

Функция НаименованияРегионовРоссии() Экспорт
	
	ЧтениеXML= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолучитьМакет("БиблиотекаТекстов").НаборыДанных.НаименованияРегионовРоссии.Запрос);
	НаименованияРегионовРоссии= СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
	Возврат НаименованияРегионовРоссии;
	
КонецФункции

Функция НаименованиеРегиона(Знач КодРегиона)
	
	Попытка
		КодРегиона= Число(КодРегиона)
	Исключение КонецПопытки;
	
	Возврат Строка(МетодСервера(,"НаименованияРегионовРоссии")[КодРегиона]);
	
КонецФункции	 

Функция КодРегиона(Знач НаименованиеРегиона) Экспорт
	
	НаименованиеРегиона= НРег(НаименованиеРегиона);
	КодРегиона= "";
	
	Если 	  Найти(НаименованиеРегиона, "адыгея") > 0 Тогда 
		КодРегиона= "01"
	ИначеЕсли Найти(НаименованиеРегиона, "башкортостан") > 0 Тогда 
		КодРегиона= "02"
	ИначеЕсли Найти(НаименованиеРегиона, "алтайский") > 0 Тогда 
		КодРегиона= "22" 
	ИначеЕсли Найти(НаименованиеРегиона, "алтай") > 0 Тогда 
		КодРегиона= "04"
	ИначеЕсли Найти(НаименованиеРегиона, "ингушетия") > 0 Тогда 
		КодРегиона= "06"
	ИначеЕсли Найти(НаименованиеРегиона, "кабардино") > 0 Тогда 
		КодРегиона= "07"
	ИначеЕсли Найти(НаименованиеРегиона, "карачаево") > 0 Тогда 
		КодРегиона= "09"
	ИначеЕсли Найти(НаименованиеРегиона, "карелия") > 0 Тогда 
		КодРегиона= "10"
	ИначеЕсли Найти(НаименованиеРегиона, "коми") > 0 Тогда 
		КодРегиона= "11"
	ИначеЕсли Найти(НаименованиеРегиона, "марий") > 0 Тогда 
		КодРегиона= "12" 
	ИначеЕсли Найти(НаименованиеРегиона, "мордовия") > 0 Тогда 
		КодРегиона= "13" 
	ИначеЕсли Найти(НаименованиеРегиона, "татарстан") > 0 Тогда 
		КодРегиона= "16" 
	ИначеЕсли Найти(НаименованиеРегиона, "тыва") > 0 Тогда 
		КодРегиона= "17" 
	ИначеЕсли Найти(НаименованиеРегиона, "удмуртская") > 0 Тогда 
		КодРегиона= "18" 
	ИначеЕсли Найти(НаименованиеРегиона, "тыва") > 0 Тогда 
		КодРегиона= "17" 
	ИначеЕсли Найти(НаименованиеРегиона, "хакасия") > 0 Тогда 
		КодРегиона= "19" 
	ИначеЕсли Найти(НаименованиеРегиона, "чувашская") > 0 Тогда 
		КодРегиона= "21" 
	ИначеЕсли Найти(НаименованиеРегиона, "чувашия") > 0 Тогда 
		КодРегиона= "21" 
	ИначеЕсли Найти(НаименованиеРегиона, "краснодарский") > 0 Тогда 
		КодРегиона= "23" 
	ИначеЕсли Найти(НаименованиеРегиона, "приморский") > 0 Тогда 
		КодРегиона= "25" 
	ИначеЕсли Найти(НаименованиеРегиона, "ставропольский") > 0 Тогда 
		КодРегиона= "26" 
	ИначеЕсли Найти(НаименованиеРегиона, "хабаровский") > 0 Тогда 
		КодРегиона= "27" 
	ИначеЕсли Найти(НаименованиеРегиона, "амурская") > 0 Тогда 
		КодРегиона= "28" 
	ИначеЕсли Найти(НаименованиеРегиона, "архангельская") > 0 Тогда 
		КодРегиона= "29" 
	ИначеЕсли Найти(НаименованиеРегиона, "астраханская") > 0 Тогда 
		КодРегиона= "30" 
	ИначеЕсли Найти(НаименованиеРегиона, "белгородская") > 0 Тогда 
		КодРегиона= "31" 
	ИначеЕсли Найти(НаименованиеРегиона, "брянская") > 0 Тогда 
		КодРегиона= "32"                                                    
	ИначеЕсли Найти(НаименованиеРегиона, "владимирская") > 0 Тогда 
		КодРегиона= "33"                                                    
	ИначеЕсли Найти(НаименованиеРегиона, "волгоградская") > 0 Тогда 
		КодРегиона= "34" 
	ИначеЕсли Найти(НаименованиеРегиона, "вологодская") > 0 Тогда 
		КодРегиона= "35" 
	ИначеЕсли Найти(НаименованиеРегиона, "воронежская") > 0 Тогда 
		КодРегиона= "36" 
	ИначеЕсли Найти(НаименованиеРегиона, "ивановская") > 0 Тогда 
		КодРегиона= "37" 
	ИначеЕсли Найти(НаименованиеРегиона, "иркутская") > 0 Тогда 
		КодРегиона= "38" 
	ИначеЕсли Найти(НаименованиеРегиона, "калининградская") > 0 Тогда 
		КодРегиона= "39" 
	ИначеЕсли Найти(НаименованиеРегиона, "калужская") > 0 Тогда 
		КодРегиона= "40" 
	ИначеЕсли Найти(НаименованиеРегиона, "камчатский") > 0 Тогда 
		КодРегиона= "41" 
	ИначеЕсли Найти(НаименованиеРегиона, "кемеровская") > 0 Тогда 
		КодРегиона= "42" 
	ИначеЕсли Найти(НаименованиеРегиона, "кировская") > 0 Тогда 
		КодРегиона= "43" 
	ИначеЕсли Найти(НаименованиеРегиона, "костромская") > 0 Тогда 
		КодРегиона= "44" 
	ИначеЕсли Найти(НаименованиеРегиона, "курганская") > 0 Тогда 
		КодРегиона= "45"   
	ИначеЕсли Найти(НаименованиеРегиона, "курская") > 0 Тогда 
		КодРегиона= "46" 		
	ИначеЕсли Найти(НаименованиеРегиона, "ленинградская") > 0 Тогда 
		КодРегиона= "47" 
	ИначеЕсли Найти(НаименованиеРегиона, "липецкая") > 0 Тогда 
		КодРегиона= "48" 
	ИначеЕсли Найти(НаименованиеРегиона, "магаданская") > 0 Тогда 
		КодРегиона= "49" 
	ИначеЕсли Найти(НаименованиеРегиона, "московская") > 0 Тогда 
		КодРегиона= "50"
	ИначеЕсли Найти(НаименованиеРегиона, "мурманская") > 0 Тогда 
		КодРегиона= "51"
	ИначеЕсли Найти(НаименованиеРегиона, "нижегородская") > 0 Тогда 
		КодРегиона= "52"
	ИначеЕсли Найти(НаименованиеРегиона, "новосибирская") > 0 Тогда 
		КодРегиона= "54"
	ИначеЕсли Найти(НаименованиеРегиона, "томская") > 0 Тогда 
		КодРегиона= "70"
	ИначеЕсли Найти(НаименованиеРегиона, "омская") > 0 Тогда 
		КодРегиона= "55"
	ИначеЕсли Найти(НаименованиеРегиона, "оренбургская") > 0 Тогда 
		КодРегиона= "56"
	ИначеЕсли Найти(НаименованиеРегиона, "орловская") > 0 Тогда 
		КодРегиона= "57"
	ИначеЕсли Найти(НаименованиеРегиона, "пензенская") > 0 Тогда 
		КодРегиона= "58"
	ИначеЕсли Найти(НаименованиеРегиона, "пермский") > 0 Тогда 
		КодРегиона= "59"
	ИначеЕсли Найти(НаименованиеРегиона, "псковская") > 0 Тогда 
		КодРегиона= "60"
	ИначеЕсли Найти(НаименованиеРегиона, "ростовская") > 0 Тогда 
		КодРегиона= "61"
	ИначеЕсли Найти(НаименованиеРегиона, "рязанская") > 0 Тогда 
		КодРегиона= "62"
	ИначеЕсли Найти(НаименованиеРегиона, "самарская") > 0 Тогда 
		КодРегиона= "63"
	ИначеЕсли Найти(НаименованиеРегиона, "саратовская") > 0 Тогда 
		КодРегиона= "64"
	ИначеЕсли Найти(НаименованиеРегиона, "сахалинская") > 0 Тогда 
		КодРегиона= "65"
	ИначеЕсли Найти(НаименованиеРегиона, "саха") > 0 Тогда 
		КодРегиона= "14" 
	ИначеЕсли Найти(НаименованиеРегиона, "якутия") > 0 Тогда 
		КодРегиона= "14"	
	ИначеЕсли Найти(НаименованиеРегиона, "смоленская") > 0 Тогда 
		КодРегиона= "67"
	ИначеЕсли Найти(НаименованиеРегиона, "тамбовская") > 0 Тогда 
		КодРегиона= "68"
	ИначеЕсли Найти(НаименованиеРегиона, "тверская") > 0 Тогда 
		КодРегиона= "69"
	ИначеЕсли Найти(НаименованиеРегиона, "тульская") > 0 Тогда 
		КодРегиона= "71"
	ИначеЕсли Найти(НаименованиеРегиона, "тюменская") > 0 Тогда 
		КодРегиона= "72"
	ИначеЕсли Найти(НаименованиеРегиона, "ульяновская") > 0 Тогда 
		КодРегиона= "73"
	ИначеЕсли Найти(НаименованиеРегиона, "челябинская") > 0 Тогда 
		КодРегиона= "74"
	ИначеЕсли Найти(НаименованиеРегиона, "забайкальский") > 0 Тогда 
		КодРегиона= "75"
	ИначеЕсли Найти(НаименованиеРегиона, "ярославская") > 0 Тогда 
		КодРегиона= "76"
	ИначеЕсли Найти(НаименованиеРегиона, "еврейская") > 0 Тогда 
		КодРегиона= "79"
	ИначеЕсли Найти(НаименованиеРегиона, "ненецкий") > 0 Тогда 
		КодРегиона= ?(Найти(НаименованиеРегиона, "ямало") > 0, "89", "83")
	ИначеЕсли Найти(НаименованиеРегиона, "мансийский") > 0 Тогда 
		КодРегиона= "86"
	ИначеЕсли Найти(НаименованиеРегиона, "чукотский") > 0 Тогда 
		КодРегиона= "87"
	ИначеЕсли Найти(НаименованиеРегиона, "чеченская") > 0 Тогда 
		КодРегиона= "20"
	ИначеЕсли Найти(НаименованиеРегиона, "свердловская") > 0 Тогда 
		КодРегиона= "66"
	ИначеЕсли Найти(НаименованиеРегиона, "новгородская") > 0 Тогда 
		КодРегиона= "53"
	ИначеЕсли Найти(НаименованиеРегиона, "горьковская") > 0 Тогда   //синоним нижегородской
		КодРегиона= "52"
	ИначеЕсли Найти(НаименованиеРегиона, "бурятия") > 0 Тогда 
		КодРегиона= "03"
	ИначеЕсли Найти(НаименованиеРегиона, "пермская") > 0 Тогда     //Пермская обл - синоним Пермского края
		КодРегиона= "59"
	ИначеЕсли Найти(НаименованиеРегиона, "красноярский") > 0 Тогда 
		КодРегиона= "24"
	ИначеЕсли Найти(НаименованиеРегиона, "северная осетия") > 0 Тогда 
		КодРегиона= "15"
	ИначеЕсли Найти(НаименованиеРегиона, "камчатская") > 0 Тогда //Камчатская обл - синоним Камчатского края
		КодРегиона= "41"                                                                                                  
	ИначеЕсли Найти(НаименованиеРегиона, "калмыкия") > 0 Тогда 
		КодРегиона= "08"
	ИначеЕсли Найти(НаименованиеРегиона, "читинская") > 0 Тогда   //Забайкальский край
		КодРегиона= "75"                                                                           
	ИначеЕсли Найти(НаименованиеРегиона, "москва") > 0 Тогда 
		КодРегиона= "77"
	ИначеЕсли Найти(НаименованиеРегиона, "калмыкия") > 0 Тогда 
		КодРегиона= "08"
	ИначеЕсли Найти(НаименованиеРегиона, "дагестан") > 0 Тогда 
		КодРегиона= "05"
	ИначеЕсли Найти(НаименованиеРегиона, "санкт-петербург") > 0 Тогда 
		КодРегиона= "78"
	ИначеЕсли Найти(НаименованиеРегиона, "ленинград") > 0 Тогда 
		КодРегиона= "78"
	ИначеЕсли Найти(НаименованиеРегиона, "крым") > 0 Тогда 
		КодРегиона= "91"
	ИначеЕсли Найти(НаименованиеРегиона, "севастополь") > 0 Тогда 
		КодРегиона= "92"
	КонецЕсли;
	
	Возврат КодРегиона;
	
КонецФункции	

Функция ТолькоЦифры(СтрокаПроверки)
	ПослеЗамены = стрЗаменить(строкаПроверки, "1", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "2", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "3", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "4", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "5", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "6", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "7", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "8", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "9", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "0", "");
	
	возврат (послеЗамены = "");
	
Конецфункции

//{Загрузка классификаторов

	Функция ОтрезатьПравуюЗапятую(Стр)
		результат = сокрЛП(стр);
		пока прав(результат, 1)="," цикл 
			Результат = лев(результат, стрДлина(результат)-1);
		КонецЦикла;	
		
		возврат результат;
	КонецФункции
	
	Процедура ДобавитьВОКЕИ(ОКЕИ, Код, НаименованиеПолное, НаименованиеКраткое)
		
		стр = ОКЕИ.Добавить();
		стр.код 				  = код;
		стр.НаименованиеПолное   = наименованиеПолное;
		стр.НаименованиеКраткое  = наименованиеКраткое;
		
	конецПроцедуры	
	
	Процедура ДобавитьВОКСМ(ОКСМ, код, НаименованиеПолное, НаименованиеКраткое)	
		стр = ОКСМ.Добавить();
		стр.код 				  = код;
		стр.НаименованиеПолное   = наименованиеПолное;
		стр.НаименованиеКраткое  = наименованиеКраткое;	
		
	КонецПроцедуры	
	
	Процедура ЗаполнитьОКЕИПоТабличномуДокументу(ОКЕИ)
		Макет = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
		Для ц = 1 по 500 цикл 
			
			код 			    = Макет.Область(ц, 2, ц, 2).Текст;
			НаименованиеПолное = Макет.Область(ц, 3, ц, 3).Текст;
			НаименованиеКраткое= Макет.Область(ц, 4, ц, 4).Текст;
			
			Если (код<>"Код") и ЗначениеЗаполнено(Код) и ЗначениеЗаполнено(НаименованиеКраткое) тогда
				
				ЧислоСтрок = макс(СтрЧислоСтрок(НаименованиеПолное),  СтрЧислоСтрок(НаименованиеКраткое));
				Для цц = 1 по ЧислоСтрок цикл 
					ДобавитьВОКЕИ(ОКЕИ, код,
					?(цц <=СтрЧислоСтрок(НаименованиеПолное), СтрПолучитьСтроку(НаименованиеПолное, цц), ""),
					?(цц <=СтрЧислоСтрок(НаименованиеКраткое), СтрПолучитьСтроку(НаименованиеКраткое, цц), ""));
				КонецЦикла;	
			КонецЕсли;	 
		конеццикла;	
	КонецПроцедуры
	
	Процедура ЗаполнитьОКЕИПоДереву(ОКЕИ)
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			
			ИмяСправочникаКлассификатора= "КлассификаторЕдиницИзмерения";
		
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Если Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено Тогда					
				ИмяСправочникаКлассификатора= "УпаковкиЕдиницыИзмерения"; //УТ 11.2
			Иначе
				ИмяСправочникаКлассификатора= "ЕдиницыИзмерения";
			КонецЕсли;
			
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			
			ИмяСправочникаКлассификатора=	"КлассификаторЕдиницИзмерения";
			
		Иначе
			
			ИмяСправочникаКлассификатора=	"ЕдиницыИзмерения";
			
		КонецЕсли;
		
		ИмяВременногоФайла= ПолучитьИмяВременногоФайла();
		Макет= Справочники[ИмяСправочникаКлассификатора].ПолучитьМакет("КлассификаторЕдиницИзмерения");
		Макет.Записать(ИмяВременногоФайла);
		
		Попытка 
			Дерево= ЗначениеИзФайла(ИмяВременногоФайла);

		Исключение 
			Чтение=	Новый ЧтениеXML;
			Чтение.ОткрытьФайл(ИмяВременногоФайла);
			Дерево=	СериализаторXDTO.ПрочитатьXML(Чтение);
		КонецПопытки;
		
		Для каждого Строка1 из Дерево.Строки Цикл 
			Для каждого Строка2 из Строка1.Строки Цикл
				Для каждого Строка3 из Строка2.Строки Цикл
					ДобавитьВОКЕИ(ОКЕИ, Строка3.кодчисловой, Строка3.Наименование, Строка3.УсловноеОбозначениеНациональное);
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;
		
		ок= Истина;
		
	КонецПроцедуры
	
	Функция ПолучитьОКЕИ() Экспорт
		
		ОКЕИ= Новый ТаблицаЗначений;
		ОКЕИ.Колонки.Добавить("Код");
		ОКЕИ.Колонки.Добавить("НаименованиеПолное");
		ОКЕИ.Колонки.Добавить("НаименованиеКраткое");
		
		Если 	ПараметрыКлиентСервер.МаркерКонфигурации = "БП30"
			ИЛИ ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			ЗаполнитьОКЕИПоТабличномуДокументу(ОКЕИ);
		Иначе 
			ЗаполнитьОКЕИПоДереву(ОКЕИ);
		КонецЕсли;	 
		
		ДобавитьВОКЕИ(ОКЕИ, "715", "Пара", "Пар");
		ДобавитьВОКЕИ(ОКЕИ, "778", "Упаковка", "Уп");
		ДобавитьВОКЕИ(ОКЕИ, "778", "Упаковка", "Уп");
		ДобавитьВОКЕИ(ОКЕИ, "449", "Тонно - километр", "тонна/км");
		ДобавитьВОКЕИ(ОКЕИ, "449", "Тонно - километр", "т/км");
		ДобавитьВОКЕИ(ОКЕИ, "168", "Тонна", "тн");
		ДобавитьВОКЕИ(ОКЕИ, "163", "Грамм", "гр");
		ДобавитьВОКЕИ(ОКЕИ, "018", "Погонный метр", "пм");
		
		Возврат ОКЕИ;
		
	КонецФункции
	
	Функция ПолучитьОКСМ() Экспорт
		
		ОКСМ = Новый ТаблицаЗначений;
		ОКСМ.Колонки.Добавить("Код");
		ОКСМ.Колонки.Добавить("НаименованиеПолное");
		ОКСМ.Колонки.Добавить("НаименованиеКраткое");
		
		КлассификаторXML = Справочники.СтраныМира.ПолучитьМакет("Классификатор").ПолучитьТекст();
		Попытка
			КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
		Исключение 	
			
			Чтение=	Новый ЧтениеXML;
			Чтение.УстановитьСтроку(КлассификаторXML);
			КлассификаторТаблица=	СериализаторXDTO.ПрочитатьXML(Чтение);
			
			КлассификаторТаблица.колонки.Код.Имя = "Code";
			КлассификаторТаблица.колонки.Наименование.Имя = "ShortName";
			КлассификаторТаблица.колонки.НаименованиеПолное.Имя = "FullName";
			
		КонецПопытки;	
		
		Для каждого стр из КлассификаторТаблица цикл 
			код 			     = стр.Code;
			НаименованиеКраткое = стр.ShortName;
			НаименованиеПолное  = стр.FullName;
			
			Если (код<>"Код") и ЗначениеЗаполнено(Код)  тогда
				ДобавитьВОКСМ(ОКСМ,  код,  НаименованиеПолное,  НаименованиеКраткое);
			КонецЕсли;	 
		конеццикла;	
		
		ДобавитьВОКСМ(ОКСМ, "156", "Китайская Народная Республика", "КНР");
		ДобавитьВОКСМ(ОКСМ, "158", "Китай (Тайвань)", "Тайвань");
		ДобавитьВОКСМ(ОКСМ, "826", "Соединенное Королевство Великобритании и Северной Ирландии", "Великобритания");
		ДобавитьВОКСМ(ОКСМ, "840", "Соединенные Штаты Америки", "США");
		ДобавитьВОКСМ(ОКСМ, "980", "Европейский союз", "Евросоюз");
		ДобавитьВОКСМ(ОКСМ, "980", "Европейский союз", "ЕС");
		ДобавитьВОКСМ(ОКСМ, "980", "Европейский союз", "Европейский союз");
		ДобавитьВОКСМ(ОКСМ, "981", "Евразийский экономический союз", "ЕАЭС");
		
		Возврат ОКСМ;
		
	КонецФункции
	
	Функция ПолучитьОКВ() Экспорт
		
		ОКВ = Новый таблицаЗначений;
		ОКВ.Колонки.Добавить("Код");
		ОКВ.Колонки.Добавить("КодСимвольный");
		ОКВ.Колонки.Добавить("Наименование");
		
		КлассификаторXML = Справочники.Валюты.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
		
		попытка
			КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
		Исключение 	
			
			Чтение=	Новый ЧтениеXML;
			Чтение.УстановитьСтроку(КлассификаторXML);
			КлассификаторТаблица=	СериализаторXDTO.ПрочитатьXML(Чтение);
			
			КлассификаторТаблица.колонки.Код.Имя = "Code";
			КлассификаторТаблица.колонки.КодСимвольный.Имя = "CodeSymbol";
			КлассификаторТаблица.колонки.Наименование.Имя = "Name";
			
		КонецПопытки;	
		
		Для каждого стр из КлассификаторТаблица цикл 
			код 			    = стр.Code;
			КодСимвольный 		= стр.CodeSymbol;
			Наименование		= стр.Name;
			
			Если (код<>"Код") и ЗначениеЗаполнено(Код) и ЗначениеЗаполнено(КодСимвольный) тогда
				стр = ОКВ.Добавить();
				стр.код 			= код;
				стр.КодСимвольный = КодСимвольный;
				стр.Наименование  = Наименование;
			КонецЕсли;	 
		конеццикла;
		
		стр = ОКВ.Добавить();
		стр.код 			= "643";
		стр.КодСимвольный = "руб";
		стр.Наименование  = "Российский рубль";
		
		Возврат ОКВ;
		
	КонецФункции
	
	Функция КлассификаторыДляДиадок() Экспорт 
		
		Результат=	Новый Структура;
		Результат.Вставить("ОКЕИ",	ПолучитьОКЕИ());
		Результат.Вставить("ОКСМ",  ПолучитьОКСМ());
		Результат.Вставить("ОКВ", 	ПолучитьОКВ());
		
		Возврат Результат;
		
	КонецФункции
	
	Функция СтруктураКонтентаЗаполнена(СтруктураКонтента)
		естьЗаполненноеПоле = ложь;
		Для каждого Элемент из  СтруктураКонтента цикл 
			если ТипЗнч(Элемент.значение) = тип("Структура") тогда
				естьЗаполненноеПоле = естьЗаполненноеПоле или  СтруктураКонтентаЗаполнена(Элемент.значение)
			Иначе 
				естьЗаполненноеПоле = естьЗаполненноеПоле или  (ЗначениеЗаполнено(Элемент.значение) и (Элемент.значение<> ложь)) 
			КонецЕсли;
		КонецЦикла;	
		
		возврат  естьЗаполненноеПоле
		
	КонецФункции
	
	Функция Эквивалентны(стр1, стр2) 
		Если ЗначениеЗаполнено(стр1) = Ложь ИЛИ ЗначениеЗаполнено(стр2) = Ложь Тогда 
			Возврат Ложь;
		Иначе 	
			Возврат (Врег(СтрЗаменить(СокрЛП(стр1), ".", "")) = Врег(СтрЗаменить(СокрЛП(стр2), ".", "")))
		КонецЕсли;	
	КонецФункции
	
	Функция СтрокаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)
		если ОшибкаВалютыНеНайдена и   ОшибкаВалютыНеТотКод=ложь тогда
			возврат "наименования"
		ИначеЕсли 	ОшибкаВалютыНеНайдена=ложь и   ОшибкаВалютыНеТотКод тогда
			возврат "коды"
		ИначеЕсли 	ОшибкаВалютыНеНайдена и   ОшибкаВалютыНеТотКод тогда
			возврат "наименования и коды"
		Иначе 
			возврат ""
		конецЕсли;	
		
	КонецФункции
	
	Функция ЧисловойКодЕИ(Знач КодЕИ)
		
		КодЕИ=	СтрЗаменить(КодЕИ, "0", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "1", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "2", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "3", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "4", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "5", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "6", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "7", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "8", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "9", "");
		
		Если СокрЛП(КодЕИ) = "" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	Функция	ПроверитьЕИ(ЕИ, КодЕИ, СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод, ЭтоАкт= Ложь) Экспорт
	
		УИД = Строка(ЕИ.УникальныйИдентификатор());
		
		ОКЕИ= МетодСервера(,"КлассификаторыДляДиадок").ОКЕИ;
		
		СписокНайденныхКодовЕИ= Новый СписокЗначений;
		
		НайденнаяВПроверенныхЕИ= СписокПроверенныхЕИ.НайтиПоЗначению(ЕИ.Ссылка);
		Если ((НЕ ЭтоАкт) И (ЗначениеЗаполнено(КодЕИ) И НайденнаяВПроверенныхЕИ = Неопределено))
			ИЛИ ((ЭтоАкт) И (ЗначениеЗаполнено(ЕИ) И НЕ ПустаяСтрока(ЕИ.Наименование) И НайденнаяВПроверенныхЕИ = Неопределено)) Тогда
			
			СписокПроверенныхЕИ.Добавить(ЕИ.Ссылка);
			
			НашлиЕИ= Ложь;
			СписокНайденныхЕИ= Новый СписокЗначений;
			
			Для каждого Запись из ОКЕИ Цикл 
				Если Эквивалентны(Запись.НаименованиеПолное, ЕИ.Наименование) ИЛИ Эквивалентны(Запись.НаименованиеКраткое, ЕИ.Наименование) Тогда 
					Если Запись.Код = КодЕИ Тогда 
						НашлиЕИ= истина  ;
					ИначеЕсли СписокНайденныхКодовЕИ.НайтиПоЗначению(Запись.Код) = Неопределено Тогда 
						СписокНайденныхЕИ.Добавить(Запись);
						СписокНайденныхКодовЕИ.Добавить(Запись.Код);


					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			
			Если НашлиЕИ = Ложь Тогда
				Если НЕ ЧисловойКодЕИ(КодЕИ) Тогда
					
					ОшибкаЕИНеТотКод= Истина;
					Возврат "
						|Код единицы измерения «<a href=""ЕДИНИЦА:" + УИД+""">"+ЕИ.Наименование+"</a>» - "+КодЕИ+" не корректный</br>";
					
				ИначеЕсли СписокНайденныхЕИ.Количество() = 0 Тогда
					
					ОшибкаЕИНеНайдена= Истина;
					Возврат "
						|Единица измерения  «<a href=""ЕДИНИЦА:"  + УИД+""">"+ЕИ.Наименование+"</a>»
						|не найдена в <b>ОКЕИ</b></br>";
					
				ИначеЕсли СписокНайденныхЕИ.Количество() = 1 Тогда
					
					ОшибкаЕИНеТотКод= Истина;
					Возврат "
						|Код единицы измерения «<a href=""ЕДИНИЦА:" + УИД+""">"+ЕИ.Наименование+"</a>» - "+КодЕИ+"
						|не соответствует коду по <b>ОКЕИ</b> - "+СписокНайденныхЕИ[0].Значение.Код+"</br>";
						
				Иначе 
					
					ОшибкаЕИНеТотКод= Истина;
					СписокОш= "
						|Код единицы измерения «<a href=""ЕДИНИЦА:" + УИД+""">"+ЕИ.Наименование+"</a>» - "+КодЕИ+"
						|не соответствует коду по <b>ОКЕИ</b> </br>";
					Для каждого Элемент из СписокнайденныхЕИ Цикл 
						СписокОш= СписокОш + "

						|Единице измерения «"+Элемент.Значение.НаименованиеПолное+"», ("+Элемент.Значение.НаименованиеКраткое+") соответствует код ОКЕИ "+ Элемент.Значение.код+"</br>";
					КонецЦикла;	
					
					Возврат СписокОш;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецФункции
	
	Функция ПроверитьСтрану(СтранаПроисхождения, КодПроисх, СписокПроверенныхСтран, ОшибкаСтраныНенайдена, ОшибкаСтраныНеТотКод)
		
		ОКСМ= МетодСервера(,"КлассификаторыДляДиадок").ОКСМ;
		
		СписокНайденныхКодовСтран = новый СписокЗначений;
		СписокОшибокСтран = "";
		если ЗначениеЗаполнено(СтранаПроисхождения) и (СписокПроверенныхСтран.НайтиПоЗначению(СтранаПроисхождения) = неопределено ) тогда 
			//проверяем код страны
			НашлиСтрану = ложь;
			СписокПроверенныхСтран.Добавить(СтранаПроисхождения);
			СписокНайденныхСтран = новый СписокЗначений;
			Для каждого Запись из ОКСМ цикл 
				если Эквивалентны(запись.наименованиеКраткое, СтранаПроисхождения)  или   Эквивалентны(Запись.наименованиеПолное, СтранаПроисхождения) тогда 
					если запись.код = КодПроисх тогда 
						НашлиСтрану = истина;
					иначеЕсли СписокНайденныхКодовСтран.НайтиПоЗначению(запись.код )=неопределено тогда  
						СписокНайденныхСтран.Добавить(запись);
						СписокНайденныхКодовСтран.Добавить(запись.код );
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЦикла;	 
			
			если НашлиСтрану=Ложь тогда
				если  СписокНайденныхСтран.Количество()=0 тогда
					СписокОшибокСтран = СписокОшибокСтран+"
					|Страна происхождения «<a href=""СТРАНА:"+СтранаПроисхождения.уникальныйИдентификатор()+""">"+СтранаПроисхождения+"</a>»
					|не найдена в <a href=""Открыть_ОКСМ"" title=""Общероссийский классификатор стран мира"">ОКСМ</a></br>";
					ОшибкаСтраныНеНайдена = истина;
				ИначеЕсли 	 СписокНайденныхСтран.Количество()=1 тогда
					СписокОшибокСтран = СписокОшибокСтран+"
					|Код страны происхождения «<a href=""СТРАНА:"+СтранаПроисхождения.уникальныйИдентификатор()+""">"+СтранаПроисхождения+"</a>» - "+КодПроисх+"
					|не соответствует коду по <a href=""Открыть_ОКСМ"" title=""Общероссийский классификатор стран мира"">ОКСМ</a> - "+СписокНайденныхСтран[0].Значение.код+"</br>";
					ОшибкаСтраныНеТотКод = истина;
				Иначе 
					СписокОшибокСтран = СписокОшибокСтран+"
					|Код страны происхождения «<a href=""СТРАНА:"+СтранаПроисхождения.уникальныйИдентификатор()+""">"+СтранаПроисхождения+"</a>» - "+КодПроисх+"
					|не соответствует коду по <a href=""Открыть_ОКСМ"" title=""Общероссийский классификатор стран мира"">ОКСМ</a> </br>";
					для каждого элемент из СписокНайденныхСтран цикл 
						СписокОшибокСтран = СписокОшибокСтран+ "
						|Стране «"+Элемент.Значение.НаименованиеКраткое+"» соответствует код ОКСМ "+ Элемент.Значение.код+"</br>";
					КонецЦикла;	
					ОшибкаСтраныНеТотКод = истина;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
		возврат СписокОшибокСтран;
	КонецФункции
	
	Функция ПроверитьВалюту(валюта, ВалютаКод, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)
		
		ОКВ= МетодСервера(,"КлассификаторыДляДиадок").ОКВ;
		СписокОшибокВалюта = "";
		СписокНайденныхВалют 	  = новый СписокЗначений;
		СписокНайденныхКодовВалют = новый СписокЗначений;
		НашлиВалюту=Ложь;
		
		Для каждого запись из ОКВ цикл 
			если Эквивалентны(запись.КодСимвольный, валюта.наименование) или Эквивалентны(запись.Наименование, Валюта.наименованиеПолное) тогда 
				если запись.код = ВалютаКод тогда 
					НашлиВалюту = истина
				ИначеЕсли СписокНайденныхКодовВалют.НайтиПоЗначению(запись.код)=неопределено тогда 
					СписокНайденныхВалют.Добавить(запись);
					списокНайденныхКодовВалют.Добавить(Запись.код);
				КонецЕсли;	
			КонецЕсли;	
		конецЦикла;	
		
		Если НашлиВалюту=Ложь тогда
			
			если  СписокНайденныхВалют.Количество()=0 тогда
				СписокОшибокВалюта = "
				|Валюта «<a href=""ВАЛЮТА:"+валюта.уникальныйИдентификатор()+""">"+Валюта.наименование+"</a>» 
				|не найдена в <a href=""Открыть_ОКВ"" title=""Общероссийский классификатор валют"">ОКВ</a></br>";
				ОшибкаВалютыНеНайдена  = истина;
			ИначеЕсли 	 СписокНайденныхВалют.Количество()=1 тогда
				СписокОшибокВалюта = "
				|Код валюты «<a href=""ВАЛЮТА:"+валюта.уникальныйИдентификатор()+""">"+Валюта.наименование+"</a>» - "+ВалютаКод+
				" не соответствует коду по <a href=""Открыть_ОКВ"" title=""Общероссийский классификатор валют"">ОКВ</a> -"+СписокНайденныхВалют[0].Значение.код+"</br>";
				ОшибкаВалютыНеТотКод = истина;
			Иначе 
				СписокОшибокВалюта = "
				|Код валюты «<a href=""ВАЛЮТА:"+валюта.уникальныйИдентификатор()+""">"+Валюта.наименование+"</a>» - "+ВалютаКод+
				" не соответствует коду по <a href=""Открыть_ОКВ"" title=""Общероссийский классификатор валют"">ОКВ</a><br>";
				для каждого элемент из СписокНайденныхВалют цикл 
					СписокОшибокВалюта = СписокОшибокВалюта+ "
					|Валюте «"+Элемент.Значение.Наименование+"» соответствует код ОКВ "+Элемент.Значение.код+"</br>";
				КонецЦикла;	
				ОшибкаВалютыНеТотКод = истина;
			КонецЕсли;
			
		конецЕсли;	
		
		возврат СписокОшибокВалюта;
	КонецФункции		
	
	Функция ПолучитьНаименованиеЕИПоКоду(КодЕИ)
		
		ОКЕИ= МетодСервера(,"КлассификаторыДляДиадок").ОКЕИ;
		
		Если ЗначениеЗаполнено(СокрЛП(КодЕИ)) тогда 
			ВыборкаИзКлассификатора = ОКЕИ.найтиСтроки(Новый Структура("Код",СокрЛП(КодЕИ) ));
			Если выборкаИзКлассификатора.количество()>0 тогда
				возврат  ВыборкаИзКлассификатора[0].НаименованиеКраткое
			КонецЕсли;	
		КонецЕсли;	
		возврат "";
	КонецФункции		
	
	Функция ПолучитьВнешнююПечатнуюФормуСчета(ДокументСсылка) Экспорт
		
		Возврат	ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаСчета());
		
	КонецФункции
	
	Функция ПолучитьВнешнююПечатнуюФормуАкта(ДокументСсылка) Экспорт
		
		Возврат	ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАкта());
		
	КонецФункции
	
	Функция ПолучитьВнешнююПечатнуюФормуАктаСверки(ДокументСсылка) Экспорт
		
		Возврат	ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки());
		
	КонецФункции
	
	Функция ПолучитьСтруктуруПечатныхФормСчета(ДокументСсылка) Экспорт
		
		ИдПечатнойФормыСчета=	ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаСчета());
		Если ЗначениеЗаполнено(ИдПечатнойФормыСчета) Тогда
			РезультатФормирования=	СформироватьНеСтандартнуюПечатнуюФорму(ИдПечатнойФормыСчета, ДокументСсылка);
		Иначе
			РезультатФормирования=	Новый Структура();
			РезультатФормирования.Вставить("Таблица", 		Новый ТабличныйДокумент);
			РезультатФормирования.Вставить("СписокОшибок", 	"");
		КонецЕсли;
		
		Возврат РезультатФормирования;
		
	КонецФункции
	
	Функция ПолучитьСтруктуруПечатныхФормАкта(ДокументСсылка) Экспорт
		
		ИдПечатнойФормыАкта=	ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАкта());
		Если ЗначениеЗаполнено(ИдПечатнойФормыАкта) Тогда
			РезультатФормирования=	СформироватьНеСтандартнуюПечатнуюФорму(ИдПечатнойФормыАкта, ДокументСсылка);
		Иначе
			РезультатФормирования=	Новый Структура();
			РезультатФормирования.Вставить("Таблица", 		Новый ТабличныйДокумент);
			РезультатФормирования.Вставить("СписокОшибок", 	"");
		КонецЕсли;
		
		Возврат РезультатФормирования;
		
	КонецФункции
	
	Функция ПолучитьСтруктуруПечатныхФормАктаСверки(ДокументСсылка) Экспорт
		
		ИдПечатнойФормыАктаСверки=	ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки());
		Если ЗначениеЗаполнено(ИдПечатнойФормыАктаСверки) Тогда
			РезультатФормирования=	СформироватьНеСтандартнуюПечатнуюФорму(ИдПечатнойФормыАктаСверки, ДокументСсылка);
		Иначе
			РезультатФормирования=	Новый Структура();
			РезультатФормирования.Вставить("Таблица", 		Новый ТабличныйДокумент);
			РезультатФормирования.Вставить("СписокОшибок", 	"");
		КонецЕсли;
		
		Возврат РезультатФормирования;
		
	КонецФункции
	
	Функция СформироватьНеСтандартнуюПечатнуюФорму(ИдПечатнойФормы, ДокументСсылка)
		
		ТабличныйДокумент=	Новый ТабличныйДокумент;
		
		СписокОшибок=	"";
		
		ВнешняяПечатнаяФорма=	Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдПечатнойФормы));
		Если ВнешняяПечатнаяФорма.Команды.Количество() > 0 Тогда
			
			ИдентификаторКоманды=	ВнешняяПечатнаяФорма.Команды[0].Идентификатор;
			
			ОБъектыНазначения = новый массив;
			ОБъектыНазначения.Добавить(ДокументСсылка);
			
			ПараметрыИсточника=	Новый Структура;
			ПараметрыИсточника.Вставить("ИдентификаторКоманды", ИдентификаторКоманды);
			ПараметрыИсточника.Вставить("ОбъектыНазначения", 	ОБъектыНазначения);
			
			КоллекцияПечатныхФорм=	Неопределено;
			ОбъектыПечати=			Новый СписокЗначений;
			ПараметрыВывода=		Неопределено;
			
			Попытка
				ДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(ВнешняяПечатнаяФорма, ПараметрыИсточника, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
			Исключение
				СписокОшибок=	"<H3>Ошибка формирования печатной формы </H3><p>" + ОписаниеОшибки() + "</p>";
			КонецПопытки;
			
			Если НЕ КоллекцияПечатныхФорм = Неопределено 
				И КоллекцияПечатныхФорм.Количество() = 0 Тогда
				СписокОшибок=	"<H3>Не найденны сформированные печатные формы</H3>";
			КонецЕсли;
			
			Если СписокОшибок = "" Тогда
				ТабличныйДокумент=	КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			КонецЕсли;
			
		Иначе
			СписокОшибок=	"<H3>Неверно подключена внешняя печатная форма</H3>";
		КонецЕсли;
		
		СписокОшибок=	оформитьОшибкиВHTML(СписокОшибок, "При формировании внешней печтатной формы обнаружены ошибки");
		
		Результат=	Новый Структура();
		Результат.Вставить("Таблица", 		ТабличныйДокумент);
		Результат.Вставить("СписокОшибок", 	СписокОшибок);
		
		Возврат Результат;
		
	КонецФункции
	
//}

//{ CONTENT

	Функция СформироватьТитулПолучателя(СтруктураПодписи, Type, DocumentDate) Экспорт
		
		TitleInfo=	Новый Соответствие;
		
		ТипПодписи =  Type;
		Если ТипПодписи =  "XmlTorg12" Тогда
			
			//Если СтруктураПодписи.ТипДатыПолучения = "ДатаПолученияГруза" Тогда
			TitleInfo.Вставить("ShipmentReceiptDate", 	НачалоДня(СтруктураПодписи.ДатаПолученияГруза));
			//Иначе
			//	TitleInfo.Вставить("ShipmentReceiptDate", 	НачалоДня(DocumentDate));
			//КонецЕсли;
			
			TitleInfo.Вставить("Receiver", ПредставлениеВизирующегоСтруктурой(СтруктураПодписи));
			
			//Если СтруктураПодписи.ГрузПринял Тогда
			//	ПараметрыПодписанияПринявшего=	Новый Соответствие;
			//	ПараметрыПодписанияПринявшего.Вставить("Surname", 		СтруктураПодписи.ФамилияГрузПринял);
			//	ПараметрыПодписанияПринявшего.Вставить("FirstName", 	СтруктураПодписи.ИмяГрузПринял);
			//	ПараметрыПодписанияПринявшего.Вставить("Patronymic", 	СтруктураПодписи.ОтчествоГрузПринял);
			//	ПараметрыПодписанияПринявшего.Вставить("JobTitle" , 	СтруктураПодписи.ДолжностьГрузПринял);
			//	TitleInfo.Вставить("Accepter", ПараметрыПодписанияПринявшего);
			//Иначе
			TitleInfo.Вставить("Accepter", "");
			TitleInfo.Вставить("Attorney", "");
			//КонецЕсли;
		ИначеЕсли ТипПодписи = "UniversalTransferDocument" Тогда
			
			СтруктураSignerUTD = МетодСервера("Модуль_ИнтеграцияУниверсальный", "Новый_ExtendedSigners");
			ЗаполненнаяСтруктураSignerUTD = МетодСервера("Модуль_ИнтеграцияУниверсальный", "СкопироватьСтруктуру", СтруктураSignerUTD);
			ЗаполненнаяСтруктураSignerUTD.BoxId=	      		 СтруктураПодписи.BoxId;
			ЗаполненнаяСтруктураSignerUTD.CertificateThumbprint= СтруктураПодписи.CertificateThumbprint;
			СтруктураПодписи.Signers.Добавить(ЗаполненнаяСтруктураSignerUTD);
			
			Возврат СтруктураПодписи;

		Иначе
			TitleInfo.Вставить("SignatureDate", НачалоДня(СтруктураПодписи.ДатаПолученияГруза));
			TitleInfo.Вставить("Official", 		ПредставлениеВизирующегоСтруктурой(СтруктураПодписи));
		КонецЕсли;
		
		TitleInfo.Вставить("Signer", ПредставлениеВизирующегоСтруктурой(СтруктураПодписи,  СтруктураПодписи.ИНН));
		
		//Если СтруктураПодписи.ПоДоверенности Тогда
		//	TitleInfo.Вставить("Attorney", СтруктурироватьСведенияОДоверенности(СтруктураПодписи));
		//Иначе
		TitleInfo.Вставить("Attorney", "");
		//КонецЕсли;
		
		Возврат TitleInfo;
		
	КонецФункции
	
	Функция ПредставлениеСтавкиНДС(TaxRate)
		
		ПредставлениеСтавки=	TaxRate;
		Если ВРег(TaxRate) = "БЕЗ НДС" 
			ИЛИ НЕ ЗначениеЗаполнено(TaxRate) Тогда
			Возврат "без НДС";
		Иначе
			Если Найти(TaxRate, "/") > 0 Тогда
				Возврат СокрЛП(TaxRate);
			Иначе
				Возврат СокрЛП(TaxRate) + "%";
			КонецЕсли;			
		КонецЕсли;
		
	КонецФункции
	
	//{ ОБЩИЕ ИНИЦАЛИЗАЦИИ
		
		Процедура ЗаполнитьStructedAdditionalInfos(StructedAdditionalInfos, ДопСведения) Экспорт
			
			МассивДопСведений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДопСведения, ";", Истина);	
			
			Для Каждого Стр Из МассивДопСведений Цикл
				//СтруктураAdditionalInfo = ПолучитьСтруктуруAdditionalInfos();
				СтруктураAdditionalInfo = МетодСервера("Модуль_ИнтеграцияУниверсальный", "Новый_StructedAdditionalInfo");
				 
				МассивКлючЗначение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, "=");
				
				СтруктураAdditionalInfo.Key 	= МассивКлючЗначение[0];
				СтруктураAdditionalInfo.Value 	= МассивКлючЗначение[1];
				
				Если ЗначениеЗаполнено(СтруктураAdditionalInfo.Value) Тогда
					StructedAdditionalInfos.Добавить(СтруктураAdditionalInfo);
				КонецЕсли;
								
			КонецЦикла;
			
		КонецПроцедуры
		
	//} ОБЩИЕ ИНИЦАЛИЗАЦИИ
	
	//{ Torg12
		
		//{ Визуализация Torg12
			
			Функция СформироватьПредставлениеАдресаПоContent(AddressContent)
				
				Если AddressContent.IsForeign = Ложь И ЗначениеЗаполнено(AddressContent.RegionCode) = Истина Тогда
					
					КодРегиона 	= AddressContent.RegionCode;
					Индекс 		= AddressContent.ZipCode;
					Район 		= AddressContent.Territory;
					Город 		= AddressContent.City;
					НаселПункт  = AddressContent.Locality;
					Улица       = AddressContent.Street;
					Дом         = AddressContent.Building;
					Корпус      = AddressContent.Block;
					Кварт       = AddressContent.Apartment;
					
					ПредставлениеАдреса = ДобавитьРазделитель(Индекс)+ДобавитьРазделитель(НаименованиеРегиона(КодРегиона))+ДобавитьРазделитель(Район)+
					ДобавитьРазделитель(Город) + ДобавитьРазделитель(НаселПункт)+ДобавитьРазделитель(Улица)+
					ДобавитьРазделитель(Дом, "дом №") + ДобавитьРазделитель(Корпус, "корпус ") + ДобавитьРазделитель(Кварт,"кв ");
					                                   
					Возврат Лев(ПредставлениеАдреса, СтрДлина(ПредставлениеАдреса)-2);
					
				ИначеЕсли ЗначениеЗаполнено(AddressContent.AddressText) = Истина Тогда
					
					Страна = Справочники.СтраныМира.НайтиПоКоду(AddressContent.CountryCode);
					Возврат ?(ЗначениеЗаполнено(Страна), Страна.Наименование, Строка(AddressContent.CountryCode)) + ", " + AddressContent.AddressText;
					
				Иначе
					
					Возврат AddressContent.AddressString;
					
				КонецЕсли;
				
			КонецФункции	
			
			Функция СформироватьПредставлениеИННКПП(Inn, Kpp)
				Если ЗначениеЗаполнено(Kpp) тогда 
					возврат "ИНН/КПП: "+Inn+"/"+Kpp
				ИначеЕсли ЗначениеЗаполнено(inn) тогда 
					возврат "ИНН: "+Inn
				Иначе 
					возврат ""
				КонецЕсли;	
			конецФункции
			
			Функция СформироватьПредставлениеКонтрагентаПоContent(CounteragentContent)
				
				Наименование 	= CounteragentContent.name; 
				ИННКПП          = СформироватьПредставлениеИННКПП(CounteragentContent.Inn, CounteragentContent.Kpp); 
				Адрес 			= СформироватьПредставлениеАдресаПоContent(CounteragentContent.Address);
				
				Телефон 		=  CounteragentContent.Phone ;
				Факс    		=  CounteragentContent.Fax ;
				БИК     		=  CounteragentContent.BankId ;
				НаименБанк		=  CounteragentContent.BankName ;
				РСчет     		=  CounteragentContent.BankAccountNumber ;
				
				возврат  ОтрезатьПравуюЗапятую(ДобавитьРазделитель(Наименование) + ДобавитьРазделитель(ИННКПП)+ДобавитьРазделитель(Адрес) +
				Добавитьразделитель(Телефон, "тел: ") + Добавитьразделитель(факс, "факс: ") + Добавитьразделитель(РСчет, "р/с: ") +
				Добавитьразделитель(НаименБанк, "в банке ") + Добавитьразделитель(БИК, "БИК "));
				
			КонецФункции 	
			
			Функция ПолучитьФИОПоКонтенту(Контент)
				
				Возврат СокрЛП(СокрЛП(Контент.Surname) + " " + СокрЛП(Контент.FirstName) + " " + СокрЛП(Контент.Patronymic));
				
			Конецфункции	
			
			Функция ПредставлениеДоверенностьВыдана(attorney)
				НаимОргКем 	= attorney.IssuerOrganizationName;
				ДолжнКем	 	= attorney.Issuer.JobTitle;
				ФИОКем     	= ПолучитьФИОПоКонтенту(attorney.Issuer);
				возврат ДолжнКем+" "+ ФИОКем+", "+ НаимОргКем
			КонецФункции	
			
			Функция ПредставлениеДоверенностьПолучена(attorney)
				ДолжнКому	 	= attorney.Recipient.JobTitle;
				ФИОКому     	= ПолучитьФИОПоКонтенту(attorney.Recipient);
				возврат  ДолжнКому+" "+ФИОКому
			КонецФункции
			
			Функция СформироватьПечатнуюФормуПоXmlTorg12Content(Знач Content, Знач ВизуализироватьДопПоля) Экспорт
				
				XmlTorg12Content=				?(Content.Свойство("XmlTorg12Content"), Content.XmlTorg12Content, Неопределено);
				XmlTorg12BuyerContent=			?(Content.Свойство("XmlTorg12BuyerContent"), Content.XmlTorg12BuyerContent, Неопределено);
				XmlTorg12SignatureStructure=	?(Content.Свойство("XmlTorg12SignatureStructure"), Content.XmlTorg12SignatureStructure, Неопределено);
				
				СтруктураДопПоля= РазобратьДопПоле_СтарыйФормат(XmlTorg12Content.AdditionalInfo);
				
				Таб= Новый ТабличныйДокумент;
				Таб.ОриентацияСтраницы= ОриентацияСтраницы.Ландшафт;
				Таб.АвтоМасштаб= 		Истина;
								
				Макет= ЭтотОбъект.ПолучитьМакет("ТОРГ12");
				
				Колонтитул= Макет.ПолучитьОбласть("Колонтитул");
				ДопИнфо= 	Макет.ПолучитьОбласть("ДопПоле"); 
				Таб.Вывести(Колонтитул);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.head) Тогда 
					ДопИнфо.Параметры.ДопСведения= СтруктураДопПоля.head;
					Таб.Вывести(ДопИнфо);
				КонецЕсли;	
				
				Шапка1= Макет.ПолучитьОбласть("ШапкаДокумента1");
				
				Шапка1.Параметры.Грузоотправитель= 			СформироватьПредставлениеКонтрагентаПоContent(XmlTorg12Content.Shipper);
				Шапка1.Параметры.подразделение= 			XmlTorg12Content.ShipperDepartment;
				Шапка1.Параметры.ГрузоотправительПоОКПО= 	XmlTorg12Content.Shipper.Okpo;
				Шапка1.Параметры.ВидДеятельностиПоОКДП= 	XmlTorg12Content.ShipperOkdp;
				
				Шапка1.Параметры.Грузополучатель= 			СформироватьПредставлениеКонтрагентаПоContent(XmlTorg12Content.Consignee);
				Шапка1.Параметры.ГрузополучательПоОКПО= 	XmlTorg12Content.Consignee.Okpo;
				Таб.Вывести(Шапка1);
				
				Шапка3= Макет.ПолучитьОбласть("ШапкаДокумента3");
				Шапка3.Параметры.Поставщик= 				СформироватьПредставлениеКонтрагентаПоContent(XmlTorg12Content.Seller);
				Шапка3.Параметры.ПоставщикПоОКПО= 			XmlTorg12Content.Seller.Okpo;
				Шапка3.Параметры.Плательщик= 				СформироватьПредставлениеКонтрагентаПоContent(XmlTorg12Content.Buyer);
				Шапка3.Параметры.ПлательщикПоОКПО= 			XmlTorg12Content.Buyer.Okpo;
				Шапка3.Параметры.ДоговорОснование= 			XmlTorg12Content.GroundName;
				Шапка3.Параметры.ОснованиеНомер= 			XmlTorg12Content.GroundNumber;
				
				Таб.Вывести(Шапка3);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.top) Тогда
					ШапкаДокумента4= Макет.ПолучитьОбласть("ДопПолеПередТаблицей");
					ШапкаДокумента4.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.top);
				Иначе
					ШапкаДокумента4= Макет.ПолучитьОбласть("ШапкаДокумента4");
				КонецЕсли;
				ШапкаДокумента4.Параметры.ОснованиеДата=	XmlTorg12Content.GroundDate;
				
				Таб.Вывести(ШапкаДокумента4);
				
				ШапкаДокумента5= Макет.ПолучитьОбласть("ШапкаДокумента5");
				
				ШапкаДокумента5.Параметры.Номер=						XmlTorg12Content.Number;
				ШапкаДокумента5.Параметры.Дата=							XmlTorg12Content.Date;
				ШапкаДокумента5.Параметры.ТранспортнаяНакладнаяНомер=	XmlTorg12Content.WaybillNumber;
				ШапкаДокумента5.Параметры.ТранспортнаяНакладнаяДата=	XmlTorg12Content.WaybillDate;
				ШапкаДокумента5.Параметры.ВидОперации=					XmlTorg12Content.OperationCode;
				Таб.Вывести(ШапкаДокумента5);
				
				ШапкаТаблицы= Макет.получитьобласть("ШапкаТаблицы");
				Таб.Вывести(ШапкаТаблицы);
								
				Ц= 0;
				Для каждого Item Из XmlTorg12Content.items Цикл
					
					Ц= Ц + 1;
					Если ЗначениеЗаполнено(Item.AdditionalInfo) и ВизуализироватьДопПоля Тогда 
						СтрокаТаблицы= Макет.ПолучитьОбласть("СтрокаТаблицыДопПоля");
						СтрокаТаблицы.Параметры.ДопСведенияСтроки= Item.AdditionalInfo;
					Иначе 	
						СтрокаТаблицы= Макет.ПолучитьОбласть("СтрокаТаблицы");
					КонецЕсли;
					
					СтрокаТаблицы.Параметры.НомерПП= Ц;
					
					Наименование= 	Item.Product;
					Характеристика= Item.Feature;
					Сорт= 			Item.Sort;
					Артикул= 		Item.Article;
					
					СтрокаТаблицы.Параметры.Товар= 					ОтрезатьПравуюЗапятую(ДобавитьРазделитель(Наименование)+ДобавитьРазделитель(Характеристика)+ДобавитьРазделитель(Сорт)+ДобавитьРазделитель(Артикул));
					СтрокаТаблицы.Параметры.КодТовара= 				Item.ProductCode;
					СтрокаТаблицы.Параметры.ЕдиницаИзмерения= 		Item.UnitName;
					СтрокаТаблицы.Параметры.КодЕдиницыИзмерения= 	Item.UnitCode;
					СтрокаТаблицы.Параметры.ВидУпаковки= 			Item.ParcelType;
					СтрокаТаблицы.Параметры.КоличествоВОдномМесте= 	Формат(Item.ParcelCapacity, "ЧН=' '; ЧГ=3,0");
					СтрокаТаблицы.Параметры.КоличествоМест= 		Формат(Item.ParcelsQuantity, "ЧН=' '; ЧГ=3,0");
					СтрокаТаблицы.Параметры.Масса= 					Формат(Item.GrossQuantity, "ЧН=' '; ЧГ=3,0");
					СтрокаТаблицы.Параметры.Количество= 			Формат(Item.Quantity, "ЧДЦ=3; ЧН=' '; ЧГ=3,0");
					СтрокаТаблицы.Параметры.Цена= 					Формат(Item.Price, "ЧДЦ=2; ЧН=' '; ЧГ=3,0");
					СтрокаТаблицы.Параметры.СуммаБезНДС= 			Формат(Item.TotalWithVatExcluded, "ЧДЦ=2; ЧН=; ЧГ=3,0");
					СтрокаТаблицы.Параметры.СтавкаНДС= 				ПредставлениеСтавкиНДС(Item.TaxRate);
					СтрокаТаблицы.Параметры.СуммаНДС= 				Формат(Item.Vat, "ЧДЦ=2; ЧН=; ЧГ=3,0");
					СтрокаТаблицы.Параметры.СуммаСНДС= 				Формат(Item.Total, "ЧДЦ=2; ЧН=; ЧГ=3,0");
					
					Таб.Вывести(СтрокаТаблицы);
									
				КонецЦикла;
				
				Подвал= Макет.ПолучитьОбласть("ПодвалВсегоПоНакладной");
				Подвал.Параметры.КоличествоМест= 	Формат(XmlTorg12Content.Totals.ParcelsQuantity, "ЧН=' '; ЧГ=3,0");
				Подвал.Параметры.Масса= 			Формат(XmlTorg12Content.Totals.GrossQuantity, "ЧДЦ=3; ЧН=' '; ЧГ=3,0");
				Подвал.Параметры.Количество= 		Формат(XmlTorg12Content.Totals.Quantity, "ЧДЦ=3; ЧН=' '; ЧГ=3,0");
				Подвал.Параметры.СуммаБезНДС= 		Формат(XmlTorg12Content.Totals.TotalWithVatExcluded, "ЧДЦ=2; ЧН=; ЧГ=3,0");
				Подвал.Параметры.СуммаНДС= 			Формат(XmlTorg12Content.Totals.Vat, "ЧДЦ=2; ЧН=; ЧГ=3,0");
				Подвал.Параметры.СуммаСНДС=			Формат(XmlTorg12Content.Totals.Total, "ЧДЦ=2; ЧН=; ЧГ=3,0");
				
				Таб.Вывести(Подвал);
							
				Если ЗначениеЗаполнено(СтруктураДопПоля.bottom) и ВизуализироватьДопПоля Тогда 
					ДопИнфо.Параметры.ДопСведения= СтруктураДопПоля.bottom;
					Таб.Вывести(ДопИнфо);
				КонецЕсли;	
				
				Подвал = макет.ПолучитьОбласть("ПодвалДокумента");
				Подвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью= 	ЧислоПрописью(XmlTorg12Content.items.Количество() , , ",,,м ,,,,,0");
				Подвал.Параметры.ВсегоМестПрописью= 							XmlTorg12Content.commons.TotalParcelsQuantityInWords;
				
				Подвал.Параметры.МассаНеттоПрописью= 	XmlTorg12Content.commons.TotalQuantityInWords;
				Подвал.Параметры.МассаНетто= 			Формат(XmlTorg12Content.commons.TotalQuantity, "ЧДЦ=3; ЧН=' '; ЧГ=3,0");
				
				Подвал.Параметры.МассаГрузаПрописью=	XmlTorg12Content.commons.TotalGrossQuantityInWords;
				Подвал.Параметры.МассаГруза= 			Формат(XmlTorg12Content.commons.totalGrossQuantity, "ЧДЦ=3; ЧН=' '; ЧГ=3,0");
				
				Подвал.Параметры.СуммаПрописью= 		XmlTorg12Content.commons.TotalSumInWords;
				
				Подвал.параметры.КоличествоПриложений= 	Формат(XmlTorg12Content.AttachmentSheetsQuantity, "ЧН=' '; ЧГ=3,0");
				
				Подвал.Параметры.ДолжностьРуководителя= XmlTorg12Content.SupplyAllowedBy.JobTitle;
				Подвал.Параметры.ФИОРуководителя= 		ПолучитьФИОПоКонтенту(XmlTorg12Content.SupplyAllowedBy);
				
				Подвал.Параметры.ФИОГлавБухгалтера=		ПолучитьФИОПоКонтенту(XmlTorg12Content.ChiefAccountant);
				
				Подвал.Параметры.ДолжностьКладовщика= 	XmlTorg12Content.SupplyPerformedBy.JobTitle;
				Подвал.Параметры.ФИОКладовщика= 		ПолучитьФИОПоКонтенту(XmlTorg12Content.SupplyPerformedBy);
				
				Если ЗначениеЗаполнено(XmlTorg12Content.SupplyDate) Тогда 
					Подвал.Параметры.ДатаДокументаМесяц= Формат(XmlTorg12Content.SupplyDate, "ДФ=dd.MM.yyyy");
				КонецЕсли;	
								
				Если XmlTorg12BuyerContent <> Неопределено Тогда
					
					Подвал.Параметры.ДолжностьГрузПринял= 	XmlTorg12BuyerContent.Accepter.JobTitle;
					Подвал.Параметры.ФИОГрузПринял= 		ПолучитьФИОПоКонтенту(XmlTorg12BuyerContent.Accepter);
					Подвал.Параметры.ДолжностьГрузПолучил= 	XmlTorg12BuyerContent.Receiver.JobTitle;
					Подвал.Параметры.ФИОГрузПолучил= 		ПолучитьФИОПоКонтенту(XmlTorg12BuyerContent.Receiver);
					Подвал.Параметры.ДатаПолученияГруза= 	Формат(XmlTorg12BuyerContent.ShipmentReceiptDate, "ДФ=dd.MM.yyyy; ДП='  '");
					Подвал.Параметры.ДоверенностьНомер= 	XmlTorg12BuyerContent.attorney.Number;
					Подвал.Параметры.ДоверенностьДата= 		Формат(XmlTorg12BuyerContent.attorney.Date,"ДФ=dd.MM.yyyy; ДП='  '");
					
					Подвал.Параметры.ДоверенностьВыдана= 	ПредставлениеДоверенностьВыдана(XmlTorg12BuyerContent.attorney);
					Подвал.Параметры.ДоверенностьПолучена= 	ПредставлениеДоверенностьПолучена(XmlTorg12BuyerContent.attorney);
					
				КонецЕсли;	
				
				Таб.Вывести(Подвал);
				
				Если ЗначениеЗаполнено(СтруктураДопПоля.ground) и ВизуализироватьДопПоля Тогда 
					ДопИнфо.Параметры.ДопСведения= СтруктураДопПоля.ground;
					Таб.Вывести(ДопИнфо);
				КонецЕсли;	
				
				Если НЕ XmlTorg12SignatureStructure = Неопределено Тогда
					Таб.Вывести(ОбластьПодписи(XmlTorg12SignatureStructure));
				КонецЕсли;	
				
				Возврат Таб;
				
			КонецФункции
			
			Функция ПолучитьФИОСИнициалами(ФИО) Экспорт
				
				СтрокаФИОСИнициалами=	"";
				
				ИсходнаяСтрока=			ФИО;
				ПозицияПослПробела=		Найти(ИсходнаяСтрока, " ");
				Фамилия=				Лев(ИсходнаяСтрока, ПозицияПослПробела);
				
				ИсходнаяСтрока=			Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
				ПозицияПослПробела=		Найти(ИсходнаяСтрока, " ");
				Имя=					Лев(ИсходнаяСтрока, ПозицияПослПробела);
				
				ИсходнаяСтрока=			Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
				Отчество=				ИсходнаяСтрока;
				ИсходнаяСтрока=			Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
				
				Если НЕ ПустаяСтрока(Фамилия) Тогда
					СтрокаФИОСИнициалами=	Фамилия + 
					?(НЕ ПустаяСтрока(Имя), Лев(Имя, 1) + ".", "") +
					?(НЕ ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", "");
				КонецЕсли;
				
				Возврат СтрокаФИОСИнициалами;
				
			КонецФункции
			
			Функция ОбластьПодписи(SignatureStructure, ЭтоСФ= Ложь)
				
				Если СокрЛП(SignatureStructure.SenderSignature.Certificate.Name) <> ПолучитьФИОПоКонтенту(SignatureStructure.SellerSigner) 
					ИЛИ НЕ ЭтоСФ И СокрЛП(SignatureStructure.RecipientSignature.Certificate.Name) <> ПолучитьФИОПоКонтенту(SignatureStructure.BuyerSigner) Тогда
					
					ОбластьПодписи= ПолучитьМакет("Подписи").ПолучитьОбласть("Подпись");
					
					ОбластьПодписи.Параметры.ВладелецСертОтправитель= ПолучитьФИОСИнициалами(SignatureStructure.SenderSignature.Certificate.Name);
					ОбластьПодписи.Параметры.ВладелецСертПолучатель=  ПолучитьФИОСИнициалами(SignatureStructure.RecipientSignature.Certificate.Name);

				Иначе
					ОбластьПодписи= ПолучитьМакет("Подписи").ПолучитьОбласть("ПодписьБезВладельца");
				КонецЕсли;
				
				ОбластьПодписи.Параметры.ИДДокумента= Прав(SignatureStructure.DocumentMetaData.DocumentID, 36);
				ОбластьПодписи.Параметры.ДатаВыставления= Формат(SignatureStructure.DocumentMetaData.Timestamp, "ДФ=dd.MM.yyyy");
				ОбластьПодписи.Параметры.ВремяВыставления= Формат(SignatureStructure.DocumentMetaData.Timestamp, "ДФ=ЧЧ:мм:сс");
				
				ОбластьПодписи.Параметры.ОрганизацияОтправитель= SignatureStructure.SenderSignature.Certificate.OrganizationName;
				ОбластьПодписи.Параметры.ПодтверждениеОтправитель= ?(SignatureStructure.SenderSignature.SignatureAuthenticityDate = Неопределено, "Не подтверждена", "Соответствует файлу документа");
				ОбластьПодписи.Параметры.ДатаПодписанияОтправитель= Формат(SignatureStructure.SenderSignature.SignatureAuthenticityDate, "ДФ=dd.MM.yyyy");
				
				ОбластьПодписи.Параметры.ПодписантОтправитель= ПолучитьФИОСИнициалами(ПолучитьФИОПоКонтенту(SignatureStructure.SellerSigner));
				ОбластьПодписи.Параметры.ПодписантОтправительДолжность= СокрЛП(SignatureStructure.SellerSigner.JobTitle);
				
				Если ЗначениеЗаполнено(SignatureStructure.RecipientSignature.Certificate.Name) Тогда
					
					ОбластьПодписи.Параметры.ОрганизацияПолучатель= SignatureStructure.RecipientSignature.Certificate.OrganizationName;
					ОбластьПодписи.Параметры.ПодтверждениеПолучатель= ?(SignatureStructure.RecipientSignature.SignatureAuthenticityDate = Неопределено, "Не подтверждена", "Соответствует файлу документа");
					ОбластьПодписи.Параметры.ДатаПодписанияПолучатель= Формат(SignatureStructure.RecipientSignature.SignatureAuthenticityDate, "ДФ=dd.MM.yyyy");
					
					ОбластьПодписи.Параметры.ПодписантПолучатель= ПолучитьФИОСИнициалами(?(ЭтоСФ, SignatureStructure.RecipientSignature.Certificate.Name, ПолучитьФИОПоКонтенту(SignatureStructure.BuyerSigner)));
					ОбластьПодписи.Параметры.ПодписантПолучательДолжность= СокрЛП(SignatureStructure.BuyerSigner.JobTitle);

				КонецЕсли;
				
				Возврат ОбластьПодписи;
				

			КонецФункции
			
		//} Визуализация Torg12
		
		//{ Валидация Torg12
		
			Функция ПроверитьМаксимальнуюДлинуПрото(ЗначениеПоля, ПредставлениеПоля, МаксимальнаяДлина, род= "м", ОбязательноеЗаполнение= Ложь)
				если ОбязательноеЗаполнение и (ЗначениеЗаполнено(ЗначениеПоля)=Ложь) тогда 
					если род = "ж" тогда 
						глагол = "указана"
					ИначеЕсли род="с" тогда 
						глагол = "указано"
					Иначе 
						глагол = "указан"
					КонецЕсли;
					возврат  "<p>не "+глагол+" "+ПредставлениеПоля+"</p>
					|"
				конецЕсли;
				
				если род = "ж" тогда 
					глагол = "должна"
				ИначеЕсли род="с" тогда 
					глагол = "должно"
				Иначе 
					глагол = "должен"
				КонецЕсли;	
				
				Если стрДлина(сокрЛП(ЗначениеПоля))>МаксимальнаяДлина тогда 
					возврат "<p>"+ПредставлениеПоля+" ("+ЗначениеПоля+") не "+глагол+" быть длиннее "+МаксимальнаяДлина+" символов</p>"
				иначе 
					возврат ""
				КонецЕсли;	
			КонецФункции
			
			Функция ПроверитьФорматДатыПрото(ЗначениеПоля, ПредставлениеПоля, ОбязательноеЗаполнение= Ложь)  
				если ОбязательноеЗаполнение и (ЗначениеЗаполнено(ЗначениеПоля)=Ложь) тогда 
					возврат  "<p>не указана "+ПредставлениеПоля+"</p>
					|"
				конецЕсли;
				
				Если ТипЗнч(ЗначениеПоля) = тип("Дата") тогда 
					Если (ЗначениеПоля < '18000101') или (ЗначениеПоля>='21000101') тогда 
						возврат "<p>"+ПредставлениеПоля+" ("+формат(ЗначениеПоля,"ДФ=dd.MM.yyyy")+") должна находиться в интервале 01.01.1800 - 31.12.2099</p>"
					КонецЕсли;
				ИначеЕсли ТипЗнч(ЗначениеПоля) = тип("Строка") тогда 	
					ДатаГод = прав(ЗначениеПоля, 4);
					Если (ДатаГод <"1800") или (ДатаГод >"2099") тогда 
						возврат "<p>"+ПредставлениеПоля+" ("+ЗначениеПоля+") должна находиться в интервале 01.01.1800 - 31.12.2099</p>"
					КонецЕсли;
				КонецЕсли;
				
				возврат ""
			КонецФункции
			
			Функция УмножитьВектора(ИНН, Множители)
				Результат = 0;
				н=0;
				пока найти(Множители, ":")>0 цикл 
					н = н+1;
					Множитель = число(лев(Множители, найти(Множители, ":")-1));
					Множители = прав(Множители, СтрДлина(Множители)- найти(Множители, ":"));
					
					Результат = Результат + Множитель * число(сред(ИНН, н, 1));
				КонецЦикла;	
				
				возврат Результат;
				
			КонецФункции
			
			Функция КонтрольнаяСуммаИННЮЛСовпадает(ИНН)
				КС = умножитьВектора(ИНН, "2:4:10:3:5:9:4:6:8:");
				возврат ((кс % 11) % 10)=число(сред(ИНН, 10, 1))
			конецфункции
			
			Функция КонтрольнаяСуммаИННФЛСовпадает(ИНН)
				КС1 = УмножитьВектора(ИНН, "7:2:4:10:3:5:9:4:6:8:");
				КС2 = УмножитьВектора(ИНН, "3:7:2:4:10:3:5:9:4:6:8:");
				возврат  (((кс1 % 11) % 10)=число(сред(ИНН, 11, 1))) и (((кс2 % 11) % 10)=число(сред(ИНН, 12, 1)))
			КонецФункции

			Функция ПроверитьСтруктуруАдреса(Address, ПроверкаДляСФ= Ложь, ЭтоУПД= Ложь)
				
				ТекстОшибкиАдрес = "";
				Если СтруктураКонтентаЗаполнена(Address) Тогда 
					
					Если Address.IsForeign = Ложь Тогда 
						ZipCode  = Address.ZipCode;
						Если НЕ ЗначениеЗаполнено(ZipCode) Тогда 
						Иначеесли СтрДлина(сокрЛП(ZipCode))<>6 Тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Индекс ("+ZipCode+") должен иметь длину 6 цифр</p>
							|";		
						ИначеЕсли ТолькоЦифры(сокрЛП(ZipCode)) = Ложь Тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Индекс ("+ZipCode+") должен состоять из цифр</p>
							|";	
						КонецЕсли; 
						
						Region  =Address.RegionCode;
						Если НЕ ЗначениеЗаполнено(Region) Тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Не указан регион</p>
							|";		
						ИначеЕсли Region = "##" Тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Наименование региона указано не по классификатору</p>
							|";		
						ИначеЕсли (стрДлина(Region)>2)  ИЛИ (стрДлина(Region)=0) Тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код региона должен иметь длину 2 символа</p>
							|";		
						ИначеЕсли ТолькоЦифры(Region) = Ложь Тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код региона должен состоять из цифр</p>
							|";		
						КонецЕсли;	
						
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Territory,"наименование района", 50, "с");
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.City,"наименование города", 50, "с");
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Locality,"наименование населенного пункта", 50, "с");
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Street,"наименование улицы", 50, "с");
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Building,"номер дома", 20);
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Block,"номер корпуса", 20);
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Apartment,"номер квартиры", 20);
						
					ИначеЕсли СтруктураКонтентаЗаполнена(Address) Тогда 
						Country  = Address.CountryCode;
						AddressName  = Address.AddressText;
						
						Если ЗначениеЗаполнено(Country) Тогда 
							Если стрДлина(Country)<>3 Тогда 
								ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код страны должен иметь длину 3 символа</p>
								|";		
							ИначеЕсли ТолькоЦифры(Country) = Ложь Тогда 
								ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код страны должен состоять из цифр</p>
								|";
							ИначеЕсли Country = "643" И НЕ ПараметрыКлиентСервер.РазрешитьНеструктурированныеАдреса И НЕ ЭтоУПД Тогда
								ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Российский адрес задан как иностранный</p>
								|";
							КонецЕсли;	
							
							Если НЕ ЗначениеЗаполнено(AddressName) Тогда 
								ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Не указан адрес внутри страны</p>
								|";	
							Иначе 
								ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(AddressName,"строковое представление адреса", 255, "с");
							КонецЕсли;	
						Иначе 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Адрес должен быть указан как ""Российский адрес""</p>
							|";	
						КонецЕсли;	
					Иначе 
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>отсутствуют сведения об адресе</p>"
					КонецЕсли;	
				Иначе	
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>отсутствуют сведения об адресе</p>"
				КонецЕсли;	
				
				Возврат ТекстОшибкиАдрес;
				
			КонецФункции

			Функция ПроверитьСтруктуруКонтрагентаДляТОРГ12(OrganizationInfo, ТипСтруктуры, ПроверкаДляСФ= Ложь)
				//ТипСтруктуры =1 : юридический адрес
				//ТипСтруктуры =2 : фактический адрес
				НаименованиеСистемы = МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы;
				списокОшибок = "";
				
				//проверяем наименование
				Если ЗначениеЗаполнено(OrganizationInfo.Name)=ложь тогда 
					СписокОшибок = СписокОшибок +"<p>не указано название организации</p>";
				ИначеЕсли (OrganizationInfo.IsSoleProprietor=истина) и (найти(OrganizationInfo.Name, " ")=0) тогда 
					СписокОшибок = СписокОшибок +"<p>не указано имя индивудуального предпринимателя</p>";
				Иначе 
					СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(OrganizationInfo.Name, "наименование контрагента", 1000, "с");
				КонецЕсли; 
				
				если не(ПроверкаДляСФ и (типСтруктуры=2) ) тогда 
					//проверяем ИНН
					Если ЗначениеЗаполнено(OrganizationInfo.Inn) тогда 
						ИНН = OrganizationInfo.Inn;
						если OrganizationInfo.IsSoleProprietor=ложь тогда 
							//ЮЛ
							Если стрДлина(ИНН)<>10 тогда 
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") должен иметь длину 10 цифр</p>
								|";		
							ИначеЕсли ТолькоЦифры(ИНН) = ложь тогда
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") должен состоять из цифр</p>
								|";	
							ИначеЕсли лев(ИНН, 2)="00"	тогда 
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") не должен начинаться с двух нулей</p>
								|";	
							ИначеЕсли  КонтрольнаяСуммаИННЮЛСовпадает(ИНН)  =ложь тогда
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") неверный (не совпадает контрольная сумма)</p>
								|";	
							КонецЕсли;	
						Иначе 
							//ФЛ
							Если стрДлина(ИНН)<>12 тогда 
								списокОшибок = списокОшибок +"<p>ИНН контрагента-индивидуального предпринимателя ("+ИНН+") должен иметь длину 12 цифр</p>
								|";		
							ИначеЕсли ТолькоЦифры(ИНН) = ложь тогда
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") должен состоять из цифр</p>
								|";	
							ИначеЕсли лев(ИНН, 2)="00"	тогда 
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") не должен начинаться с двух нулей</p>
								|";	
							ИначеЕсли  КонтрольнаяСуммаИННФЛСовпадает(ИНН)  =ложь тогда
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") неверный (не совпадает контрольная сумма)</p>
								|";	
							КонецЕсли;	
						КонецЕсли;
					ИначеЕсли ТипСтруктуры = 1 тогда 
						списокОшибок = списокОшибок +"<p>ИНН контрагента не указан</p>";
						
					конецЕсли;	
					
					//проверяем КПП
					Если ЗначениеЗаполнено(OrganizationInfo.Kpp) тогда 
						КПП = OrganizationInfo.Kpp;
						Если стрДлина(КПП)<>9 тогда 
							списокОшибок = списокОшибок +"<p>КПП контрагента ("+КПП+") должен иметь длину 9 цифр</p>
							|";		
						ИначеЕсли ТолькоЦифры(КПП) = ложь тогда
							списокОшибок = списокОшибок +"<p>КПП контрагента ("+КПП+") должен состоять из цифр</p>
							|";	
						ИначеЕсли лев(ИНН, 2)="00"	тогда 
							списокОшибок = списокОшибок +"<p>КПП контрагента ("+КПП+") не должен начинаться с двух нулей</p>
							|";	
						КонецЕсли;
					ИначеЕсли OrganizationInfo.IsSoleProprietor=ложь
						И ПроверкаДляСФ тогда
						списокОшибок = списокОшибок +"<p>КПП контрагента не указано</p>";
					КонецЕсли;
				КонецЕсли;
				//проверяем адрес
				ТекстОшибкиАдрес = ПроверитьСтруктуруАдреса(OrganizationInfo.Address, ПроверкаДляСФ);
				Если ТекстОшибкиАдрес <> "" тогда 
					списокОшибок = списокОшибок + "<p><b>Ошибки в "+?(ТипСтруктуры=1, "юридическом", "фактическом")+" адресе:</b></p>"+ТекстОшибкиАдрес;
				КонецЕсли; 
				
				если ПроверкаДляСФ=ложь тогда
					
					Если ЗначениеЗаполнено(OrganizationInfo.Okopf) тогда 
						ОКОПФ = OrganizationInfo.Okopf;
						Если стрДлина(ОКОПФ)<>2 тогда 
							списокОшибок = списокОшибок +"<p>ОКОПФ контрагента ("+ОКОПФ+") должен иметь длину 2 цифры</p>
							|";		
						ИначеЕсли ТолькоЦифры(ОКОПФ) = ложь тогда
							списокОшибок = списокОшибок +"<p>ОКОПФ контрагента ("+ОКОПФ+") должен состоять из цифр</p>
							|";	
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(OrganizationInfo.Okpo) тогда 
						ОКПО = OrganizationInfo.Okpo;
						Если стрДлина(ОКПО)<>8 и стрДлина(ОКПО)<>10 тогда 
							списокОшибок = списокОшибок +"<p>ОКПО контрагента ("+ОКПО+") должен иметь длину 8 или 10 цифр</p>
							|";		
						ИначеЕсли ТолькоЦифры(ОКПО) = ложь тогда
							списокОшибок = списокОшибок +"<p>ОКПО контрагента ("+ОКПО+") должен состоять из цифр</p>
							|";	
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(OrganizationInfo.Phone) тогда 
						ОшибкиТелефона = ПроверитьМаксимальнуюДлинуПрото(OrganizationInfo.Phone, "Номер телефона контрагента", 20);
						Если ОшибкиТелефона <>"" тогда 
							списокОшибок = списокОшибок +  ОшибкиТелефона +"<p>Для передачи через "+НаименованиеСистемы+" части строки поставьте разделитель «;» </p>";
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(OrganizationInfo.Fax) тогда 
						ОшибкиФакса = ПроверитьМаксимальнуюДлинуПрото(OrganizationInfo.Fax, "Номер факса контрагента", 20);
						Если ОшибкиФакса <>"" тогда 
							списокОшибок = списокОшибок +  ОшибкиФакса +"<p>Для передачи через "+НаименованиеСистемы+" части строки поставьте разделитель «;» </p>";
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(OrganizationInfo.BankId) тогда 
						BankId = OrganizationInfo.BankId;
						Если стрДлина(BankId)<>9 тогда 
							списокОшибок = списокОшибок +"<p>БИК банка контрагента ("+BankId+") должен иметь длину 9 цифр</p>
							|";		
						ИначеЕсли ТолькоЦифры(BankId) = ложь тогда
							списокОшибок = списокОшибок +"<p>БИК банка контрагента ("+BankId+") должен состоять из цифр</p>
							|";	
						КонецЕсли;
						
					КонецЕсли;
					
				конецЕсли;
				
				Возврат СписокОшибок;
				
			КонецФункции	
			
			Функция ВалидацияXmlTorg12Content(Знач XmlTorg12Content) Экспорт
				
				СписокОшибок = "";
				
				Если ЗначениеЗаполнено(XmlTorg12Content.Date) = Ложь  Тогда 
					СписокОшибок = СписокОшибок +  "<p>Не указана дата документа</p>";
				Иначе 
					СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(XmlTorg12Content.Date, "дата документа");
				КонецЕсли;
				
				СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(XmlTorg12Content.Number, "номер документа", 256);
				
				Если СтруктураКонтентаЗаполнена(XmlTorg12Content.Seller) тогда 
					
					ОшибкиКонтрагента = ПроверитьСтруктуруКонтрагентаДляТОРГ12(XmlTorg12Content.Seller, 1);
					если ОшибкиКонтрагента <> "" тогда
						Поставщик =  XmlTorg12Content.Seller.Ссылка;
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""ОРГАНИЗАЦИЯ:"+Поставщик.УникальныйИдентификатор()+""">поставщике</a></h3>
						|"+ ОшибкиКонтрагента;
					КонецЕсли;	
					
					параметрыПодписания = ПолучитьПараметрыПодписанияТ12вДиадок(XmlTorg12Content.Seller.Ссылка);
					Если (НЕ ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта) И НЕ ПараметрыПодписания.СпособПодписания = "2")
						ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПодписания.ФИОПодписанта) Тогда
												
						Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта) Тогда
							СписокОшибок = СписокОшибок + "<p>Отсутствует должность подписанта</p>";
							СписокОшибок = СписокОшибок + "<p>Перейдите в <a href=""НАСТРОЙКДОЛЖНОСТИПОДПИСАНТА"">настройки сотрудника Диадока</a> и заполните должность. После этого перезапустите модуль.</p>";
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ФИОПодписанта) Тогда
							СписокОшибок = СписокОшибок + "<h3>Не настроены параметры подписания документа</h3>";
							СписокОшибок = списокОшибок +  "<p>Отсутствует ФИО подписанта</p>";
							СписокОшибок = СписокОшибок + "<p>Перейдите в <a href=""НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ"">окно настройки</a> и заполните отсутствующие поля</p>";
						КонецЕсли;						
						
					КонецЕсли;
				Иначе
					СписокОшибок = списокОшибок +  "<p>Отсутствуют данные о поставщике</p>";
				КонецЕсли;		
				
				Если СтруктураКонтентаЗаполнена(XmlTorg12Content.Shipper) тогда 
					ОшибкиКонтрагента = ПроверитьСтруктуруКонтрагентаДляТОРГ12(XmlTorg12Content.Shipper, 2);
					если ОшибкиКонтрагента <> "" тогда
						Грузоотправитель =  XmlTorg12Content.Shipper.Ссылка;
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href="""+?(типЗнч(Грузоотправитель)=тип("СправочникСсылка.Контрагенты"), "КОНТРАГЕНТ:", "ОРГАНИЗАЦИЯ:")+Грузоотправитель.УникальныйИдентификатор()+""">грузоотправителе</a></h3>
						|"+ ОшибкиКонтрагента;
					КонецЕсли;	
				КонецЕсли;		
				
				Если СтруктураКонтентаЗаполнена(XmlTorg12Content.Buyer) тогда 
					ОшибкиКонтрагента = ПроверитьСтруктуруКонтрагентаДляТОРГ12(XmlTorg12Content.Buyer, 1);
					если ОшибкиКонтрагента <> "" тогда
						Покупатель =  XmlTorg12Content.Buyer.Ссылка;
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+Покупатель.УникальныйИдентификатор()+""">покупателе</a></h3>
						|"+ ОшибкиКонтрагента;
					КонецЕсли;	
				КонецЕсли;		
				
				Если СтруктураКонтентаЗаполнена(XmlTorg12Content.Consignee) тогда 
					ОшибкиКонтрагента = ПроверитьСтруктуруКонтрагентаДляТОРГ12(XmlTorg12Content.Consignee, 2);
					если ОшибкиКонтрагента <> "" тогда
						Грузополучатель =  XmlTorg12Content.Consignee.Ссылка;
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+Грузополучатель.УникальныйИдентификатор()+""">грузополучателе</a></h3>
						|"+ ОшибкиКонтрагента;
					КонецЕсли;	
				КонецЕсли;		
				
				Если ЗначениеЗаполнено( XmlTorg12Content.GroundDate) тогда 
					СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(XmlTorg12Content.GroundDate, "дата договора");
				КонецЕсли;
				
				Если (XmlTorg12Content.Items.Количество()=0) тогда
					СписокОшибок = СписокОшибок +"<p>отсутствует табличная часть документа</p>"
				Иначе 
					СписокОшибокВКлассификаторах = "";
					ц = 0;
					ОшибкаЕИНеНайдена = ложь;
					ОшибкаЕИНеТотКод = ложь;
					СписокПроверенныхЕИ = новый СписокЗначений;
					
					для каждого Item из  XmlTorg12Content.Items цикл 
						ОшибкиВСтроке = "";
						ц = ц+1;
						если ЗначениеЗаполнено(Item.Product)=Ложь Тогда
							ОшибкиВСтроке = ОшибкиВСтроке  + "<p>не указано наименование товара</p>"
						КонецЕсли;	  
						если ЗначениеЗаполнено(Item.UnitName)=Ложь Тогда
							ОшибкиВСтроке = ОшибкиВСтроке  + "<p>не указано наименование единицы измерения товара</p>"
						КонецЕсли;	
						
						Если ЗначениеЗаполнено(Item.UnitCode) тогда 
							СписокОшибокВКлассификаторах = СписокОшибокВКлассификаторах + ПроверитьЕИ(Item.СсылкаНаЕИ, сокрЛП(Item.UnitCode), СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
						КонецЕсли;	  
						Если (ЗначениеЗаполнено(Item.Quantity)) И (Item.Quantity<0) тогда 
							ОшибкиВСтроке = ОшибкиВСтроке + 
							"<p>Количество не может быть отрицательным</p>
							|";
						КонецЕсли;	
						если ЗначениеЗаполнено(Item.Quantity)=Ложь Тогда
							ОшибкиВСтроке = ОшибкиВСтроке  + "<p>не указано количество товара</p>"
						КонецЕсли;	  
						если ЗначениеЗаполнено(Item.TaxRate)=Ложь Тогда
							//		  ОшибкиВСтроке = ОшибкиВСтроке  + "<p>не указана ставка налога</p>"
						ИначеЕсли Item.TaxRate = "##"	  тогда 
							ОшибкиВСтроке = ОшибкиВСтроке  + "<p>указана недопустимая ставка налога</p>"
						КонецЕсли;	  
						если ЗначениеЗаполнено(Item.Total)=Ложь Тогда
							ОшибкиВСтроке = ОшибкиВСтроке  + "<p>не указана общая сумма по строке</p>"
						КонецЕсли;	  
						
						если ОшибкиВСтроке <> "" тогда 
							СписокОшибок = СписокОшибок + 
							"<h3>Ошибки в строке "+ц+" табличной части</h3>
							|"+ОшибкиВСтроке
						КонецЕсли;	
						
					КонецЦикла;	  
					Если СписокОшибокВКлассификаторах <> "" Тогда 
						СписокОшибок = СписокОшибок +  "<h3>Ошибки в классификаторах: </h3> 			
						|<p>"+СписокОшибокВКлассификаторах+"</p>";
						
						Если Найти(Нрег(Метаданные.Синоним), "управление торговлей")>0 Тогда
							// конфигурация не разрешает открывать форму списка с ед. из, только с партиями, что нам не нужно
							Если Метаданные.Справочники.Найти("УпаковкиЕдиницыИзмерения") = Неопределено Тогда
								СписокОшибок = СписокОшибок + "
								|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;	
				КонецЕсли;
				
				если (СтруктураКонтентаЗаполнена(XmlTorg12Content.SupplyAllowedBy)= ложь) И (СтруктураКонтентаЗаполнена(XmlTorg12Content.ChiefAccountant)=ложь)  
					И (СтруктураКонтентаЗаполнена(XmlTorg12Content.SupplyPerformedBy)=ложь) тогда 
					списокОшибок = списокОшибок + "<p>Не указано ни одного лица, подписавшего документ. Заполните ответственных лиц организации: руководителя или главного бухгалтера. </p>";
				КонецЕсли;	
				
				списокОшибок = ОформитьОшибкиВHTML(списокОшибок, "При формировании накладной обнаружены ошибки");
				
				Возврат СписокОшибок;
				
			Конецфункции	
			
		//} Валидация Torg12
		
	//} Torg12
	
	//{ Invoice
		
		//{ Визуализация Invoice
		
			Функция ПредставлениеИННКПП(CounteragentContent) Экспорт
				ИНН =   CounteragentContent.inn;
				КПП =   CounteragentContent.kpp;
				Если стрДлина(ИНН)=10  тогда 
					возврат ?(ЗначениеЗаполнено(ИНН), ИНН, "-")+"/"+?(ЗначениеЗаполнено(КПП), КПП, "-");
				Иначе 
					возврат ?(ЗначениеЗаполнено(ИНН), ИНН, "-")+"/-";    
				КонецЕсли;
			КонецФункции	
			
			Функция ПредставлениеГОП(Counteragent)
				если  СтруктураКонтентаЗаполнена(Counteragent) тогда
					НаимОрг = Counteragent.name;                                  	
					Адрес =  СформироватьПредставлениеАдресаПоContent(Counteragent.address);
					
					возврат НаимОрг + ?(ЗначениеЗаполнено(Адрес), ", "+Адрес, Адрес);
				иначе 
					возврат ""
				конецЕсли;	
			конецФункции	
			
			Функция ПолучитьНаименованиеСтраныПоКоду(КодОКСМ)
				
				ОКСМ= МетодСервера(,"КлассификаторыДляДиадок").ОКСМ;
				
				если ЗначениеЗаполнено(КодОКСМ) тогда
					ВыборкаИзКлассификатора = ОКСМ.найтиСтроки(Новый Структура("Код",КодОКСМ ));
					Если выборкаИзКлассификатора.количество()>0 тогда
						возврат ВыборкаИзКлассификатора[0].НаименованиеКраткое
					КонецЕсли;
				КонецЕсли;		
				возврат ""	
			КонецФункции				
			
			Функция СформироватьПечатнуюФормуПоInvoiceContent(Знач Content, Знач ВизуализироватьДопПоля) Экспорт
				
				InvoiceContent=				Content.InvoiceContent;
				InvoiceSignatureStructure=	?(Content.Свойство("InvoiceSignatureStructure"), Content.InvoiceSignatureStructure, Неопределено);
				
				Если InvoiceContent.Свойство("AdditionalInfo") Тогда
					СтруктураДопПоля=	РазобратьДопПоле_СтарыйФормат(InvoiceContent.AdditionalInfo);
				Иначе
					СтруктураДопПоля=	РазобратьДопПоле(InvoiceContent.StructedAdditionalInfos);
				КонецЕсли;
				
				Макет= ЭтотОбъект.ПолучитьМакет("СФ1137");
				
				Таб= Новый ТабличныйДокумент;
				Таб.ОриентацияСтраницы= ОриентацияСтраницы.Ландшафт;
				Таб.АвтоМасштаб= 		Истина;
								
				Колонтитул= Макет.ПолучитьОбласть("Колонтитул");
				Таб.Вывести(Колонтитул);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.head) Тогда
					ДопПолеШапка= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеШапка.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.head);
					Таб.Вывести(ДопПолеШапка);
				КонецЕсли;
				
				Шапка= Макет.ПолучитьОбласть("Шапка");
				
				Шапка.Параметры.ДатаСФ= 			Формат(InvoiceContent.date, "ДФ=dd.MM.yyyy");
				Шапка.Параметры.НомерСФ= 			InvoiceContent.Number;
				Шапка.Параметры.ДатаИсправления= 	?(ЗначениеЗаполнено(InvoiceContent.InvoiceRevisiondate), формат(InvoiceContent.InvoiceRevisiondate, "ДФ=dd.MM.yyyy"), "-") ;
				Шапка.Параметры.НомерИсправления= 	?(ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionNumber), InvoiceContent.InvoiceRevisionNumber, "-") ;
				
				Шапка.Параметры.НаименованиеПродавца= 	InvoiceContent.seller.name;
				Шапка.Параметры.АдресПродавца=			СформироватьПредставлениеАдресаПоContent(InvoiceContent.seller.address);
				Шапка.Параметры.ИННКПППродавца= 		ПредставлениеИННКПП(InvoiceContent.seller);
				
				ПРС= "";
				Для каждого Стр из InvoiceContent.PaymentDocuments Цикл 
					ДатаПРД=	Стр.Date;
					НомерПРД=   Стр.Number;
					ПРС= 		?(ПРС="", "", ПРС+", ") + ?(ЗначениеЗаполнено(НомерПРД) или ЗначениеЗаполнено(ДатаПРД), "№ "+НомерПРД + " от " + Формат(ДатаПРД, "ДФ=dd.MM.yyyy"), "");
				КонецЦикла;	
				Шапка.параметры.ПРС= ПРС;
				Если InvoiceContent.Shipper.SameAsSellerOrBuyer = Истина Тогда 
					Шапка.Параметры.Грузоотправитель= "он же"
				Иначе  
					Шапка.Параметры.Грузоотправитель= ПредставлениеГОП(InvoiceContent.Shipper); 
				КонецЕсли;
								
				Шапка.Параметры.Грузополучатель= 		ПредставлениеГОП(InvoiceContent.Consignee); 
				Шапка.Параметры.НаименованиеПокупателя= InvoiceContent.Buyer.name;
				Шапка.Параметры.АдресПокупателя= 		СформироватьПредставлениеАдресаПоContent(InvoiceContent.Buyer.address);
				Шапка.Параметры.ИННКПППокупателя= 		ПредставлениеИННКПП(InvoiceContent.Buyer);
				
				Если ЗначениеЗаполнено(InvoiceContent.валютаСсылка) Тогда 
					//если валюта заполнена - передаем наименование как в справочнике 1С
					НаименованиеВалюты= InvoiceContent.валютаСсылка.наименованиеПолное;
				Иначе 	
					ВыборкаВалют= МетодСервера(, "КлассификаторыДляДиадок").ОКВ.найтиСтроки(Новый Структура("Код", InvoiceContent.currency));
					НаименованиеВалюты= ?(ВыборкаВалют.Количество()=0, "", ВыборкаВалют[0].Наименование);
				КонецЕсли;	
				Шапка.Параметры.Валюты= ?(ЗначениеЗаполнено(НаименованиеВалюты),НаименованиеВалюты, "-") + ", " + ?(ЗначениеЗаполнено(InvoiceContent.currency), InvoiceContent.currency, "-");
				
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.НаименованиеПродавца) Тогда 
					Шапка.Параметры.НаименованиеПродавца= "-";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.АдресПродавца) Тогда 
					Шапка.Параметры.АдресПродавца= "-";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.Грузоотправитель) Тогда 
					Шапка.Параметры.Грузоотправитель= "-";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.Грузополучатель) Тогда 
					Шапка.Параметры.Грузополучатель= "-";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.НаименованиеПокупателя) Тогда 
					Шапка.Параметры.НаименованиеПокупателя= "-";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.АдресПокупателя) Тогда 
					Шапка.Параметры.АдресПокупателя= "-";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.ПРС) Тогда 
					Шапка.Параметры.ПРС= "-";
				КонецЕсли;
				
				Таб.Вывести(Шапка);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.top) Тогда
					ДопПолеПередТаблицей= Макет.ПолучитьОбласть("ДопПолеПередТаблицей");
					ДопПолеПередТаблицей.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.top);
					Таб.Вывести(ДопПолеПередТаблицей);
				КонецЕсли;
				
				ШапкаТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицы");
				Таб.Вывести(ШапкаТаблицы);
				
				Ц= 0;
				Для каждого Item из InvoiceContent.Items Цикл 
					
					Если ВизуализироватьДопПоля Тогда
						
						Если Item.Свойство("AdditionalInfo") Тогда
							Если ЗначениеЗаполнено(Item.AdditionalInfo) Тогда
								Строка= Макет.ПолучитьОбласть("СтрокаСДопПолем");
								Строка.Параметры.ДопСведенияСтроки=	СокрЛП(Item.AdditionalInfo);
							Иначе
								Строка= Макет.ПолучитьОбласть("Строка");	
							КонецЕсли;
						ИначеЕсли Item.Свойство("StructedAdditionalInfos") Тогда
							Если Item.StructedAdditionalInfos.Количество() >0 Тогда
								Строка= Макет.ПолучитьОбласть("СтрокаСДопПолем");
								
								СтруктураДопПоляТЧ= РазобратьДопПоле(Item.StructedAdditionalInfos);
								Строка.Параметры.ДопСведенияСтроки=	СокрЛП(СтруктураДопПоляТЧ.top);
							Иначе
								Строка= Макет.ПолучитьОбласть("Строка");
							КонецЕсли;
						КонецЕсли; 
						
					Иначе	
						Строка= Макет.ПолучитьОбласть("Строка");
					КонецЕсли;
					
					Ц= Ц + 1;
					Строка.Параметры.НаимТов= 		?(ЗначениеЗаполнено(Item.Product), Item.Product, "-");
					Строка.Параметры.ОКЕИ_Тов= 		?(ЗначениеЗаполнено(Item.UnitCode), Item.UnitCode, "-");
					НаименованиеЕИ= 				?(ЗначениеЗаполнено(Item.UnitCode),ПолучитьНаименованиеЕИПоКоду(СокрЛП(Item.UnitCode)), "");
					Строка.Параметры.НаимЕИ= 		?(ЗначениеЗаполнено(НаименованиеЕИ), НаименованиеЕИ, "-");
					Строка.Параметры.КолТов= 		?(ЗначениеЗаполнено(Item.Quantity), Формат(Число(Item.Quantity), "ЧДЦ=3"), "-");
					Строка.Параметры.ЦенаТов= 		?(ЗначениеЗаполнено(Item.Price), Формат(Число(Item.Price), "ЧДЦ=2"), "-");
					Строка.Параметры.СтТовБезНДС= 	?(ЗначениеЗаполнено(Item.TotalWithVatExcluded), Формат(Item.TotalWithVatExcluded, "ЧДЦ=2"), "-");
					Если ЗначениеЗаполнено(Item.Vat) = Истина ИЛИ Item.Vat = 0 Тогда
						Строка.Параметры.СуммаНДС= 	Формат(Item.Vat, "ЧДЦ=2");
					Иначе
						Строка.Параметры.СуммаНДС= "без НДС";
					КонецЕсли;
					Строка.Параметры.СтТовУчНал= 	?(ЗначениеЗаполнено(Item.Total), формат(Item.Total,  "ЧДЦ=2"), "-");
					Строка.Параметры.Акциз= 		?(ЗначениеЗаполнено(Item.Excise), Item.Excise, "без акциза");
					Строка.Параметры.НалСт= 		ПредставлениеСтавкиНДС(Item.TaxRate) ;
					Строка.Параметры.КодПроисх= 	?(ЗначениеЗаполнено(Item.CountriesOfOrigin), Item.CountriesOfOrigin, "-");
					СтранаПроисх= 					ПолучитьНаименованиеСтраныПоКоду(Item.CountriesOfOrigin);
					Строка.Параметры.СтранаПроисх= 	?(ЗначениеЗаполнено( СтранаПроисх), СтранаПроисх, "-");
					Строка.Параметры.НомерТД= 		?(ЗначениеЗаполнено(Item.CustomsDeclarationNumbers), Item.CustomsDeclarationNumbers, "-");
					
					Таб.Вывести(Строка);
					
				КонецЦикла;
				
				Подвал= Макет.ПолучитьОбласть("Подвал");
				
				Подвал.Параметры.ВсегоСтТовБезНалВс= Формат(InvoiceContent.Totals.TotalWithVatExcluded, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
				Если ЗначениеЗаполнено(InvoiceContent.Totals.Vat) ИЛИ InvoiceContent.Totals.Vat = 0 Тогда
					Подвал.Параметры.ВсегоСумНДСВс= Формат(InvoiceContent.Totals.Vat, "ЧДЦ=2; ЧН=; ЧГ=3,0");
				Иначе
					Подвал.Параметры.ВсегоСумНДСВс= "без НДС";
				КонецЕсли;
				Подвал.Параметры.ВсегоСтТовУчНалВс= Формат(InvoiceContent.Totals.Total, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
				
				Таб.вывести(Подвал);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.bottom) Тогда
					ДопПолеПослеТаблицы= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеПослеТаблицы.Параметры.ДопСведения= СокрЛП(СтруктураДопПоля.bottom);
					Таб.Вывести(ДопПолеПослеТаблицы);
				КонецЕсли;
				
				Подписи= Макет.ПолучитьОбласть("Подписи");
				
				Если InvoiceContent.Signer.IsSoleProprietor Тогда 
					Подписи.Параметры.ПодписантФЛ= 	ПолучитьФИОПоКонтенту(InvoiceContent.Signer);
					Подписи.Параметры.НомерСВ=		InvoiceContent.Signer.SoleProprietorRegistrationCertificate;
					Подписи.Параметры.ЭПФЛ= 		"Электронная подпись";
				Иначе 
					Подписи.параметры.ПодписантЮЛ= 	ПолучитьФИОПоКонтенту(InvoiceContent.Signer);
					Подписи.Параметры.ЭПЮЛ= 		"Электронная подпись";
				КонецЕсли;	
				
				Таб.Вывести(Подписи);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.ground) Тогда
					ДопПолеПодвал= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеПодвал.Параметры.ДопСведения= СокрЛП(СтруктураДопПоля.ground);
					Таб.Вывести(ДопПолеПодвал);
				КонецЕсли;
				
				Если НЕ InvoiceSignatureStructure = Неопределено Тогда
					
					Таб.Вывести(ОбластьПодписи(InvoiceSignatureStructure, Истина));
					
				КонецЕсли;	
				
				Возврат Таб;
				
			КонецФункции	 
			
		//} Визуализация Invoice
		
		//{ Валидация INVOICE
		
			Функция ПроверитьОшибкиВСтрокеСФ(item)
				СписокОшибокСтроки = "";
				
				Если значениеЗаполнено(Item.Product)=ложь тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Не указано наименование товара</p>
					|";
				Иначе 
					СписокОшибокСтроки = СписокОшибокСтроки +ПроверитьМаксимальнуюДлинуПрото(Item.Product,"наименование товара", 1000, "с");
				КонецЕсли;
				
				Если item.TaxRate = "##"	  тогда 
					СписокОшибокСтроки = СписокОшибокСтроки  + "<p>указана недопустимая ставка налога</p>"
				КонецЕсли;
				
				Если ЗначениеЗаполнено(item.unitCode) тогда 
					если стрДлина(сокрЛП(item.unitCode))<3 
						ИЛИ стрДлина(сокрЛП(item.unitCode))>4 тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Для единицы измерения ("+item.unitCode+") указан код недопустимой длины</p>   
						|";
					ИначеЕсли 	ТолькоЦифры(СокрЛП(item.unitCode)) = ложь тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Код единицы измерения ("+item.unitCode+") должен состоять из цифр</p>
						|";
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Item.quantity) и (Item.quantity<0)  тогда 
					СписокОшибокСтроки = СписокОшибокСтроки + 
					"<p>Количество не может быть отрицательным</p>
					|";
				КонецЕсли;	
								
				если ЗначениеЗаполнено(Item.Total)=Ложь Тогда
					СписокОшибокСтроки = СписокОшибокСтроки  + "<p>не указана общая сумма по строке</p>"
				КонецЕсли;	
				
				если Найти(Строка(item.TaxRate), "20/120") > 0 тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Указана недопустимая ставка НДС</p>
					|";
				ИначеЕсли ЗначениеЗаполнено(Item.Taxrate) = ложь  тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Ставка НДС не указана</p>
					|";
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(Item.СтранаПроисхожденияСсылка)
					И НЕ ЗначениеЗаполнено(Item.CustomsDeclarationNumbers) Тогда
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Не заполнен номер ГТД</p>
					|";
				КонецЕсли;				
				
				Если (стрДлина(сокрЛП(Item.CustomsDeclarationNumbers))>29)  тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Длина номера ГТД превышает максимальное органичение в 29 символов</p>
					|";
				КонецЕсли;		
				
				возврат СписокОшибокСтроки ;
			конецфункции 
			
			Функция СформироватьСсылкуНаДокумент(ИдЯщика, ИдДокумента, ТекстСсылки)
				возврат "<a href=""КАРТОЧКА:"+ИдЯщика+":"+ИдДокумента+"""a>"+ТекстСсылки+"</a>"
			конецФункции
			
			Функция ПроверитьСвязиИСФ(InvoiceContent, ДокументСсылка)
				Возврат "";
				////если у нас есть основание в ДД- проверяем совпадение реквизитов
				////на нет - и суда нет. 
				//Докоснование =  ПолучитьОснованиеКСФ(ДокументСсылка) ;
				//Если ЗначениеЗаполнено(Докоснование)=Ложь тогда
				//	возврат ""; // "Отстутствует счет-фактура, который должен являться основанием данного документа.";
				//КонецЕсли;
				//
				//docId =     Документ_2_DocumentID(Докоснование);
				//Если ЗначениеЗаполнено(DocId)=Ложь тогда 
				//	возврат ""; //"Первоначальный документ <a href=""СЧЕТФАКТУРАВЫДАННЫЙ:"+Докоснование.УникальныйИдентификатор()+"""a>"+ДокОснование+"</a> не передавался через " + МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы
				//КонецЕсли;
				//
				//Organization = ПолучитьЯщикДиадокДляОрганизации(ДокументСсылка.Организация);
				//Document =  Organization.getDocumentById(docId);
				//
				//ТекстОшибки = "";
				//если  НачалоДня(Document.DocumentDate)<>началоДня(InvoiceContent.date) тогда 
				//	ТекстОшибки = ТекстОшибки + "
				//	|Дата исправляемого счета-фактуры: " +  формат(Document.DocumentDate, "ДФ=dd.MM.yyyy")+"</p>";
				//КонецЕсли;
				//если  Document.DocumentNumber<>InvoiceContent.Number тогда 
				//	ТекстОшибки = ТекстОшибки + "
				//	|Номер исправляемого счета-фактуры: " +  Document.DocumentNumber+"</p>";
				//КонецЕсли;
				//
				//Если ТекстОшибки<>"" тогда 
				//	ТекстОшибки = 
				//	" <h3>В исправлении неверно указаны реквизиты исправляемого"+ СформироватьСсылкуНаДокумент(Organization.Id, docId, " счета-фактуры")+"</h3></p>" +ТекстОшибки;
				//КонецЕсли;
				//
				//возврат ТекстОшибки;
				
			КонецФункции	
			
			Функция ПроверитьКлассификаторыСФ(InvoiceContent)
				
				СписокОшибокЕИ = "";
				ОшибкаЕИНеНайдена = ложь;
				ОшибкаЕИНеТотКод = ложь;
				СписокПроверенныхЕИ = новый СписокЗначений;
				
				СписокОшибокВСтранах = "";
				ОшикбаСтраныНеНайдена = ложь;
				ОшибкаСтраныНетотКод = ложь;
				СписокПроверенныхСтран = новый СписокЗначений;
				
				Для каждого item из InvoiceContent.Items цикл 
					
					Если ЗначениеЗаполнено(Item.UnitCode) тогда 
						СписокОшибокЕИ = СписокОшибокЕИ+ ПроверитьЕИ(Item.ЕдиницаИзмеренияССылка, СокрЛП(Item.UnitCode), СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Item.CountriesOfOrigin) тогда 
						СписокОшибокВСтранах = СписокОшибокВСтранах+ ПроверитьСтрану( Item.СтранаПроисхожденияССылка, Item.CountriesOfOrigin, СписокПроверенныхСтран, ОшикбаСтраныНеНайдена, ОшибкаСтраныНетотКод);
					КонецЕсли;	
					
				конецЦикла;	
				
				ОшибкаВалютыНеНайдена = ложь;
				ОшибкаВалютыНеТотКод = ложь;	
				СписокОшибокВалюта =  ПроверитьВалюту(InvoiceContent.ВалютаСсылка, InvoiceContent.Currency, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод);
				
				Если  СписокОшибокВалюта<>"" тогда 
					СписокОшибокВалюта = "
					//|<h3>При указании валюты документа: </h3>
					|<p>"+СписокОшибокВалюта+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКВАЛЮТ"">справочник валют</a> и приведите "+строкаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)+" валют в соответствие с классификатором</p>";
				КонецЕсли;
				
				
				Если 	СписокОшибокЕИ <> "" тогда 
					СписокОшибокЕИ = "
					|<p>"+СписокОшибокЕИ+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
				конецЕсли;	  
				
				Если  СписокОшибокВСтранах<>"" тогда 
					СписокОшибокВСтранах = "
					//|<h3>При указании Страны происхождения: </h3>
					|<p>"+СписокОшибокВСтранах+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКСТРАН"">справочник стран мира</a> и приведите "+строкаЧтоМенять(ОшикбаСтраныНеНайдена, ОшибкаСтраныНетотКод)+" стран в соответствие с классификатором</p>";
				КонецЕсли;
				
				Если СписокОшибокЕИ<>""  или 	 СписокОшибокВСтранах<>""  Или  СписокОшибокВалюта<>""  тогда 
					возврат  "<h3>Ошибки в классификаторах: </h3> 
					|"+	СписокОшибокЕИ+СписокОшибокВСтранах+ СписокОшибокВалюта;
				Иначе 
					возврат "";
				КонецЕсли;	
				
			конецФункции
			
			Функция ВалидацияInvoiceContent(InvoiceContent, ДокументСсылка) Экспорт
				
				списокОшибок = "";
				
				Если InvoiceContent.Signer.IsSoleProprietor Тогда
					Если НЕ ЗначениеЗаполнено(InvoiceContent.Signer.SoleProprietorRegistrationCertificate) Тогда
						СписокОшибок = СписокОшибок + 
						"<p>Не указаны данные о государственной регистрации продавца-индивидуального предпринимателя
						|(номер и дата свидетельства о госрегистрации)</p>";						
					КонецЕсли;
				КонецЕсли;
				
				если InvoiceContent.items.Количество()=0 Тогда
					СписокОшибок = СписокОшибок+ "<p>Отсутствует табличная часть документа</p> ";
				КонецЕсли;
				
				если  СтруктураКонтентаЗаполнена(InvoiceContent.seller ) тогда 
					ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceContent.Seller, 1, истина);
					если ошибка <> "" тогда
						ТипПродавца =?(ТипЗнч(InvoiceContent.seller.Ссылка) = Тип("СправочникСсылка.Контрагенты"),"КОНТРАГЕНТ:","ОРГАНИЗАЦИЯ:");  
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href="+ТипПродавца+InvoiceContent.seller.Ссылка.УникальныйИдентификатор()+""">продавце</a></h3>
						|"+ ошибка;
					КонецЕсли;	
				Иначе 
					СписокОшибок = СписокОшибок + 
					"<p>Отсутствуют данные о продавце</p>
					|";
				КонецЕсли;	
				
				если  СтруктураКонтентаЗаполнена(InvoiceContent.Shipper) тогда 
					если  InvoiceContent.Shipper.SameAsSellerOrBuyer =ложь тогда
						ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceContent.Shipper, 2, истина);
						если ошибка <> "" тогда
							ТипГрузоотправителя =?(ТипЗнч(InvoiceContent.Shipper.Ссылка) = Тип("СправочникСсылка.Контрагенты"),"КОНТРАГЕНТ:","ОРГАНИЗАЦИЯ:");  
							СписокОшибок = СписокОшибок + 
							"<h3>Ошибки в данных о <a href="+ТипГрузоотправителя+InvoiceContent.Shipper.Ссылка.УникальныйИдентификатор()+""">грузоотправителе</a></h3>
							|"+ ошибка;
						КонецЕсли;	
					КонецЕсли;	
					
				КонецЕсли;	
				
				если     СтруктураКонтентаЗаполнена(InvoiceContent.Buyer) тогда 
					ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceContent.Buyer, 1, истина);
					если ошибка <> "" тогда
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+InvoiceContent.Buyer.Ссылка.УникальныйИдентификатор()+""">покупателе</a></h3>
						|"+ ошибка;
					КонецЕсли;	
				Иначе 
					СписокОшибок = СписокОшибок + 
					"<p>Отсутствуют данные о покупателе</p>
					|";
				КонецЕсли;	
				
				Если ИспользоватьКастомныйАдресГрузополучателя() = Ложь Тогда
					Если СтруктураКонтентаЗаполнена(InvoiceContent.Consignee) Тогда 
						Ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceContent.Consignee, 2, истина);
						Если Ошибка <> "" Тогда
							СписокОшибок = СписокОшибок + 
							"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+InvoiceContent.Consignee.Ссылка.УникальныйИдентификатор()+""">грузополучателе</a></h3>
							|"+ Ошибка;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
				
				если ЗначениеЗаполнено(InvoiceContent.Number)=Ложь тогда
					СписокОшибок = СписокОшибок + 
					"<p>Не указан номер счета-фактуры</p>
					|";
				Иначе  
					СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(InvoiceContent.Number,"номер счета-фактуры", 256, "м");
				КонецЕсли;
				
				если ЗначениеЗаполнено(InvoiceContent.date)=Ложь тогда
					СписокОшибок = СписокОшибок + 
					"<p>Не укзана дата счета-фактуры</p>
					|";
				Иначе	
					СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(InvoiceContent.date,"дата счета-фактуры");
				КонецЕсли;
				
				Если значениеЗаполнено(InvoiceContent.InvoiceRevisionDate) или  значениеЗаполнено(InvoiceContent.InvoiceRevisionNumber) тогда 
					СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(InvoiceContent.InvoiceRevisionNumber,"номер исправления счета-фактуры", 3, "м"); 
					СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(InvoiceContent.InvoiceRevisionDate,"дата исправления счета-фактуры");
				КонецЕсли; 	
				
				Если ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionNumber)
					И ТолькоЦифры(сокрЛП(InvoiceContent.InvoiceRevisionNumber))=ложь Тогда
					СписокОшибок = СписокОшибок + 
					"<p>Номер исправления счета-фактуры может состоять только из цифр</p>
					|";
				КонецЕсли;
				
				Если InvoiceContent.PaymentDocuments.Количество() > 10 Тогда
					СписокОшибок = СписокОшибок + 
					"<p>В счет-фактуре указано более 10 платежно-расчетных документов</p>
					|";
				КонецЕсли;
				
				Для каждого стр из InvoiceContent.PaymentDocuments цикл 
					СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(стр.Number,"номер платежно-расчетного документа", 30, "м");
					СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(стр.Date,"дата платежно-расчетного документа");
				КонецЦикла;	
				
				если ЗначениеЗаполнено(InvoiceContent.Currency)=Ложь  тогда 
					СписокОшибок = СписокОшибок + 
					"<p>Не указан код валюты счета-фактуры</p>
					|";
				ИначеЕсли СтрДлина(сокрЛП(InvoiceContent.Currency))<>3 тогда
					СписокОшибок = СписокОшибок + 
					"<p>Код валюты счета-фактуры ("+InvoiceContent.СвСчФакт.КодОКВ+") должен иметь длину 3 символа</p>
					|";
				Иначеесли ТолькоЦифры(сокрЛП(InvoiceContent.Currency))=ложь тогда		
					СписокОшибок = СписокОшибок + 
					"<p>Код валюты счета-фактуры ("+InvoiceContent.СвСчФакт.КодОКВ+") должен состоять из цифр</p>
					|";	
				КонецЕсли;
				
				ц = 0;
				Для каждого item из InvoiceContent.Items цикл 
					ц = ц+1;
					ОшибкиВСтроке = ПроверитьОшибкиВСтрокеСФ(item);
					если ОшибкиВСтроке <> "" тогда 
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в строке "+ц+" табличной части</h3>
						|"+ОшибкиВСтроке;
					КонецЕсли;	
				конецЦикла;	
				
				СписокОшибок = СписокОшибок+ ПроверитьКлассификаторыСФ(InvoiceContent);
				
				Если  значениеЗаполнено(InvoiceContent.InvoiceRevisionDate) или  значениеЗаполнено(InvoiceContent.InvoiceRevisionNumber)  тогда 
					СписокОшибок = СписокОшибок +  ПроверитьСвязиИСФ(InvoiceContent, ДокументСсылка); 
				КонецЕсли;
				
				СписокОшибок = ОформитьОшибкиВHTML(СписокОшибок, "При формировании счета-фактуры обнаружены ошибки");
				
				Возврат СписокОшибок;
				
			конецФункции
			
		//} Валидация Invoice
		
	//} Invoice
	
	//{ InvoiceCorrection
		
		//{ Визуализация InvoiceCorrection
		
			Функция Заполнитьпустое(зн)
				возврат ?(ЗначениеЗаполнено(зн) и (зн<>"0"), зн, "-");
			КонецФункции	
			
			Функция СформироватьПечатнуюФормуПоInvoiceCorrectionContent(Content, ВизуализироватьДопПоля) Экспорт
				
				InvoiceCorrectionContent= 	Content.InvoiceCorrectionContent;
				OriginalInvoice= 			InvoiceCorrectionContent.OriginalInvoices[0];
				InvoiceSignatureStructure= 	?(Content.Свойство("InvoiceSignatureStructure"), Content.InvoiceSignatureStructure, Неопределено);
				
				Если InvoiceCorrectionContent.Свойство("AdditionalInfo") Тогда
					СтруктураДопПоля=	РазобратьДопПоле_СтарыйФормат(InvoiceCorrectionContent.AdditionalInfo);
				Иначе
					СтруктураДопПоля=	РазобратьДопПоле(InvoiceCorrectionContent.StructedAdditionalInfos);
				КонецЕсли;
				
				Макет= ЭтотОбъект.ПолучитьМакет("КСФ1137");
				
				Таб= Новый ТабличныйДокумент;
				Таб.ОриентацияСтраницы= ОриентацияСтраницы.Ландшафт;
				Таб.АвтоМасштаб= 		Истина;
								
				Колонтитул= Макет.ПолучитьОбласть("Колонтитул");
				Таб.Вывести(Колонтитул);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.head) Тогда
					ДопПолеШапка= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеШапка.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.head);
					Таб.Вывести(ДопПолеШапка);
				КонецЕсли;
				
				Шапка= Макет.ПолучитьОбласть("Шапка");
				
				НомерКСФ= 	InvoiceCorrectionContent.InvoiceCorrectionNumber;
				ДатаКСФ= 	InvoiceCorrectionContent.InvoiceCorrectionDate;
				
				Шапка.Параметры.ДатаКСФ= 				ЗаполнитьПустое(формат(ДатаКСФ, "ДФ=dd.MM.yyyy; ДП=' '"));
				Шапка.Параметры.НомерКСФ= 				ЗаполнитьПустое(НомерКСФ);
				Шапка.Параметры.НомерИКСФ= 				ЗаполнитьПустое(InvoiceCorrectionContent.InvoiceCorrectionRevisionNumber);
				Шапка.Параметры.ДатаИКСФ= 				ЗаполнитьПустое(формат(InvoiceCorrectionContent.InvoiceCorrectionRevisionDate, "ДФ=dd.MM.yyyy; ДП=' '"));
				Шапка.Параметры.НомерСФ= 				ЗаполнитьПустое(OriginalInvoice.Number);
				Шапка.Параметры.ДатаСФ= 				ЗаполнитьПустое(формат(OriginalInvoice.Date, "ДФ=dd.MM.yyyy; ДП=' '"));
				Шапка.Параметры.НомерИСФ= 				ЗаполнитьПустое(OriginalInvoice.InvoiceRevisionNumber);
				Шапка.Параметры.ДатаИСФ= 				ЗаполнитьПустое(формат(OriginalInvoice.InvoiceRevisionDate, "ДФ=dd.MM.yyyy; ДП=' '"));
				Шапка.Параметры.НаименованиеПродавца= 	ЗаполнитьПустое(InvoiceCorrectionContent.seller.name);
				Шапка.Параметры.АдресПродавца= 			СформироватьПредставлениеАдресаПоContent(InvoiceCorrectionContent.seller.address);
				Шапка.Параметры.ИННКПППродавца= 		ПредставлениеИННКПП(InvoiceCorrectionContent.seller);
				Шапка.Параметры.НаименованиеПокупателя= ЗаполнитьПустое(InvoiceCorrectionContent.Buyer.name);
				Шапка.Параметры.АдресПокупателя= 		СформироватьПредставлениеАдресаПоContent(InvoiceCorrectionContent.Buyer.address); 
				Шапка.Параметры.ИННКПППокупателя= 		ПредставлениеИННКПП(InvoiceCorrectionContent.Buyer);
								
				Если ЗначениеЗаполнено(InvoiceCorrectionContent.валютаСсылка) Тогда 
					//если валюта заполнена - передаем наименование как в справочнике 1С
					НаименованиеВалюты= InvoiceCorrectionContent.валютаСсылка.наименованиеПолное;
				Иначе 	
					ВыборкаВалют= МетодСервера(, "КлассификаторыДляДиадок").ОКВ.НайтиСтроки(Новый Структура("Код", InvoiceCorrectionContent.currency));
					НаименованиеВалюты= ?(ВыборкаВалют.количество()=0, "", ВыборкаВалют[0].Наименование);
				КонецЕсли;	
				
				Шапка.Параметры.Валюты= ?(ЗначениеЗаполнено(НаименованиеВалюты),НаименованиеВалюты, "-") + ", " + ?(ЗначениеЗаполнено(InvoiceCorrectionContent.currency), InvoiceCorrectionContent.currency, "-");
				
				Таб.Вывести(Шапка);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.top) Тогда
					ДопПолеПередТаблицей= Макет.ПолучитьОбласть("ДопПолеПередТаблицей");
					ДопПолеПередТаблицей.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.top);
					Таб.Вывести(ДопПолеПередТаблицей);
				КонецЕсли;
				
				ШапкаТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицы");
				Таб.Вывести(ШапкаТаблицы);
				
				Для каждого item из InvoiceCorrectionContent.items Цикл 
					
					Если ВизуализироватьДопПоля Тогда
						
						Если Item.Свойство("AdditionalInfo") Тогда
							Если ЗначениеЗаполнено(Item.AdditionalInfo) Тогда
								Строка= Макет.ПолучитьОбласть("СтрокаСДопПолем");
								Строка.Параметры.ДопСведенияСтроки=	СокрЛП(Item.AdditionalInfo);
							Иначе
								Строка= Макет.ПолучитьОбласть("Строка");	
							КонецЕсли;
						ИначеЕсли Item.Свойство("StructedAdditionalInfos") Тогда
							Если Item.StructedAdditionalInfos.Количество() >0 Тогда
								Строка= Макет.ПолучитьОбласть("СтрокаСДопПолем");
								
								СтруктураДопПоляТЧ= РазобратьДопПоле(Item.StructedAdditionalInfos);
								Строка.Параметры.ДопСведенияСтроки=	СокрЛП(СтруктураДопПоляТЧ.top);
							Иначе
								Строка= Макет.ПолучитьОбласть("Строка");
							КонецЕсли;
						КонецЕсли; 
						
					Иначе	
						Строка= Макет.ПолучитьОбласть("Строка");
					КонецЕсли;
					
					Строка.Параметры.НаимТов= item.Product;
					
					Строка.Параметры.ОКЕИ_ТовДо= 	ЗаполнитьПустое(item.OriginalValues.UnitCode);
					Строка.Параметры.НаимЕИДо= 		ЗаполнитьПустое(?(ЗначениеЗаполнено(Item.OriginalValues.UnitCode), ПолучитьНаименованиеЕИПоКоду(Item.OriginalValues.UnitCode), ""));
					Строка.Параметры.НалСтДо= 		ПредставлениеСтавкиНДС(item.OriginalValues.Taxrate);
					
					Строка.Параметры.ОКЕИ_ТовПосле= 	ЗаполнитьПустое(item.CorrectedValues.UnitCode);
					Строка.Параметры.НаимЕИПосле= 		ЗаполнитьПустое(?(ЗначениеЗаполнено(Item.CorrectedValues.UnitCode), ПолучитьНаименованиеЕИПоКоду(Item.CorrectedValues.UnitCode), ""));
					Строка.Параметры.НалСтПосле= 		ПредставлениеСтавкиНДС(item.CorrectedValues.Taxrate);
					
					Строка.Параметры.КолТовДо= 		СтрокаЧислоCOM_В_СтрокаЧисло1С(item.OriginalValues.Quantity				, "ЧДЦ=3", "-");
					Строка.Параметры.ЦенаТовДо= 	СтрокаЧислоCOM_В_СтрокаЧисло1С(item.OriginalValues.Price				, "ЧДЦ=2", "-");
					Строка.Параметры.СтТовБезНДСДо= СтрокаЧислоCOM_В_СтрокаЧисло1С(item.OriginalValues.TotalWithVatExcluded	, "ЧДЦ=2", "-");
					Строка.Параметры.СуммаНДСДо= 	СтрокаЧислоCOM_В_СтрокаЧисло1С(item.OriginalValues.vat					, "ЧДЦ=2");
					Строка.Параметры.СтТовУчНалДо= 	СтрокаЧислоCOM_В_СтрокаЧисло1С(item.OriginalValues.Total				, "ЧДЦ=2", "-");
					
					Строка.Параметры.КолТовПосле= 		СтрокаЧислоCOM_В_СтрокаЧисло1С(item.CorrectedValues.Quantity			, "ЧДЦ=3", "-");
					Строка.Параметры.ЦенаТовПосле= 		СтрокаЧислоCOM_В_СтрокаЧисло1С(item.CorrectedValues.Price				, "ЧДЦ=2", "-");
					Строка.Параметры.СтТовБезНДСПосле= 	СтрокаЧислоCOM_В_СтрокаЧисло1С(item.CorrectedValues.TotalWithVatExcluded, "ЧДЦ=2", "-");
					Строка.Параметры.СуммаНДСПосле= 	СтрокаЧислоCOM_В_СтрокаЧисло1С(item.CorrectedValues.vat					, "ЧДЦ=2");
					Строка.Параметры.СтТовУчНалПосле= 	СтрокаЧислоCOM_В_СтрокаЧисло1С(item.CorrectedValues.Total				, "ЧДЦ=2", "-");
					
					Строка.Параметры.СтТовБезНДСУв= 	СтрокаЧислоCOM_В_СтрокаЧисло1С(item.AmountsInc.TotalWithVatExcluded	, "ЧДЦ=2", "-");
					Строка.Параметры.СуммаНДСУв= 		СтрокаЧислоCOM_В_СтрокаЧисло1С(item.AmountsInc.vat					, "ЧДЦ=2");
					Строка.Параметры.СтТовУчНалУв= 		СтрокаЧислоCOM_В_СтрокаЧисло1С(item.AmountsInc.Total				, "ЧДЦ=2", "-");
					
					Строка.Параметры.СтТовБезНДСУм=		СтрокаЧислоCOM_В_СтрокаЧисло1С(item.AmountsDec.TotalWithVatExcluded	, "ЧДЦ=2", "-");
					Строка.Параметры.СуммаНДСУм= 		СтрокаЧислоCOM_В_СтрокаЧисло1С(item.AmountsDec.vat					, "ЧДЦ=2");
					Строка.Параметры.СтТовУчНалУм= 		СтрокаЧислоCOM_В_СтрокаЧисло1С(item.AmountsDec.Total				, "ЧДЦ=2", "-");
					
					Таб.Вывести(Строка);
					
				КонецЦикла;	
				
				//выводим подвал
				Подвал= Макет.ПолучитьОбласть("Подвал");
				Подвал.Параметры.ВсегоСтТовБезНалВсУв=  СтрокаЧислоCOM_В_СтрокаЧисло1С(InvoiceCorrectionContent.TotalsInc.TotalWithVatExcluded, "ЧДЦ=2", "-");
				Подвал.Параметры.ВсегоСумНДСВсУв=		СтрокаЧислоCOM_В_СтрокаЧисло1С(InvoiceCorrectionContent.TotalsInc.Vat				  , "ЧДЦ=2");
				Подвал.Параметры.ВсегоСтТовУчНалВсУв=	СтрокаЧислоCOM_В_СтрокаЧисло1С(InvoiceCorrectionContent.TotalsInc.Total               , "ЧДЦ=2", "-");
				
				Подвал.Параметры.ВсегоСтТовБезНалВсУм=	СтрокаЧислоCOM_В_СтрокаЧисло1С(InvoiceCorrectionContent.TotalsDec.TotalWithVatExcluded, "ЧДЦ=2", "-");
				Подвал.Параметры.ВсегоСумНДСВсУм=		СтрокаЧислоCOM_В_СтрокаЧисло1С(InvoiceCorrectionContent.TotalsDec.Vat				  , "ЧДЦ=2");
				Подвал.Параметры.ВсегоСтТовУчНалВсУм=	СтрокаЧислоCOM_В_СтрокаЧисло1С(InvoiceCorrectionContent.TotalsDec.Total               , "ЧДЦ=2", "-");
				
				Таб.Вывести(Подвал);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.bottom) Тогда
					ДопПолеПослеТаблицы= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеПослеТаблицы.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.bottom);
					Таб.Вывести(ДопПолеПослеТаблицы);
				КонецЕсли;
				
				Подписи= Макет.ПолучитьОбласть("Подписи");
				
				Если InvoiceCorrectionContent.Signer.IsSoleProprietor Тогда 
					Подписи.Параметры.ПодписантФЛ=	ПолучитьФИОПоКонтенту(InvoiceCorrectionContent.Signer);
					Подписи.Параметры.НомерСВ=		InvoiceCorrectionContent.Signer.SoleProprietorRegistrationCertificate;
					Подписи.Параметры.ЭПФЛ=			"Электронная подпись";
				Иначе 
					Подписи.параметры.ПодписантЮЛ= 	ПолучитьФИОПоКонтенту(InvoiceCorrectionContent.Signer);
					Подписи.Параметры.ЭПЮЛ=			"Электронная подпись";
				КонецЕсли;	
				
				Таб.Вывести(Подписи);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.ground) Тогда
					ДопПолеПодвал= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеПодвал.Параметры.ДопСведения= СокрЛП(СтруктураДопПоля.ground);
					Таб.Вывести(ДопПолеПодвал);
				КонецЕсли;
				
				Если НЕ InvoiceSignatureStructure = Неопределено Тогда
					Таб.Вывести(ОбластьПодписи(InvoiceSignatureStructure, Истина));
				КонецЕсли;
				
				Возврат Таб;
				
			КонецФункции
			
		//} Визуализация InvoiceCorrection
		
		//{ Валидация InvoiceCorrection
		
			Функция ПроверитьОшибкиВСтрокеКСФ(Item) 
				
				СписокОшибокСтроки  = "";
				СписокОшибокСтроки = СписокОшибокСтроки +ПроверитьМаксимальнуюДлинуПрото(Item.Product,"наименование товара", 1000, "с", истина);
				
				Если ЗначениеЗаполнено(Item.OriginalValues.UnitCode) тогда 
					Если стрДлина(сокрЛП(Item.OriginalValues.UnitCode))<3 
						ИЛИ стрДлина(сокрЛП(Item.OriginalValues.UnitCode))>4 тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Для единицы измерения ("+Item.OriginalValues.UnitCode+") указан код недопустимой длины</p>
						|";
					ИначеЕсли 	ТолькоЦифры(сокрЛП(Item.OriginalValues.UnitCode)) = ложь тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Код единицы измерения ("+Item.OriginalValues.UnitCode+") должен состоять из цифр</p>
						|";
					КонецЕсли;
				КонецЕсли;
				
				Если Item.AmountsDec.Total = 0 И Item.AmountsInc.Total = 0 Тогда
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Нет изменения стоимости товаров (работ, услуг), имущественных прав с налогом - всего</p>
					|";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Item.CorrectedValues.UnitCode) тогда 
					если стрДлина(сокрЛП(Item.CorrectedValues.UnitCode))<3 
						ИЛИ стрДлина(сокрЛП(Item.CorrectedValues.UnitCode))>4 тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Для единицы измерения ("+Item.CorrectedValues.UnitCode+") указан код недопустимой длины</p>
						|";
					ИначеЕсли 	ТолькоЦифры(сокрЛП(Item.CorrectedValues.UnitCode)) = ложь тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Код единицы измерения ("+Item.CorrectedValues.UnitCode+") должен состоять из цифр</p>
						|";
					КонецЕсли;
				КонецЕсли;
				
				если Найти(Строка(Item.OriginalValues.TaxRate), "20/120") > 0 тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Указана недопустимая ставка НДС до изменения</p>
					|";
				ИначеЕсли ЗначениеЗаполнено(Item.OriginalValues.Taxrate) = ложь  тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Ставка НДС до изменения не указана</p>
					|";
				КонецЕсли;	
				
				если Найти(Строка(Item.CorrectedValues.TaxRate), "20/120") > 0 тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Указана недопустимая ставка НДС после изменения</p>
					|";
				ИначеЕсли ЗначениеЗаполнено(Item.CorrectedValues.Taxrate) = ложь  тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Ставка НДС после изменения не указана</p>
					|";
				КонецЕсли;
				
				Возврат СписокОшибокСтроки;
				
			КонецФункции	
			
			Функция ПроверитьСвязиКСФ(InvoiceContent, ДокументСсылка) 
				Возврат "";
				////если у нас есть основание в ДД- проверяем совпадение реквизитов
				////на нет - и суда нет. 
				//Докоснование =  ПолучитьОснованиеКСФ(ДокументСсылка) ;
				//Если ЗначениеЗаполнено(Докоснование)=Ложь тогда
				//	возврат ""; // "Отстутствует счет-фактура, который должен являться основанием данного документа.";
				//КонецЕсли;
				//
				//docId =     ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(Докоснование);
				//Если ЗначениеЗаполнено(DocId)=Ложь тогда 
				//	возврат ""; //  "Первоначальный документ <a href=""СЧЕТФАКТУРАВЫДАННЫЙ:"+Докоснование.УникальныйИдентификатор()+"""a>"+ДокОснование+"</a> не передавался через " + МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы
				//КонецЕсли;
				//
				//Organization = получитьМодульПрог("Модуль_Диадок_РаботаССерверомДиадока").ПолучитьЯщикДиадокДляОрганизации(ДокументСсылка.Организация);
				//Document =  Organization.getDocumentById(docId);
				//
				//Если (ЗначениеЗаполнено(InvoiceContent.InvoiceCorrectionrevisionDate)=ложь) и (ЗначениеЗаполнено(InvoiceContent.InvoiceCorrectionrevisionNumber)=Ложь) тогда 
				//	//это ксф
				//	Если Найти(Document.Type, "Correction")>0 тогда 
				//		возврат "Корректировочный счет-фактура не может выставляться на основании другого "+ СформироватьСсылкуНаДокумент(Organization.id, docId, "корректировочного счета-фактуры")+"</p>"
				//	КонецЕсли;
				//	
				//	Если Document.type = "Invoice"  тогда 
				//		ДатаСФОриг  = Document.DocumentDate ;
				//		НомерСФОриг = Document.DocumentNumber;
				//		ЕстьИсправленияОриг =    Ложь;
				//	Иначе 	
				//		//смотрим реквизиты в нынешнем и предыдущем документе 
				//		ДатаСФОриг  = Document.OriginalDocumentDate;
				//		НомерСФОриг = Document.OriginalDocumentNumber;
				//		ЕстьИсправленияОриг =    ЗначениеЗаполнено(Document.DocumentNumber);
				//	КонецЕсли;	
				//	
				//	ДатаСФ 		= InvoiceContent.Date;
				//	НомерСФ     = InvoiceContent.Number;
				//	ЕстьИсправления     =   (ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionDate) или  ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionNumber));
				//	
				//	ТекстОшибки = "";
				//	если  (ДатаСФОриг)<>ДатаСФ тогда 
				//		ТекстОшибки = ТекстОшибки + "
				//		|Дата корректируемого счета-фактуры: " +  формат(ДатаСФОриг,"ДФ=dd.MM.yyyy")+"</p>";
				//	КонецЕсли;
				//	если  НомерСФОриг<>НомерСФ тогда 
				//		ТекстОшибки = ТекстОшибки + "
				//		|Номер корректируемого счета-фактуры: " +  НомерСФОриг+"</p>";
				//	КонецЕсли;
				//	если ЕстьИсправленияОриг и  ЕстьИсправления=ложь тогда 
				//		текстОшибки = текстОшибки + "
				//		|Корректируемый счет-фактура исправлялся, о чем не указано в корректировочном счете-фактуре</p>";
				//	Иначеесли ЕстьИсправленияОриг=Ложь и  ЕстьИсправления тогда 
				//		текстОшибки = текстОшибки + "
				//		|Корректируемый счет-фактура не исправлялся, что не соотвкетствует данным, указанным в корректировочном счете-фактуре</p>";
				//	ИначеЕсли ЕстьИсправленияОриг и  ЕстьИсправления тогда 
				//		//проверим что данные исправления совпадают
				//		ДатаИСФОриг  =Document.DocumentDate;
				//		НомерИСФОриг = Document.DocumentNumber;
				//		ДатаИСФ 	 = InvoiceContent.InvoiceRevisionDate;
				//		НомерИСФ     = InvoiceContent.InvoiceRevisionNumber;
				//		
				//		если  ДатаИСФОриг<>ДатаИСФ тогда 
				//			ТекстОшибки = ТекстОшибки + "
				//			|Дата исправления корректируемого счета-фактуры: " + формат(ДатаИСФОриг, "ДФ=dd.MM.yyyy")+"</p>";
				//		КонецЕсли;
				//		если  НомерИСФОриг<>НомерИСФ тогда 
				//			ТекстОшибки = ТекстОшибки + "
				//			|Номер исправления корректируемого счета-фактуры: " +  НомерИСФОриг+"</p>";
				//		КонецЕсли;
				//		
				//	КонецЕсли;
				//	
				//	Если ТекстОшибки<>"" тогда 
				//		ТекстОшибки = 
				//		"<h3>В документе неверно указаны реквизиты корректируемого"+ СформироватьСсылкуНаДокумент(Organization.id, docId, " счета-фактуры")+"</h3></p>" +ТекстОшибки;
				//	КонецЕсли;
				//	
				//	возврат ТекстОшибки;
				//Иначе 
				//	//это ИКСФ
				//	Если Найти(Document.Type, "Correction")=0 тогда 
				//		возврат "Исправление корректировочного счета-фактуры может выставляться только на основании корректировочного счета-фактуры</p>"
				//	КонецЕсли;
				//	
				//	//смотрим реквизиты в нынешнем и предыдущем документе 
				//	ДатаСФОриг  = Document.OriginalDocumentDate;
				//	НомерСФОриг = Document.OriginalDocumentNumber;
				//	ДатаСФ 		= InvoiceContent.date;
				//	НомерСФ     = InvoiceContent.Number;
				//	
				//	ДатаКСФОриг  = Document.DocumentDate;
				//	НомерКСФОриг = Document.DocumentNumber;
				//	ДатаКСФ 	 = InvoiceContent.InvoiceCorrectionDate;
				//	НомерКСФ     = InvoiceContent.InvoiceCorrectionNumber;
				//	
				//	ЕстьИсправленияОриг =    ЗначениеЗаполнено(Document.OriginalInvoiceRevisionNumber);     //поле пока не заполняется
				//	ЕстьИсправления     =    (ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionDate) или  ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionNumber));;
				//	
				//	ТекстОшибки = "";
				//	если  (ДатаСФОриг)<>(ДатаСФ) тогда 
				//		ТекстОшибки = ТекстОшибки + "
				//		|Дата корректируемого счета-фактуры: " +  формат(ДатаСФОриг, "ДФ=dd.MM.yyyy")+"</p>";
				//	КонецЕсли;
				//	если  НомерСФОриг<>НомерСФ тогда 
				//		ТекстОшибки = ТекстОшибки + "
				//		|Номер корректируемого счета-фактуры: " +  НомерСФОриг+"</p>";
				//	КонецЕсли;
				//	если  (ДатаКСФОриг)<>(ДатаКСФ) тогда 
				//		ТекстОшибки = ТекстОшибки + "
				//		|Дата исправляемого корректировочного счета-фактуры: " +  формат(ДатаСФОриг,"ДФ=dd.MM.yyyy")+"</p>";
				//	КонецЕсли;
				//	если  НомерКСФОриг<>НомерКСФ тогда 
				//		ТекстОшибки = ТекстОшибки + "
				//		|Номер исправляемого корректировочного счета-фактуры: " +  НомерКСФОриг+"</p>";
				//	КонецЕсли;
				//	
				//	если ЕстьИсправленияОриг и  ЕстьИсправления=ложь тогда 
				//		текстОшибки = текстОшибки + "
				//		|Корректируемый счет-фактура исправлялся, о чем не указано в корректировочном счете-фактуре</p>";
				//	Иначеесли ЕстьИсправленияОриг=Ложь и  ЕстьИсправления тогда 
				//		текстОшибки = текстОшибки + "
				//		|Корректируемый счет-фактура не исправлялся, что не соотвкетствует данным, указанным в корректировочном счете-фактуре</p>";
				//	ИначеЕсли ЕстьИсправленияОриг и  ЕстьИсправления тогда 
				//		//проверим что данные исправления совпадают
				//		ДатаИСФОриг  = Document.OriginalInvoiceRevisionDate;
				//		НомерИСФОриг = Document.OriginalInvoiceRevisionNumber;
				//		ДатаИСФ 	 = InvoiceContent.InvoiceRevisionDate;
				//		НомерИСФ     = InvoiceContent.InvoiceRevisionNumber;
				//		
				//		если  ДатаИСФОриг<>ДатаИСФ тогда 
				//			ТекстОшибки = ТекстОшибки + "
				//			|Дата исправления корректируемого счета-фактуры: " +  формат(ДатаИСФОриг, "ДФ=dd.MM.yyyy")+"</p>";
				//		КонецЕсли;
				//		если  НомерИСФОриг<>НомерИСФ тогда 
				//			ТекстОшибки = ТекстОшибки + "
				//			|Номер исправления корректируемого счета-фактуры: " +  НомерИСФОриг+"</p>";
				//		КонецЕсли;
				//		
				//	КонецЕсли;
				//	
				//	Если ТекстОшибки<>"" тогда 
				//		ТекстОшибки = 
				//		"<h3>В документе неверно указаны реквизиты исправляемого"+  СформироватьСсылкуНаДокумент(Organization.id, docId, " корректировочного счета-фактуры")+"</h3></p>" +ТекстОшибки;
				//	КонецЕсли;
				//	
				//	возврат ТекстОшибки;
				//КонецЕсли;
			КонецФункции	
			
			Функция ПроверитьКлассификаторыКСФ(InvoiceCorrectionContent)
				
				СписокОшибокЕИ = "";
				ОшибкаЕИНеНайдена = ложь;
				ОшибкаЕИНеТотКод = ложь;
				СписокПроверенныхЕИ = новый СписокЗначений;
				
				Для каждого item из InvoiceCorrectionContent.Items цикл 
					
					Если ЗначениеЗаполнено(Item.OriginalValues.UnitCode) тогда 
						СписокОшибокЕИ = СписокОшибокЕИ+ ПроверитьЕИ(Item.OriginalValues.ЕдиницаИзмеренияССылка, СокрЛП(Item.OriginalValues.UnitCode), СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Item.CorrectedValues.UnitCode) тогда 
						СписокОшибокЕИ = СписокОшибокЕИ+ ПроверитьЕИ( Item.CorrectedValues.ЕдиницаИзмеренияССылка, СокрЛП(Item.CorrectedValues.UnitCode), СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
					КонецЕсли;
					
					
				конецЦикла;	
				
				ОшибкаВалютыНеНайдена = ложь;
				ОшибкаВалютыНеТотКод = ложь;	
				СписокОшибокВалюта =  ПроверитьВалюту(InvoiceCorrectionContent.ВалютаСсылка, InvoiceCorrectionContent.Currency, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод);
				
				Если  СписокОшибокВалюта<>"" тогда 
					СписокОшибокВалюта = "
					//|<h3>При указании валюты документа: </h3>
					|<p>"+СписокОшибокВалюта+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКВАЛЮТ"">справочник валют</a> и приведите "+строкаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)+" валют в соответствие с классификатором</p>";
				КонецЕсли;
				
				
				Если 	СписокОшибокЕИ <> "" тогда 
					СписокОшибокЕИ = "
					|<p>"+СписокОшибокЕИ+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
				конецЕсли;	  
				
				Если СписокОшибокЕИ<>""  или 	СписокОшибокВалюта<>""  тогда 
					возврат  "<h3>Ошибки в классификаторах: </h3> 
					|"+	СписокОшибокЕИ+ СписокОшибокВалюта;
				Иначе 
					возврат "";
				КонецЕсли;	
				
			конецФункции
			
			Функция ВалидацияInvoiceCorrectionContent(InvoiceCorrectionContent, ДокументССылка) Экспорт
				
				СписокОшибок = "";
				
				если InvoiceCorrectionContent.items.Количество()=0 Тогда
					СписокОшибок = СписокОшибок+ "<p>Нет строк, по которым происходит корректировка суммовых или количественных показателей</p> ";
				КонецЕсли;
				
				если InvoiceCorrectionContent.TotalsDec.Total = 0 
					И InvoiceCorrectionContent.TotalsInc.Total = 0 Тогда
					СписокОшибок = СписокОшибок+ "<p>Нет увеличения или уменьшения суммы всего по документу</p> ";
				КонецЕсли;
				
				Если InvoiceCorrectionContent.Signer.IsSoleProprietor Тогда
					Если НЕ ЗначениеЗаполнено(InvoiceCorrectionContent.Signer.SoleProprietorRegistrationCertificate) Тогда
						СписокОшибок = СписокОшибок + 
						"<p>Не указаны данные о государственной регистрации продавца-индивидуального предпринимателя
						|(номер и дата свидетельства о госрегистрации)</p>";						
					КонецЕсли;
				КонецЕсли;
				
				//проверяем сведения об участниках сделки
				если  СтруктураКонтентаЗаполнена(InvoiceCorrectionContent.seller ) тогда 
					ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceCorrectionContent.Seller, 1, истина);
					если ошибка <> "" тогда
						ТипПродавца =?(ТипЗнч(InvoiceCorrectionContent.seller.Ссылка) = Тип("СправочникСсылка.Контрагенты"),"КОНТРАГЕНТ:","ОРГАНИЗАЦИЯ:");  
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href="+ТипПродавца+InvoiceCorrectionContent.seller.Ссылка.УникальныйИдентификатор()+""">продавце</a></h3>
						|"+ ошибка;
					КонецЕсли;	
				Иначе 
					СписокОшибок = СписокОшибок + 
					"<p>Отсутствуют данные о продавце</p>
					|";
				КонецЕсли;	
				
				если     СтруктураКонтентаЗаполнена(InvoiceCorrectionContent.Buyer) тогда 
					ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceCorrectionContent.Buyer, 1, истина);
					если ошибка <> "" тогда
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+InvoiceCorrectionContent.Buyer.Ссылка.УникальныйИдентификатор()+""">покупателе</a></h3>
						|"+ ошибка;
					КонецЕсли;	
				Иначе 
					СписокОшибок = СписокОшибок + 
					"<p>Отсутствуют данные о покупателе</p>
					|";
				КонецЕсли;	
				
				OriginalInvoice = InvoiceCorrectionContent.OriginalInvoices[0];
				
				СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(InvoiceCorrectionContent.InvoiceCorrectionNumber,"номер корректировочного счета-фактуры", 256, "м", истина);
				СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(InvoiceCorrectionContent.InvoiceCorrectionDate, "дата корректировочного счета-фактуры", истина);
				СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(OriginalInvoice.Number,"номер счета-фактуры", 256, "м", истина);
				СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(OriginalInvoice.date,"дата счета-фактуры", истина);
				
				Если ЗначениеЗаполнено(InvoiceCorrectionContent.InvoiceCorrectionRevisionNumber) 
					или ЗначениеЗаполнено(InvoiceCorrectionContent.InvoiceCorrectionRevisionDate) тогда 
					СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(InvoiceCorrectionContent.InvoiceCorrectionRevisionNumber,"номер исправления корректировочного счета-фактуры", 3, "м", истина);		
					СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(InvoiceCorrectionContent.InvoiceCorrectionRevisionDate,"дата исправления корректировочного счета-фактуры", истина);
				конецЕсли;	
				
				Если ЗначениеЗаполнено(OriginalInvoice.InvoiceRevisionNumber) 
					или ЗначениеЗаполнено(OriginalInvoice.InvoiceRevisionDate) тогда 
					СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(OriginalInvoice.InvoiceRevisionNumber,"номер исправления счета-фактуры", 3, "м", истина);		
					СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(OriginalInvoice.InvoiceRevisionDate,"дата исправления счета-фактуры", истина);
				конецЕсли;	
				
				Если ЗначениеЗаполнено(OriginalInvoice.InvoiceRevisionNumber)
					И ТолькоЦифры(сокрЛП(OriginalInvoice.InvoiceRevisionNumber))=ложь Тогда
					СписокОшибок = СписокОшибок + 
					"<p>Номер исправления счета-фактуры может состоять только из цифр</p>
					|";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(InvoiceCorrectionContent.Currency)=Ложь  тогда 
					СписокОшибок = СписокОшибок + 
					"<p>Не указан код валюты счета-фактуры</p>
					|";
				ИначеЕсли СтрДлина(сокрЛП(InvoiceCorrectionContent.Currency))<>3 тогда
					СписокОшибок = СписокОшибок + 
					"<p>Код валюты счета-фактуры ("+InvoiceCorrectionContent.СвСчФакт.КодОКВ+") должен иметь длину 3 символа</p>
					|";
				Иначеесли ТолькоЦифры(сокрЛП(InvoiceCorrectionContent.Currency))=ложь тогда		
					СписокОшибок = СписокОшибок + 
					"<p>Код валюты счета-фактуры ("+InvoiceCorrectionContent.СвСчФакт.КодОКВ+") должен состоять из цифр</p>
					|";	
				КонецЕсли;
				
				ц = 0 ;
				Для каждого item из InvoiceCorrectionContent.items цикл 
					ц = ц+1;
					ОшибкиВСтроке = ПроверитьОшибкиВСтрокеКСФ(Item);
					если ОшибкиВСтроке <> "" тогда 
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в строке "+ц+" табличной части</h3>
						|"+ОшибкиВСтроке
					КонецЕсли;	
					
				Конеццикла;
				
				СписокОшибок = СписокОшибок +  ПроверитьКлассификаторыКСФ(InvoiceCorrectionContent);
				СписокОшибок = СписокОшибок +  ПроверитьСвязиКСФ(InvoiceCorrectionContent, ДокументСсылка); 
				
				СписокОшибок = ОформитьОшибкиВHTML(СписокОшибок, "При формировании счета-фактуры обнаружены ошибки");
				
				возврат СписокОшибок;
				
				
			КонецФункции	
			
		//} Валидация InvoiceCorrection
		
	//} InvoiceCorrection
	
	//{ XmlAcceptanceCertificate
		
		//{ Визуализация XmlAcceptanceCertificate
		
			Функция СформироватьРеквизитыКонтрагентаДляАкта(OrgInfo)
				
				Наименование 	= OrgInfo.Name ;
				ИНН 		= OrgInfo.Inn ;
				КПП 		= OrgInfo.Kpp ;
				Адрес 			= СформироватьПредставлениеАдресаПоContent(OrgInfo.Address) ;
				Телефон 		= OrgInfo.Phone ;
				Факс    		= OrgInfo.Fax ;
				БИК     		= OrgInfo.BankId ;
				НаименБанк		= OrgInfo.BankName ;
				РСчет     		= OrgInfo.BankAccountNumber ;
				
				результат = новый Структура;
				результат.Вставить("Наименование", наименование);
				результат.Вставить("ИНН", ИНН);
				результат.Вставить("КПП", КПП);
				результат.Вставить("Адрес", ОтрезатьПравуюЗапятую( ДобавитьРазделитель(Адрес)+Добавитьразделитель(Телефон, "тел: ")+Добавитьразделитель(факс, "факс: ")) );
				результат.Вставить("БанковскиеРеквизиты", ОтрезатьПравуюЗапятую(Добавитьразделитель(РСчет, "р/с: ")+Добавитьразделитель(НаименБанк, "в банке ")+Добавитьразделитель(БИК, "БИК ")) );
				
				возврат Результат;	
				
			КонецФункции
			
			Функция СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent(Content, ВизуализироватьДопПоля) Экспорт
				
				XmlAcceptanceCertificateContent=			?(Content.Свойство("XmlAcceptanceCertificateContent"), Content.XmlAcceptanceCertificateContent, Неопределено);
				XmlAcceptanceCertificateBuyerContent=		?(Content.Свойство("XmlAcceptanceCertificateBuyerContent"), Content.XmlAcceptanceCertificateBuyerContent, Неопределено);
				XmlAcceptanceCertificateSignatureStructure=	?(Content.Свойство("XmlAcceptanceCertificateSignatureStructure"), Content.XmlAcceptanceCertificateSignatureStructure, Неопределено);
				
				Макет= ЭтотОбъект.ПолучитьМакет("АктВыполненныхРабот");
				
				СтруктураДопПоля= 	РазобратьДопПоле_СтарыйФормат(xmlAcceptanceCertificateContent.AdditionalInfo);
				ДопИнфо= 			Макет.ПолучитьОбласть("ДопИнфо"); 
				
				Шапка= ?(ВизуализироватьДопПоля и ЗначениеЗаполнено(СтруктураДопПоля.top), Макет.ПолучитьОбласть("ШапкаДопПоля"), Макет.ПолучитьОбласть("Шапка"));
				
				Таб= Новый ТабличныйДокумент;
				
				Таб.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
				Таб.АвтоМасштаб= 		Истина;
								
				Если ВизуализироватьДопПоля и ЗначениеЗаполнено(СтруктураДопПоля.head) Тогда
					ДопИнфо.Параметры.ДопСведения= СтруктураДопПоля.head;
					Таб.Вывести(ДопИнфо);
				КонецЕсли;
				
				Шапка.Параметры.ДатаАкта=  		Формат(xmlAcceptanceCertificateContent.Date, "ДФ=dd.MM.yy; ДП=' '");
				Шапка.Параметры.НомерАкта=  	xmlAcceptanceCertificateContent.Number;
				Шапка.Параметры.ТекстШапкиАкта= xmlAcceptanceCertificateContent.Title;
				
				Если ВизуализироватьДопПоля и ЗначениеЗаполнено(СтруктураДопПоля.top) Тогда
					Шапка.Параметры.ДопСведения= СтруктураДопПоля.top;
				КонецЕсли;	
				
				Таб.Вывести(Шапка);
				
				Итоги= Макет.ПолучитьОбласть("Итоги");
				МассивСтрок= xmlAcceptanceCertificateContent.Items;
				
				н= 0;
				
				totalWithVatExcluded= 0;
				Vat= 	0;
				total= 	0;
				Для каждого СтрокаАкта из МассивСтрок Цикл 
					
					н = н+1;
					
					Если ВизуализироватьДопПоля и ЗначениеЗаполнено(строкаАкта.AdditionalInfo) Тогда 
						Строка= Макет.ПолучитьОбласть("СтрокаДопИнфо");
						Строка.Параметры.ДопСведения= СтрокаАкта.AdditionalInfo;
					Иначе 
						Строка= Макет.ПолучитьОбласть("Строка");
					КонецЕсли;	
					
					Строка.Параметры.н= н;
					
					Строка.Параметры.Наименование= СтрокаАкта.Name;
					Строка.Параметры.Наименование= ?(ЗначениеЗаполнено(Строка.Параметры.Наименование), Строка.Параметры.Наименование, СтрокаАкта.Description);
					
					Строка.Параметры.ЕИ= 			?(ЗначениеЗаполнено(строкаАкта.UnitName), СтрокаАкта.UnitName, "-");
					Строка.Параметры.Количество= 	?(ЗначениеЗаполнено(СтрокаАкта.Quantity), Формат(СтрокаАкта.Quantity, "ЧДЦ=3; ЧГ=3,0"), "-");
					Строка.Параметры.Цена= 			?(ЗначениеЗаполнено(СтрокаАкта.Price), Формат(СтрокаАкта.Price, "ЧДЦ=2; ЧГ=3,0"), "-");
					Строка.Параметры.СуммаБезНДС= 	?(ЗначениеЗаполнено(СтрокаАкта.totalWithVatExcluded), Формат(СтрокаАкта.totalWithVatExcluded, "ЧДЦ=2; ЧГ=3,0"), "-");
					Строка.Параметры.СуммаНДС= 		?(СтрокаАкта.Vat <> Неопределено, Формат(СтрокаАкта.Vat, "ЧДЦ=2; ЧН=0,00; ЧГ=3,0"), "без НДС");
					Строка.Параметры.СуммаВсего= 	?(ЗначениеЗаполнено(СтрокаАкта.total), Формат(СтрокаАкта.total, "ЧДЦ=2; ЧГ=3,0"), "-");
					
					Таб.Вывести(Строка);
					
					totalWithVatExcluded= 	totalWithVatExcluded 	+ ?(ЗначениеЗаполнено(СтрокаАкта.totalWithVatExcluded), СтрокаАкта.totalWithVatExcluded, 0);
					Vat= 					Vat 					+ ?(ЗначениеЗаполнено(СтрокаАкта.Vat), СтрокаАкта.Vat, 0);
					total= 					total 					+ ?(ЗначениеЗаполнено(СтрокаАкта.total), СтрокаАкта.total, 0);
					
				КонецЦикла;	
				
				Итоги.Параметры.СумБезНДСИт= 	Формат(totalWithVatExcluded, "ЧДЦ=2; ЧГ=3,0");
				Итоги.Параметры.СумНДСИт= 		Формат(Vat, "ЧДЦ=2; ЧГ=3,0");
				Итоги.Параметры.СумУчНДСИт= 	Формат(total, "ЧДЦ=2; ЧГ=3,0");
				Таб.Вывести(Итоги);
				
				Если ВизуализироватьДопПоля и ЗначениеЗаполнено(СтруктураДопПоля.bottom) Тогда
					ДопИнфо.Параметры.ДопСведения= СтруктураДопПоля.bottom;
					Таб.Вывести(ДопИнфо);
				КонецЕсли;
				
				Подвал= Макет.ПолучитьОбласть("Подвал");
				
				РеквизитыИсполнителя= СформироватьРеквизитыКонтрагентаДляАкта(xmlAcceptanceCertificateContent.Seller);
				
				Подвал.Параметры.НаименованиеИсполнителя=			РеквизитыИсполнителя.Наименование;
				Подвал.Параметры.ИННИсполнителя=					РеквизитыИсполнителя.ИНН;
				Подвал.Параметры.КППИсполнителя= 					РеквизитыИсполнителя.КПП;
				Подвал.Параметры.АдресИсполнителя=					РеквизитыИсполнителя.Адрес;
				Подвал.Параметры.БанковскиеРеквизитыИсполнителя=	РеквизитыИсполнителя.БанковскиеРеквизиты;
				
				Если СтруктураКонтентаЗаполнена(xmlAcceptanceCertificateContent.Attorney) Тогда
					ПредставлениеДоверенности= "Доверенность №" + xmlAcceptanceCertificateContent.Attorney.Number + " от " + Формат(xmlAcceptanceCertificateContent.Attorney.Date, "ДФ=dd.MM.yy; ДП=' '") + "
												|выдал " + ПредставлениеДоверенностьВыдана(xmlAcceptanceCertificateContent.Attorney);
					Подвал.Параметры.ДоверенностьИсполнителя= ПредставлениеДоверенности;
				КонецЕсли;	
				
				Подвал.Параметры.ДолжностьИсполнителя= 	xmlAcceptanceCertificateContent.Official.JobTitle;
				Подвал.Параметры.ФИОисполнителя=		ПолучитьФИОПоКонтенту(xmlAcceptanceCertificateContent.Official);
				Если ЗначениеЗаполнено(xmlAcceptanceCertificateContent.SignatureDate) Тогда 
					Подвал.Параметры.ДатаПодписанияИсполнителем= 		Формат(xmlAcceptanceCertificateContent.SignatureDate, "ДФ=dd.MM.yy; ДП=' '");
					Подвал.Параметры.НадписьДатаПодписанияИсполнителем= "Дата подписания: ";
				КонецЕсли;	
				
				Если XmlAcceptanceCertificateBuyerContent <> Неопределено Тогда 
					Если СтруктураКонтентаЗаполнена(XmlAcceptanceCertificateBuyerContent.Attorney) Тогда
						ПредставлениеДоверенности= "Доверенность №" + XmlAcceptanceCertificateBuyerContent.Attorney.Number + " от " + Формат(XmlAcceptanceCertificateBuyerContent.Attorney.Date, "ДФ=dd.MM.yy; ДП=' '") + "
													|выдал "+ПредставлениеДоверенностьВыдана(XmlAcceptanceCertificateBuyerContent.Attorney);
						Подвал.Параметры.ДоверенностьЗаказчика= ПредставлениеДоверенности; 
					КонецЕсли;	
					Подвал.Параметры.ДолжностьЗаказчика= 	XmlAcceptanceCertificateBuyerContent.Signer.JobTitle;
					Подвал.Параметры.ФИОЗаказчика=			ПолучитьФИОПоКонтенту(XmlAcceptanceCertificateBuyerContent.Signer);
					
					Если ЗначениеЗаполнено(XmlAcceptanceCertificateBuyerContent.SignatureDate) Тогда 
						Подвал.Параметры.ДатаПодписанияЗаказчиком= 			Формат(XmlAcceptanceCertificateBuyerContent.SignatureDate, "ДФ=dd.MM.yy; ДП=' '");
						Подвал.Параметры.НадписьДатаПодписанияЗаказчиком= 	"Дата приема: ";
					КонецЕсли;
				КонецЕсли;
				
				Таб.Вывести(Подвал);
				
				Если ВизуализироватьДопПоля и ЗначениеЗаполнено(СтруктураДопПоля.ground) Тогда
					ДопИнфо.Параметры.ДопСведения= СтруктураДопПоля.ground;
					Таб.Вывести(ДопИнфо);
				КонецЕсли;
				
				Если НЕ XmlAcceptanceCertificateSignatureStructure = Неопределено Тогда
					Таб.Вывести(ОбластьПодписи(XmlAcceptanceCertificateSignatureStructure));
				КонецЕсли;
							
				Возврат Таб; 
				
			КонецФункции
			
		//} Визуализация XmlAcceptanceCertificate
		
		//{ Валидация XmlAcceptanceCertificate
		
			Функция ВалидацияXmlAcceptanceCertificateContent(xmlAcceptanceCertificateContent) Экспорт
				
				списокОшибок = "";
				
				если ЗначениеЗаполнено(xmlAcceptanceCertificateContent.Date)=ложь  тогда 
					СписокОшибок = списокОшибок +  "<p>Не указана дата документа</p>";
				иначе 
					СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(xmlAcceptanceCertificateContent.Date, "дата документа");
				конецЕсли;
				
				СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(xmlAcceptanceCertificateContent.Number, "номер документа", 256);
				
				если ЗначениеЗаполнено(xmlAcceptanceCertificateContent.Title)=ложь  тогда 
					СписокОшибок = списокОшибок +  "<p>Не указан заголовок документа</p>";
				иначе 
					СписокОшибок = СписокОшибок +  ПроверитьМаксимальнуюДлинуПрото(xmlAcceptanceCertificateContent.Title, "заголовок документа", 2000);
				конецЕсли;
				
				если ( СтруктураКонтентаЗаполнена(xmlAcceptanceCertificateContent.Seller)=ложь)  тогда 
					СписокОшибок = СписокОшибок +  "<p>отсутствуют данные о продавце</p>";
				Иначе 
					ОшибкиКонтрагента = ПроверитьСтруктуруКонтрагентаДляТОРГ12(xmlAcceptanceCertificateContent.Seller, 1);
					если ОшибкиКонтрагента <> "" тогда
						Поставщик =  xmlAcceptanceCertificateContent.Seller.Ссылка;
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""ОРГАНИЗАЦИЯ:"+Поставщик.УникальныйИдентификатор()+""">поставщике</a></h3>
						|"+ ОшибкиКонтрагента;
					КонецЕсли;
					
					параметрыПодписания =  ПолучитьПараметрыПодписанияТ12вДиадок(xmlAcceptanceCertificateContent.Seller.Ссылка);
					Если ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта) = Ложь Тогда
						СписокОшибок = СписокОшибок + "<h3>Не настроены параметры подписания документа</h3>";
						
						Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта) Тогда
							СписокОшибок = СписокОшибок + "<p>Отсутствует должность подписанта</p>";
							СписокОшибок = СписокОшибок + "<p>Перейдите в <a href=""НАСТРОЙКДОЛЖНОСТИПОДПИСАНТА"">настройки сотрудника Диадока</a> и заполните должность. После этого перезапустите модуль.</p>";
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ФИОПодписанта) Тогда
							СписокОшибок = СписокОшибок + "<h3>Не настроены параметры подписания документа</h3>";
							СписокОшибок = списокОшибок +  "<p>Отсутствует ФИО подписанта</p>";
							СписокОшибок = СписокОшибок + "<p>Перейдите в <a href=""НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ"">окно настройки</a> и заполните отсутствующие поля</p>";
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
				//валидируем строки 
				номерСтроки = 0;
				
				СписокОшибокВКлассификаторах = "";
				ОшибкаЕИНеНайдена = ложь;
				ОшибкаЕИНеТотКод = ложь;
				СписокПроверенныхЕИ = новый СписокЗначений;
				
				Если (xmlAcceptanceCertificateContent.Items.Количество()=0) тогда
					СписокОшибок = СписокОшибок +"<p>отсутствует табличная часть документа</p>"
				Иначе
					
					для каждого Строка из xmlAcceptanceCertificateContent.Items	 цикл 
						НомерСтроки = НомерСтроки +1; 
						СписокОшибокСтроки = "";
						
						//если ЗначениеЗаполнено(строка.получить("UnitName"))=ложь тогда 
						//	СписокОшибокСтроки = СписокОшибокСтроки +
						//	"<p>Не указано наименование единицы измерения</p>
						//	|";
						//КонецЕсли;
						
						Если ЗначениеЗаполнено(строка.UnitCode) ИЛИ ЗначениеЗаполнено(строка.UnitName) тогда 
							СписокОшибокВКлассификаторах = СписокОшибокВКлассификаторах+ ПроверитьЕИ( строка.СсылкаНаЕИ, сокрЛП(строка.UnitCode), СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
						КонецЕсли;	
						//Если строка.TaxRate = "##"	  тогда 
						//  СписокОшибокСтроки = СписокОшибокСтроки  + "<p>указана недопустимая ставка налога</p>"
						//КонецЕсли;
												
						//Если ЗначениеЗаполнено(строка.Quantity) И (строка.Quantity<0)  тогда 
						//	СписокОшибокСтроки = СписокОшибокСтроки + 
						//	"<p>Количество не может быть отрицательным</p>
						//	|";
						//КонецЕсли;	
												
						если ЗначениеЗаполнено(строка.Total)=Ложь Тогда
							СписокОшибокСтроки = СписокОшибокСтроки  + "<p>не указана общая сумма по строке</p>"
						КонецЕсли;	
						
						если СписокОшибокСтроки <> "" тогда 
							СписокОшибок = СписокОшибок + 
							"<h3>Ошибки в строке "+номерСтроки+" табличной части</h3>
							|"+СписокОшибокСтроки;
						КонецЕсли;	
					Конеццикла;	
				КонецЕсли;
				
				
				Если 	СписокОшибокВКлассификаторах <> "" тогда 
					СписокОшибок = СписокОшибок +  "<h3>Ошибки в классификаторах: </h3> 			
					|<p>"+СписокОшибокВКлассификаторах+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
				конецЕсли;	
				
				//если (ЗначениеЗаполнено(AcceptanceCertificateSellerTitleInfo.получить("Signer"))=Ложь)   или (ЗначениеЗаполнено(AcceptanceCertificateSellerTitleInfo.получить("Signer").получить("SignerDetails"))=Ложь) тогда 
				//	ОшибкиВСтроке = ОшибкиВСтроке + "<p>не указано лицо, подписывающее документ</p>"
				//Иначе 
				//	SignerDetails  = AcceptanceCertificateSellerTitleInfo.получить("Signer").получить("SignerDetails");
				//	если (значениеЗаполнено(SignerDetails.получить("JobTitle"))=ложь) тогда 
				//		если ЗначениеЗаполнено(AcceptanceCertificateSellerTitleInfo.получить("Seller")) тогда 
				//		 	Поставщик =   AcceptanceCertificateSellerTitleInfo.получить("Seller").Получить("OrgInfo").получить("Ссылка");
				//			списокОшибок = списокОшибок + "<p><a href=""НАСТРОЙКАПОДПИСИ:"+Поставщик.УникальныйИдентификатор()+""">не указана должность лица, подписывающего документ</a></p>"
				//		Иначе 
				//			списокОшибок = списокОшибок + "<p><a href=""НАСТРОЙКАПОДПИСИ:"++""">не указана должность лица, подписывающего документ</a></p>"
				//		КонецЕсли;	
				//	КонецЕсли;
				//	если (значениеЗаполнено(SignerDetails.получить("Surname"))=ложь)тогда 
				//		списокОшибок = списокОшибок + "<p>не указана фамилия лица, подписывающего документ</p>"
				//	КонецЕсли;
				//	если (значениеЗаполнено(SignerDetails.получить("FirstName"))=ложь) тогда 
				//		списокОшибок = списокОшибок + "<p>не указано имя лица, подписывающего документ</p>"
				//	КонецЕсли;
				//КонецЕсли;	
				
				списокОшибок = ОформитьОшибкиВHTML(списокОшибок, "При формировании файла акта выполненных работ обнаружены ошибки");
				
				возврат СписокОшибок;
				
			КонецФункции	                                                         
			
		//} Валидация XmlAcceptanceCertificate
		
	//} XmlAcceptanceCertificate

	//{ UniversalTransferDocument
		
		//{ Визуализация UniversalTransferDocument
		
			Функция СформироватьПечатнуюФормуУПДПоUTDSellerContent(Знач СтруктураКонтентов, Знач ВизуализироватьДопПоля) Экспорт
				
				Content= 			СтруктураКонтентов.Content;
				SignatureStructure= ?(СтруктураКонтентов.Свойство("SignatureStructure"), СтруктураКонтентов.SignatureStructure, Неопределено);
				
				Если Content.Свойство("AdditionalInfoId") Тогда
					СтруктураДопПоля= РазобратьДопПоле(Content.AdditionalInfoId.StructedAdditionalInfos);
				КонецЕсли;
						
				Макет= ЭтотОбъект.ПолучитьМакет("УниверсальныйПередаточныйДокумент");
				
				Таб= Новый ТабличныйДокумент;
				Таб.ОриентацияСтраницы= ОриентацияСтраницы.Ландшафт;
				Таб.АвтоМасштаб= 		Истина;
							
				Таб.ОриентацияСтраницы= ОриентацияСтраницы.Ландшафт;
				Таб.АвтоМасштаб= Истина;
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.head) Тогда
					ДопПолеШапка= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеШапка.Параметры.ДопСведения= СокрЛП(СтруктураДопПоля.head);
					Таб.Вывести(ДопПолеШапка);
				КонецЕсли;
				
				Шапка= Макет.ПолучитьОбласть("Шапка");
				
				Шапка.Параметры.СтатусУПД= 			?(ТипДокументаУПД(Content.Function) = ТипДокументаУПД("СЧФДОП"), 1, 2);
				Шапка.Параметры.Дата= 				Формат(Content.Date, "ДФ=dd.MM.yyyy");
				Шапка.Параметры.Номер= 				Content.Number;
				Шапка.Параметры.ДатаИсправления= 	СтрокаДатаCOM_В_СтрокаДата1С(Content.RevisionDate, "ДФ=dd.MM.yyyy", "-");
				Шапка.Параметры.НомерИсправления= 	СтрокаCOM_В_Строка1С(Content.RevisionNumber, "-");
				
				Шапка.Параметры.ПредставлениеПоставщика= 	Content.seller.name;
				Шапка.Параметры.АдресПоставщика=			СформироватьПредставлениеАдресаПоContent(Content.seller.address);
				
				ИННПоставщика= ПредставлениеИННКПП(Content.seller);
				Шапка.Параметры.ИННПоставщика= 				ИННПоставщика;
				
				ПРС= "";
				Для каждого Стр из Content.PaymentDocuments Цикл 
					ДатаПРД= 	Стр.Date;
					НомерПРД=	Стр.Number;
					ПРС= ?(ПРС="", "", ПРС+", ") + ?(ЗначениеЗаполнено(НомерПРД) или ЗначениеЗаполнено(ДатаПРД), "№ " + НомерПРД + " от " + Формат(ДатаПРД, "ДФ=dd.MM.yyyy"), "");
				КонецЦикла;	
				Шапка.Параметры.ПоДокументу= ПРС;
				Если Content.Shipper.SameAsSeller = Истина Тогда 
					Шапка.Параметры.ПредставлениеГрузоотправителя= 	"он же";
				Иначе  
					Шапка.Параметры.ПредставлениеГрузоотправителя= 	ПредставлениеГОП(Content.Shipper.OrganizationInfo); 
				КонецЕсли;
				
				Шапка.Параметры.ПредставлениеГрузополучателя= 	ПредставлениеГОП(Content.Consignee); 
				Шапка.Параметры.ПредставлениеПокупателя= 		Content.Buyer.name;
				Шапка.Параметры.АдресПокупателя=				СформироватьПредставлениеАдресаПоContent(Content.Buyer.address);
				
				ИННПокупателя= ПредставлениеИННКПП(Content.Buyer);
				Шапка.Параметры.ИННПокупателя= 					ИННПокупателя;
				
				Если ЗначениеЗаполнено(Content.валютаСсылка) Тогда 
					//Если валюта заполнена - передаем наименование как в справочнике 1С
					НаименованиеВалюты= Content.валютаСсылка.наименованиеПолное;
				Иначе 	
					ВыборкаВалют= МетодСервера(,"КлассификаторыДляДиадок").ОКВ.найтиСтроки(Новый Структура("Код", Content.currency));
					НаименованиеВалюты= ?(ВыборкаВалют.Количество()=0, "", ВыборкаВалют[0].Наименование);
				КонецЕсли;	
				Шапка.Параметры.Валюта= ?(ЗначениеЗаполнено(НаименованиеВалюты), НаименованиеВалюты, "-") + ", " + ?(ЗначениеЗаполнено(Content.currency), Content.currency, "-");
				
				Если Не ЗначениеЗаполнено(Шапка.Параметры.ПредставлениеПоставщика) Тогда 
					Шапка.Параметры.ПредставлениеПоставщика= "-";
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Шапка.Параметры.АдресПоставщика) Тогда 
					Шапка.Параметры.АдресПоставщика= "-";
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Шапка.Параметры.ПредставлениеГрузоотправителя) Тогда 
					Шапка.Параметры.ПредставлениеГрузоотправителя= "-";
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Шапка.Параметры.ПредставлениеГрузополучателя) Тогда 
					Шапка.Параметры.ПредставлениеГрузополучателя= "-";
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Шапка.Параметры.ПредставлениеПокупателя) Тогда 
					Шапка.Параметры.ПредставлениеПокупателя= "-";
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Шапка.Параметры.АдресПокупателя) Тогда 
					Шапка.Параметры.АдресПокупателя= "-";
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Шапка.Параметры.ПоДокументу) Тогда 
					Шапка.Параметры.ПоДокументу= "-";
				КонецЕсли;
				
				Таб.Вывести(Шапка);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.top) Тогда
					ДопПолеПередТаблицей= Макет.ПолучитьОбласть("ДопПолеПередТаблицей");
					ДопПолеПередТаблицей.Параметры.ДопСведения= СокрЛП(СтруктураДопПоля.top);
					Таб.Вывести(ДопПолеПередТаблицей);
				КонецЕсли;
				
				ШапкаТаблицы= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
				Таб.Вывести(ШапкаТаблицы);
				
				Ц= 0;
				Для каждого Item из Content.InvoiceTable.Items Цикл 
					
					Если ВизуализироватьДопПоля Тогда
						Если Item.Свойство("StructedAdditionalInfos") И Item.StructedAdditionalInfos.Количество()>0 Тогда
							Строка= Макет.ПолучитьОбласть("СтрокаСДопПолем");
							СтруктураДопПоляТЧ= РазобратьДопПоле(Item.StructedAdditionalInfos);
							Строка.Параметры.ДопСведенияСтроки= СокрЛП(СтруктураДопПоляТЧ.top);	
						ИначеЕсли Item.Свойство("AdditionalProperty") И ЗначениеЗаполнено(Item.AdditionalProperty) Тогда
							Строка= Макет.ПолучитьОбласть("СтрокаСДопПолем");
							Строка.Параметры.ДопСведенияСтроки= СокрЛП(Item.AdditionalProperty);
						Иначе
							Строка= Макет.ПолучитьОбласть("Строка");
						КонецЕсли;
					Иначе
						Строка= Макет.ПолучитьОбласть("Строка");
					КонецЕсли;
									
					Ц= Ц + 1;
					Строка.Параметры.НомерСтроки= 			Ц;
					Строка.Параметры.ТоварКод= 				СтрокаCOM_В_Строка1С(Item.VendorCode , "-");
					Строка.Параметры.ТоварНаименование= 	СтрокаCOM_В_Строка1С(Item.Product , "-");
					Строка.Параметры.ЕдиницаИзмеренияКод= 	СтрокаCOM_В_Строка1С(Item.UnitCode, "-");
					Если ЗначениеЗаполнено(Item.UnitCode) Тогда
						Если Item.UnitCode = "0000" Тогда
							НаименованиеЕИ= Item.UnitName;
						Иначе
							НаименованиеЕИ= СтрокаCOM_В_Строка1С(ПолучитьНаименованиеЕИПоКоду(Item.UnitCode), "-");
						КонецЕсли;
					Иначе
						НаименованиеЕИ= "";
					КонецЕсли;
					Строка.Параметры.ЕдиницаИзмерения= 	?(ЗначениеЗаполнено(НаименованиеЕИ), НаименованиеЕИ, "-");
					Строка.Параметры.Количество= 		СтрокаЧислоCOM_В_СтрокаЧисло1С(Item.Quantity, "ЧДЦ=3", "-");
					Строка.Параметры.Цена= 				СтрокаЧислоCOM_В_СтрокаЧисло1С(Item.Price, "ЧДЦ=2", "-");
					Строка.Параметры.Стоимость= 		СтрокаЧислоCOM_В_СтрокаЧисло1С(Item.SubtotalWithVatExcluded, "ЧДЦ=2", "-");
					Строка.Параметры.СтавкаНДС=			ПредставлениеСтавкиНДС(Item.TaxRate);
					Строка.Параметры.СуммаНДС= 			?(нрег(строка.Параметры.СтавкаНДС) = "без ндс", "без НДС", СтрокаЧислоCOM_В_СтрокаЧисло1С(Item.Vat, "ЧДЦ=2; ЧН=0,00"));
					Строка.Параметры.Всего= 			СтрокаЧислоCOM_В_СтрокаЧисло1С(Item.SubTotal, "ЧДЦ=2");
					Строка.Параметры.Акциз= 			СтрокаЧислоCOM_В_СтрокаЧисло1С(Item.Excise  , "ЧДЦ=2", "без акциза");
										
					Если Item.CustomDeclarations.Количество() > 0 Тогда
						
						Разделитель= "";
						Для Каждого CustomDeclaration ИЗ Item.CustomDeclarations Цикл
							
							Если ЗначениеЗаполнено(CustomDeclaration.CountryCode) ИЛИ ЗначениеЗаполнено(CustomDeclaration.DeclarationNumber) Тогда
								
								СтранаПроисх= ПолучитьНаименованиеСтраныПоКоду(CustomDeclaration.CountryCode);
								
								Строка.Параметры.ПредставлениеСтраны= 	 Строка(Строка.Параметры.ПредставлениеСтраны) + Разделитель + ?(ЗначениеЗаполнено(СтранаПроисх), СтранаПроисх, "-");
								Строка.Параметры.СтранаПроисхожденияКод= Строка(Строка.Параметры.СтранаПроисхожденияКод) + Разделитель + СтрокаCOM_В_Строка1С(CustomDeclaration.CountryCode, "-");
								Строка.Параметры.ПредставлениеГТД= 	   	 Строка(Строка.Параметры.ПредставлениеГТД) + Разделитель + СтрокаCOM_В_Строка1С(CustomDeclaration.DeclarationNumber, "-");
								
								Разделитель= Символы.ПС;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						
						Строка.Параметры.ПредставлениеСтраны= 	 "-";
						Строка.Параметры.СтранаПроисхожденияКод= "-";
						Строка.Параметры.ПредставлениеГТД= 	     "-";
						
					КонецЕсли;

					Таб.Вывести(Строка);
					
				КонецЦикла;
				
				Итого= Макет.ПолучитьОбласть("Итого");
				
				Итого.Параметры.ИтогоСтоимость= СтрокаЧислоCOM_В_СтрокаЧисло1С(Content.InvoiceTable.TotalWithVatExcluded, "ЧДЦ=2; ЧН=-; ЧГ=3,0", "-");
				Итого.Параметры.ИтогоСуммаНДС= 	СтрокаЧислоCOM_В_СтрокаЧисло1С(Content.InvoiceTable.Vat,  "ЧДЦ=2; ЧН=; ЧГ=3,0");
				Итого.Параметры.ИтогоВсего= 	СтрокаЧислоCOM_В_СтрокаЧисло1С(Content.InvoiceTable.Total, "ЧДЦ=2; ЧН=-; ЧГ=3,0", "-");
				
				Таб.Вывести(Итого);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.bottom) Тогда
					ДопПолеПослеТаблицы= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеПослеТаблицы.Параметры.ДопСведения= СокрЛП(СтруктураДопПоля.bottom);
					Таб.Вывести(ДопПолеПослеТаблицы);
				КонецЕсли;
				
				Подвал= Макет.ПолучитьОбласть("Подвал");
				Таб.Вывести(Подвал);
				
				ПодвалНакладной= Макет.ПолучитьОбласть("ПодвалНакладной");
				
				ПодвалНакладной.Параметры.СведенияОТранспортировкеИГрузе= Content.TransferInfo.TransferTextInfo;
				
				ПредставлениеОснования= "";
				Счетчик= 0;
				Для каждого TransferBase из Content.TransferInfo.TransferBases Цикл
					
					Счетчик= Счетчик + 1;
					
					ПредставлениеОснования= ПредставлениеОснования + TransferBase.DocumentName 
					                       + ?(ЗначениеЗаполнено(TransferBase.DocumentNumber), " №"   + TransferBase.DocumentNumber, "")
										   + ?(ЗначениеЗаполнено(TransferBase.DocumentDate),   " от " + СтрокаДатаCOM_В_СтрокаДата1С(TransferBase.DocumentDate, "ДФ=dd.MM.yyyy"), "")
										   + ?(ЗначениеЗаполнено(TransferBase.DocumentInfo),   "("    + TransferBase.DocumentInfo + ")", "");
					
					Если Content.TransferInfo.TransferBases.Количество() > 1 
						И (НЕ Счетчик = Content.TransferInfo.TransferBases.Количество()) Тогда
						
						ПредставлениеОснования= ПредставлениеОснования + ";";
						
					КонецЕсли;
					
				КонецЦикла;
				
				ПодвалНакладной.Параметры.Основание= ПредставлениеОснования;
								
				ПодвалНакладной.Параметры.ДатаОтгрузкиПередачи=		Формат(Content.Date, "ДФ=dd.MM.yyyy");
				ПодвалНакладной.Параметры.ПредставлениеОрганизации= Content.seller.name + ", ИНН/КПП " + ИННПоставщика;
				ПодвалНакладной.Параметры.ПредставлениеКонтрагента= Content.Buyer.name + ", ИНН/КПП " + ИННПокупателя;
			
				Таб.Вывести(ПодвалНакладной);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.ground) Тогда
					ДопПолеПодвал= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеПодвал.Параметры.ДопСведения= СокрЛП(СтруктураДопПоля.ground);
					Таб.Вывести(ДопПолеПодвал);
				КонецЕсли;
				
				Если НЕ SignatureStructure = Неопределено Тогда
					Таб.Вывести(ОбластьПодписи(SignatureStructure));
				КонецЕсли;	
				
				Возврат Таб;
				
			КонецФункции	 

			Функция СформироватьПечатнуюФормуУПДСЧФПоUTDSellerContent(Знач СтруктураКонтентов, Знач ВизуализироватьДопПоля) Экспорт
				
				Content= 			СтруктураКонтентов.Content;
				SignatureStructure=	?(СтруктураКонтентов.Свойство("SignatureStructure"), СтруктураКонтентов.SignatureStructure, Неопределено);
				
				Если Content.Свойство("AdditionalInfoId") Тогда
					СтруктураДопПоля = РазобратьДопПоле(Content.AdditionalInfoId.StructedAdditionalInfos);
				КонецЕсли;
						
				Макет= ЭтотОбъект.ПолучитьМакет("СФ1137");
				
				Таб= Новый ТабличныйДокумент;
				Таб.ОриентацияСтраницы= ОриентацияСтраницы.Ландшафт;
				Таб.АвтоМасштаб= 		Истина;
				
				Колонтитул= Макет.ПолучитьОбласть("Колонтитул");
				Таб.Вывести(Колонтитул);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.head) Тогда
					ДопПолеШапка= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеШапка.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.head);
					Таб.Вывести(ДопПолеШапка);
				КонецЕсли;
				
				Шапка= Макет.ПолучитьОбласть("Шапка");
				
				Шапка.Параметры.ДатаСФ=  СтрокаДатаCOM_В_СтрокаДата1С(Content.Date, "ДФ=dd.MM.yyyy");
				Шапка.Параметры.НомерСФ= Content.Number;
				
				Шапка.Параметры.ДатаИсправления=  СтрокаДатаCOM_В_СтрокаДата1С(Content.RevisionDate, "ДФ=dd.MM.yyyy", "-");
				Шапка.Параметры.НомерИсправления= СтрокаCOM_В_Строка1С(Content.RevisionNumber, "-");
				
				Шапка.Параметры.НаименованиеПродавца= Content.Seller.Name;
				Шапка.Параметры.АдресПродавца=  	  СформироватьПредставлениеАдресаПоContent(Content.Seller.Address);
				Шапка.Параметры.ИННКПППродавца= 	  ПредставлениеИННКПП(Content.Seller);
				
				ПРС= ""; 
				Разделитель= "";
				Для Каждого PaymentDocument ИЗ Content.PaymentDocuments Цикл
					Если ЗначениеЗаполнено(PaymentDocument.Number) ИЛИ ЗначениеЗаполнено(PaymentDocument.Date) Тогда
						ПРС= ПРС + Разделитель + "№ " + PaymentDocument.Number + " от " + СтрокаДатаCOM_В_СтрокаДата1С(PaymentDocument.Date, "ДФ=dd.MM.yyyy");
						Разделитель= ", ";
					КонецЕсли;
				КонецЦикла;	
				Шапка.Параметры.ПРС= ПРС;
				
				Шапка.Параметры.Грузоотправитель= 		?(Content.Shipper.SameAsSeller = Истина, "он же", ПредставлениеГОП(Content.Shipper.OrganizationInfo));
				Шапка.Параметры.Грузополучатель= 		ПредставлениеГОП(Content.Consignee); 
				Шапка.Параметры.НаименованиеПокупателя=	Content.Buyer.Name;
				Шапка.Параметры.АдресПокупателя=   		СформироватьПредставлениеАдресаПоContent(Content.Buyer.Address);
				Шапка.Параметры.ИННКПППокупателя=  		ПредставлениеИННКПП(Content.Buyer);
				
				Шапка.Параметры.Валюты= "-";
				Если ЗначениеЗаполнено(Content.ВалютаСсылка) Тогда 
					Шапка.Параметры.Валюты= Content.ВалютаСсылка.НаименованиеПолное;
				Иначе 	
					НайденнаяСтрока= МетодСервера(,"КлассификаторыДляДиадок").ОКВ.Найти(Content.Currency, "Код");
					Если НайденнаяСтрока <> Неопределено Тогда
						Шапка.Параметры.Валюты= НайденнаяСтрока.Наименование;
					КонецЕсли;
				КонецЕсли;	
				Шапка.Параметры.Валюты= ?(ЗначениеЗаполнено(Content.Currency), Шапка.Параметры.Валюты + ", " + Content.Currency, Шапка.Параметры.Валюты);
				
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.НаименованиеПродавца) Тогда 
					Шапка.Параметры.НаименованиеПродавца= "-";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.АдресПродавца) Тогда 
					Шапка.Параметры.АдресПродавца= "-";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.Грузоотправитель) Тогда 
					Шапка.Параметры.Грузоотправитель= "-";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.Грузополучатель) Тогда 
					Шапка.Параметры.Грузополучатель= "-";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.НаименованиеПокупателя) Тогда 
					Шапка.Параметры.НаименованиеПокупателя= "-";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.АдресПокупателя) Тогда 
					Шапка.Параметры.АдресПокупателя= "-";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Шапка.Параметры.ПРС) Тогда 
					Шапка.Параметры.ПРС= "-";
				КонецЕсли;
				
				Таб.Вывести(Шапка);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.top) Тогда
					ДопПолеПередТаблицей= Макет.ПолучитьОбласть("ДопПолеПередТаблицей");
					ДопПолеПередТаблицей.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.top);
					Таб.Вывести(ДопПолеПередТаблицей);
				КонецЕсли;
				
				ШапкаТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицы");
				Таб.Вывести(ШапкаТаблицы);
				
				НомерСтроки= 0;
				
				Для Каждого Item ИЗ Content.InvoiceTable.Items Цикл 
					
					НомерСтроки= НомерСтроки + 1;
					
					Строка= Неопределено;
					
					Если ВизуализироватьДопПоля 
						И Item.Свойство("StructedAdditionalInfos") И Item.StructedAdditionalInfos.Количество()>0
					Тогда
						Строка= Макет.ПолучитьОбласть("СтрокаСДопПолем");
						СтруктураДопПоляТЧ= РазобратьДопПоле(Item.StructedAdditionalInfos);
						Строка.Параметры.ДопСведенияСтроки= СокрЛП(СтруктураДопПоляТЧ.top);	
					КонецЕсли;
					
					Если Строка = Неопределено Тогда
						Строка= Макет.ПолучитьОбласть("Строка");
					КонецЕсли;
									
					Строка.Параметры.НаимТов=  СтрокаCOM_В_Строка1С(Item.Product , "-");
					Строка.Параметры.ОКЕИ_Тов= СтрокаCOM_В_Строка1С(Item.UnitCode, "-");
					Строка.Параметры.НаимЕИ=   СтрокаCOM_В_Строка1С(ПолучитьНаименованиеЕИПоКоду(Item.UnitCode), "-");
					
					Строка.Параметры.КолТов=  СтрокаЧислоCOM_В_СтрокаЧисло1С(Item.Quantity, "ЧДЦ=3", "-");
					Строка.Параметры.ЦенаТов= СтрокаЧислоCOM_В_СтрокаЧисло1С(Item.Price	  , "ЧДЦ=2", "-");
					
					строка.Параметры.СтТовБезНДС= СтрокаЧислоCOM_В_СтрокаЧисло1С(Item.SubtotalWithVatExcluded, "ЧДЦ=2", "-");
					строка.Параметры.СуммаНДС= 	  СтрокаЧислоCOM_В_СтрокаЧисло1С(Item.Vat	  , "ЧДЦ=2");
					строка.Параметры.СтТовУчНал=  СтрокаЧислоCOM_В_СтрокаЧисло1С(Item.SubTotal, "ЧДЦ=2");
					строка.Параметры.Акциз= 	  СтрокаЧислоCOM_В_СтрокаЧисло1С(Item.Excise  , "ЧДЦ=2", "без акциза");
					строка.Параметры.НалСт= 	  ПредставлениеСтавкиНДС(Item.TaxRate);
					
					Если Item.CustomDeclarations.Количество() > 0 Тогда
						
						Разделитель= "";
						Для Каждого CustomDeclaration ИЗ Item.CustomDeclarations Цикл
							
							Если ЗначениеЗаполнено(CustomDeclaration.CountryCode) ИЛИ ЗначениеЗаполнено(CustomDeclaration.DeclarationNumber) Тогда
								
								СтранаПроисх= ПолучитьНаименованиеСтраныПоКоду(CustomDeclaration.CountryCode);
								
								Строка.Параметры.СтранаПроисх= Строка(Строка.Параметры.СтранаПроисх) + Разделитель + ?(ЗначениеЗаполнено(СтранаПроисх), СтранаПроисх, "-");
								Строка.Параметры.КодПроисх=    Строка(Строка.Параметры.КодПроисх) 	 + Разделитель + СтрокаCOM_В_Строка1С(CustomDeclaration.CountryCode		 , "-");
								Строка.Параметры.НомерТД= 	   Строка(Строка.Параметры.НомерТД) 	 + Разделитель + СтрокаCOM_В_Строка1С(CustomDeclaration.DeclarationNumber, "-");
								
								Разделитель= Символы.ПС;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						
						Строка.Параметры.СтранаПроисх= "-";
						Строка.Параметры.КодПроисх=    "-";
						Строка.Параметры.НомерТД= 	   "-";
						
					КонецЕсли;
					
					Таб.Вывести(Строка);
					
				КонецЦикла;
				
				Подвал= Макет.ПолучитьОбласть("Подвал");
				
				Подвал.Параметры.ВсегоСтТовБезНалВс= СтрокаЧислоCOM_В_СтрокаЧисло1С(Content.InvoiceTable.TotalWithVatExcluded, "ЧДЦ=2", "-");
				Подвал.Параметры.ВсегоСумНДСВс=		 СтрокаЧислоCOM_В_СтрокаЧисло1С(Content.InvoiceTable.Vat  ,  "ЧДЦ=2");
				Подвал.Параметры.ВсегоСтТовУчНалВс=  СтрокаЧислоCOM_В_СтрокаЧисло1С(Content.InvoiceTable.Total, "ЧДЦ=2", "-");
				
				Таб.Вывести(Подвал);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.bottom) Тогда
					ДопПолеПослеТаблицы= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеПослеТаблицы.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.bottom);
					Таб.Вывести(ДопПолеПослеТаблицы);
				КонецЕсли;
				
				Подписи= Макет.ПолучитьОбласть("Подписи");
				Таб.Вывести(Подписи);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.ground) Тогда
					ДопПолеПодвал= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеПодвал.Параметры.ДопСведения= СокрЛП(СтруктураДопПоля.ground);
					Таб.Вывести(ДопПолеПодвал);
				КонецЕсли;
				
				Если НЕ SignatureStructure = Неопределено Тогда
					Таб.Вывести(ОбластьПодписи(SignatureStructure));
				КонецЕсли;	
				
				Возврат Таб;
				
			КонецФункции	 
			
		//} Визуализация UniversalTransferDocument
		
		//{ Валидация UniversalTransferDocument
			
		   	Функция ПроверитьСтруктуруКонтрагентаДляУПД(OrganizationInfo, ТипСтруктуры)
				//ТипСтруктуры =1 : юридический адрес
				//ТипСтруктуры =2 : фактический адрес
				
				списокОшибок = "";
				
				//проверяем наименование
				Если Не ЗначениеЗаполнено(OrganizationInfo.Name) Тогда 
					СписокОшибок = СписокОшибок + "<p>не указано название организации</p>";
				ИначеЕсли OrganizationInfo.Type = "IndividualEntity"  и (найти(OrganizationInfo.Name, " ") = 0) Тогда 
					СписокОшибок = СписокОшибок + "<p>не указано имя индивудуального предпринимателя</p>";
				Иначе 
					СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(OrganizationInfo.Name, "наименование контрагента", 1000, "с");
				КонецЕсли; 
				
				Если ТипСтруктуры = 1 Тогда 
					//проверяем ИНН
					Если ЗначениеЗаполнено(OrganizationInfo.Inn) Тогда 
						ИНН = OrganizationInfo.Inn;
						Если OrganizationInfo.Type = "LegalEntity" Тогда 
							//ЮЛ
							Если стрДлина(ИНН) <> 10 Тогда 
								списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") должен иметь длину 10 цифр</p>
								|";		
							ИначеЕсли Не ТолькоЦифры(ИНН) Тогда
								списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") должен состоять из цифр</p>
								|";	
							ИначеЕсли лев(ИНН, 2)="00"	Тогда 
								списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") не должен начинаться с двух нулей</p>
								|";	
							ИначеЕсли Не КонтрольнаяСуммаИННЮЛСовпадает(ИНН) Тогда
								списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") неверный (не совпадает контрольная сумма)</p>
								|";	
							КонецЕсли;	
						ИначеЕсли OrganizationInfo.Type = "IndividualEntity" Тогда
							//ИП
							Если стрДлина(ИНН) <> 12 Тогда 
								списокОшибок = списокОшибок + "<p>ИНН контрагента-индивидуального предпринимателя (" + ИНН + ") должен иметь длину 12 цифр</p>
								|";		
							ИначеЕсли Не ТолькоЦифры(ИНН) Тогда
								списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") должен состоять из цифр</p>
								|";	
							ИначеЕсли лев(ИНН, 2) = "00" Тогда 
								списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") не должен начинаться с двух нулей</p>
								|";	
							ИначеЕсли Не КонтрольнаяСуммаИННФЛСовпадает(ИНН) Тогда
								списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") неверный (не совпадает контрольная сумма)</p>
								|";	
							КонецЕсли;	
						КонецЕсли;
					Иначе 
						списокОшибок = списокОшибок + "<p>ИНН контрагента не указан</p>";
					КонецЕсли;	
					
					//проверяем КПП
					Если ЗначениеЗаполнено(OrganizationInfo.Kpp) Тогда 
						КПП = OrganizationInfo.Kpp;
						Если стрДлина(КПП) <> 9 Тогда 
							списокОшибок = списокОшибок + "<p>КПП контрагента (" + КПП + ") должен иметь длину 9 цифр</p>
							|";		
						ИначеЕсли Не ТолькоЦифры(КПП) Тогда
							списокОшибок = списокОшибок + "<p>КПП контрагента (" + КПП + ") должен состоять из цифр</p>
							|";	
						ИначеЕсли лев(КПП, 2)="00"	Тогда 
							списокОшибок = списокОшибок + "<p>КПП контрагента (" + КПП + ") не должен начинаться с двух нулей</p>
							|";	
						КонецЕсли;
					ИначеЕсли OrganizationInfo.Type = "LegalEntity" Тогда
						списокОшибок = списокОшибок + "<p>КПП контрагента не указано</p>";
					КонецЕсли;
				КонецЕсли;
				
				ТекстОшибкиАдрес = ПроверитьСтруктуруАдреса(OrganizationInfo.Address, Истина, Истина);

				Если ТекстОшибкиАдрес <> "" Тогда 
					списокОшибок = списокОшибок + "<p><b>Ошибки в " + ?(ТипСтруктуры = 1, "юридическом", "фактическом") + " адресе:</b></p>" + ТекстОшибкиАдрес;
				КонецЕсли; 
				
				//проверяем ОКОПФ
				Если ЗначениеЗаполнено(OrganizationInfo.Okopf) Тогда 
					ОКОПФ = OrganizationInfo.Okopf;
					Если стрДлина(ОКОПФ)<>2 Тогда 
						списокОшибок = списокОшибок +"<p>ОКОПФ контрагента ("+ОКОПФ+") должен иметь длину 2 цифры</p>
						|";		
					ИначеЕсли ТолькоЦифры(ОКОПФ) = Ложь Тогда
						списокОшибок = списокОшибок +"<p>ОКОПФ контрагента ("+ОКОПФ+") должен состоять из цифр</p>
						|";	
					КонецЕсли;
				КонецЕсли;

				Возврат СписокОшибок;
				
			КонецФункции	

			Функция  ПроверитьОшибкиВСтрокеУПД(item) 

				СписокОшибокСтроки = "";
				
				Если Не значениеЗаполнено(Item.Product) Тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Не указано наименование товара</p>
					|";
				Иначе 
					СписокОшибокСтроки = СписокОшибокСтроки + ПроверитьМаксимальнуюДлинуПрото(Item.Product, "наименование товара", 1000, "с");
				КонецЕсли;
				
				Если item.TaxRate = "##" Тогда 
					СписокОшибокСтроки = СписокОшибокСтроки  + "<p>указана недопустимая ставка налога</p>"
				КонецЕсли;
				
				Если ЗначениеЗаполнено(item.unitCode) Тогда 
					
					Если стрДлина(сокрЛП(item.unitCode)) < 3 
						или стрДлина(сокрЛП(item.unitCode)) > 4 Тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Код единицы измерения ("+item.unitCode+") должен иметь длину 3-4 символа</p>
						|";
					
					ИначеЕсли Не ТолькоЦифры(СокрЛП(item.unitCode)) Тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Код единицы измерения ("+item.unitCode+") должен состоять из цифр</p>
						|";
					КонецЕсли;
				КонецЕсли;
				
				Если Item.Taxrate = "20/120" Тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Указана недопустимая ставка НДС</p>
					|";
				ИначеЕсли Не ЗначениеЗаполнено(Item.Taxrate) Тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Ставка НДС не указана</p>
					|";
				КонецЕсли;
				
				Если item.CustomDeclarations <> Неопределено Тогда
					
					Для Каждого CustomsDeclaration Из item.CustomDeclarations Цикл 
				
						Если ЗначениеЗаполнено(CustomsDeclaration.DeclarationNumber)
							И Не ЗначениеЗаполнено(CustomsDeclaration.CountryCode) Тогда
							
							СписокОшибокСтроки = СписокОшибокСтроки +
							"<p>Для номенклатуры " + """" + Item.Product + """" + " не заполнена страна происхождения товара</p>
							|";
							
						ИначеЕсли Не ЗначениеЗаполнено(CustomsDeclaration.DeclarationNumber)
								И ЗначениеЗаполнено(CustomsDeclaration.CountryCode)
								И СокрЛП(CustomsDeclaration.CountryCode) <> "643" Тогда
								
							СписокОшибокСтроки = СписокОшибокСтроки +
							"<p>Для номенклатуры " + """" + Item.Product + """" + " не заполнен номер ГТД</p>
							|";
								
						КонецЕсли;
									
						Если (стрДлина(сокрЛП(CustomsDeclaration.DeclarationNumber))>29)  Тогда 
							СписокОшибокСтроки = СписокОшибокСтроки +
							"<p>Длина номера ГТД превышает максимальное органичение в 29 символов</p>
							|";
						КонецЕсли;		
						
					КонецЦикла;
					
				КонецЕсли;
				
				Возврат СписокОшибокСтроки;
				
			КонецФункции 
			
			Функция ПроверитьКлассификаторыУПД(InvoiceContent)
				
				СписокОшибокЕИ = "";
				ОшибкаЕИНеНайдена = Ложь;
				ОшибкаЕИНеТотКод = Ложь;
				СписокПроверенныхЕИ = Новый СписокЗначений;
				
				СписокОшибокВСтранах = "";
				ОшикбаСтраныНеНайдена = Ложь;
				ОшибкаСтраныНетотКод = Ложь;
				СписокПроверенныхСтран = Новый СписокЗначений;

				Для каждого item из InvoiceContent.InvoiceTable.Items цикл
					Если ЗначениеЗаполнено(Item.UnitCode) И Item.UnitCode <> "0000" Тогда
						ОшибкиЕИ = ПроверитьЕИ(Item.ЕдиницаИзмеренияССылка, СокрЛП(Item.UnitCode), СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
						СписокОшибокЕИ = СписокОшибокЕИ + ОшибкиЕИ;
					КонецЕсли;
					Если item.CustomDeclarations <> Неопределено Тогда
						Для Каждого CustomsDeclaration Из item.CustomDeclarations Цикл 
							Если ЗначениеЗаполнено(CustomsDeclaration.CountryCode) Тогда 
								СписокОшибокВСтранах = СписокОшибокВСтранах + ПроверитьСтрану(CustomsDeclaration.СтранаПроисхожденияССылка, CustomsDeclaration.CountryCode, СписокПроверенныхСтран, ОшикбаСтраныНеНайдена, ОшибкаСтраныНетотКод);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				ОшибкаВалютыНеНайдена = Ложь;
				ОшибкаВалютыНеТотКод = Ложь;	
				СписокОшибокВалюта =  ПроверитьВалюту(InvoiceContent.ВалютаСсылка, InvoiceContent.Currency, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод);
				
				Если СписокОшибокВалюта <> "" Тогда 
					СписокОшибокВалюта = "
					//|<h3>При указании валюты документа: </h3>
					|<p>"+СписокОшибокВалюта+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКВАЛЮТ"">справочник валют</a> и приведите "+строкаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)+" валют в соответствие с классификатором</p>";
				КонецЕсли;
				
				
				Если СписокОшибокЕИ <> "" Тогда 
					СписокОшибокЕИ = "
					|<p>"+СписокОшибокЕИ+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
				КонецЕсли;	  
				
				Если СписокОшибокВСтранах <> "" Тогда 
					СписокОшибокВСтранах = "
					//|<h3>При указании Страны происхождения: </h3>
					|<p>"+СписокОшибокВСтранах+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКСТРАН"">справочник стран мира</a> и приведите "+строкаЧтоМенять(ОшикбаСтраныНеНайдена, ОшибкаСтраныНетотКод)+" стран в соответствие с классификатором</p>";
				КонецЕсли;
				
				Если СписокОшибокЕИ <> "" или СписокОшибокВСтранах <> "" Или СписокОшибокВалюта <> "" Тогда 
					Возврат  "<h3>Ошибки в классификаторах: </h3> 
					|" + СписокОшибокЕИ+СписокОшибокВСтранах + СписокОшибокВалюта;
				Иначе 
					Возврат "";
				КонецЕсли;	
				
			КонецФункции
			
			Функция ВалидацияUTD(UTDContent) Экспорт
				
				//Функция возвращает список ошибок 
				списокОшибок = "";
				
				Для Каждого ТекSigner Из UTDContent.Signers Цикл
					Если ТекSigner.SignerDetails.SignerType = "IndividualEntity" Тогда 
						СвГосРегИП = ТекSigner.SignerDetails.RegistrationCertificate;
						Если НЕ ЗначениеЗаполнено(СвГосРегИП) Тогда
							СписокОшибок = СписокОшибок + 
							"<p>Не указаны данные о государственной регистрации продавца-индивидуального предпринимателя
							|(номер и дата свидетельства о госрегистрации) </p>
							|
							|";
						Иначе
							Если СтрДлина(СвГосРегИП) > 128 Тогда
								СписокОшибок = СписокОшибок + 
								"<p>Реквизиты свидетельства о регистрации должны иметь длину менее 128 символов</p>";
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если UTDContent.InvoiceTable.Items.Количество()=0 Тогда
					СписокОшибок = СписокОшибок+ "<p>Отсутствует табличная часть документа</p> ";
				КонецЕсли;
				
				//проверяем сведения об участниках сделки
				Если  СтруктураКонтентаЗаполнена(UTDContent.seller) Тогда
					ошибка = ПроверитьСтруктуруКонтрагентаДляУПД(UTDContent.Seller, 1);
					Если ошибка <> "" Тогда
						ТипПродавца  = ?(ТипЗнч(UTDContent.seller.Ссылка) = Тип("СправочникСсылка.Контрагенты"),"КОНТРАГЕНТ:","ОРГАНИЗАЦИЯ:");  
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=" + ТипПродавца + UTDContent.seller.Ссылка.УникальныйИдентификатор() + """>продавце</a></h3>
						|" + ошибка;
					КонецЕсли;	
				Иначе 
					СписокОшибок = СписокОшибок + 
					"<p>Отсутствуют данные о продавце</p>
					|";
				КонецЕсли;
				
				Если  СтруктураКонтентаЗаполнена(UTDContent.Shipper.OrganizationInfo) Тогда 
					Если Не UTDContent.Shipper.SameAsSeller Тогда
						ошибка = ПроверитьСтруктуруКонтрагентаДляУПД(UTDContent.Shipper.OrganizationInfo, 2);
						Если ошибка <> "" Тогда
							ТипГрузоотправителя = ?(ТипЗнч(UTDContent.Shipper.OrganizationInfo.Ссылка) = Тип("СправочникСсылка.Контрагенты"),"КОНТРАГЕНТ:","ОРГАНИЗАЦИЯ:");  
							СписокОшибок = СписокОшибок + 
							"<h3>Ошибки в данных о <a href=" + ТипГрузоотправителя + UTDContent.Shipper.OrganizationInfo.Ссылка.УникальныйИдентификатор() + """>грузоотправителе</a></h3>
							|" + ошибка;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;

				Если  СтруктураКонтентаЗаполнена(UTDContent.Buyer) Тогда
					ошибка = ПроверитьСтруктуруКонтрагентаДляУПД(UTDContent.Buyer, 1);
					Если ошибка <> "" Тогда
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:" + UTDContent.Buyer.Ссылка.УникальныйИдентификатор() + """>покупателе</a></h3>
						|" + ошибка;
					КонецЕсли;	
				Иначе 
					СписокОшибок = СписокОшибок + 
					"<p>Отсутствуют данные о покупателе</p>
					|";
				КонецЕсли;	
				
				Если Не ИспользоватьКастомныйАдресГрузополучателя() И СтруктураКонтентаЗаполнена(UTDContent.Consignee) Тогда 
					ошибка = ПроверитьСтруктуруКонтрагентаДляУПД(UTDContent.Consignee, 2);
					Если ошибка <> "" Тогда
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:" + UTDContent.Consignee.Ссылка.УникальныйИдентификатор() + """>грузополучателе</a></h3>
						|" + ошибка;
					КонецЕсли;	
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(UTDContent.Number) Тогда
					СписокОшибок = СписокОшибок + 
					"<p>Не указан номер УПД</p>
					|";
				Иначе  
					СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(UTDContent.Number, "номер УПД", 256, "м");
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(UTDContent.date) Тогда
					СписокОшибок = СписокОшибок + 
					"<p>Не укзана дата УПД</p>
					|";
				Иначе	
					СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(UTDContent.date, "дата УПД");
				КонецЕсли;
				
				Если значениеЗаполнено(UTDContent.RevisionDate) или  значениеЗаполнено(UTDContent.RevisionNumber) Тогда 
					СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(UTDContent.RevisionNumber, "номер исправления УПД", 3, "м"); 
					СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(UTDContent.RevisionDate, "дата исправления УПД");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(UTDContent.RevisionNumber)
				  И Не ТолькоЦифры(СокрЛП(UTDContent.RevisionNumber)) Тогда
					СписокОшибок = СписокОшибок + 
					"<p>Номер исправления УПД должен состоять из цифр</p>
					|";
				КонецЕсли;
					
				Если Не ЗначениеЗаполнено(UTDContent.Currency) Тогда 
					СписокОшибок = СписокОшибок + 
					"<p>Не указан код валюты УПД</p>
					|";
				ИначеЕсли СтрДлина(сокрЛП(UTDContent.Currency)) <> 3 Тогда
					СписокОшибок = СписокОшибок + 
					"<p>Код валюты УПД (" + UTDContent.Currency + ") должен иметь длину 3 символа</p>
					|";
				ИначеЕсли Не ТолькоЦифры(сокрЛП(UTDContent.Currency)) Тогда		
					СписокОшибок = СписокОшибок + 
					"<p>Код валюты УПД (" + UTDContent.Currency + ") должен состоять из цифр</p>
					|";	
				КонецЕсли;
				
				Для каждого стр из UTDContent.PaymentDocuments цикл 
					СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(стр.Number, "номер платежно-расчетного документа", 30, "м");
					СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(стр.Date, "дата платежно-расчетного документа");
				КонецЦикла;
				
				//валидируем ТЧ
				ц = 0;
				Для каждого item из UTDContent.InvoiceTable.Items цикл 
					ц = ц+1;
					ОшибкиВСтроке = ПроверитьОшибкиВСтрокеУПД(item);
					Если ОшибкиВСтроке <> "" Тогда 
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в строке "+ц+" табличной части</h3>
						|"+ОшибкиВСтроке
					КонецЕсли;	
				конецЦикла;	
				
				СписокОшибок = СписокОшибок + ПроверитьКлассификаторыУПД(UTDContent);
				СписокОшибок = ОформитьОшибкиВHTML(СписокОшибок, "При формировании УПД обнаружены ошибки");
				
				Возврат СписокОшибок;
				
			КонецФункции
			
		//} Валидация UniversalTransferDocument
		
	//} UniversalTransferDocument

//} CONTENT

Функция ПолучитьКоличествоДнейОтсрочки(Организация) Экспорт
	
	Результат= МетодСервера(,"ПолучитьЗначениеСвойства", Организация, "РазрешенныйПериодКорректировки");
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Число(Результат);
	Иначе 
		Возврат 15;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуДокументовПоИдДиадока(ТаблицаИД) Экспорт 
	
	ТаблицаПерекодировки= МетодСервера(,"ТаблицаПерекодировки");
	
	ТаблицаПерекодировки.Индексы.Добавить("Число16");
	ТаблицаПерекодировки.Индексы.Добавить("Число64");
		
	Если ТаблицаИД.Количество()= 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	//таблица ИД - таблица с колонками    DocumentId,  BoxId
	ТабИдентификаторов=	ТаблицаИД.скопировать();
	
	КС=	Новый КвалификаторыСтроки(150);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов, , КС);
	
	ТабИдентификаторов.Колонки.Добавить("DocumentId_64", ОписаниеТипов);
	Для каждого стр из ТабИдентификаторов цикл 
		Стр.DocumentId_64 = КонвертироватьГуидВЧисло64(Стр.DocumentId);
	КонецЦикла;

	Запрос = Новый Запрос;	 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТЗ.DocumentId КАК СТРОКА(150)) КАК DocumentId,
	|	ВЫРАЗИТЬ(ТЗ.DocumentType КАК СТРОКА(150)) КАК DocumentType,
	|	ВЫРАЗИТЬ(ТЗ.DocumentFunction КАК СТРОКА(150)) КАК DocumentFunction,
	|	ВЫРАЗИТЬ(ТЗ.DocumentDirection КАК СТРОКА(150)) КАК DocumentDirection,
	|	ТЗ.DocumentId_64,
	|	ВЫРАЗИТЬ(ТЗ.BoxId КАК СТРОКА(150)) КАК BoxId
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.DocumentId,
	|	ВТ.DocumentId_64,
	|	ВТ.BoxId,
	|	ЗначенияСвойствОбъектов.Объект
	|ПОМЕСТИТЬ Таблица1
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ПО ВТ.DocumentId_64 = ЗначенияСвойствОбъектов.Значение
	|			И НЕ (ВТ.DocumentType = ""UniversalTransferDocument"" И ВТ.DocumentFunction = ""СЧФДОП"")
	|			И (ЗначенияСвойствОбъектов.Свойство В (&СвойствоDocumentId, &СвойствоDocumentIdСчет))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ.DocumentId,
	|	ВТ.DocumentId_64,
	|	ВТ.BoxId,
	|	ЗначенияСвойствОбъектов.Объект
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ПО ВТ.DocumentId_64 = ЗначенияСвойствОбъектов.Значение
	|			И (ВТ.DocumentType = ""UniversalTransferDocument"" И ВТ.DocumentFunction = ""СЧФДОП"")
	|			И (ЗначенияСвойствОбъектов.Свойство В (&СвойствоDocumentId, &СвойствоDocumentIdСчет))
	|			И ВЫБОР 
	|				КОГДА ВТ.DocumentDirection = ""Inbound"" 
	|					ТОГДА ЗначенияСвойствОбъектов.Объект ССЫЛКА Документ.СчетФактураПолученный
	|				ИНАЧЕ ЗначенияСвойствОбъектов.Объект ССЫЛКА Документ." + ПараметрыКлиентСервер.ПредставлениеДокументов.СчетФактураВыданный + " КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица1.DocumentId,
	|	Таблица1.DocumentId_64,
	|	Таблица1.BoxId,
	|	Таблица1.Объект КАК ссылка
	|ИЗ
	|	Таблица1 КАК Таблица1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ПО Таблица1.BoxId = ЗначенияСвойствОбъектов.Значение
	|			И Таблица1.Объект = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство В (&СвойствоBoxId, &СвойствоBoxIdСчет))";

	Запрос.УстановитьПараметр("ТЗ", ТабИдентификаторов);
	Запрос.УстановитьПараметр("СвойствоDocumentId", 	НайтиСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадок()));
	Запрос.УстановитьПараметр("СвойствоBoxId", 			НайтиСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок()));
	Запрос.УстановитьПараметр("СвойствоDocumentIdСчет", НайтиСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет()));
	Запрос.УстановитьПараметр("СвойствоBoxIdСчет", 		НайтиСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет()));
	
	РезультатЗапроса= Запрос.ВыполнитьПакет()[2].Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции	

Функция ПолучитьПараметрыПодписанияТ12вДиадок(Организация) Экспорт 
	
	ФИО = "";
	Должность = "";
	
	СпособПодписания = ПолучитьНастройкуПользователя(ИдентификаторСвойстваСпособПодписанияТ12());
	СпособПодписания = ?(СпособПодписания="", "1", СпособПодписания);
			
	МассивДанныхПодписантовОрганизаций = ПолучитьИзВременногоХранилища(ПараметрыКлиентСервер.ВременноеХранилище.АдресПодписантыОрганизаций);
	
	Для Каждого СтруктураДанных Из МассивДанныхПодписантовОрганизаций Цикл
		Если СтруктураДанных.Организация = Организация Тогда
			Должность = СтруктураДанных.Должность;
			ФИО = СтруктураДанных.ФИО;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Результат = Новый Структура;
	Результат.Вставить("СпособПодписания", 		СпособПодписания);
	Результат.Вставить("ФИОПодписанта", 		ФИО);
	Результат.Вставить("ДолжностьПодписанта",  	Должность);	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеПодписиСогласующим(Организация) Экспорт
	
	ПараметрыПодписания = ПолучитьПараметрыПодписанияТ12вДиадок(Организация);
	
	СтруктураSigner = Новый Структура("СпособПодписания, ДолжностьПодписанта, Фамилия, Имя, Отчество");
	
	ФИО = ПараметрыПодписания.ФИОПодписанта;
	
	СтруктураSigner.Фамилия 	= ВыделитьСлово(ФИО);
	СтруктураSigner.Имя 		= ВыделитьСлово(ФИО);
	СтруктураSigner.Отчество 	= ВыделитьСлово(ФИО);
	СтруктураSigner.ДолжностьПодписанта	= ПараметрыПодписания.ДолжностьПодписанта;
	СтруктураSigner.СпособПодписания	= ПараметрыПодписания.СпособПодписания;
	
	Возврат СтруктураSigner; 
	
КонецФункции

Процедура УстановитьПараметрыПодписанияТ12вДиадок(ПараметрыПодписания) Экспорт 
	
	Если ПараметрыПодписания.Свойство("СпособПодписания") Тогда 
		УстановитьНастройкуПользователя(ИдентификаторСвойстваСпособПодписанияТ12(), ПараметрыПодписания.СпособПодписания)  
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкиПодписантаСогласование(ФИОПодписантаПолучателя, ДолжностьПодписанта) Экспорт
	УстановитьНастройкуПользователя(ИдентификаторСвойстваIdПодписантаСогласование(), 		ФИОПодписантаПолучателя);
	УстановитьНастройкуПользователя(ИдентификаторСвойстваДолжностьПодписантаСогласование(), ДолжностьПодписанта);
КонецПроцедуры

Функция ПолучитьНастройкиПодписантаСогласование() Экспорт
	
	НастройкиПодписантаСогласование = Новый Структура();
	
	НастройкиПодписантаСогласование.Вставить("ИдентификаторКонечногоПодписанта",	ПолучитьНастройкуПользователя(ИдентификаторСвойстваIdПодписантаСогласование()));  
	НастройкиПодписантаСогласование.Вставить("ДолжностьКонечногоПодписанта",		ПолучитьНастройкуПользователя(ИдентификаторСвойстваДолжностьПодписантаСогласование()));  
	
	Возврат НастройкиПодписантаСогласование;
	
КонецФункции

Функция ПолучитьСтруктуруОшибкиВнешнейКомпоненты(Подробности) Экспорт
	стРасшифровкаОшибки = Новый Структура;
	
	Поз = Найти(Подробности, "##");
	
	ТекстОшибкиCOM = Сред(Подробности, Поз);
	КодОшибкиCOM = Сред(ТекстОшибкиCOM, 3, 3);
	ПояснениеКодаОшибкиCOM = Сред(ТекстОшибкиCOM, 7, Найти(ТекстОшибкиCOM, "]") - 7);
	ПояснениеОшибкиCOM = Сред(ТекстОшибкиCOM, Найти(ТекстОшибкиCOM, "]") + 1);
	
	стРасшифровкаОшибки.Вставить("Заголовок", ПояснениеКодаОшибкиCOM);
	стРасшифровкаОшибки.Вставить("ОписаниеОшибки", ПояснениеОшибкиCOM);
	стРасшифровкаОшибки.Вставить("Подробности", Подробности);
	стРасшифровкаОшибки.Вставить("Спецификатор");
	
	Если Поз = 0 Тогда
		
		ТекстОшибкиCOM = СокрЛП(СтрЗаменить(Сред(Подробности, Найти(Подробности, "}:")), "}:", ""));
		ТекстОшибкиCOM = Лев(ТекстОшибкиCOM, Найти(ТекстОшибкиCOM, ":"));
		
		стРасшифровкаОшибки.Вставить("Заголовок", 		"Ошибка работы модуля");
		стРасшифровкаОшибки.Вставить("ОписаниеОшибки", 	ТекстОшибкиCOM);
		стРасшифровкаОшибки.Вставить("Спецификатор", 	"UnknownError");
		
		Возврат стРасшифровкаОшибки;
		
	КонецЕсли;
	
	Если Лев(КодОшибкиCOM, 1) = "1" Тогда 
		
		СловарьWL = МетодСервера(,"ПолучитьСловарь");
		
		// Ошибка сервера диадок
		HttpCode = Сред(ПояснениеОшибкиCOM, 6, 3);
		ПояснениеОшибкиCOM = Сред(ПояснениеОшибкиCOM, 11);
		
		Если HttpCode = "401" Тогда
			// Ошибка авторизации на сервере
			Если ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "user", "certificate", "not", "valid") Тогда
				стРасшифровкаОшибки.ОписаниеОшибки = "Не возможно войти в "+СловарьWL.НаименованиеСистемы+" с данным сертификатом";
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBadCertificate";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "login", "not", "found") Тогда
				стРасшифровкаОшибки.ОписаниеОшибки = "Не существует пользователя в "+СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж+" с данным логином";
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBadLogin";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "wrong", "password") Тогда
				стРасшифровкаОшибки.ОписаниеОшибки = "Неправильная пара логин/пароль";
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBadPassword";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "user", "not found") Тогда
				стРасшифровкаОшибки.ОписаниеОшибки = "Не существует пользователя в "+СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж+" с данным сертификатом";
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBadPassword";
			Иначе
				стРасшифровкаОшибки.ОписаниеОшибки = "Ошибка входа в " + СловарьWL.НаименованиеСистемы;
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBad";
			КонецЕсли;
		ИначеЕсли HttpCode = "407" Тогда
			// Ошибка авторизации на прокси
			стРасшифровкаОшибки.Спецификатор = "InternetError";
			стРасшифровкаОшибки.Заголовок = "Ошибка прокси-сервера";
			стРасшифровкаОшибки.ОписаниеОшибки = "Неправильный логин или пароль для прокси-сервера";
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "entity", "already", "signed") Тогда
			стРасшифровкаОшибки.ОписаниеОшибки = "Данный документ уже подписан";
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "entity", "requested", "signature", "rejection")
			ИЛИ ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "RequestedSignatureRejection", "document", "already", "has") Тогда
			
			стРасшифровкаОшибки.ОписаниеОшибки = "По данному документу уже сформирован отказ в подписи";
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "access", "box", "denied") Тогда
			стРасшифровкаОшибки.ОписаниеОшибки = "Отсутствует доступ к данному ящику " + СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "fns", "box", "not", "sent") Тогда
			стРасшифровкаОшибки.ОписаниеОшибки = "Сертификат не зарегистрирован в ФНС";
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "failed", "unauthorized", "wrong", "password") Тогда
			стРасшифровкаОшибки.Заголовок=	"Ошибка входа";
			стРасшифровкаОшибки.ОписаниеОшибки = "Неверная пара логин/пароль";
		КонецЕсли;
	ИначеЕсли Лев(КодОшибкиCOM, 1) = "2" Тогда 
		стРасшифровкаОшибки.Спецификатор = "InternetError";
	КонецЕсли;
	
	Возврат стРасшифровкаОшибки;
КонецФункции

Функция ВСтрокеНРегЕстьСлова(стрПар, слово1, слово2= "", слово3= "", слово4= "")
	стр = НРег(стрПар);
	Если Найти(стр, слово1) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(слово2) И Найти(стр, слово2) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(слово3) И Найти(стр, слово3) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(слово4) И Найти(стр, слово4) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьСправа(Стр, Маркер)
	если найти(стр, маркер)=0 тогда 
		возврат стр 
	иначе 	
		возврат прав(стр, стрДлина(стр) - найти(стр, маркер)-стрДлина(маркер)+1);
	конецЕсли;	
конецфункции	

Функция КраткоеСообщениеОбОшибке(ТекстОшибки)
	Подстрока = ПолучитьСправа(ТекстОшибки, "##");
	Подстрока = ПолучитьСправа(Подстрока, "[");
	Подстрока = ПолучитьСправа(Подстрока, "]");
	
	Возврат подстрока;
	
	
	
КонецФункции	

Функция ПолучитьТаблицуОрганизацийКоторыеНеПодключеныКДиадоку() Экспорт 
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	подзапрос.Организация,
	|	ЕСТЬNULL(подзапрос.idBox, """") КАК idBox,
	|	подзапрос.Организация.ИНН КАК ИНН,
	|	подзапрос.Организация.КПП КАК КПП
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Ссылка КАК Организация,
	|		ЗначенияСвойствОбъектов.Значение КАК idBox
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|			ПО Организации.Ссылка = ЗначенияСвойствОбъектов.Объект
	|				И (ЗначенияСвойствОбъектов.Свойство.Наименование = &наименованиеСвойства)
	|	ГДЕ
	|		НЕ Организации.ПометкаУдаления) КАК подзапрос
	|ГДЕ	ЕСТЬNULL(подзапрос.idBox, """") = """" или подзапрос.idBox = неопределено";
	Запрос.УстановитьПараметр("НаименованиеСвойства", ИдентификаторСвойстваЯщикОрганизации());
	ТаблицаНеподключенныхОрганизаций = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из ТаблицаНеподключенныхОрганизаций Цикл
		Стр.ИНН = СокрЛП(Стр.ИНН);
		Стр.КПП = СокрЛП(Стр.КПП);
	КонецЦикла;
	
	Возврат ТаблицаНеподключенныхОрганизаций;
	
КонецФункции	

Функция СклеитьПредставлениеОрганизацииДиадок(Строка)
	Результат = СокрЛП(Строка.Представление);
	Если НЕ ПустаяСтрока(Строка.Представление2) Тогда
		Результат = Результат + СокрЛП(Строка.Представление2);
		Если НЕ ПустаяСтрока(Строка.Представление3) Тогда
			Результат = Результат + СокрЛП(Строка.Представление3);
			Если НЕ ПустаяСтрока(Строка.Представление4) Тогда
				Результат = Результат + СокрЛП(Строка.Представление4);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	возврат Результат
КонецФункции 

Функция ПолучитьОтпечатокСертификатаДляДиадок(Организация) Экспорт
	ОтпечатокСертификата = ПолучитьНастройкуПользователя(ИдентификаторСвойстваСертификатПользователя());
	Если ПустаяСтрока(ОтпечатокСертификата) Тогда
		Возврат ПолучитьНастройкуПользователя(ИдентификаторСвойстваСертификатПользователя() + Организация.УникальныйИдентификатор());
	Иначе
		Возврат ОтпечатокСертификата;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуЯщиковДиадокОрганизации(Организация= Неопределено, КонтекстОрганизации_ОрганизацииФилиалыСопоставленныеСДиадоком= Неопределено, 
											   КонтекстРаботаССерверомДиадок_ПредставлениеПользователя= Неопределено) Экспорт 
	//ахтунг. поправить . некрасив
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Орг.Наименование,
	|	подзапрос.Объект,
	|	подзапрос.Значение,
	|	подзапрос.КПППодразделения,
	|	ВЫРАЗИТЬ(подзапрос.представление КАК СТРОКА(500)) представление,
	|	подзапрос.представление2,
	|	подзапрос.представление3,
	|	подзапрос.представление4
	|ИЗ
	|	(ВЫБРАТЬ
	|		Подзапрос.Объект КАК Объект,
	|		МАКСИМУМ(Подзапрос.Значение) КАК Значение,
	|		МАКСИМУМ(Подзапрос.КПППодразделения) КАК КПППодразделения,
	|		МАКСИМУМ(Подзапрос.представление) КАК представление,
	|		МАКСИМУМ(Подзапрос.представление2) КАК представление2,
	|		МАКСИМУМ(Подзапрос.представление3) КАК представление3,
	|		МАКСИМУМ(Подзапрос.представление4) КАК представление4
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект КАК Объект,
	|			ЗначенияСвойствОбъектов.Значение КАК Значение,
	|			"""" КАК КПППодразделения,
	|			"""" КАК представление,
	|			"""" КАК представление2,
	|			"""" КАК представление3,
	|			"""" КАК представление4
	|		ИЗ
	|			РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &Свойство
	|			И ЗначенияСвойствОбъектов.Объект = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект,
	|			"""",
	|			ЗначенияСвойствОбъектов.Значение КАК КПППодразделения,
	|			"""",
	|			"""" КАК представление2,
	|			"""" КАК представление3,
	|			"""" КАК представление4
	|		ИЗ
	|			РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПодразделение
	|			И ЗначенияСвойствОбъектов.Объект = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект,
	|			"""",
	|			"""" КАК КПППодразделения,
	|			ЗначенияСвойствОбъектов.Значение,
	|			"""" КАК представление2,
	|			"""" КАК представление3,
	|			"""" КАК представление4
	|		ИЗ
	|			РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПредставление
	|			И ЗначенияСвойствОбъектов.Объект = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект,
	|			"""",
	|			"""" КАК КПППодразделения,
	|			"""" представление,
	|			ЗначенияСвойствОбъектов.Значение,
	|			"""" КАК представление3,
	|			"""" КАК представление4
	|		ИЗ
	|			РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПредставление2
	|			И ЗначенияСвойствОбъектов.Объект = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект,
	|			"""",
	|			"""" КАК КПППодразделения,
	|			"""" КАК представление,
	|			"""" КАК представление2,
	|			ЗначенияСвойствОбъектов.Значение,
	|			"""" КАК представление4
	|		ИЗ
	|			РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПредставление3
	|			И ЗначенияСвойствОбъектов.Объект = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект,
	|			"""",
	|			"""" КАК КПППодразделения,
	|			"""" представление,
	|			"""" КАК представление2,
	|			"""" КАК представление3,
	|			ЗначенияСвойствОбъектов.Значение
	|		ИЗ
	|			РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПредставление4
	|			И ЗначенияСвойствОбъектов.Объект = &Организация) КАК Подзапрос
	|
	|	СГРУППИРОВАТЬ ПО
	|		Подзапрос.Объект) КАК подзапрос,
	|	Справочник.Организации КАК Орг
	|ГДЕ
	|	подзапрос.Значение <> """"
	|	И Орг.Ссылка = подзапрос.Объект";
	Запрос.УстановитьПараметр("Свойство", ИдентификаторСвойстваЯщикОрганизации());
	Запрос.УстановитьПараметр("СвойствоПодразделение", ИдентификаторСвойстваПодразделениеОрганизации());
	Запрос.УстановитьПараметр("СвойствоПредставление", ИдентификаторСвойстваЯщикОрганизацииПредставление());
	Запрос.УстановитьПараметр("СвойствоПредставление2", ИдентификаторСвойстваЯщикОрганизацииПредставление() + "2");
	Запрос.УстановитьПараметр("СвойствоПредставление3", ИдентификаторСвойстваЯщикОрганизацииПредставление() + "3");
	Запрос.УстановитьПараметр("СвойствоПредставление4", ИдентификаторСвойстваЯщикОрганизацииПредставление() + "4");
	
	Если НЕ ЗначениеЗаполнено(организация) тогда 
		Запрос.Текст = стрЗаменить(запрос.Текст, "И ЗначенияСвойствОбъектов.Объект = &Организация", "");
	Иначе 
		Запрос.УстановитьПараметр("Организация", организация);
	КонецЕсли;	
	
	Результат =  Запрос.Выполнить().выгрузить();
	
	
	Результат.Колонки.добавить("ПредставлениеСертификата");
	Результат.Колонки.добавить("ОтпечатокСертификата");
	
	ц = 0;
	Пока ц < Результат.Количество() цикл 
		строка = результат[ц];
		Если (КонтекстОрганизации_ОрганизацииФилиалыСопоставленныеСДиадоком<>неопределено) и КонтекстОрганизации_ОрганизацииФилиалыСопоставленныеСДиадоком.Найти(Строка.Объект) = Неопределено Тогда
			Результат.Удалить(ц)
		Иначе
			ц = ц+1;	
			Строка.Представление 				= СклеитьПредставлениеОрганизацииДиадок(Строка);
			Строка.ОтпечатокСертификата  		= ПолучитьОтпечатокСертификатаДляДиадок(Строка.Объект);
			Строка.ПредставлениеСертификата		= КонтекстРаботаССерверомДиадок_ПредставлениеПользователя;
			//КонтекстРаботаССерверомДиадок.ПредставлениеПользователя
		КонецЕсли;	
	конецЦикла;	
	
	возврат ПреобразоватьТаблицуЗначенийВМассивСтруктур(Результат);
конецфункции

Функция ВернутьТаблицуМаршрутизацииПоТаблицеКонтрагентов(ТаблицаКонтрагентов) Экспорт
	
	Запрос=	Новый Запрос;
	Запрос.Текст=
		
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.ID КАК СТРОКА(50)) КАК ИдКонтрагента
		|ПОМЕСТИТЬ ИДКонтрагентов
		|ИЗ
		|	&ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Контрагент,
		|	ДополнительныеСведения.Свойство,
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА(50)) КАК Значение
		|ПОМЕСТИТЬ ДопСвойства
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Контрагенты
		|	И ДополнительныеСведения.Свойство = &СвойствоЯщикКонтрагента
		|
		|СГРУППИРОВАТЬ ПО
		|	ДополнительныеСведения.Объект,
		|	ДополнительныеСведения.Свойство,
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА(50))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДопСвойства.Контрагент КАК Контрагент,
		|	ДопСвойства.Значение КАК ID
		|ПОМЕСТИТЬ Контрагенты
		|ИЗ
		|	ИДКонтрагентов КАК ИДКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДопСвойства КАК ДопСвойства
		|		ПО ИДКонтрагентов.ИдКонтрагента = ДопСвойства.Значение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Контрагент,
		|	Контрагенты.ID,
		|	ЕСТЬNULL(ДополнительныеСведения1.Значение, """") КАК ПодразделениеКонтрагента,
		|	ЕСТЬNULL(ДополнительныеСведения2.Значение, """") КАК ToDepartmentID
		|ИЗ
		|	Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
		|		ПО Контрагенты.Контрагент = ДополнительныеСведения1.Объект
		|			И (ДополнительныеСведения1.Свойство = &СвойствоНаименованиеПодразделения)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения2
		|		ПО Контрагенты.Контрагент = ДополнительныеСведения2.Объект
		|			И (ДополнительныеСведения2.Свойство = &СвойствоИДПодразделения)";
		
	СвойствоЯщикКонтрагентаПрефикс		= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИдентификаторСвойстваЯщикКонтрагентаПрефикс());
	СвойствоНаименованиеПодразделения	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс());
	СвойствоИДПодразделения				= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс());
	
	Запрос.УстановитьПараметр("СвойствоЯщикКонтрагента", 			СвойствоЯщикКонтрагентаПрефикс);
	Запрос.УстановитьПараметр("ТаблицаКонтрагентов", 				ТаблицаКонтрагентов);
	Запрос.УстановитьПараметр("СвойствоНаименованиеПодразделения", 	СвойствоНаименованиеПодразделения);
	Запрос.УстановитьПараметр("СвойствоИДПодразделения", 			СвойствоИДПодразделения);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ВернутьТаблицуМаршрутизацииПоДоговорам(Организация, Контрагент) Экспорт
	
	Запрос= Новый Запрос;
	Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка
			|ПОМЕСТИТЬ ТаблицаДоговоров
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.Владелец = &Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДоговоров.Ссылка КАК Договор,
			|	ДополнительныеСведения.Значение КАК ToDepartmentID,
			|	ДополнительныеСведения1.Значение КАК ПодразделениеДоговора
			|ИЗ
			|	ТаблицаДоговоров КАК ТаблицаДоговоров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения.Объект
			|			И (ДополнительныеСведения.Свойство = &ИдПодразделения)
			|			И (ДополнительныеСведения.Значение <> """")
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения1.Объект
			|			И (ДополнительныеСведения1.Свойство = &НаименованиеПодразделения)";
			
	ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда	
		
		Запрос.Текст= 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка
			|ПОМЕСТИТЬ ТаблицаДоговоров
			|ИЗ
			|	Справочник.Договоры КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДоговоров.Ссылка КАК Договор,
			|	ДополнительныеСведения.Значение КАК ToDepartmentID,
			|	ДополнительныеСведения1.Значение КАК ПодразделениеДоговора
			|ИЗ
			|	ТаблицаДоговоров КАК ТаблицаДоговоров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения.Объект
			|			И (ДополнительныеСведения.Свойство = &ИдПодразделения)
			|			И (ДополнительныеСведения.Значение <> """")
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения1.Объект
			|			И (ДополнительныеСведения1.Свойство = &НаименованиеПодразделения)";
			
	ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда	
		
		Запрос.Текст= 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка
			|ПОМЕСТИТЬ ТаблицаДоговоров
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДоговоров.Ссылка КАК Договор,
			|	ДополнительныеСведения.Значение КАК ToDepartmentID,
			|	ДополнительныеСведения1.Значение КАК ПодразделениеДоговора
			|ИЗ
			|	ТаблицаДоговоров КАК ТаблицаДоговоров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения.Объект
			|			И (ДополнительныеСведения.Свойство = &ИдПодразделения)
			|			И (ДополнительныеСведения.Значение <> """")
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения1.Объект
			|			И (ДополнительныеСведения1.Свойство = &НаименованиеПодразделения)";
			
	ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда	
		
		Запрос.Текст= 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка
			|ПОМЕСТИТЬ ТаблицаДоговоров
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.Владелец = &Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДоговоров.Ссылка КАК Договор,
			|	ДополнительныеСведения.Значение КАК ToDepartmentID,
			|	ДополнительныеСведения1.Значение КАК ПодразделениеДоговора
			|ИЗ
			|	ТаблицаДоговоров КАК ТаблицаДоговоров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения.Объект
			|			И (ДополнительныеСведения.Свойство = &ИдПодразделения)
			|			И (ДополнительныеСведения.Значение <> """")
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения1.Объект
			|			И (ДополнительныеСведения1.Свойство = &НаименованиеПодразделения)";	
			
	КонецЕсли;
	
	СвойствоИдПодразделения=			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору());
	СвойствоНаименованиеПодразделения=	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору());
	
	Запрос.УстановитьПараметр("Организация", 				Организация);
	Запрос.УстановитьПараметр("Контрагент", 				Контрагент);
	Запрос.УстановитьПараметр("ИдПодразделения", 			СвойствоИдПодразделения);
	Запрос.УстановитьПараметр("НаименованиеПодразделения", 	СвойствоНаименованиеПодразделения);
	
	Возврат Запрос.ВыполнитьПакет()[1].Выгрузить();
	
КонецФункции

Функция ПолучитьМаршрутизациюПоДоговору(ДоговорКонтрагента) Экспорт
	
	СтруктураМашрутизацииДоговора=	Новый Структура("ToDepartmentID, НаименованиеПодразделения");
	СтруктураМашрутизацииДоговора.Вставить("ToDepartmentID", 			ПолучитьЗначениеСвойства(ДоговорКонтрагента, ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору()));
	СтруктураМашрутизацииДоговора.Вставить("НаименованиеПодразделения",	ПолучитьЗначениеСвойства(ДоговорКонтрагента, ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору()));
	
	Возврат СтруктураМашрутизацииДоговора;
	
КонецФункции

Функция ПолучитьМаршрутизациюПоКонтрагенту(Контрагент) Экспорт
	
	СтруктураМашрутизацииКонтрагента=	Новый Структура("ToDepartmentID, НаименованиеПодразделения");
	СтруктураМашрутизацииКонтрагента.Вставить("ToDepartmentID", 			ПолучитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс()));
	СтруктураМашрутизацииКонтрагента.Вставить("НаименованиеПодразделения",	ПолучитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс()));
	
	Возврат СтруктураМашрутизацииКонтрагента;
	
КонецФункции

Функция ТочностьЦеныСФ() Экспорт 

	ТочностьЦеныСФ = ХранилищеОбщихНастроек.Загрузить("НастройкаОпций_Диадок", "ТочностьЦеныСФ_Диадок");
	Если ЗначениеЗаполнено(ТочностьЦеныСФ) Тогда
		ТочностьЦеныСФ = ТочностьЦеныСФ;
	Иначе
		ТочностьЦеныСФ = 2;
	КонецЕсли;
	Возврат ТочностьЦеныСФ;

КонецФункции 

Функция ПолучитьОрганизацииФилиалыСопоставленныеСДиадоком(ДанныеOrganizationDepartment) Экспорт
	
	ТаблицаПараметров 	= Новый ТаблицаЗначений;
	
	ОписаниеСтроки = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)); 
	
	ТаблицаПараметров.Колонки.Добавить("НаименованиеСвойства", ОписаниеСтроки);
	ТаблицаПараметров.Колонки.Добавить("ЗначениеСвойства", ОписаниеСтроки);
	ТаблицаПараметров.Колонки.Добавить("НаименованиеСвойства2", ОписаниеСтроки);
	ТаблицаПараметров.Колонки.Добавить("ЗначениеСвойства2", ОписаниеСтроки);
	
	
	Для каждого Данные Из данныеOrganizationDepartment Цикл
		Стр = ТаблицаПараметров.Добавить();
		
		Стр.НаименованиеСвойства 	= "ЯщикДиадокДляОрганизации";
		Стр.ЗначениеСвойства 		= Данные.OrganizationId; 
		Стр.НаименованиеСвойства2 	= "ПодрДиадокДляОрганизации"; 
		Стр.ЗначениеСвойства2 		= Данные.DepartmentKpp; 
	КонецЦикла;
	
	Возврат СвойстваОбъектов_НайтиОбъектыПоТЗ(ТаблицаПараметров);
	
КонецФункции // ПолучитьОрганизацииФилиалыСопоставленныеСДиадоком()

//{ РАСШИРЕНИЕ КОНФИГУРАЦИИ

Функция ПроверитьНеобходимостьУстановкиРасширения() Экспорт
	
	Результат= Новый Структура("НеобходимоУстановить, БылОтказОтУстановки, ОтсутствуютПраваАдминистратора, РасширениеУжеУстановлено, ТекущяяВерсияРасширенияДиадок, КонтекстРасширения", Ложь, Ложь, Ложь, Ложь, "", "");
	
	Если ПараметрыКлиентСервер.ВызовИзРасширения Тогда
		Результат.КонтекстРасширения= "call from extention";
		Возврат Результат;
	КонецЕсли;
	// расщирение может быть использовано только на платформе не ниже 8.3.6
	СистемнаяИнформация= Новый СистемнаяИнформация;
	Если МетодСервера(,"СравнитьВерсии", СистемнаяИнформация.ВерсияПриложения, "8.3.6") = "ПерваяВерсияМладше" Тогда
		Результат.КонтекстРасширения= "extention is not possible";
		Возврат Результат;
	КонецЕсли;
	// при использовании режима совместимости расширение может быть использовано только в режиме совместимоси с платформой не ниже 8.3.6	
	РежимСовместимостиСтрокой= Строка(Метаданные.РежимСовместимости);
	Если РежимСовместимостиСтрокой <> "НеИспользовать" И ДопустимыеРежимыСовместимостиСРасширениемКонфигурации()[РежимСовместимостиСтрокой] = Неопределено Тогда
		Результат.КонтекстРасширения= "extention is not possible";
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОтсутствуютПраваАдминистратора= ПравоДоступа("АдминистрированиеРасширенийКонфигурации", Метаданные) = Ложь;
	Если Результат.ОтсутствуютПраваАдминистратора Тогда 
		Результат.КонтекстРасширения= "user is not admin";
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыКлиентСервер.МаркерКонфигурации <> "БП30" Тогда
		Результат.КонтекстРасширения= "extention is not possible";
		Возврат Результат;
	КонецЕсли;
		
	Если Прав(Метаданные.Имя, 7) = "Базовая" Тогда
		Результат.КонтекстРасширения= "extention is not possible";
		Возврат Результат;
	КонецЕсли;
	
	МассивРасширенийКонфигурации= Вычислить("РасширенияКонфигурации.Получить(Новый Структура(""Имя"",""Диадок""))");
	Если МассивРасширенийКонфигурации.Количество() = 1 Тогда
		Результат.РасширениеУжеУстановлено= МассивРасширенийКонфигурации[0].Версия = МетодСервера(,"ТребуемаяВерсияРасширенияДиадок");
		Результат.ТекущяяВерсияРасширенияДиадок= МассивРасширенийКонфигурации[0].Версия;
	КонецЕсли;
	
	Если Результат.РасширениеУжеУстановлено Тогда
		Результат.КонтекстРасширения= "extention loaded";
		Возврат Результат;
	КонецЕсли;
	
	Результат.БылОтказОтУстановки= МетодСервера(,"ПолучитьНастройкуПользователя", "ДиадокНеИспользоватьРасширениеВерсия") = Результат.ТекущяяВерсияРасширенияДиадок;
	Если Результат.БылОтказОтУстановки Тогда
		Результат.КонтекстРасширения= "extention cancelled";
		Возврат Результат;
	КонецЕсли;
	
	Результат.КонтекстРасширения= "extention in not loaded yet";
	
	Результат.НеобходимоУстановить= Истина;
	
	Возврат Результат; 
			
КонецФункции

Функция УстановитьРасширениеКонфигурации() Экспорт
	
	Результат= Новый Структура("Отказ, ОписаниеОшибки, Подробности, ПерезапуститьПрограмму", Ложь, "", "", Ложь);
	
	Попытка
		ДанныеМакета = ПолучитьМакет("ФайлРасширения_"+СтрЗаменить(МетодСервера(,"ТребуемаяВерсияРасширенияДиадок"), ".","_"));
		РасширениеКонфигурации= Вычислить("РасширенияКонфигурации.Создать()");
		РасширениеКонфигурации.БезопасныйРежим= Ложь;
		РасширениеКонфигурации.Записать(ДанныеМакета);
		Результат.ОписаниеОшибки= "Установлено расширение конфигурации ""Диадок"" версии " + МетодСервера(,"ТребуемаяВерсияРасширенияДиадок") + ".";
		Результат.ПерезапуститьПрограмму= Истина;
	Исключение
		Результат.Отказ= Истина;
		Результат.ОписаниеОшибки= "Ошибка установки расширения конфигурации ""Диадок"", версии " + МетодСервера(,"ТребуемаяВерсияРасширенияДиадок") + "!";
		Результат.Подробности= ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
					
КонецФункции

Функция УдалитьРасширениеКонфигурации() Экспорт
	
	Результат= Новый Структура("Отказ, ОписаниеОшибки, Подробности, ПерезапуститьПрограмму", Ложь, "", "", Ложь);
	
	МассивРасширенийКонфигурации= Вычислить("РасширенияКонфигурации.Получить(Новый Структура(""Имя"",""Диадок""))");
	
	Если МассивРасширенийКонфигурации.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВерсияУстановленногоРасширения= МассивРасширенийКонфигурации[0].Версия;
	
	Попытка
		МассивРасширенийКонфигурации[0].Удалить();
		Результат.ОписаниеОшибки= "Удалено расширение конфигурации ""Диадок"", версии " + ВерсияУстановленногоРасширения + ".";
		Результат.ПерезапуститьПрограмму= Истина;
	Исключение;
		Результат.Отказ= Истина;
		Результат.ОписаниеОшибки= "Ошибка удаления расширения конфигурации ""Диадок"", версии " + ВерсияУстановленногоРасширения + "!";
		Результат.Подробности= ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ДопустимыеРежимыСовместимостиСРасширениемКонфигурации()
	
	Результат = Новый Соответствие;
	Результат.Вставить("Версия8_3_6", Истина);
	Результат.Вставить("Версия8_3_7", Истина);
	Результат.Вставить("Версия8_3_8", Истина);
	Результат.Вставить("Версия8_3_9", Истина);
	
	Возврат Результат;
	
КонецФункции

//} РАСШИРЕНИЯ КОНФИГУРАЦИИ

//{ WL 

	Функция ПолучитьСловарь() Экспорт
		
		Результат = Новый Структура("НаименованиеСистемы, КраткоеНаименованиеСистемы, КраткоеНаименованиеСистемыПредложныйПадеж, КраткоеНаименованиеСистемыРодительныйПадеж, КраткоеНаименованиеСистемыДательныйПадеж, ТочкаВходаВеб, ТелефонТехподдержки, ИспользоватьиконкуСистемы");
		Результат.НаименованиеСистемы = "Диадок";
		Результат.КраткоеНаименованиеСистемы = "Диадок";
		Результат.КраткоеНаименованиеСистемыРодительныйПадеж = "Диадока";
		Результат.КраткоеНаименованиеСистемыДательныйПадеж = "Диадоку";
		Результат.КраткоеНаименованиеСистемыПредложныйПадеж = "Диадоке";
		Результат.ТочкаВходаВеб = "diadoc.kontur.ru";
		Результат.ТелефонТехподдержки = "8 800 500-10-18";
		Результат.ИспользоватьИконкуСистемы = Истина;
		
		Возврат Результат;	
		
	КонецФункции

	Функция ПолучитьСловарьЛайф() 
		Результат = Новый Структура("НаименованиеСистемы, КраткоеНаименованиеСистемы, КраткоеНаименованиеСистемыПредложныйПадеж, КраткоеНаименованиеСистемыРодительныйПадеж, КраткоеНаименованиеСистемыДательныйПадеж, ТочкаВходаВеб, ТелефонТехподдержки, ИспользоватьиконкуСистемы");
		Результат.НаименованиеСистемы = "Лайф Факторинг";
		Результат.КраткоеНаименованиеСистемы = "Лайф";
		Результат.КраткоеНаименованиеСистемыРодительныйПадеж = "Лайфа";
		Результат.КраткоеНаименованиеСистемыДательныйПадеж = "Лайфу";
		Результат.КраткоеНаименованиеСистемыПредложныйПадеж = "Лайфе";
		Результат.ТочкаВходаВеб = "life.kontur.ru";
		Результат.ТелефонТехподдержки = "8 (495) 645-10-51";
		Результат.ИспользоватьИконкуСистемы = Ложь;
		Возврат Результат;	
	КонецФункции	

	Функция ПолучитьСловарьСеоДок()
		Результат = Новый Структура("НаименованиеСистемы, КраткоеНаименованиеСистемы, КраткоеНаименованиеСистемыПредложныйПадеж, КраткоеНаименованиеСистемыРодительныйПадеж, КраткоеНаименованиеСистемыДательныйПадеж, ТочкаВходаВеб, ТелефонТехподдержки, ИспользоватьиконкуСистемы");
		Результат.НаименованиеСистемы = "Сеодок";
		Результат.КраткоеНаименованиеСистемы = "Сеодок";
		Результат.КраткоеНаименованиеСистемыРодительныйПадеж = "Сеодока";
		Результат.КраткоеНаименованиеСистемыДательныйПадеж = "Сеодоку";
		Результат.КраткоеНаименованиеСистемыПредложныйПадеж = "Сеодоке";
		Результат.ТочкаВходаВеб = "ceodoc.kontur.ru";
		Результат.ТелефонТехподдержки = "8 351 309-38-43";
		Результат.ИспользоватьИконкуСистемы = Истина;
		Возврат Результат;	
	КонецФункции

	Функция ПолучитьСловарьНФК()
		Результат = Новый Структура("НаименованиеСистемы, КраткоеНаименованиеСистемы, КраткоеНаименованиеСистемыПредложныйПадеж, КраткоеНаименованиеСистемыРодительныйПадеж, КраткоеНаименованиеСистемыДательныйПадеж, ТочкаВходаВеб, ТелефонТехподдержки, ИспользоватьиконкуСистемы");
		Результат.НаименованиеСистемы = "ЭДО-Факторинг";
		Результат.КраткоеНаименованиеСистемы = "ЭДО-Факторинг";
		Результат.КраткоеНаименованиеСистемыРодительныйПадеж = "ЭДО-Факторинга";
		Результат.КраткоеНаименованиеСистемыДательныйПадеж = "ЭДО-Факторингу";
		Результат.КраткоеНаименованиеСистемыПредложныйПадеж = "ЭДО-Факторинге";
		Результат.ТочкаВходаВеб = "edifactoring.ru";
		Результат.ТелефонТехподдержки = "Если у Вас возникли какие-либо сложности при обмене электронными документами с НФК и последующим получением факторинговых услуг, обратитесь к вашему клиентскому менеджеру в НФК";
		Результат.ИспользоватьИконкуСистемы = Ложь;
		Возврат Результат;	
	КонецФункции	

//} WL

//{ КАСТОМИЗАЦИЯ

	//{ ПЕРЕКЛЮЧАТЕЛИ

		// Функция включает/выключает механизм кастомного формирования содержимого доп. полей
		//
		Функция ИспользоватьКастомныеДопПоля() Экспорт
			//Возврат Истина;
			Возврат Ложь;
		КонецФункции

		// Функция включает/выключает механизм кастомного формирования адреса грузополучателя
		//
		Функция ИспользоватьКастомныйАдресГрузополучателя() Экспорт
		//Возврат Истина;
		Возврат Ложь;
	КонецФункции
	
	//} ПЕРЕКЛЮЧАТЕЛИ

	//{ РАБОТА С ДОПОЛНИТЕЛЬНЫМИ СВОЙСТВАМИ 
	
		Функция ЗаполнитьКастомныеДопПоля() Экспорт
			
			// заполняем алгоритмом для формирования кастомного доп.поля
			
		КонецФункции
		
		Функция ПолучитьШаблонКлючейДопСведений(ИдКонтрагента, DocumentType) Экспорт
			
			СловарьШаблоновКлючейДопСведений = ПолучитьСловарьШаблоновКлючейДопСведений();
			
			ОтборСтрок=			Новый Структура("ИдКонтрагента, DocumentType", ИдКонтрагента, DocumentType);
			НайденныеСтроки=	СловарьШаблоновКлючейДопСведений.НайтиСтроки(ОтборСтрок);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				ШаблонКлючей = НайденныеСтроки[0].ШаблонКлючей;
			Иначе
				ШаблонКлючей = "";
			КонецЕсли;
			
			Возврат ШаблонКлючей;
			
		КонецФункции // ШаблонДопСвойств()
		
		Функция ПолучитьСловарьШаблоновКлючейДопСведений() 
			
			СловарьШаблонов = Новый ТаблицаЗначений;
			
			СловарьШаблонов.Колонки.Добавить("ИдКонтрагента");
			СловарьШаблонов.Колонки.Добавить("DocumentType");
			СловарьШаблонов.Колонки.Добавить("ШаблонКлючей");
			
			//проктер
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "434d7fb5e20645e2ab85192f1a2db10d@diadoc.ru", "XmlTorg12", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "434d7fb5e20645e2ab85192f1a2db10d@diadoc.ru", "XmlAcceptanceCertificate", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "434d7fb5e20645e2ab85192f1a2db10d@diadoc.ru", "Invoice", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;НаимБанк=;БИК=;НомерСчета=;");
			
			//авто
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru", "XmlTorg12", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru", "XmlAcceptanceCertificate", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru", "Invoice", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;НаимБанк=;БИК=;НомерСчета=;");
			
			//апатит
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//апатит (балаковский ф-л)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "aa1b1962b50d42349d310acb27fa5760@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "aa1b1962b50d42349d310acb27fa5760@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "aa1b1962b50d42349d310acb27fa5760@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//фосагро
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "64d1058f69f74ab4bee0e15567860044@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "64d1058f69f74ab4bee0e15567860044@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "64d1058f69f74ab4bee0e15567860044@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//метахим
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//фосагро (череповец)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "200ad0208fe84e488ef4575dac492b65@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "200ad0208fe84e488ef4575dac492b65@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "200ad0208fe84e488ef4575dac492b65@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//Папирус (для тестирования группы Фосагро)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//Тестовая организация №6786861 (для тестирование со стороны Фосагро)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "e4ed7db3cf8b4db698403fc3c40ca009@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "e4ed7db3cf8b4db698403fc3c40ca009@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "e4ed7db3cf8b4db698403fc3c40ca009@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//Тестовая организация №9219153 (для тестирование со стороны Фосагро)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "183c060a51c1483fa31acc29a50451d7@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "183c060a51c1483fa31acc29a50451d7@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "183c060a51c1483fa31acc29a50451d7@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			Возврат СловарьШаблонов;
			
		КонецФункции // ()
		
		Процедура ДобавитьСтрокуВСловарь(СловарьШаблонов, ИдКонтрагента, DocumentType, ШаблонКлючей)
			
			НоваяСтрока = СловарьШаблонов.Добавить();
			
			НоваяСтрока.ИдКонтрагента = ИдКонтрагента; 
			НоваяСтрока.DocumentType = DocumentType;
			НоваяСтрока.ШаблонКлючей = ШаблонКлючей;
			
		КонецПроцедуры // ДобавитьСтрокуВСловарь()
		
		Функция НужноФормироватьДопИнфоПоШаблону(ИдКонтрагента) Экспорт
			
			Если ИдКонтрагента = "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru" //апатит
				ИЛИ ИдКонтрагента = "aa1b1962b50d42349d310acb27fa5760@diadoc.ru" //апатит (балаковский ф-л)
				ИЛИ ИдКонтрагента = "64d1058f69f74ab4bee0e15567860044@diadoc.ru" //фосагро
				ИЛИ ИдКонтрагента = "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru" //метахим
				ИЛИ ИдКонтрагента = "200ad0208fe84e488ef4575dac492b65@diadoc.ru" //фосагро (череповец)
				ИЛИ ИдКонтрагента = "e4ed7db3cf8b4db698403fc3c40ca009@diadoc.ru" //Тестовая организация №6786861 (для тестирование со стороны Фосагро)
				ИЛИ ИдКонтрагента = "183c060a51c1483fa31acc29a50451d7@diadoc.ru" //Тестовая организация №9219153 (для тестирование со стороны Фосагро)
				ИЛИ ИдКонтрагента = "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru" Тогда  //Папирус
				КонвертироватьДопСвойста = Истина;
			Иначе
				КонвертироватьДопСвойста = Ложь;
			КонецЕсли;
			
			Возврат КонвертироватьДопСвойста;
			
		КонецФункции // 
		
		Функция СформироватьСтрокуДопИнфоПоШаблону(ДопСведения) Экспорт
			
			ДопСведенияПошаблону = "";
			
			Если ЗначениеЗаполнено(ДопСведения) = Истина Тогда
				ДопСведенияПошаблону = "<Данные> "; 
				МассивДопСведений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДопСведения, ";", Истина);
				Для Каждого Строка Из МассивДопСведений Цикл
					МассивОтСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, "=", Истина);
					Если МассивОтСтроки.Количество() > 0 Тогда
						ДопСведенияПошаблону = ДопСведенияПошаблону + "<Реквизит Имя="""+МассивОтСтроки[0]+"""";
					КонецЕсли;
					Если МассивОтСтроки.Количество() > 1 Тогда
						ДопСведенияПошаблону = ДопСведенияПошаблону + " Значение="""+МассивОтСтроки[1]+"""/> ";
					Иначе
						ДопСведенияПошаблону = ДопСведенияПошаблону + " Значение=""""/>"
					КонецЕсли;
				КонецЦикла;
				ДопСведенияПошаблону = ДопСведенияПошаблону + " </Данные>"
			КонецЕсли;
			
			Возврат ДопСведенияПошаблону;
			
		КонецФункции // 
		
	//} РАБОТА С ДОПОЛНИТЕЛЬНЫМИ СВОЙСТВАМИ 
	
	Функция ПолучитьКастомныйАдресГрузополучателя() Экспорт
		
		// заполняем алгоритмом для получения адреса Грузополучателя из кастомного места
		
	КонецФункции
	
//} КАСТОМИЗАЦИЯ

Функция ПреобразоватьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель= ",", Знач ПропускатьПустыеСтроки= Неопределено) Экспорт
		
	Массив = Новый Массив;
	
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Массив.Добавить("");
			КонецЕсли;
			Возврат Массив;
		КонецЕсли;
	КонецЕсли;
	
	ПозицияРазделителя = Найти(Строка, Разделитель);
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока ПозицияРазделителя > 0 Цикл
		ТекущаяСтрока = Лев(Строка, ПозицияРазделителя - 1);
		Строка = Прав(Строка, СтрДлина(Строка)- ПозицияРазделителя - ?(ДлинаРазделителя > 0, ДлинаРазделителя - 1, 0));
		ПозицияРазделителя = Найти(Строка, Разделитель);
		Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			Массив.Добавить(ТекущаяСтрока);
		Иначе
			Если ПропускатьПустыеСтроки = Ложь Тогда
				Массив.Добавить(ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Массив.Добавить(Строка);
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

Функция ДопустимыеМаркерыКонфигураций() Экспорт
	
	СписокМаркеров=	Новый СписокЗначений;
	СписокМаркеров.Добавить("УТ11" , "Управление торговлей 11");
	СписокМаркеров.Добавить("БП30" , "Бухгалтерия предприятия 3.0");
	СписокМаркеров.Добавить("БГУ20", "Бухгалтерия государственного учреждения 2.0");
	СписокМаркеров.Добавить("УНФ16", "Управление небольшой фирмой 1.6");
	
	Возврат СписокМаркеров;
	
КонецФункции

Функция СтранаЧленТС(КодСтраны) Экспорт
	возврат  (КодСтраны = "643") или  //Россия
	(КодСтраны = "051") или  //Армения
	(КодСтраны = "112") или  //Беларусь
	(КодСтраны = "398") или  //Казахстан
	(КодСтраны = "417")      //Киргизия
КонецФункции	

//	ИмяСобытия 		 - 	Тип: Строка.
//						Идентификатор события, которое необходимо обработать
//
//	ПараметрыСобытия -  Тип: Структура. Необязательный
//						Параметры, которые будут доступны подключаемому модулю.
//
Функция ОбработкаСобытияПодключаемогоМодуля(ИмяСобытия, ПараметрыСобытия= Неопределено) Экспорт
	
КонецФункции

