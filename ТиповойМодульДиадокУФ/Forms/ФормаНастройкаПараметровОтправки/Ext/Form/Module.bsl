
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	Элементы.ВерхнийЗаголовокФормы.Заголовок = "для " + Параметры.ПредставлениеОрганизации;
	
	НастройкиОрганизации = Параметры.НастройкиОрганизации;
	Если НастройкиОрганизации.Свойство("Организация") Тогда
		Организация = НастройкиОрганизации.Организация;
	КонецЕсли;
	Если НастройкиОрганизации.Свойство("ПечатнаяФормаДляТоваров") Тогда
		НакладныеСТоварами = НастройкиОрганизации.ПечатнаяФормаДляТоваров;
	КонецЕсли;
	Если НастройкиОрганизации.Свойство("ПечатнаяФормаДляУслуг") Тогда
		НакладныеСУслугамиБезТоваров = НастройкиОрганизации.ПечатнаяФормаДляУслуг;
	КонецЕсли;
	Если НастройкиОрганизации.Свойство("ОтправкаНепроведенных") Тогда
		ОтправлятьНеПроведенные = НастройкиОрганизации.ОтправкаНепроведенных;
	КонецЕсли;
	Если НастройкиОрганизации.Свойство("ФормироватьУПД") Тогда
		ФормироватьУПД = НастройкиОрганизации.ФормироватьУПД;
	КонецЕсли;
	Если НастройкиОрганизации.Свойство("ФормироватьСчетНаОсновании") Тогда
		ФормироватьСчетНаОсновании = НастройкиОрганизации.ФормироватьСчетНаОсновании;
	КонецЕсли;
	Если НастройкиОрганизации.Свойство("ВнешняяПечатнаяФормаСчета") Тогда
		ВнешняяПечатнаяФормаСчета = НастройкиОрганизации.ВнешняяПечатнаяФормаСчета;
	КонецЕсли;
	Если НастройкиОрганизации.Свойство("ВнешняяПечатнаяФормаАкта") Тогда
		ВнешняяПечатнаяФормаАкта = НастройкиОрганизации.ВнешняяПечатнаяФормаАкта;
	КонецЕсли;
	Если НастройкиОрганизации.Свойство("ВнешняяПечатнаяФормаАктаСверки") Тогда
		ВнешняяПечатнаяФормаАктаСверки = НастройкиОрганизации.ВнешняяПечатнаяФормаАктаСверки;
	КонецЕсли;
	
	Если НастройкиОрганизации.Свойство("СпособФормированияАкта") Тогда
		СпособФормированияАкта = НастройкиОрганизации.СпособФормированияАкта;
	КонецЕсли;
	Если НастройкиОрганизации.Свойство("СпособФормированияАктаСверки") Тогда
		СпособФормированияАктаСверки = НастройкиОрганизации.СпособФормированияАктаСверки;
	КонецЕсли;
	
	Если НастройкиОрганизации.Свойство("ПодставлятьКППГрузоотправителя") Тогда
		ПодставлятьКППГрузоотправителя = НастройкиОрганизации.ПодставлятьКППГрузоотправителя;
	КонецЕсли;
	Если НастройкиОрганизации.Свойство("СписокДополнительныхВнешнихПечатныхФорм") Тогда
		СписокДополнительныхВнешнихПечатныхФорм = НастройкиОрганизации.СписокДополнительныхВнешнихПечатныхФорм;
	КонецЕсли;
	Если НастройкиОрганизации.Свойство("ТекстКомментарияДиадок") Тогда
		ТекстКомментарияДиадок = НастройкиОрганизации.ТекстКомментарияДиадок;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПлатформаПриОткрытии(Отказ);

	УставновитьВидимостьАктСверки();
	ЗаполнитьСписокФормироватьСчетНаОсновании();
	СформироватьПредставленияФормированияПечатныхФорм();
	СформироватьПредставлениеДополнительныхВнешнихПечатныхФорм();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура УставновитьВидимостьАктСверки()
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации <> "БП30" Тогда
		Элементы.Декорация7.Видимость = Ложь;
		Элементы.НадписьСпособФормированияАктаСверки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокФормироватьСчетНаОсновании()
		
	СписокФормироватьСчетНаОсновании.Очистить();
	
	СписокФормироватьСчетНаОсновании.Добавить(0, "Счета на оплату");
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		СписокФормироватьСчетНаОсновании.Добавить(4, "Заказа клиента");
	ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
		СписокФормироватьСчетНаОсновании.Добавить(4, "Заказа покупателя");
	КонецЕсли;
	
	СписокФормироватьСчетНаОсновании.Добавить(1, "Документов продажи");
	СписокФормироватьСчетНаОсновании.Добавить(2, "Не формировать");
				
КонецПроцедуры
	
&НаКлиенте
Процедура НадписьДополнительныеВПФДляРеализацииНажатие(Элемент)
		
	ПараметрыФормы = Новый Структура("МассивВнешнихПечатныхФорм");
	ПараметрыФормы.Вставить("МассивВнешнихПечатныхФорм", СписокДополнительныхВнешнихПечатныхФорм);
		
	МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаДополнительныхВнешнихПечатныхФорм", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыДополнительныхВнешнихПечатныхФорм");
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработчикОткрытиеФормыДополнительныхВнешнихПечатныхФорм(РезультатЗакрытия, ТекущиеДанные) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		СписокДополнительныхВнешнихПечатныхФорм.Очистить();
		
		СписокДополнительныхВнешнихПечатныхФорм = РезультатЗакрытия;
				
		СформироватьПредставлениеДополнительныхВнешнихПечатныхФорм();
		
		УдалитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресКэшДополнительныхПФ);
		
	КонецЕсли;
	
КонецПроцедуры


	//{ Формирование Торг-12, Акта
		
	&НаКлиенте
	Процедура НадписьНакладныеСТоварамиНажатие(Элемент)
		
		СписокВыбора = Новый СписокЗначений;
		
		СписокВыбора.Добавить("Торг-12");
		СписокВыбора.Добавить("Акт");
				
		ОбработчикНакладныеСТоварами = Новый ОписаниеОповещения("ОбработчикВыборИзМенюНакладныеСТоварами", ЭтаФорма);
		ПоказатьВыборИзМеню(ОбработчикНакладныеСТоварами, СписокВыбора, Элементы.НадписьНакладныеСТоварами);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикВыборИзМенюНакладныеСТоварами(РезультатВыбора, ТекущиеДанные) Экспорт
		
		Если НЕ РезультатВыбора = Неопределено Тогда
			НакладныеСТоварами = РезультатВыбора.Значение;
			СформироватьПредставленияФормированияПечатныхФорм();
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура НадписьНакладныеСУслугамиБезТоваровНажатие(Элемент)
		
		СписокВыбора = Новый СписокЗначений;
		
		СписокВыбора.Добавить("Торг-12");
		СписокВыбора.Добавить("Акт");
				
		ОбработчикНакладныеСУслугами=	Новый ОписаниеОповещения("ОбработчикВыборИзМенюНакладныеСУслугами", ЭтаФорма);
		ПоказатьВыборИзМеню(ОбработчикНакладныеСУслугами, СписокВыбора, Элементы.НадписьНакладныеСУслугамиБезТоваров);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикВыборИзМенюНакладныеСУслугами(РезультатВыбора, ТекущиеДанные) Экспорт
		
		Если НЕ РезультатВыбора = Неопределено Тогда
			НакладныеСУслугамиБезТоваров = РезультатВыбора.Значение;
			СформироватьПредставленияФормированияПечатныхФорм();
		КонецЕсли;
		
	КонецПроцедуры
	
	//} Формирование Торг-12, Акта
	

	//{ Формирование прочих документов
	
	&НаКлиенте
	Процедура НадписьСпособФормированияСчетаНажатие(Элемент)
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ТипДокумента", "Счет");
				
		ПараметрыФормы.Вставить("ВнешняяПечатнаяФорма",			ВнешняяПечатнаяФормаСчета);
		ПараметрыФормы.Вставить("ФормироватьСчетНаОсновании",	ФормироватьСчетНаОсновании);
		
		ПараметрыФормы.Вставить("СписокФормироватьСчетНаОсновании",	СписокФормироватьСчетНаОсновании);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПечатныхФорм", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройки");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НадписьСпособФормированияАктаНажатие(Элемент)
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ТипДокумента", "Акт");
				
		ПараметрыФормы.Вставить("ВнешняяПечатнаяФорма",			ВнешняяПечатнаяФормаАкта);
		ПараметрыФормы.Вставить("ФормироватьСчетНаОсновании",	СпособФормированияАкта);
		
		ПараметрыФормы.Вставить("СписокФормироватьСчетНаОсновании",	СписокФормироватьСчетНаОсновании);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПечатныхФорм", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройки");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НадписьСпособФормированияАктаСверкиНажатие(Элемент)
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ТипДокумента", "АктСверки");
				
		ПараметрыФормы.Вставить("ВнешняяПечатнаяФорма",			ВнешняяПечатнаяФормаАктаСверки);
		ПараметрыФормы.Вставить("ФормироватьСчетНаОсновании",	СпособФормированияАктаСверки);
		
		ПараметрыФормы.Вставить("СписокФормироватьСчетНаОсновании",	СписокФормироватьСчетНаОсновании);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПечатныхФорм", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройки");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыНастройки(РезультатЗакрытия, ТекущиеДанные) Экспорт
			
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			Если РезультатЗакрытия.ТипДокумента = "Акт" Тогда
				СпособФормированияАкта 		= РезультатЗакрытия.СпособФормированияПечатнойФормы;
				ВнешняяПечатнаяФормаАкта 	= РезультатЗакрытия.ВнешняяПечатнаяФорма;
			ИначеЕсли РезультатЗакрытия.ТипДокумента = "АктСверки" Тогда
				СпособФормированияАктаСверки 	= РезультатЗакрытия.СпособФормированияПечатнойФормы;
				ВнешняяПечатнаяФормаАктаСверки 	= РезультатЗакрытия.ВнешняяПечатнаяФорма;
			Иначе
				ФормироватьСчетНаОсновании 	= РезультатЗакрытия.ФормироватьСчетНаОсновании;
				ВнешняяПечатнаяФормаСчета 	= РезультатЗакрытия.ВнешняяПечатнаяФорма;
			КонецЕсли;
			
			СформироватьПредставленияФормированияПечатныхФорм();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СформироватьПредставленияФормированияПечатныхФорм()
		
		Элементы.НадписьНакладныеСТоварами.Заголовок = НакладныеСТоварами;
		Элементы.НадписьНакладныеСУслугамиБезТоваров.Заголовок = НакладныеСУслугамиБезТоваров;
		
		Если СпособФормированияАкта = 0 Тогда
			СпособФормированияАктаПредставление = "Использовать форму рекомендованную ФНС";
		Иначе
			СпособФормированияАктаПредставление = "Использовать внешнюю печатную форму";
		КонецЕсли;
		Элементы.НадписьСпособФормированияАкта.Заголовок = СпособФормированияАктаПредставление;
		
		Если ФормироватьСчетНаОсновании = Неопределено Тогда
			ФормироватьСчетНаОсновании = 0;
		КонецЕсли;	
		
		ЗначениеСпискаФормироватьСчетНаОсновании = СписокФормироватьСчетНаОсновании.НайтиПоЗначению(ФормироватьСчетНаОсновании);
		
		Если ФормироватьСчетНаОсновании = 2 Тогда
			СпособФормированияСчетаПредставление = ЗначениеСпискаФормироватьСчетНаОсновании.Представление;
		Иначе
			Если НЕ ЗначениеЗаполнено(ВнешняяПечатнаяФормаСчета) Тогда
				СпособФормированияСчетаПредставление = "На основании: " + ЗначениеСпискаФормироватьСчетНаОсновании.Представление + ", использовать стандартную форму";
			Иначе
				СпособФормированияСчетаПредставление = "На основании: " + ЗначениеСпискаФормироватьСчетНаОсновании.Представление + ", использовать внешнюю печатную форму";
			КонецЕсли;
		КонецЕсли;
		Элементы.НадписьСпособФормированияСчета.Заголовок = СпособФормированияСчетаПредставление;
		
		Если СпособФормированияАктаСверки = 0 Тогда
			СпособФормированияАктаСверкиПредставление = "Использовать стандартную форму";
		Иначе
   			СпособФормированияАктаСверкиПредставление = "Использовать внешнюю печатную форму";
		КонецЕсли;
		Элементы.НадписьСпособФормированияАктаСверки.Заголовок = СпособФормированияАктаСверкиПредставление;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СформироватьПредставлениеДополнительныхВнешнихПечатныхФорм()
		
		Если  СписокДополнительныхВнешнихПечатныхФорм.Количество() = 0 Тогда
			Элементы.НадписьДополнительныеВПФДляРеализации.Заголовок = "не настроено";
		Иначе
			СтрокаНазванийФорм = "";
			Для каждого ДополнительнаяФорма Из СписокДополнительныхВнешнихПечатныхФорм Цикл
				СтрокаНазванийФорм = СтрокаНазванийФорм + ?(ПустаяСтрока(СтрокаНазванийФорм), "", "; ") 
					+ ?(ЗначениеЗаполнено(ДополнительнаяФорма.Представление)=Истина, ДополнительнаяФорма.Представление, "не задано наименование ПФ");
			КонецЦикла;
			
			Элементы.НадписьДополнительныеВПФДляРеализации.Заголовок = СокрЛП(СтрокаНазванийФорм);

		КонецЕсли;
		
	КонецПроцедуры
	
	//} Формирование прочих документов
	
&НаКлиенте
Процедура Применить(Команда)
				
	ПараметрыСвойствОтправки = Новый Структура();
	ПараметрыСвойствОтправки.Вставить("НакладныеСТоварами", 			НакладныеСТоварами);
	ПараметрыСвойствОтправки.Вставить("НакладныеСУслугамиБезТоваров", 	НакладныеСУслугамиБезТоваров);
	ПараметрыСвойствОтправки.Вставить("ОтправлятьНеПроведенные",		ОтправлятьНеПроведенные);
	ПараметрыСвойствОтправки.Вставить("ФормироватьУПД",					ФормироватьУПД);
	
	ПараметрыСвойствОтправки.Вставить("ВнешняяПечатнаяФормаСчета", 		ВнешняяПечатнаяФормаСчета);
	ПараметрыСвойствОтправки.Вставить("ВнешняяПечатнаяФормаАкта", 		ВнешняяПечатнаяФормаАкта);
	ПараметрыСвойствОтправки.Вставить("ВнешняяПечатнаяФормаАктаСверки", ВнешняяПечатнаяФормаАктаСверки);
	
	ПараметрыСвойствОтправки.Вставить("СпособФормированияАктаСверки", 	СпособФормированияАктаСверки);
	ПараметрыСвойствОтправки.Вставить("ФормироватьСчетНаОсновании", 	ФормироватьСчетНаОсновании);
	ПараметрыСвойствОтправки.Вставить("СпособФормированияАкта", 		СпособФормированияАкта);
					
	МассивДополнительныхВнешнихПечатныхФорм = Новый Массив;
	Для каждого ВнешняяПФ из СписокДополнительныхВнешнихПечатныхФорм Цикл
		МассивДополнительныхВнешнихПечатныхФорм.Добавить(ВнешняяПФ.Значение);	
	КонецЦикла;
	ПараметрыСвойствОтправки.Вставить("МассивДополнительныхВПФ", 		МассивДополнительныхВнешнихПечатныхФорм);
	
	ПараметрыСвойствОтправки.Вставить("ПодставлятьКППГрузоотправителя", ПодставлятьКППГрузоотправителя);
	ПараметрыСвойствОтправки.Вставить("ТекстКомментарияДиадок", 		ТекстКомментарияДиадок);
					
	Закрыть(ПараметрыСвойствОтправки);
	
КонецПроцедуры

	






