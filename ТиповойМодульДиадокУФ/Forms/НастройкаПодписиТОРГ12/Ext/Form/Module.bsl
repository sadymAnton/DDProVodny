
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТипПодписиПриИзменении(Элемент)
	ТипПодписи2=0;
	ТипПодписи3 = 0;
	НастроитьВидимость()

КонецПроцедуры

&НаКлиенте
Процедура ТипПодписи2ПриИзменении(Элемент)
	ТипПодписи1 = 0;
	ТипПодписи3 = 0;
	НастроитьВидимость()

КонецПроцедуры


&НаКлиенте
Процедура ТипПодписи3ПриИзменении(Элемент)
	ТипПодписи1 = 0;
	ТипПодписи2 = 0;
	НастроитьВидимость()

КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПлатформаПриОткрытии(Отказ);

	НастроитьВидимость();	

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере(ПараметрыПодписания)
	МетодСервера(,"УстановитьПараметрыПодписанияТ12вДиадок", ПараметрыПодписания);	
КонецПроцедуры	

&НаКлиенте
Процедура Сохранить(Команда)

	Если ((типПодписи1=1) и (Должность1 = "")) или ((типПодписи3=3) и (Должность3 = "")) тогда 
		ПоказатьПредупреждение(, "Не указана должность лица, подписывающего Торг-12", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		возврат
	КонецЕсли;	
	ПараметрыПодписания = новый Структура;
	
	Если ЗаполнятьВсеТриПодписи = Истина Тогда
		
		ПараметрыПодписания.Вставить("СпособПодписания", "4");
		ДолжностьПодписанта = "";
		Если ЗначениеЗаполнено(Должность1) = Истина Тогда
			ДолжностьПодписанта = Должность1;	
		ИначеЕсли ЗначениеЗаполнено(Должность3) = Истина Тогда
			ДолжностьПодписанта = Должность3;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДолжностьПодписанта) = Истина Тогда
			ПараметрыПодписания.Вставить("ДолжностьПодписанта", ДолжностьПодписанта);
		КонецЕсли;
		
	Иначе
	
		Если типПодписи1 = 1 тогда 
			ПараметрыПодписания.Вставить("СпособПодписания","1");
			ПараметрыПодписания.Вставить("ДолжностьПодписанта",Должность1);
		ИначеЕсли типПодписи2 = 2 тогда 
			ПараметрыПодписания.Вставить("СпособПодписания","2");
			//ПараметрыПодписания.Вставить("ДолжностьПодписанта", "Главный (старший) бухгалтер");
		ИначеЕсли типПодписи3 = 3 тогда 
			ПараметрыПодписания.Вставить("СпособПодписания","3");
			ПараметрыПодписания.Вставить("ДолжностьПодписанта",Должность3);
		КонецЕсли;
		
	КонецЕсли;
		
	СохранитьНаСервере(ПараметрыПодписания);
		
	Закрыть();
КонецПроцедуры


&НаКлиенте
Процедура Отменить(Команда)

	Закрыть();

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимость()
	
	ФИО1 = "";
	ФИО2 = "";
	ФИО3 = "";
	
	Должность1 = "";
	Должность3 = "";
			
	Элементы.Должность1.Доступность = (ТипПодписи1=1);
	Элементы.Должность3.Доступность = (ТипПодписи3=3);
	
	Если ЗаполнятьВсеТриПодписи = Истина Тогда
		ФИО1 = фио;
		ФИО2 = фио;
		ФИО3 = фио;
		
		Должность1 = Должность;
		Должность3 = Должность;
		
		Элементы.Должность1.Доступность = НЕ ЗаполнятьВсеТриПодписи;
		Элементы.Должность3.Доступность = НЕ ЗаполнятьВсеТриПодписи;
		
	Иначе
		Если типподписи1 =1 тогда 
			ФИО1 = фио;
			Должность1 = Должность;
		ИначеЕсли типподписи2 = 2 тогда 
			ФИО2 = фио;
		ИначеЕсли типподписи3 = 3 тогда 
			ФИО3 = фио;
			Должность3 = Должность;
		КонецЕсли;	
			
		Элементы.Должность1.Доступность = (ТипПодписи1=1);
		Элементы.Должность3.Доступность = (ТипПодписи3=3);	
	КонецЕсли;
	
	Элементы.ТипПодписи1.Доступность = НЕ ЗаполнятьВсеТриПодписи;
	Элементы.ТипПодписи2.Доступность = НЕ ЗаполнятьВсеТриПодписи;
	Элементы.ТипПодписи3.Доступность = НЕ ЗаполнятьВсеТриПодписи;
	
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	ПараметрыПодписания = МетодСервера(,"ПолучитьПараметрыПодписанияТ12вДиадок", Параметры.Организация);
	ФИО = ПараметрыПодписания.ФИОПодписанта;
	
	Если ПараметрыПодписания.СпособПодписания = "4" Тогда
		ЗаполнятьВсеТриПодписи = Истина;
		ТипПодписи1 = 1;
		Должность = ПараметрыПодписания.ДолжностьПодписанта;
	ИначеЕсли ПараметрыПодписания.СпособПодписания = "3" Тогда 
		ТипПодписи3 = 3;
		Должность = ПараметрыПодписания.ДолжностьПодписанта;
	ИначеЕсли ПараметрыПодписания.СпособПодписания = "2" Тогда 
		ТипПодписи2 = 2;
		Должность = ПараметрыПодписания.ДолжностьПодписанта;
	Иначе
		ТипПодписи1 = 1;
		Должность = ПараметрыПодписания.ДолжностьПодписанта;
	КонецЕсли;
	
	
	//Раньше должность сохраняли в 1С, теперь берем с сервера - сообщим об этом пользователю
	ИмяСвойстваДолжности = МетодСервера(,"ИдентификаторСвойстваДолжностьПодписанта");
	ЗначениеСвойстваДолжности = МетодСервера(,"ПолучитьНастройкуПользователя", ИмяСвойстваДолжности);
	
	Если ЗначениеЗаполнено(ЗначениеСвойстваДолжности) 
		И (СокрЛП(ЗначениеСвойстваДолжности) <> СокрЛП(Должность)) Тогда
		Сообщить("Должность пользователя больше не настраивается в 1С, теперь должность задается в свойствах пользователя в Диадоке", СтатусСообщения.Внимание);
		МетодСервера(,"УстановитьНастройкуПользователя", ИмяСвойстваДолжности, "");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Должность1ПриИзменении(Элемент)
	Должность = Должность1;
КонецПроцедуры


&НаКлиенте
Процедура Должность3ПриИзменении(Элемент)
	Должность = Должность3;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьВсеТриПодписиПриИзменении(Элемент)
	НастроитьВидимость();
КонецПроцедуры
