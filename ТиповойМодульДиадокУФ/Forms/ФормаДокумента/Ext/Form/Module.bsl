////////////////////////////////////////////////////////////////////////////////
//{ ПЕРЕМЕННЫЕ МОДУЛЯ
	
	&НаКлиенте
	Перем UserPermissions;
	&НаКлиенте
	Перем Organization Экспорт; 
	&НаКлиенте
	Перем ЭДОбъект Экспорт; 
	
	&НаКлиенте
	Перем IDТекущейСтроки;
	
	&НаКлиенте
	Перем МассивСсылокРНК Экспорт;
	&НаКлиенте
	Перем ПодходящаяСФ;
	
	&НаКлиенте
	Перем НомерЗаказа Экспорт;
	
	&НаКлиенте
	Перем ПредставлениеСтатусаРоуминг, ПредставлениеСтатусаРоумингДетали;
	
	&НаКлиенте
	Перем КэшТабличныеДокументы;
		
//} ПЕРЕМЕННЫЕ МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//{ РАБОТА С КОНТЕНТОМ

	////////////////////////////////////////////////////////////////////////////////
	//{ ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
		
		&НаКлиенте
		Процедура ЗаполнитьСтруктуруПоКонтенту(Content, СтруктураДанных, описаниеСтруктурыДанных = "")
			
			МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", Content, СтруктураДанных, описаниеСтруктурыДанных);

		КонецПроцедуры

	//} ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////
	//{ ИНИЦИАЛИЗАЦИЯ

		&НаКлиенте
		Функция Новый_Signer()
			
			Возврат МетодКлиента("Модуль_Клиент", "Новый_Signer");
			
		КонецФункции
		
		&НаКлиенте
		Функция Новый_Signature()
			
			Возврат МетодКлиента("Модуль_Клиент", "Новый_Signature");
			
		КонецФункции

		&НаКлиентеНаСервереБезКонтекста
		Функция ИнициализироватьDocumentMetaData()
			возврат новый структура("Timestamp, DocumentID");
		КонецФункции	

		&НаКлиенте
		Функция ИнициализироватьСтруктуруДанныхПодписей()
			
			Результат=	Новый Структура("SellerSigner, BuyerSigner, SenderSignature, RecipientSignature, DocumentMetaData");
			Результат.SellerSigner=			Новый_Signer();
			Результат.BuyerSigner=			Новый_Signer();
			Результат.SenderSignature=		Новый_Signature();
			Результат.RecipientSignature=	Новый_Signature();
			Результат.DocumentMetaData  =   ИнициализироватьDocumentMetaData();
			
			Возврат Результат;
			
		КонецФункции

		&НаКлиентеНаСервереБезКонтекста
		Функция ИнициализироватьСертификат()
			Возврат Новый Структура("Name, OrganizationName, IssuerName, IsQualifiedElectronicSignature");
		КонецФункции

		&НаКлиенте
		Функция Новый_Torg12BuyerContent()
			
			Возврат МетодКлиента("Модуль_Клиент", "Новый_Torg12BuyerContent");

		КонецФункции

		&НаКлиенте
		Функция Новый_InvoiceContent()
			
			Возврат МетодКлиента("Модуль_Клиент", "Новый_InvoiceContent");

		КонецФункции
		
		&НаКлиенте
		Функция Новый_InvoiceCorrectionContent()
			
			Возврат МетодКлиента("Модуль_Клиент", "Новый_InvoiceCorrectionContent");

		КонецФункции
		
		&НаКлиенте
		Функция Новый_AcceptanceCertificateSellerContent()
			
			Возврат МетодКлиента("Модуль_Клиент", "Новый_AcceptanceCertificateSellerContent");

		КонецФункции
		
		&НаКлиенте
		Функция Новый_AcceptanceCertificateBuyerContent()
			
			Возврат МетодКлиента("Модуль_Клиент", "Новый_AcceptanceCertificateBuyerContent");

		КонецФункции
		
		&НаКлиенте
		Функция Новый_Torg12SellerContent()
			
			Возврат МетодКлиента("Модуль_Клиент", "Новый_Torg12SellerContent");

		КонецФункции
		
		&НаКлиенте
		Функция Новый_UtdSellerContent()
			
			Возврат МетодКлиента("Модуль_Клиент", "Новый_UtdSellerContent");
			
		КонецФункции
		
		&НаКлиенте
		Функция Новый_UtdBuyerContent()
			
			Возврат МетодКлиента("Модуль_Клиент", "Новый_UtdBuyerContent");
			
		КонецФункции
		
	//} ИНИЦИАЛИЗАЦИЯ
	////////////////////////////////////////////////////////////////////////////////
	
//} РАБОТА С КОНТЕНТОМ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ФОРМИРОВАНИЕ ПЕЧАТНЫХ ФОРМ

	&НаСервере
	Функция ПолучитьВнешнююПечатнуюФормуСчета(ДокументСсылка)
		
		Возврат МетодСервера(,"ПолучитьВнешнююПечатнуюФормуСчета", ДокументСсылка);
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьВнешнююПечатнуюФормуАктаСверки(ДокументСсылка)
		Возврат МетодСервера(,"ПолучитьВнешнююПечатнуюФормуАктаСверки", ДокументСсылка);
	КонецФункции
	
	&НаСервере
	Функция ПолучитьВнешнююПечатнуюФормуАкта(ДокументСсылка)
		
		Возврат МетодСервера(,"ПолучитьВнешнююПечатнуюФормуАкта", ДокументСсылка);
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьСтруктуруПечатныхФормАкта(Знач СсылкаНаОбъект)
		Возврат МетодСервера(,"ПолучитьСтруктуруПечатныхФормАкта", СсылкаНаОбъект);
	КонецФункции
	
	&НаСервере
	Функция ПолучитьСтруктуруПечатныхФормСчета(Знач СсылкаНаОбъект)
		Возврат МетодСервера(,"ПолучитьСтруктуруПечатныхФормСчета", СсылкаНаОбъект);
	КонецФункции
	
	&НаСервере
	Функция ПолучитьСтруктуруПечатныхФормАктаСверки(Знач СсылкаНаОбъект)
		Возврат МетодСервера(,"ПолучитьСтруктуруПечатныхФормАктаСверки", СсылкаНаОбъект);
	КонецФункции
	
	&НаКлиенте
	Процедура СформироватьПечатнуюФормуПоДокументу(ФИОПодписанта, ВизуализироватьДопПоля)

		Если DocumentType = "UniversalTransferDocument" Тогда
			ФункцияУПД= МетодКлиента("Модуль_Клиент", "ФункцияУПД", ТипДокумента);
		Иначе
			ФункцияУПД= Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			
			ТабличныйДокумент= 	МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","СформироватьВнешнююПечатнуюФормуДляДиадокаПоСсылкеВПФ", Документ1С, ВнешняяПечатнаяФорма, , ,Организация).Таблица;
			Ошибки= 			"";
		
		ИначеЕсли DocumentType = "XmlTorg12" Тогда
			
			DocumentContent=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ПолучитьXmlTorg12Content", Документ1С, Неопределено, НомерЗаказа, ДопСведения, ФИОПодписанта);
			
			ТабличныйДокумент=	СформироватьПечатнуюФормуПоXmlTorg12Content(Новый Структура("XmlTorg12Content", DocumentContent), ВизуализироватьДопПоля);
			Ошибки=				МетодСервераБезКонтекста(,"ВалидацияXmlTorg12Content", DocumentContent);

		ИначеЕсли DocumentType = "Invoice" ИЛИ ФункцияУПД = "СЧФ" Тогда

			Если МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","ЭтоКСФ", Документ1С) Тогда
				DocumentContent=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","ПолучитьInvoiceCorrectionContent", Документ1С, Неопределено, ДопСведения, ФИОПодписанта);
				ТабличныйДокумент=	СформироватьПечатнуюФормуПоInvoiceCorrectionContent(Новый Структура("InvoiceCorrectionContent", DocumentContent), ВизуализироватьДопПоля);
				Ошибки=				МетодСервераБезКонтекста(,"ВалидацияInvoiceCorrectionContent", DocumentContent, Документ1С);
			Иначе
				DocumentContent=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","ПолучитьInvoiceContent", Документ1С, Неопределено, Допсведения, ФИОПодписанта);
				ТабличныйДокумент=	СформироватьПечатнуюФормуПоInvoiceContent(Новый Структура("InvoiceContent", DocumentContent), ВизуализироватьДопПоля);
				Ошибки=				МетодСервераБезКонтекста(,"ВалидацияInvoiceContent", DocumentContent, Документ1С);
			КонецЕсли;
			
		ИначеЕсли DocumentType = "XmlAcceptanceCertificate" Тогда
			
			Если НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуАкта(Документ1С)) Тогда
				DocumentContent=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","ПолучитьXmlAcceptanceCertificateContent", Документ1С, Неопределено, Допсведения, ФИОПодписанта);
				ТабличныйДокумент=	СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent(Новый Структура("XmlAcceptanceCertificateContent", DocumentContent), ВизуализироватьДопПоля);
				Ошибки=				МетодСервераБезКонтекста(,"ВалидацияXmlAcceptanceCertificateContent", DocumentContent);
			Иначе
				РезультатВизуализации=	ПолучитьСтруктуруПечатныхФормАкта(Документ1С);
				ТабличныйДокумент=		РезультатВизуализации.Таблица;
				Ошибки=					РезультатВизуализации.СписокОшибок;
			КонецЕсли;
			
		ИначеЕсли DocumentType = "NonformalizedProforma" Тогда	
			
			Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
				ТабличныйДокумент= МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","СформироватьВнешнююПечатнуюФормуДляДиадокаПоСсылкеВПФ", Документ1С, ВнешняяПечатнаяФорма,,,Организация).Таблица;
				Ошибки=			   "";
			ИначеЕсли НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуСчета(Документ1С)) Тогда
				РезультатВизуализации=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","СформироватьПечатнуюФормуСчетаНаОплату", Документ1С, Неопределено, ФИОПодписанта);
				ТабличныйДокумент=		РезультатВизуализации.Таблица;
				Ошибки=					РезультатВизуализации.СписокОшибок;
			Иначе 
				РезультатВизуализации=	ПолучитьСтруктуруПечатныхФормСчета(Документ1С);
				ТабличныйДокумент=		РезультатВизуализации.Таблица;
				Ошибки=					РезультатВизуализации.СписокОшибок;
			КонецЕсли;
			
		ИначеЕсли DocumentType = "ReconciliationAct" Тогда
			
			Если НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуАктаСверки(Документ1С)) Тогда
				РезультатВизуализации=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","СформироватьПечатнуюФормуАктаСверки", Документ1С, Неопределено, ФИОПодписанта);
				ТабличныйДокумент=		РезультатВизуализации.Таблица;
				Ошибки=					РезультатВизуализации.СписокОшибок;	
			Иначе
				РезультатВизуализации=	ПолучитьСтруктуруПечатныхФормАктаСверки(Документ1С);
				ТабличныйДокумент=		РезультатВизуализации.Таблица;
				Ошибки=					РезультатВизуализации.СписокОшибок;
			КонецЕсли; 
			
		ИначеЕсли DocumentType = "UniversalTransferDocument" Тогда
						
			Если ФункцияУПД = "СЧФДОП" ИЛИ ФункцияУПД = "ДОП" Тогда
				DocumentContent= 	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ПолучитьXmlUTDContent", Документ1С, Неопределено, ДопСведения, ФИОПодписанта, ТипДокумента);
			
				ТабличныйДокумент= 	СформироватьПечатнуюФормуУПДПоUTDSellerContent(Новый Структура("Content", DocumentContent), ВизуализироватьДопПоля);
				Ошибки= 			МетодСервераБезКонтекста(,"ВалидацияUTD", DocumentContent);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			ЗакэшироватьРезультатВизуализации(ТабличныйДокумент, Ошибки);
			ТабПоле= ТабличныйДокумент;
		КонецЕсли;
		
		ТекстПолнойОшибки= ТекстПолнойОшибки();
		Ошибки= "";
		Ошибки= ТекстПолнойОшибки;
				
	КонецПроцедуры
	
	&НаСервере
	Функция СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent(Знач XmlAcceptanceCertificateContent, Знач ВизуализироватьДопПоля)
		Возврат МетодСервера(,"СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent", XmlAcceptanceCertificateContent, ВизуализироватьДопПоля);
	КонецФункции
	
	&НаСервере
	Функция СформироватьПечатнуюФормуПоXmlTorg12Content(Знач XmlTorg12Content, Знач ВизуализироватьДопПоля)
		Возврат МетодСервера(,"СформироватьПечатнуюФормуПоXmlTorg12Content", XmlTorg12Content, ВизуализироватьДопПоля);
	КонецФункции

	&НаСервере
	Функция СформироватьПечатнуюФормуУПДПоUTDSellerContent(Знач XmlUTDContent, Знач ВизуализироватьДопПоля)
		Возврат МетодСервера(,"СформироватьПечатнуюФормуУПДПоUTDSellerContent", XmlUTDContent, ВизуализироватьДопПоля);
	КонецФункции
	
	&НаСервере
	Функция СформироватьПечатнуюФормуУПДСЧФПоUTDSellerContent(Знач XmlUTDContent, Знач ВизуализироватьДопПоля)
		Возврат МетодСервера(,"СформироватьПечатнуюФормуУПДСЧФПоUTDSellerContent", XmlUTDContent, ВизуализироватьДопПоля);
	КонецФункции

	&НаСервере
	Функция СформироватьПечатнуюФормуПоInvoiceCorrectionContent(Знач InvoiceContent, Знач ВизуализироватьДопПоля)
		Возврат МетодСервера(,"СформироватьПечатнуюФормуПоInvoiceCorrectionContent", InvoiceContent, ВизуализироватьДопПоля);
	КонецФункции
	
	&НаСервере
	Функция СформироватьПечатнуюФормуПоInvoiceContent(Знач InvoiceContent, Знач ВизуализироватьДопПоля)
		Возврат МетодСервера(,"СформироватьПечатнуюФормуПоInvoiceContent", InvoiceContent, ВизуализироватьДопПоля);
	КонецФункции

	&НаКлиенте
	Функция ПолучитьПечатнуюФормуКорректировочногоСчетаФактурыЭДОбъекту(Document, ВизуализироватьДопПоля, Content)

		СтруктураКонтента = Новый_InvoiceCorrectionContent();

		ЗаполнитьСтруктуруПоКонтенту(Content, СтруктураКонтента, "InvoiceCorrectionContent");
		
		СтруктураКонтентаПодписей = СформироватьДанныеОПодписях(Document, Content);

		Content=	Новый Структура("InvoiceCorrectionContent, InvoiceSignatureStructure", СтруктураКонтента, СтруктураКонтентаПодписей);
		
		возврат СформироватьПечатнуюФормуПоInvoiceCorrectionContent(Content, ВизуализироватьДопПоля);
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьПечатнуюФормуСчетаФактурыЭДОбъекту(Document, ВизуализироватьДопПоля, DocumentContent)

		СтруктураКонтента = Новый_InvoiceContent();

		ЗаполнитьСтруктуруПоКонтенту(DocumentContent, СтруктураКонтента, "InvoiceContent");
		
		СтруктураКонтентаПодписей = СформироватьДанныеОПодписях(Document, DocumentContent);

		
		Content=	Новый Структура("InvoiceContent, InvoiceSignatureStructure", СтруктураКонтента, СтруктураКонтентаПодписей);
		
		Возврат СформироватьПечатнуюФормуПоInvoiceContent(Content, ВизуализироватьДопПоля);
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьПечатнуюФормуАктаПоЭДОбъекту(Document, ВизуализироватьДопПоля) экспорт 
		
		Content =  Document.GetContent();
		BuyerContent =  Document.GetBuyerContent();

		СтруктураКонтента = Новый_AcceptanceCertificateSellerContent();

		ЗаполнитьСтруктуруПоКонтенту(Content, СтруктураКонтента, "XmlAcceptanceCertificate");
		
		СтруктураКонтентаПодписей=	СформироватьДанныеОПодписях(Document, Content, BuyerContent);
		
		Если  BuyerContent<>Неопределено тогда 
			СтруктураКонтентаПолучателя = Новый_AcceptanceCertificateBuyerContent();
			ЗаполнитьСтруктуруПоКонтенту(BuyerContent, СтруктураКонтентаПолучателя, "XmlAcceptanceCertificate");
		Иначе 
			СтруктураКонтентаПолучателя  =  неопределено
		КонецЕсли;	 
		
		Content=	Новый Структура("XmlAcceptanceCertificateContent, XmlAcceptanceCertificateBuyerContent, XmlAcceptanceCertificateSignatureStructure", СтруктураКонтента, СтруктураКонтентаПолучателя, СтруктураКонтентаПодписей);
		
		возврат СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent(Content, ВизуализироватьДопПоля(Document));
		
	КонецФункции
		
	&НаКлиенте
	Функция СформироватьДанныеОПодписях(Document, DocumentContent, BuyerContent=неопределено)
		СтруктураКонтентаПодписей=	ИнициализироватьСтруктуруДанныхПодписей();
		СтруктураКонтентаПодписей.DocumentMetaData.DocumentID = Document.DocumentID;
		СтруктураКонтентаПодписей.DocumentMetaData.TimeStamp  = Document.TimeStamp;
      
		Если Document.Type = "UniversalTransferDocument" Тогда
			Для Каждого СтрокаSigners ИЗ DocumentContent.Signers Цикл
				SignerDetails= СтрокаSigners.SignerDetails;
				Если МетодКлиента("Модуль_Клиент", "ОбластьПолномочийУПД_ОтветственныйЗаПодписаниеСЧФ", SignerDetails.Powers) Тогда
					СтруктураКонтентаПодписей.SellerSigner= SignerDetails;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗаполнитьСтруктуруПоКонтенту(DocumentContent.Signer, СтруктураКонтентаПодписей.SellerSigner);
		КонецЕсли;
			
		SenderSignatureContent=	Document.GetSenderSignature();
		Если НЕ SenderSignatureContent = Неопределено Тогда
			ЗаполнитьСтруктуруПоКонтенту(SenderSignatureContent, СтруктураКонтентаПодписей.SenderSignature);
		КонецЕсли;
			
		RecipientSignatureContent=	Document.GetRecipientSignature();
		Если НЕ RecipientSignatureContent = Неопределено Тогда
			ЗаполнитьСтруктуруПоКонтенту(RecipientSignatureContent, СтруктураКонтентаПодписей.RecipientSignature);
		КонецЕсли;
		
		Если BuyerContent <> неопределено тогда 
			ЗаполнитьСтруктуруПоКонтенту(BuyerContent.Signer, СтруктураКонтентаПодписей.BuyerSigner);
		КонецЕсли;	 
		
		возврат  СтруктураКонтентаПодписей;
	КонецФункции	
	
	&НаКлиенте
	Функция ПолучитьПечатнуюФормуТорг12ПоЭДОбъекту(Document, ВизуализироватьДопПоля)
		
		DocumentContent =  Document.GetContent();
		BuyerContent =  Document.GetBuyerContent();

		СтруктураКонтента =  Новый_Torg12SellerContent();

		ЗаполнитьСтруктуруПоКонтенту(DocumentContent, СтруктураКонтента, "XmlTorg12Content");
			
		СтруктураКонтентаПодписей=	СформироватьДанныеОПодписях(Document, DocumentContent, BuyerContent);
		
		Если BuyerContent <> неопределено тогда 
			СтруктураКонтентаПолучателя =  Новый_Torg12BuyerContent();
			ЗаполнитьСтруктуруПоКонтенту(BuyerContent, СтруктураКонтентаПолучателя, "XmlTorg12Content");
		Иначе 
			СтруктураКонтентаПолучателя = неопределено;
		КонецЕсли;	 
		
		Content=	Новый Структура("XmlTorg12Content, XmlTorg12BuyerContent, XmlTorg12SignatureStructure", СтруктураКонтента, СтруктураКонтентаПолучателя, СтруктураКонтентаПодписей);
		
		Возврат СформироватьПечатнуюФормуПоXmlTorg12Content(Content, ВизуализироватьДопПоля);
		
	КонецФункции

	&НаКлиенте
	Функция ПолучитьПечатнуюФормуУПДПоЭДОбъекту(Document, ВизуализироватьДопПоля)
		
		UtdSellerContent =  Document.GetContent();
		СтруктураUtdSellerContent =  Новый_UtdSellerContent();
		ЗаполнитьСтруктуруПоКонтенту(UtdSellerContent, СтруктураUtdSellerContent, "UniversalTransferDocument");
			
		СтруктураКонтентаПодписей =	СформироватьДанныеОПодписях(Document, СтруктураUtdSellerContent);
		
		UtdBuyerContent =  Document.GetBuyerContent();
		Если UtdBuyerContent <> неопределено тогда 
			СтруктураUtdBuyerContent =  Новый_UtdBuyerContent();
			ЗаполнитьСтруктуруПоКонтенту(UtdBuyerContent, СтруктураUtdBuyerContent, "UtdBuyerContent");
			СтруктураКонтентаПодписей.BuyerSigner= СтруктураUtdBuyerContent.Signers[0].SignerDetails;
		Иначе 
			СтруктураUtdBuyerContent = неопределено;
		КонецЕсли;	 
		
		Content = Новый Структура("Content, BuyerContent, SignatureStructure", СтруктураUtdSellerContent, СтруктураUtdBuyerContent, СтруктураКонтентаПодписей);
		
		Возврат СформироватьПечатнуюФормуУПДПоUTDSellerContent(Content, ВизуализироватьДопПоля);
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьПечатнуюФормуУПДСЧФПоЭДОбъекту(Document, ВизуализироватьДопПоля) Экспорт 
		
		UtdSellerContent =  Document.GetContent();
		СтруктураUtdSellerContent = Новый_UtdSellerContent();
		ЗаполнитьСтруктуруПоКонтенту(UtdSellerContent, СтруктураUtdSellerContent, "UniversalTransferDocument");
			
		СтруктураКонтентаПодписей =	СформироватьДанныеОПодписях(Document, СтруктураUtdSellerContent);
		
		Content = Новый Структура("Content, SignatureStructure", СтруктураUtdSellerContent, СтруктураКонтентаПодписей);
		
		Возврат СформироватьПечатнуюФормуУПДСЧФПоUTDSellerContent(Content, ВизуализироватьДопПоля);
			
	КонецФункции

//} ФОРМИРОВАНИЕ ПЕЧАТНЫХ ФОРМ
////////////////////////////////////////////////////////////////////////////////
	
////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	&НаКлиенте
	Процедура ОбновитьДокумент1С()

		Документ1С=	ПолучитьDocumentID_2_Документ(ЭДОбъект.DocumentID, ЭДОбъект.OrganizationID, МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП", ЭДОбъект), ЭДОбъект.Direction);

	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьDocumentID_2_Документ(DocumentID, BoxID, ЭтоУПД_ТипаСЧФДОП, DocumentDirection)
		
		Возврат МетодСервера(,"DocumentID_2_Документ", DocumentID, BoxID, ЭтоУПД_ТипаСЧФДОП, DocumentDirection);

	КонецФункции

	&НаСервере
	Процедура Установить_DocumentID_Для_Документ(Документ, DocumentID, BoxID, DocumentType = Неопределено, ЭтоУПД_ТипаСЧФДОП)
		
		МетодСервера(,"Установить_DocumentID_Для_Документ", Документ, DocumentID, BoxID,, ЭтоУПД_ТипаСЧФДОП);
		
	КонецПроцедуры

	&НаСервере
	Процедура ОчиститьCustomDocumentId(Документ)
		
		МетодСервера(,"ОчиститьCustomDocumentId", Документ);
		
	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьСвязаннуюОрганизацию(BoxID)
		
		Возврат МетодСервера(,"BoxID_2_Организация", BoxID);
		
	КонецФункции
	
	&НаКлиенте
	Процедура СообщениеОбОшибкеДиадок(текстОшибки) Экспорт 
		
		ПоказатьПредупреждение(, МетодКлиента("Модуль_Клиент","СформироватьТекстОшибкиДиадок", ТекстОшибки), 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьЭДОбъект()
		
		ЭДОбъект= ЭДОбъект.Organization.GetDocumentById(ЭДОбъект.DocumentId);
		
		ПросмотрФормы();
		
		ОбновитьДокумент1С();
		
		ПараметрыОповещения=	Новый Структура;
		ПараметрыОповещения.Вставить("BoxID", ЭДОбъект.OrganizationID);
		ПараметрыОповещения.Вставить("DocumentID", ЭДОбъект.DocumentID);
		
		МетодКлиента(,"ОповеститьФормы", "ИзменениеСтатусаДокументаДиадок", ПараметрыОповещения, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаСервере
	Функция СформироватьТитулПолучателя(СтруктураПодписи, Type, DocumentDate) Экспорт
		Возврат МетодСервера(,"СформироватьТитулПолучателя", СтруктураПодписи, Type, DocumentDate);		
	КонецФункции	
	
	&НаКлиенте
	Процедура ЗакэшироватьРезультатВизуализации(ТабличныйДокумент, Ошибки)
		
		Если ЗначениеЗаполнено(IDТекущейСтроки) Тогда
			МассивСтрок= ТаблицаДокументов.НайтиСтроки(Новый Структура("IdСтроки", IDТекущейСтроки));
			Если МассивСтрок.Количество()>0 Тогда
				ТекущаяСтрока= МассивСтрок[0];
				ТекущаяСтрока.ТекстОшибкиВалидации= Ошибки;
			КонецЕсли;
						
			КэшТабличныеДокументы.Вставить(IDТекущейСтроки, ТабличныйДокумент);
					
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УдалитьТабличныйДокументИзКэша(IdСтроки)
		
		Если НЕ КэшТабличныеДокументы.Получить(IdСтроки) = Неопределено Тогда
			КэшТабличныеДокументы.Удалить(IdСтроки);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВывестиОшибкуОтправкиНаФорму()
		
		Если ЗначениеЗаполнено(ОшибкиОтправки) Тогда
			ТекстОшибкиОтправки= ОшибкиОтправки;
			ОшибкиОтправки= "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибкиОтправки) Тогда
			ОшибкиОтправки= МетодСервера(, "ОформитьОшибкиВHTML", ТекстОшибкиОтправки, "При отправке пакета возникли ошибки");
		КонецЕсли;
		
		ТекстПолнойОшибки= ТекстПолнойОшибки();
		Ошибки= "";
		Ошибки= ТекстПолнойОшибки; 
				
		НастроитьЭлементыФормы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ТекстПолнойОшибки()
		
		ТекстПолнойОшибки= "";
		Если ЗначениеЗаполнено(Ошибки) Тогда
			ТекстПолнойОшибки= Ошибки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОшибкиОтправки) Тогда
			ТекстПолнойОшибки= ТекстПолнойОшибки + ?(ЗначениеЗаполнено(ТекстПолнойОшибки), Символы.ПС, "") + ОшибкиОтправки; 
		КонецЕсли;
		
		Возврат ТекстПолнойОшибки;
		
	КонецФункции
		
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ТЕЛО МОДУЛЯ

	&НаКлиенте
	Процедура СоздатьДокумент(Режим) Экспорт
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("BoxID", 				ЭДОбъект.OrganizationID);
		ПараметрыФормы.Вставить("DocumentID", 			ЭДОбъект.DocumentID);
		ПараметрыФормы.Вставить("Direction", 			ЭДОбъект.Direction);
		ПараметрыФормы.Вставить("Type",					ЭДОбъект.type);
		ПараметрыФормы.Вставить("CounteragentBoxID", 	ЭДОбъект.Counteragent.ID);
		
		ПараметрыФормы.Вставить("Контрагент", 			Контрагент);
		ПараметрыФормы.Вставить("Организация", 			Организация);
		
		Если ЭДОбъект.Type = "UniversalTransferDocument" Тогда
			ПараметрыФормы.Вставить("Function",			МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", ЭДОбъект.Function));
		КонецЕсли;
		
		Если Режим = "Ввод" Тогда
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаНакладной", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаНакладной");

		ИначеЕсли Режим = "Сопоставление" Тогда
			
			ПараметрыФормы.Вставить("DocumentDate", 	ЭДОбъект.DocumentDate);
			ПараметрыФормы.Вставить("DocumentNumber", 	ЭДОбъект.DocumentNumber);
			ПараметрыФормы.Вставить("Режим", 			Режим);
			Если ЭДОбъект.Direction = "Outbound" И Найти(ЭДОбъект.Type, "Invoice") = 0 Тогда 
				ПараметрыФормы.Вставить("СкрытьВозможностьСоздаватьДокумент", Истина);
			КонецЕсли;
			
			Если ЭДОбъект.Type = "InvoiceCorrection" ИЛИ ЭДОбъект.Type = "InvoiceCorrectionRevision" Тогда
				ПараметрыФормы.Вставить("TotalInc",		ЭДОбъект.TotalInc);
				ПараметрыФормы.Вставить("TotalDec",		ЭДОбъект.TotalDec);
			Иначе
				ПараметрыФормы.Вставить("Total",		ЭДОбъект.Total);
			КонецЕсли;
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораДокумента");
			
		ИначеЕсли Режим = "ВводСВыборомОснований" Тогда
			
			ПараметрыФормы.Вставить("DocumentDate", 	ЭДОбъект.DocumentDate);
			ПараметрыФормы.Вставить("DocumentNumber", 	ЭДОбъект.DocumentNumber);
			ПараметрыФормы.Вставить("Режим", 			Режим);
						
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораДокументаСОснованием");

		ИначеЕсли Режим = "ВводУПД" Тогда
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаУПД", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаУПД");

		КонецЕсли;
		
	КонецПроцедуры
	
//} ТЕЛО МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ОБРАБОТКА СОБЫТИЙ

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОшибокВалидации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		ПровестиВалидациюДокументовПакета();
		ПодключитьОбработчикОжидания("ПросмотрФормы", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаНакладной(ПараметрыФормы, ДополнительныеПараметры) Экспорт
		
		Если НЕ ПараметрыФормы = Неопределено Тогда
			Если ЗначениеЗаполнено(ПараметрыФормы.Документ1С) Тогда
				ОбработчикСозданиеДокумента(ПараметрыФормы.Документ1С);
			Иначе
				СоздатьДокумент(ПараметрыФормы.Режим);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Если ЗначениеЗаполнено(РезультатЗакрытия.Документ1С) Тогда
				ОбработчикСозданиеДокумента(РезультатЗакрытия.Документ1С);
			Иначе
				СоздатьДокумент(РезультатЗакрытия.Режим);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораДокументаСОснованием(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			Если РезультатЗакрытия.СписокСсылокРНК.Количество() > 0 Тогда
				МетодКлиента("Модуль_ЛогикаПоведениеФорм","СоздатьНовыйСчетФактуру", ЭтаФорма, Контрагент, Организация, ЭДОбъект, РезультатЗакрытия.СписокСсылокРНК.ВыгрузитьЗначения());
			Иначе
				СоздатьДокумент(РезультатЗакрытия.Режим);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаУПД(ПараметрыФормы, ДополнительныеПараметры) Экспорт
		
		Если НЕ ПараметрыФормы = Неопределено Тогда
			Если ЗначениеЗаполнено(ПараметрыФормы.Документ1С) Тогда
				ОбновитьДокумент1С();
				ПросмотрФормы();
			Иначе
				СоздатьДокумент(ПараметрыФормы.Режим);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикЗакрытиеФормыСФ(РезультатЗакрытия, ДокументОбъект) Экспорт
		
		Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			ОбработчикСозданиеДокумента(ДокументОбъект.Ссылка);
		КонецЕсли;
		
		МассивСсылокРНК=	Новый Массив;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикСозданиеДокумента(ДокументССылка) Экспорт
		
		Если ЗначениеЗаполнено(ДокументССылка) Тогда
			МетодКлиента("Модуль_Клиент","ОбработчикСозданиеДокумента", ДокументССылка, ЭДОбъект);
			ОбновитьДокумент1С();
			ПросмотрФормы();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Если НЕ РезультатЗакрытия.DepartmentID = ТекущийDepartmentId Тогда
				
				ЭДОбъект.Move(РезультатЗакрытия.DepartmentID);
				
				ОбновитьЭДОбъект();
				
				ПараметрыОповещения=	Новый Структура;
				ПараметрыОповещения.Вставить("BoxID", 			ЭДОбъект.OrganizationID);
				ПараметрыОповещения.Вставить("DocumentId", 		ЭДОбъект.DocumentID);
				ПараметрыОповещения.Вставить("DepartmentName", 	?(ЭДОбъект.Department = Неопределено, "", ЭДОбъект.Department.Name));
				
				МетодКлиента(,"ОповеститьФормы", "ИзменениеПодразделения", ПараметрыОповещения);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПолучателя(ПараметрыОтправкиНаСогласование, НаборДанных) Экспорт
		
		Если ПараметрыОтправкиНаСогласование = Неопределено Тогда
			Возврат;
		КонецЕсли;
				
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
						
			ОтправкаПрошлаУспешно= ВыполнитьОтправку(ПараметрыОтправкиНаСогласование);
			Если ОтправкаПрошлаУспешно = Истина Тогда
				Закрыть(ТаблицаДокументов);
			Иначе
				ВывестиОшибкуОтправкиНаФорму();
			КонецЕсли;
			
		Иначе
			МетодКлиента("Модуль_Клиент", "ОтправитьНаОбработку", ЭДОбъект, ПараметрыОтправкиНаСогласование);
			ОбновитьЭДОбъект();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаОтказаВПодписи(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			Попытка
				ПодписатьВДиадоке(Ложь, ЭДОбъект.OrganizationID, ЭДОбъект.documentID, РезультатЗакрытия.Комментарий); 
				Элементы.ГруппаКнопокПодписания.Доступность=	Ложь;
				Элементы.ГруппаКнопокПодписания.Видимость= 		Истина;
				ОбновитьЭДОбъект();
			Исключение
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаСогласовать(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка 
				ЭДОбъект.Approve(РезультатЗакрытия.Комментарий);
				Элементы.ГруппаКнопокСогласования.Доступность=	Ложь;
				Элементы.ГруппаКнопокСогласования.Видимость= 	Истина;
				ОбновитьЭДОбъект();
			Исключение
				ТекстОшибкиПодписания=	ОписаниеОшибки();
				Если НЕ Найти(ТекстОшибкиПодписания, "Duplicate resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Повторное согласование не возможно", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				ИначеЕсли НЕ Найти(ТекстОшибкиПодписания, "User cannot add resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Вы не можете согласовать документ", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				КонецЕсли;
				СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаОтказатьВСогласовании(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка
				ЭДОбъект.DisApprove(РезультатЗакрытия.Комментарий);
				ОбновитьЭДОбъект();
			Исключение
				ТекстОшибкиПодписания=	ОписаниеОшибки();
				Если НЕ Найти(ТекстОшибкиПодписания, "Duplicate resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Повторный отказ в согласовании не возможен", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				ИначеЕсли НЕ Найти(ТекстОшибкиПодписания, "User cannot add resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Вы не можете отказать в согласовании", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				КонецЕсли;
				СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикУдалитьДокумент(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			
			ПараметрУдаляемогоДокумента=	Новый Структура();
			ПараметрУдаляемогоДокумента.Вставить("DocumentId", 	ЭДОбъект.DocumentId);
			ПараметрУдаляемогоДокумента.Вставить("BoxID", 		ЭДОбъект.Organization.Id);
			
			МассивДокументов=	Новый Массив();
			МассивДокументов.Добавить(ПараметрУдаляемогоДокумента);
			
			Если ЗначениеЗаполнено(Документ1С) Тогда
				Установить_DocumentID_Для_Документ(Документ1С,,,, МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП", ЭДОбъект));
				ОчиститьCustomDocumentId(Документ1С);
			КонецЕсли;
			
			Если НЕ ЭДОбъект.IsDeleted Тогда
				Попытка
					ЭДОбъект.Delete();
					ПоказатьПредупреждение(, "Документ " + МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект) + " перемещен в удаленные.", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				Исключение
					
					ОписаниеОшибки=	ОписаниеОшибки();
					ТекстОшибки=	ОписаниеОшибки;
					Если Найти(ТекстОшибки, "is already delete") Тогда
						ТекстОшибки=	"Документ " + МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект) + " уже был удален.";
					Иначе
						ТекстОшибки=	"Ошибка удаления документа";
					КонецЕсли;
					
					ПараметрыФормы=	Новый Структура();
					ПараметрыФормы.Вставить("Заголовок", 		"Ошибка удаления");
					ПараметрыФормы.Вставить("ОписаниеОшибки", 	ТекстОшибки);
					ПараметрыФормы.Вставить("Подробности", 		ОписаниеОшибки);
					
					МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
					
				КонецПопытки;
				
			КонецЕсли;
			
			ПросмотрФормы();
			МетодКлиента(,"ОповеститьФормы","УдалениеДокументов", МассивДокументов);
		КонецЕсли;

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОтменитьСопоставление(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодвозвратаДиалога.Да Тогда
			
			Установить_DocumentID_Для_Документ(Документ1С,,,, МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП", ЭДОбъект));
			ОчиститьCustomDocumentId(Документ1С);

			Документ1С=	Неопределено;
			
			ОбновитьДокумент1С();
			ПросмотрФормы();
			
			ПараметрыОповещения=	Новый Структура;
			ПараметрыОповещения.Вставить("ТипСущности", "Документ");
			ПараметрыОповещения.Вставить("BoxID", ЭДОбъект.OrganizationID);
			ПараметрыОповещения.Вставить("DocumentID", ЭДОбъект.DocumentID);
			ПараметрыОповещения.Вставить("Документ1С", Документ1С);
			
			МетодКлиента(,"ОповеститьФормы","ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыПодписанияДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Если РезультатЗакрытия.ДокументПодписан = Истина Тогда
				Попытка  

					Если ЭДОбъект.Type = "UniversalTransferDocument" Тогда
						ПараметрыТитулаПолучателя=	РезультатЗакрытия.ТитулПокупателя;
						ПараметрыТитулаПолучателя.Вставить("BoxID", 				BoxID);
						ПараметрыТитулаПолучателя.Вставить("CertificateThumbprint", ЭДОбъект.Organization.Certificate.Thumbprint);
					Иначе
						ПараметрыТитулаПолучателя=	Новый Структура();
						ПараметрыТитулаПолучателя.Вставить("ДатаПолученияГруза", 	  РезультатЗакрытия.ДатаПолученияГруза);
						ПараметрыТитулаПолучателя.Вставить("ФИОПодписанта", 		  Лев(РезультатЗакрытия.ФИОПодписанта,100));
						ПараметрыТитулаПолучателя.Вставить("ДолжностьПодписанта", 	  Лев(РезультатЗакрытия.ДолжностьПодписанта,50));
						ПараметрыТитулаПолучателя.Вставить("ИНН", 					  ЭДОбъект.Organization.INN);
					КонецЕсли;
					
					BuyerTitleInfo=	СформироватьТитулПолучателя(ПараметрыТитулаПолучателя, ЭДОбъект.Type, ЭДОбъект.DocumentDate);
					ПодписатьВДиадоке(Истина, ЭДОбъект.OrganizationID, ЭДОбъект.documentID,, BuyerTitleInfo); 
					
					Элементы.ГруппаКнопокПодписания.Доступность=	Ложь;
					Элементы.ГруппаКнопокПодписания.Видимость= 		Ложь;
					
					ОбновитьЭДОбъект();
					
				Исключение 
					СообщениеОбОшибкеДиадок(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаЗапросАннулирования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			Попытка
				
				Если МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ЭДОбъект.Type) Тогда
					МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID);
				КонецЕсли;
				
				ЭДОбъект.SendRevocationRequest(РезультатЗакрытия.Комментарий);
				
				ОбновитьЭДОбъект();
				
			Исключение
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаАннулироватьДокумент(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			Попытка
				
				Если МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ЭДОбъект.Type) Тогда
					МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID);
				КонецЕсли;
				
				ЭДОбъект.AcceptRevocationRequest();
				
				ОбновитьЭДОбъект();
				
			Исключение 
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаОтказатьВАннулировании(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			Попытка
				
				Если МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ЭДОбъект.Type) Тогда
					МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID);
				КонецЕсли;
				
				ЭДОбъект.RejectRevocationRequest(РезультатЗакрытия.Комментарий);
				
				ОбновитьЭДОбъект();
				
			Исключение
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыНастройкиПодписи(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		ПодключитьОбработчикОжидания("ПросмотрФормы", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаЗапроситьУточнение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			Попытка
				МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID);
				
				ReplySendTask= ЭДОбъект.CreateReplySendTask("CorrectionRequest");
				
				ReplySendTask.Content.Comment= РезультатЗакрытия.Комментарий;
				МетодКлиента("Модуль_Клиент", "ЗаполнитьПодписанта", ReplySendTask.Content, ДополнительныеПараметры.Organization);
				
				ReplySendTask.Send();
				
				ОбновитьЭДОбъект();
			Исключение
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОповещенияВопросВыбраныНеВсеДокументыПакета(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			Если ДополнительныеПараметры = "ПодписатьИОтправить" Тогда
				ОтправкаПрошлаУспешно= ВыполнитьОтправку();
				Если ОтправкаПрошлаУспешно = Истина Тогда
					МетодКлиента(, "ОповеститьФормы", "ДиадокЗакрытьФормуДокумента", DocumentID);
				Иначе
					ВывестиОшибкуОтправкиНаФорму();
				КонецЕсли;
			ИначеЕсли ДополнительныеПараметры = "ПередатьНаСогласование" Тогда
				МетодКлиента("Модуль_Клиент", "ОтправитьЭДОбъектНаСогласование", ЭтаФорма, Организация, , "ApprovementRequest", "ПередачаНаОбработку");	
			ИначеЕсли ДополнительныеПараметры = "ПередатьНаПодписание" Тогда
				МетодКлиента("Модуль_Клиент", "ОтправитьЭДОбъектНаСогласование", ЭтаФорма, Организация, , "SignatureRequest", "ПередачаНаОбработку");	
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОповещенияВопросВыбраныНеВсеФайлы(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ПередатьФайлыДляДобавленияВПакеты();	
		КонецЕсли;
		
	КонецПроцедуры
	
	
//}	ОБРАБОТКА СОБЫТИЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ УПРАВЛЕНИЕ ФОРМОЙ
	
	&НаКлиенте
	Процедура ДекорацияПодробноНажатие(Элемент)
		
		HTMLДокумент= МетодКлиента("Модуль_Клиент","СформироватьHTMLПредставлениеРезолюций", ЭДОбъект, Организация);
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("HTMLДокумент",	HTMLДокумент);
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыводаHTMLДокумента", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтатусДокументаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
		
		Если НавигационнаяСсылкаФорматированнойСтроки = "RoamingNotificationStatusError" Тогда
			
			СтандартнаяОбработка= Ложь;
			
			Если НРег(Лев(ПредставлениеСтатусаРоуминг, 6)) = "ошибка" Тогда
				
				ПараметрыФормы= Новый Структура("Заголовок, ОписаниеОшибки, Подробности",
				ПредставлениеСтатусаРоуминг,
				ПредставлениеСтатусаРоуминг,
				ПредставлениеСтатусаРоумингДетали);
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
				
			Иначе
				ОбновитьСтатусЭД();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		ТочкаВызова= Параметры.ТочкаВызова;
		Параметры.Свойство("Операция", Операция);
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" И (Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ДобавитьВВыделенныеПакеты") Тогда
			
			ЗаполнитьТаблицуДокументовПоДаннымВыбранныхФайлов(Параметры.МассивАдресовФайлов);
								
		Иначе
			
			Организация=	МетодСервера(,"BoxID_2_Организация", Параметры.BoxID, Параметры.DepartmentKpp);
			Контрагент=		МетодСервера(,"CounteragentBoxID_2_Контрагент", Параметры.CounteragentBoxID);
			
			BoxID=					Параметры.BoxID;
			МассивДокументовПакета= Параметры.МассивДокументовПакета;
						
			Для каждого СтрокаМассива из МассивДокументовПакета Цикл
				
				ПредставлениеДокумента= СформироватьПредставлениеДокумента(СтрокаМассива);
							
				НоваяСтрока= ТаблицаДокументов.Добавить();
				
				НоваяСтрока.IdСтроки=			СтрокаМассива.IdСтроки;
							
				НоваяСтрока.Вкл= 				?(МассивДокументовПакета.Количество()=1, Истина, СтрокаМассива.Вкл);
				НоваяСтрока.Представление= 		ПредставлениеДокумента;
				
				НоваяСтрока.CounteragentBoxID=	СтрокаМассива.CounteragentBoxID;
				НоваяСтрока.DocumentType=		СтрокаМассива.DocumentType;
				НоваяСтрока.Документ1С=			СтрокаМассива.Документ1С;
				НоваяСтрока.Проведен=			СтрокаМассива.Проведен;
				НоваяСтрока.ТипДокумента=		СтрокаМассива.ТипДокумента;
				НоваяСтрока.ДопСведения=		СтрокаМассива.ДопСведения;
				НоваяСтрока.DocumentID=			СтрокаМассива.DocumentID;
				
				НоваяСтрока.ВнешняяПечатнаяФорма= СтрокаМассива.ВнешняяПечатнаяФорма;
				НоваяСтрока.НомерЗаказа=		СтрокаМассива.НомерЗаказа;
				
				НоваяСтрока.ТекстОшибкиВалидации= СтрокаМассива.ОшибкаВалидации; 
							
				Если СтрокаМассива.ЭтоТекущиеДанные Тогда
					ТекущиеДанные= СтрокаМассива; 
					
					НоваяСтрока.ТекущиеДанные= Истина;
				КонецЕсли;
				
				НоваяСтрока.ЭтоФайл= 			СтрокаМассива.ЭтоФайл;
				Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда 
					НоваяСтрока.СвойстваФайла= 	СтрокаМассива.СвойстваФайла;
					НоваяСтрока.ДанныеФайла= 	СтрокаМассива.ДанныеФайла;
				КонецЕсли;
											
			КонецЦикла;
			
			Если ТекущиеДанные = Неопределено Тогда
				ТекущиеДанные= Параметры.МассивДокументовПакета[0]; 
			КонецЕсли;
					
			CounteragentBoxID=	ТекущиеДанные.CounteragentBoxID;
			DocumentType=		ТекущиеДанные.DocumentType;
			Документ1С=			ТекущиеДанные.Документ1С;
			ТипДокумента=		ТекущиеДанные.ТипДокумента;
			ДопСведения=		ТекущиеДанные.ДопСведения;
			
			ТекущиеДанные.Свойство("DocumentID", 			DocumentID);
			ТекущиеДанные.Свойство("isTest", 				isTest);
			ТекущиеДанные.Свойство("DepartmentId", 			DepartmentId);
			ТекущиеДанные.Свойство("ВнешняяПечатнаяФорма", 	ВнешняяПечатнаяФорма);
			
			Если Параметры.Свойство("ОшибкаОтправкиПакета") И ЗначениеЗаполнено(Параметры.ОшибкаОтправкиПакета) Тогда
				ТекстОшибкиОтправки= "<p>" + Параметры.ОшибкаОтправкиПакета + "</p>";
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстОшибкиОтправки) Тогда
				ОшибкиОтправки= МетодСервера(, "ОформитьОшибкиВHTML", ТекстОшибкиОтправки, "При отправке пакета возникли ошибки");
			КонецЕсли;
					
			Этаформа.Команды.ПерейтиВДиадок.Подсказка= "Перейти в " + МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы;
			
			Если ТекущиеДанные.ЭтоФайл Тогда
				Элементы.ГруппаВизуализацияДокумента.ТекущаяСтраница= Элементы.СтраницаБезВизуализации;
			Иначе
				Элементы.ГруппаВизуализацияДокумента.ТекущаяСтраница= Элементы.СтраницаТабличноеПоле;
			КонецЕсли;
			
		КонецЕсли;
		
		Параметры.Свойство("КаталогВыбораФайлов", КаталогВыбораФайлов);
		
		ЗаполнитьСписокВыбораЭлементаТипДокумента();
							
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьТаблицуДокументовПоДаннымВыбранныхФайлов(МассивАдресовФайлов)
		
		ТекущиеДанныеУказаны= Ложь;
		Для каждого ПутьКФайлу из МассивАдресовФайлов Цикл
			
			НоваяСтрока= ТаблицаДокументов.Добавить();
			
			НоваяСтрока.Вкл= 			Истина;
			
			НоваяСтрока.IdСтроки= 		Новый УникальныйИдентификатор;
			НоваяСтрока.DocumentType= 	"Nonformalized";
			
			Если ТекущиеДанныеУказаны Тогда
				НоваяСтрока.ТекущиеДанные= 	Ложь;
			Иначе
				НоваяСтрока.ТекущиеДанные= 	Истина;
				ТекущиеДанныеУказаны= 		Истина;
			КонецЕсли;
			
			НоваяСтрока.ЭтоФайл= 	Истина;
			СвойстваФайла= Новый_СвойстваФайла();
			СвойстваФайла.ПолноеИмя= ПутьКФайлу;
			НоваяСтрока.СвойстваФайла= СвойстваФайла;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьСписокВыбораЭлементаТипДокумента()
		
		Элементы.ТипДокумента.СписокВыбора.Добавить("AcceptanceCertificate","Акт выполненных работ");
		Элементы.ТипДокумента.СписокВыбора.Добавить("ReconciliationAct",	"Акт сверки");
		Элементы.ТипДокумента.СписокВыбора.Добавить("ServiceDetails", 		"Детализация");
		Элементы.ТипДокумента.СписокВыбора.Добавить("Contract",				"Договор");
		Элементы.ТипДокумента.СписокВыбора.Добавить("Nonformalized", 		"Неформализованный");
		Элементы.ТипДокумента.СписокВыбора.Добавить("PriceListAgreement", 	"Протокол согласования цены");
		Элементы.ТипДокумента.СписокВыбора.Добавить("CertificateRegistry", 	"Реестр сертификатов");
		Элементы.ТипДокумента.СписокВыбора.Добавить("NonformalizedProforma","Счет на оплату");
		//Элементы.ТипДокумента.СписокВыбора.Добавить("PriceList",			"Ценовой лист"); // пока не реализован в компоненте
		
	КонецПроцедуры
		
	&НаСервере
	Функция СформироватьПредставлениеДокумента(СтрокаМассива)
		
		ПредставлениеДокумента= "";
		Если СтрокаМассива.DocumentType = "XmlTorg12" Тогда
			ПредставлениеДокумента= "Накладная № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "XmlAcceptanceCertificate" Тогда
			ПредставлениеДокумента= "Акт № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "Invoice" Тогда
			ПредставлениеДокумента= "Счет-фактура № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "InvoiceRevision" Тогда
			ПредставлениеДокумента= "Исправление № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "InvoiceCorrection" Тогда
			ПредставлениеДокумента= "Корректировочный счет-фактура № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "InvoiceCorrectionRevision" Тогда
			ПредставлениеДокумента= "ИКСФ № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "NonformalizedProforma" Тогда
			ПредставлениеДокумента= "Счет " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "UniversalTransferDocument" Тогда
			ПредставлениеДокумента= "УПД " + МетодСервера(, "ФункцияУПД", СтрокаМассива.ТипДокумента) + " № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "Nonformalized" И СтрокаМассива.ЭтоФайл Тогда
			ПредставлениеДокумента= СтрокаМассива.ТипДокумента;
			Если НЕ СтрокаМассива.ДанныеФайла = Неопределено Тогда
				ДанныеФайла= СтрокаМассива.ДанныеФайла;
				Если ДанныеФайла.Свойство("DocumentNumber") И ЗначениеЗаполнено(ДанныеФайла.DocumentNumber) Тогда
					ПредставлениеДокумента= ПредставлениеДокумента + " № " + ДанныеФайла.DocumentNumber;
				КонецЕсли;
				Если ДанныеФайла.Свойство("DocumentDate") И ЗначениеЗаполнено(ДанныеФайла.DocumentDate) Тогда
					ПредставлениеДокумента= ПредставлениеДокумента + " от " + Формат(ДанныеФайла.DocumentDate, "ДЛФ=Д");
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПредставлениеДокумента= СтрокаМассива.ТипДокумента;
		КонецЕсли;
		
		Возврат ПредставлениеДокумента; 
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПерейтиВДиадок(Команда)
		
		Если НЕ ЭдОбъект = Неопределено Тогда
			ПоказатьДокументВДиадоке(ЭдОбъект);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура  ПоказатьДокументВДиадоке(ДокументДиадока)
		
		МетодКлиента("Модуль_Клиент","ПоказатьДокументВДиадоке", ДокументДиадока.OrganizationId, ДокументДиадока.DocumentId);
		
	КонецПроцедуры 
	
	&НаКлиенте
	Функция ПоказатьКнопкуНастроитьПараметрыПодписи()
		
       	Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
			
			Если Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ДобавитьВВыделенныеПакеты" Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ВидАвторизации= Organization.AuthenticateType;
			
			Для каждого ДокументПакета из ТаблицаДокументов Цикл
				
				Если 	 Найти(ДокументПакета.ТипДокумента, "Торг-12")>0
					ИЛИ (Найти(ДокументПакета.ТипДокумента, "УПД")>0 И ВидАвторизации = "Certificate") 
					ИЛИ (Найти(ДокументПакета.ТипДокумента, "Акт")>0 И Найти(ДокументПакета.ТипДокумента, "Акт сверки")=0) Тогда
					
					Возврат Истина;
					
				КонецЕсли;
					
			КонецЦикла;
			
			Возврат Ложь;
			
       	Иначе
        	Возврат Ложь;
       	КонецЕсли;

	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуПерейтиВДиадок()
		
		Возврат НЕ ЭДОбъект = Неопределено;

	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуСтруктураПодчиненности()
		
		Возврат НЕ ЭДОбъект = Неопределено;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуОтправитьСвязанныеДокументы()
		
		Возврат НЕ ЭДОбъект = Неопределено;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппуКнопокПодписания(UserPermissions)
		
		DocumentStatus= ?(ЭДОбъект <> Неопределено, ЭДОбъект.Status, "");
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И ЭДОбъект.Direction = "Inbound"
		И ЭДОбъект.RevocationStatus = "RevocationStatusNone"
		И UserPermissions.CanSignIncomingDocuments
		
		И 	  DocumentType 	   <> "NonformalizedProforma"
		И Лев(DocumentType, 7) <> "Invoice"
		
		И (		DocumentStatus = "InboundWaitingForRecipientSignature" 
		   ИЛИ  DocumentStatus = "InboundInvalidRecipientSignature"
		   ИЛИ (DocumentStatus = "InboundNoRecipientSignatureRequest" И DocumentType = "Nonformalized"))
		   
		И (ЭДОбъект.IsTest ИЛИ ЭДОбъект.Organization.AuthenticateType = "Certificate");

	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуОтменитьСопоставление()
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И ЗначениеЗаполнено(Документ1С)
		И ЭДОбъект.Direction <> "Internal";
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппуКнопокСогласования(UserPermissions, UserID)
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если	ЭДОбъект <> Неопределено
				И UserPermissions.CanAddResolutions // Пользователь имеет право согласовывать документы
		        И ДанныйТипДокументаМожноСогласовывать()
		Тогда
		
			Если ЭДОбъект.ResolutionStatus = Неопределено Тогда
				
				//Такой кейс возможен в двух случаях:
				//1. По документу еще не запрашивали согласование
				//2. Документ был согласован, далее подписан и отправлен. После этого ResolutionStatus возвращается Неопределено, как будто бы и не согласовывался. 
				
				Возврат МетодКлиента("Модуль_Клиент", "ДокументНеСогласованРанее", ЭДОбъект);
				
			ИначеЕсли 	ЭДОбъект.ResolutionStatus.Type = "ApprovementRequested" 	 		// Документ в состоянии согласования
				 		И (ЭДОбъект.ResolutionStatus.TargetUser = Неопределено    	 		// Документ отправлен на согласование любому пользователю подразделения
					 		ИЛИ ЭДОбъект.ResolutionStatus.TargetUser.Id = UserID) Тогда 	// Документ отправлен на согласование текущему пользователю
							
				Возврат Истина;
				
			Иначе
				
				Возврат Ложь;
				
			КонецЕсли;
		
		Иначе
			Возврат Ложь;
		КонецЕсли;
				
	КонецФункции
	
	&НаКлиенте
	Функция ДанныйТипДокументаМожноСогласовывать()
		
		Возврат 	DocumentType = "XmlTorg12" 
				ИЛИ DocumentType = "XmlAcceptanceCertificate"
				ИЛИ DocumentType = "NonformalizedProforma"
				ИЛИ DocumentType = "Nonformalized"
				ИЛИ Лев(DocumentType, 7) = "Invoice"
				ИЛИ DocumentType = "UniversalTransferDocument";
		
	КонецФункции
		
	&НаКлиенте
	Функция ПоказатьКнопкуПередачиНаПодпись(UserPermissions)
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
			
			Если Операция = "ДобавитьВВыделенныеПакеты" Тогда
				Возврат Ложь;
			ИначеЕсли Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ОткрытьПакет" Тогда
				Если UserPermissions = Неопределено Тогда
					Возврат Ложь;
				Иначе
					Возврат UserPermissions.CanRequestResolutions;	// Пользователь имеет право запросить согласование или подписание документа
				КонецЕсли;
			Иначе
				Возврат Ложь; 			
			КонецЕсли;
			
		ИначеЕсли ТочкаВызова = "ТаблицаДокументовИсходящих" Тогда 
			
			Возврат Ложь;
										
		Иначе
			
			Возврат
		
			ЭДОбъект <> Неопределено
			
			И (UserPermissions.CanRequestResolutions 				// Пользователь имеет право запросить согласование или подписание документа
					 И ЭДОбъект.ResolutionStatus = Неопределено 	// Документ еще не согласован
					 И ЭДОбъект.Status = "InboundWaitingForRecipientSignature"
					 
					 И (	DocumentType = "XmlTorg12" 
						ИЛИ DocumentType = "XmlAcceptanceCertificate"
						ИЛИ DocumentType = "NonformalizedProforma"
						ИЛИ DocumentType = "Nonformalized"
						ИЛИ (DocumentType = "UniversalTransferDocument" 
								И (МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаДОП", ЭДОбъект) ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП", ЭДОбъект)))));
			
		КонецЕсли;
				
	КонецФункции
			
	&НаКлиенте
	Функция ПоказатьКнопкуПередачиНаСогласование(UserPermissions)
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
			
			Если Операция = "ДобавитьВВыделенныеПакеты" Тогда
				Возврат Ложь;
			ИначеЕсли Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ОткрытьПакет" Тогда
				Если UserPermissions = Неопределено Тогда
					Возврат Ложь;
				Иначе
					Возврат UserPermissions.CanRequestResolutions;	// Пользователь имеет право запросить согласование или подписание документа
				КонецЕсли;
			Иначе
				Возврат Ложь; 			
			КонецЕсли;
			
		ИначеЕсли ТочкаВызова = "ТаблицаДокументовИсходящих" Тогда 
			
			Возврат Ложь;
							
		Иначе
			
			Возврат ЭДОбъект <> Неопределено
					И (	UserPermissions.CanRequestResolutions 		// Пользователь имеет право запросить согласование или подписание документа
				 		И ЭДОбъект.ResolutionStatus = Неопределено 	// Документ еще не согласован
				    И (	DocumentType = "XmlTorg12" 
					ИЛИ DocumentType = "XmlAcceptanceCertificate"
					ИЛИ DocumentType = "NonformalizedProforma"
					ИЛИ DocumentType = "Nonformalized"
					ИЛИ DocumentType = "UniversalTransferDocument"
					ИЛИ ЛЕВ(DocumentType, 7) = "Invoice")); 
			
		КонецЕсли;		
				
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуУдалить(UserPermissions)
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И UserPermissions.CanSignIncomingDocuments
		И НЕ ЭДОбъект.IsDeleted;
		
	КонецФункции
	
	&НаКлиенте
	Функция НужноПоказатьКнопкуДобавитьВВыделенныеПакеты()
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" И Операция = "ДобавитьВВыделенныеПакеты" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
		
	&НаКлиенте
	Функция ПоказатьКнопкуСоздатьДокумент1С()
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И НЕ ЗначениеЗаполнено(Документ1С)
		И (Объект.ПараметрыКлиентСервер.МаркерКонфигурации <> "УНФ16"
			ИЛИ (ЭДОбъект.Direction = "Inbound" ИЛИ Лев(ЭДОбъект.Type, 7) <> "Invoice"));
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуСопоставитьДокумент1С()
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И НЕ ЗначениеЗаполнено(Документ1С)
		И Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16"
		И ЭДОбъект.Direction = "Outbound"
		И Лев(ЭДОбъект.Type, 7) <> "Invoice";
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуЗапросаАннулирования(UserPermissions)
		
		DocumentStatus= 		  ?(ЭДОбъект <> Неопределено, ЭДОбъект.Status		   , "");
		DocumentRevocationStatus= ?(ЭДОбъект <> Неопределено, ЭДОбъект.RevocationStatus, "");
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И UserPermissions.CanSignIncomingDocuments
		
		И (		DocumentRevocationStatus = "RevocationStatusNone"
			ИЛИ DocumentRevocationStatus = "RevocationRejected")
			
		И (		DocumentStatus = "InboundWithRecipientSignature" 
			ИЛИ DocumentStatus = "InboundRecipientSignatureRequestRejected"
			ИЛИ DocumentStatus = "OutboundWithRecipientSignature" 
			ИЛИ DocumentStatus = "OutboundRecipientSignatureRequestRejected"
			ИЛИ DocumentStatus = "OutboundWaitingForRecipientSignature"
			ИЛИ DocumentStatus = "InboundFinished"
			ИЛИ DocumentStatus = "OutboundFinished"
			ИЛИ DocumentStatus = "Outbound"
			ИЛИ DocumentStatus = "Inbound"
			ИЛИ DocumentStatus = "OutboundWaitingForInvoiceReceipt"
			ИЛИ DocumentStatus = "OutboundWaitingForReceipt")
		
	КонецФункции

	&НаКлиенте
	Функция ПоказатьКнопкуАннулирования(UserPermissions)
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И UserPermissions.CanSignIncomingDocuments
		И ЭДОбъект.RevocationStatus = "RequestsMyRevocation"
		И ЭДОбъект.Organization.AuthenticateType = "Certificate"
		
	КонецФункции

	&НаКлиенте
	Функция ПоказатьКнопкуОтказаАннулирования(UserPermissions)
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И UserPermissions.CanSignIncomingDocuments
		И ЭДОбъект.RevocationStatus = "RequestsMyRevocation"
		И ЭДОбъект.Organization.AuthenticateType = "Certificate"
		
	КонецФункции

	&НаКлиенте
	Функция ПоказатьКнопкуЗапросаУточнения(UserPermissions)
		
		Если ЭДОбъект = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" Тогда
			
			Возврат ЭДОбъект.Status = "InboundFinished"
					И НЕ ЭДОбъект.Corrected
					И НЕ ЭДОбъект.Revised
					И НЕ ЭДОбъект.AmendmentRequested
					И ЭДОбъект.Organization.AuthenticateType = "Certificate";
			
		ИначеЕсли ЭДОбъект.Type = "UniversalTransferDocument" ТОгда
			
			Возврат ЭДОбъект.Direction = "Inbound"
					И НЕ ЭДОбъект.AmendmentRequested
					И ЭДОбъект.Organization.AuthenticateType = "Certificate";
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Процедура НастроитьКнопкиКоманднойПанели()
		
		Если ЭДОбъект <> Неопределено Тогда
			UserPermissions= ЭДОбъект.Organization.GetUserPermissions();
		ИначеЕсли Organization <> Неопределено Тогда
			UserPermissions= Organization.GetUserPermissions();
		КонецЕсли;
		
		UserID= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetMyUser().ID;
		
		МассивНастройкиВидимости= Новый Массив;
			
		Если ПоказатьКнопкуНастроитьПараметрыПодписи() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "НастроитьПараметрыПодписи", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "НастроитьПараметрыПодписи", Ложь, Ложь);
		КонецЕсли;
						
		Если ПоказатьКнопкуПерейтиВДиадок() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПерейтиВДиадок", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПерейтиВДиадок", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуСтруктураПодчиненности() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ФормаСтруктураПодчиненности", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ФормаСтруктураПодчиненности", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуОтправитьСвязанныеДокументы() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтправитьСвязанныйДокумент", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтправитьСвязанныйДокумент", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьГруппуКнопокПодписания(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаКнопокПодписания", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаКнопокПодписания", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуОтменитьСопоставление() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтменитьСопоставление", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтменитьСопоставление", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьГруппуКнопокСогласования(UserPermissions, UserID) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаСогласование", Истина, Истина);
		Иначе
			Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
				ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаСогласование", Ложь, Ложь);
			Иначе
				ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаСогласование", Истина, Ложь);
			КонецЕсли;
		КонецЕсли;
				
		НужноПоказатьКнопкуПередачиНаСогласование= 	ПоказатьКнопкуПередачиНаСогласование(UserPermissions);
		НужноПоказатьКнопкуПередачиНаПодпись= 		ПоказатьКнопкуПередачиНаПодпись(UserPermissions);
		
		Если НужноПоказатьКнопкуПередачиНаСогласование И НужноПоказатьКнопкуПередачиНаПодпись Тогда
			
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", Истина, Истина);
		
		ИначеЕсли НужноПоказатьКнопкуПередачиНаСогласование И НЕ НужноПоказатьКнопкуПередачиНаПодпись Тогда
			
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", 	Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаСогласование", 	Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаПодписание", 		Ложь, 	Ложь);
			
		ИначеЕсли НЕ НужноПоказатьКнопкуПередачиНаСогласование И НужноПоказатьКнопкуПередачиНаПодпись Тогда
			
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", 	Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаСогласование", 	Ложь,	Ложь);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаПодписание", 		Истина, Истина);
			
		Иначе
			Если Операция = "СоздатьНовыйПакет" Тогда
				ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", Истина, Ложь);
			Иначе
				ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", Ложь, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		Если НужноПоказатьКнопкуДобавитьВВыделенныеПакеты() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаДобавитьВВыделенныеПакеты", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаДобавитьВВыделенныеПакеты", Ложь, Ложь);
		КонецЕсли;
				
		Если ПоказатьКнопкуУдалить(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаУдалить", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаУдалить", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуСоздатьДокумент1С() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСоздатьДокумент1С", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСоздатьДокумент1С", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуСопоставитьДокумент1С() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСопоставитьДокумент1С", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСопоставитьДокумент1С", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуЗапросаАннулирования(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаЗапроситьАннулирование", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаЗапроситьАннулирование", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуАннулирования(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаАннулировать", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаАннулировать", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуОтказаАннулирования(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтказатьВАннулировании", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтказатьВАннулировании", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуЗапросаУточнения(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаЗапроситьУточнение", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаЗапроситьУточнение", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуПеревыставить(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПеревыставить", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПеревыставить", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуПодписатьИОтправить(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПодписатьИОтправить", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПодписатьИОтправить", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуПодписатьЗапрошенный(UserPermissions, UserID) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПодписатьЗапрошенный", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПодписатьЗапрошенный", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьСодержимоеПакета() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаСодержимоеПакета", Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСкрытьПоказатьСоставПакета", Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаКнопкиКоманднойПанелиТаблицыДокументов", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаСодержимоеПакета", Ложь, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСкрытьПоказатьСоставПакета", Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаКнопкиКоманднойПанелиТаблицыДокументов", Ложь, Истина);
		КонецЕсли;
		
		Если ПоказатьГруппаДокументыПакетаКнопкиВыделения() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаДокументыПакетаКнопкиВыделения", Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСкрытьПоказатьСоставПакета", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаДокументыПакетаКнопкиВыделения", Ложь, Ложь);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСкрытьПоказатьСоставПакета", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьГруппаДокументыПакетаКнопкиРедактированияСостоваПакета() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаДокументыПакетаКнопкиРедактированияСостоваПакета", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаДокументыПакетаКнопкиРедактированияСостоваПакета", Ложь, Ложь);
		КонецЕсли;
				
		НастроитьВидимостьЭлементовФормыНаСервере(МассивНастройкиВидимости);
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УправлениеДоступностьюКнопкиРедактированияСоставаПакета(ЗначениеДоступности)
		
		Элементы.ЗаменитьФайлВПакете.Доступность= 	ЗначениеДоступности;
		Элементы.УдалитьФайлИзПакета.Доступность= 	ЗначениеДоступности;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура ДобавитьНастройкуВидимости(МассивНастройкиВидимости, ИмяРеквизита, Видимость, Доступность)
		
		НастройкаВидимости = Новый Структура("ИмяРеквизита, Видимость, Доступность", ИмяРеквизита, Видимость, Доступность);
		МассивНастройкиВидимости.Добавить(НастройкаВидимости);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура НастроитьВидимостьЭлементовФормыНаСервере(МассивНастройкиВидимости)
		
		Для каждого НастройкаВидимости из МассивНастройкиВидимости Цикл
			
			ИмяРеквизита		= НастройкаВидимости.ИмяРеквизита;
			НастройкаВидимость 	= НастройкаВидимости.Видимость;
			НастройкаДоступность= НастройкаВидимости.Доступность;
			
			Элементы[ИмяРеквизита].Видимость 	= НастройкаВидимость;
			Элементы[ИмяРеквизита].Доступность 	= НастройкаДоступность;
			
		КонецЦикла;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура НастроитьЭлементыФормы()
		
		Элементы.Ошибки.Видимость = ЗначениеЗаполнено(Ошибки) ИЛИ ЗначениеЗаполнено(ОшибкиОтправки);
		
		Если ЭДОбъект <> Неопределено Тогда
			
			Элементы.ГруппаКоманднаяПанельПодвал.Видимость=	  Истина;
			Если ЭДОбъект.Direction = "Inbound" Тогда
				
				МассивСсылокРНК=	МетодКлиента("Модуль_Клиент","ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок", ЭДОбъект);
				ПодходящаяСФ=		МетодКлиента("Модуль_Клиент","ПолучитьПодходящуюСФ", МассивСсылокРНК);
				
				ПредставлениеКнопкиСоздать=	МетодКлиента("Модуль_Клиент","СформироватьПредставлениеКнопкиСоздатьДокументВ1С", Документ1С, ЭДОбъект, МассивСсылокРНК, ПодходящаяСФ);
				Если ЗначениеЗаполнено(ПредставлениеКнопкиСоздать) Тогда
					Элементы.КнопкаСоздатьДокумент1С.Заголовок=	ПредставлениеКнопкиСоздать;
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.РамкаСтатуса.Видимость= Истина;
			Элементы.ДекорацияПодробно.Видимость= ЭДОбъект.Resolutions.Count > 0;
			
			Если ЗначениеЗаполнено(Документ1С) Тогда
				Элементы.ДокументВ1С.Заголовок= Новый ФорматированнаяСтрока(Строка(Документ1С),,,,ПолучитьНавигационнуюСсылку(Документ1С));
			Иначе
				Элементы.ДокументВ1С.Заголовок= "";
			КонецЕсли;
			
			Элементы.ГруппаПодразделениеПодвал.Видимость= (ЗначениеЗаполнено(Документ1С));
			Элементы.ГруппаПодразделениеТело.Видимость=	  (НЕ ЗначениеЗаполнено(Документ1С));
			
			ПредставлениеПодразделения=	?(ЭДОбъект.Department = Неопределено, "Головное подразделение", ЭДОбъект.Department.Name);
			
		Иначе
			
			Элементы.РамкаСтатуса.Видимость= Ложь;
			Элементы.Группа1.Видимость= Ложь;
			Элементы.ГруппаПодразделениеПодвал.Видимость= Ложь;
			
			Если ТочкаВызова = "ТаблицаДокументовНаОтправку" И Операция = "СоздатьНовыйПакет" Тогда
				Элементы.ГруппаАдресаты.Видимость= Истина;
			КонецЕсли;
		КонецЕсли;
		
		ЭтаФорма.Элементы.КнопкаПерейтиВДиадок.Заголовок = "Перейти в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		
		НастроитьЗаголовок();
		Если Элементы.ГруппаСодержимоеПакета.Видимость = Истина Тогда
			Элементы.КнопкаСкрытьПоказатьСоставПакета.Заголовок= "<<";
		Иначе
			Элементы.КнопкаСкрытьПоказатьСоставПакета.Заголовок= ">>";
		КонецЕсли;
						
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УправлениеФормой()
		
		ОбновитьСтатусЭД();
		НастроитьЗаголовок();
		НастроитьКнопкиКоманднойПанели();
		НастроитьЭлементыФормы();
		
	КонецПроцедуры	 
	
	&НаКлиенте
	Функция ОбновитьСтатусЭД()
		
		Если НЕ ЭДОбъект = Неопределено Тогда
			
			ПредставлениеСтатуса=		 МетодКлиента("Модуль_Клиент","ПредставлениеСтатуса"			, ЭДОбъект);
			ПредставлениеСогласования=	 МетодКлиента("Модуль_Клиент","ПредставлениеСтатусаСогласования", ЭДОбъект);
			
			ПредставлениеСтатусаРоуминг= МетодКлиента("Модуль_Клиент","ПредставлениеСтатусаРоуминг"		, ЭДОбъект);
			ПредставлениеСтатусаРоумингДетали= ?(ЭДОбъект.RoamingNotificationStatus = "RoamingNotificationStatusError", ЭДОбъект.RoamingNotificationStatusDescription, "");
			
			СводныйСтатус= Новый Массив;
			Разделитель= "";
			
			Если НЕ ПустаяСтрока(ПредставлениеСтатусаРоуминг) Тогда
				СводныйСтатус.Добавить(Разделитель);
				СводныйСтатус.Добавить(ПредставлениеСтатусаРоуминг);
				Разделитель= " ";
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ПредставлениеСтатуса) Тогда
				СводныйСтатус.Добавить(Разделитель);
				СводныйСтатус.Добавить(ПредставлениеСтатуса);
				Разделитель= ". ";
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ПредставлениеСогласования) Тогда
				СводныйСтатус.Добавить(Разделитель);
				СводныйСтатус.Добавить(ПредставлениеСогласования);
				Разделитель= ". ";
			КонецЕсли;
			
			Элементы.СтатусДокумента.Заголовок=	Новый ФорматированнаяСтрока(СводныйСтатус);
			
		Иначе
			
			Элементы.СтатусДокумента.Заголовок=	 ""; 
			
			ПредставлениеСтатусаРоуминг=	   "";
			ПредставлениеСтатусаРоумингДетали= "";
			
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьССылкуНаОбъект(ТекстСсылки)
		
		Если Найти(ТекстСсылки, "ВАЛЮТА") > 0 Тогда
			Гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки)-7);
			СсылкаНаЭлемент = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
			Возврат Новый Структура("Форма, Объект", "Справочник.Валюты.ФормаОбъекта",  СсылкаНаЭлемент);
		ИначеЕсли Найти(ТекстСсылки, "СПРАВОЧНИКВАЛЮТ") > 0 Тогда
			Возврат Новый Структура("Форма, Объект", "Справочник.Валюты.ФормаСписка",  "");
		ИначеЕсли Найти(ТекстСсылки, "ОКВ") > 0 Тогда
			Возврат Новый Структура("Форма, Объект", "Справочник.Валюты.Форма.ПодборВалютИзКлассификатора",  "");
		ИначеЕсли Найти(Текстссылки, "ЕДИНИЦА") > 0 Тогда
			Гуид= Прав(ТекстСсылки, СтрДлина(ТекстСсылки) - 8);
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				
				Если НЕ Метаданные.Справочники.Найти("УпаковкиЕдиницыИзмерения") = Неопределено Тогда
					СсылкаНаЭлемент= Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
					СправочникФормаОбъекта= "Справочник.УпаковкиЕдиницыИзмерения.Форма.ФормаЭлементаЕдиницыИзмерения";
				Иначе
					СсылкаНаЭлемент= Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
					СправочникФормаОбъекта= "Справочник.ЕдиницыИзмерения.ФормаОбъекта";
				КонецЕсли;
				Возврат Новый Структура("Форма, Объект", СправочникФормаОбъекта, СсылкаНаЭлемент);
				
			Иначе
				СсылкаНаЭлемент= Справочники.КлассификаторЕдиницИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
				Возврат Новый Структура("Форма, Объект", "Справочник.КлассификаторЕдиницИзмерения.ФормаОбъекта", СсылкаНаЭлемент);
			КонецЕсли;
		ИначеЕсли Найти(ТекстСсылки, "СПРАВОЧНИКЕДИНИЦ") > 0 Тогда
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				
				Если НЕ Метаданные.Справочники.Найти("УпаковкиЕдиницыИзмерения") = Неопределено Тогда
					СправочникФормаСписка= "Справочник.УпаковкиЕдиницыИзмерения.Форма.ФормаВыбораЕдиницыИзмерения";
				Иначе
					СправочникФормаСписка= "Справочник.ЕдиницыИзмерения.ФормаСписка";
				КонецЕсли;
				
				Возврат Новый Структура("Форма, Объект", СправочникФормаСписка, "");
				
			Иначе
				Возврат Новый Структура("Форма, Объект", "Справочник.КлассификаторЕдиницИзмерения.ФормаСписка",  "");
			КонецЕсли;
		ИначеЕсли Найти(ТекстСсылки, "ОКЕИ") > 0 Тогда
			Справочники.КлассификаторЕдиницИзмерения.ПолучитьФорму("ФормаПодбораИзКлассификатора",,ЭтаФорма).Открыть();
		ИначеЕсли найти(Текстссылки, "СТРАНА") > 0 Тогда 
			Гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки) - 7);
			СсылкаНаЭлемент = справочники.СтраныМира.ПолучитьСсылку(новый УникальныйИдентификатор(Гуид));
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				Возврат Новый Структура("Форма, Объект", "Справочник.СтраныМира.ФормаОбъекта",  СсылкаНаЭлемент);
			Иначе
				Возврат Новый Структура("Форма, Объект", "Справочник.СтраныМира.ФормаОбъекта",  СсылкаНаЭлемент);
			КонецЕсли;
		ИначеЕсли Найти(ТекстСсылки, "СПРАВОЧНИКСТРАН") > 0 Тогда
			Возврат Новый Структура("Форма, Объект", "Справочник.СтраныМира.ФормаСписка",  "");
		ИначеЕсли Найти(текстСсылки, "ОКСМ") > 0 Тогда
			Возврат Новый Структура("Форма, Объект", "Справочник.СтраныМира.Форма.Классификатор", "");
		ИначеЕсли Найти(Текстссылки, "КОНТРАГЕНТ") > 0 Тогда
			Гуид= 			 Прав(ТекстСсылки, СтрДлина(ТекстСсылки) - 11);
			СсылкаНаЭлемент= Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
			Если ОбработкаОбъект().ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				ИспользоватьПартнеровКакКонтрагентов= ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
				Если ИспользоватьПартнеровКакКонтрагентов Тогда
					Возврат Новый Структура("Форма, Объект", "Справочник.Партнеры.ФормаОбъекта", СсылкаНаЭлемент.Партнер);
				Иначе
					Возврат Новый Структура("Форма, Объект", "Справочник.Контрагенты.ФормаОбъекта", СсылкаНаЭлемент);
				КонецЕсли;
			Иначе
				Возврат Новый Структура("Форма, Объект", "Справочник.Контрагенты.ФормаОбъекта", СсылкаНаЭлемент);
			КонецЕсли;
		ИначеЕсли Найти(Текстссылки, "ОРГАНИЗАЦИЯ") > 0 Тогда 
			Гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки)-12);
			СсылкаНаЭлемент = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
			Возврат Новый Структура("Форма, Объект", "Справочник.Организации.ФормаОбъекта",  СсылкаНаЭлемент);
		ИначеЕсли Найти(Текстссылки, "СЧЕТФАКТУРАВЫДАННЫЙ") > 0 Тогда
			Гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки) - 20);
			СсылкаНаЭлемент = Документы.СчетФактураВыданный.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
			Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
				СсылкаНаЭлемент.ПолучитьФорму().Открыть();
			КонецЕсли;   
		ИначеЕсли Найти(ТекстСсылки, "КАРТОЧКА:") > 0 Тогда
			СтрокаИД = Прав(ТекстСсылки, СтрДлина(ТекстСсылки)-9);
			Если Найти(строкаИД, ":") > 0 Тогда
				BoxID = лев(строкаИД, найти(строкаИД, ":")-1);
				DocID = прав(строкаИД, стрДлина(СтрокаИД) - найти(строкаИД, ":"));
			КонецЕсли;
		Иначеесли Найти(Текстссылки, "НАСТРОЙКАПОДПИСИ") > 0 Тогда
			гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки) - 17);
			СсылкаНаЭлемент = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
			Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
				//если Найти(ТипДокумента, "Акт") <> 0  тогда 
				//	фрм = ЭтаФорма.ПолучитьФорму("ФормаНастройкиПодписиАкт");
				//Иначе 	
				//	фрм = ЭтаФорма.ПолучитьФорму("ФормаНастройкиПодписиТОРГ12");
				//КонецЕсли;	
				//фрм.ОткрытьКарточку(СсылкаНаЭлемент);
				//ОбновитьРНК();
			КонецЕсли;
		КонецЕсли;	
		
	КонецФункции
	
	&НаКлиенте
	Процедура НастроитьЗаголовок()
		
		Если НЕ ЭДОбъект = Неопределено Тогда
			Заголовок=	МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект);
		Иначе
			Если ТаблицаДокументов.Количество()>1 Тогда
				Заголовок= "Пакет из " + ТаблицаДокументов.Количество() + " документов";
			ИначеЕсли ТаблицаДокументов.Количество()=1 Тогда
				Заголовок= "Пакет из " + ТаблицаДокументов.Количество() + " документа";
			Иначе
				Заголовок= "Пустой пакет";
			КонецЕсли;	
		КонецЕсли;
				
	КонецПроцедуры
	
	&НаСервереБезКонтекста
	Функция ПолучитьРеквизитСсылки(СсылкаНаОбъект, ИмяРеквизита) Экспорт
		
		ЗначениеРеквизита=	Неопределено;
		
		ОбъектИзСсылки=	СсылкаНаОбъект.ПолучитьОбъект();
		Если НЕ ОбъектИзСсылки.Метаданные().Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			ЗначениеРеквизита=	ОбъектИзСсылки[ИмяРеквизита];
		КонецЕсли;
		
		Возврат ЗначениеРеквизита;
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ВернутьСписокОрганизацийНеТребующихВизуализацииДопПоля_Сервер()
		
		СписокОрганизаций = новый списокЗначений;
		//Авто (тестовая)
		СписокОрганизаций.Добавить("c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru");
		
		Возврат СписокОрганизаций;
		
	КонецФункции
	
	&НаСервере
	Функция Организация_2_BoxID_Форма(Организация)
		Возврат МетодСервера(,"Организация_2_BoxID", Организация);
	КонецФункции	
	
	&НаКлиенте
	Функция ВизуализироватьДопПоля(КакаяТоХняНаВходе) Экспорт
		
		ВизуализироватьДопПоля=	Истина;
		
		СписокОрганизацийНеТребующихВизуализацииДопПоля=	ВернутьСписокОрганизацийНеТребующихВизуализацииДопПоля_Сервер();
		
		Если ТипЗнч(КакаяТоХняНаВходе) = Тип("COMОбъект") Тогда

			Если КакаяТоХняНаВходе.Direction = "Outbound"  тогда
				ИДОтправителя=	КакаяТоХняНаВходе.Organization.Id;
			Иначе
				ИДОтправителя=	КакаяТоХняНаВходе.Counteragent.Id;
			КонецЕсли;
			
			Если НЕ СписокОрганизацийНеТребующихВизуализацииДопПоля.НайтиПоЗначению(ИДОтправителя) = Неопределено Тогда
				ВизуализироватьДопПоля=	Ложь;
			КонецЕсли;
			
		Иначе
			
			ИДОтправителя=	Организация_2_BoxID_Форма(ПолучитьРеквизитСсылки(КакаяТоХняНаВходе, "Организация"));
			Если НЕ СписокОрганизацийНеТребующихВизуализацииДопПоля.НайтиПоЗначению(ИДОтправителя) = Неопределено Тогда
				ВизуализироватьДопПоля=	Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ВизуализироватьДопПоля;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ВизуализацияПечатнойФормыПоСтруктуре()
		
		ПоказыватьПредупрежденияОСтаромФормате = Ложь;
				
		Если ЭДОбъект = Неопределено Тогда
			
			ВизуализироватьДопПоля=	ВизуализироватьДопПоля(Документ1С);
			
			ФИОПодписанта= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", Organization);
			
			СформироватьПечатнуюФормуПоДокументу(ФИОПодписанта, ВизуализироватьДопПоля);
			
		Иначе
			
			ВизуализироватьДопПоля=	ВизуализироватьДопПоля(ЭДОбъект);
			Если ЭДОбъект.Type = "XmlTorg12" Тогда
				ТабПоле=	ПолучитьПечатнуюФормуТорг12ПоЭДОбъекту(ЭДОбъект, ВизуализироватьДопПоля);
			ИначеЕсли ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" Тогда
				DocumentContent = ЭДОбъект.GetContent();
				InvoiceVersion 	= DocumentContent.InvoiceVersion;
				Если Найти(ЭДОбъект.Type, "Correction") = 0 Тогда
					ТабПоле=	ПолучитьПечатнуюФормуСчетаФактурыЭДОбъекту(ЭДОбъект, ВизуализироватьДопПоля, DocumentContent);
				Иначе 
					ТабПоле=	ПолучитьПечатнуюФормуКорректировочногоСчетаФактурыЭДОбъекту(ЭДОбъект, ВизуализироватьДопПоля, DocumentContent);
				КонецЕсли;
				
				ПоказыватьПредупрежденияОСтаромФормате = МетодКлиента("Модуль_ЛогикаПоведениеФорм","ПредупреждатьОСтаромФормате", ЭДОбъект.ConfirmationDate, InvoiceVersion);
				 
			ИначеЕсли ЭДОбъект.Type = "XmlAcceptanceCertificate" Тогда
				ТабПоле=	ПолучитьПечатнуюФормуАктаПоЭДОбъекту(ЭДОбъект, ВизуализироватьДопПоля);
			ИначеЕсли ЭДОбъект.Type = "UniversalTransferDocument" Тогда
				Если МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", ЭДОбъект.Function) = МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФ") Тогда
					ТабПоле=	ПолучитьПечатнуюФормуУПДСЧФПоЭДОбъекту(ЭДОбъект, ВизуализироватьДопПоля);
				Иначе
					ТабПоле=	ПолучитьПечатнуюФормуУПДПоЭДОбъекту(ЭДОбъект, ВизуализироватьДопПоля);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ГруппаПредупреждениеОНовомФормате.Видимость = ПоказыватьПредупрежденияОСтаромФормате;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПросмотрФормы()
		
		ВизуализацияПечатнойФормыПоСтруктуре();
		
		УправлениеФормой();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьПараметрыПодписи(Команда)
		
		Если Найти(ТипДокумента, "Торг-12") > 0 Тогда
						
			ФИО = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
									
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("Организация", Организация);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПодписиТОРГ12", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройкиПодписи");
			
		ИначеЕсли Найти(типДокумента, "Акт")>0 Тогда

			ФИО = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
									
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("Организация", Организация);
			ПараметрыФормы.Вставить("ТипДокумента", "Акт");
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПодписиАкт", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройкиПодписи");

		ИначеЕсли Найти(ТипДокумента, "УПД") > 0 Тогда
						
			ФИО = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", Organization);
									
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Организация", Организация);
			ПараметрыФормы.Вставить("Исходящие", Истина);
			ПараметрыФормы.Вставить("ДляКорректировки", ?(DocumentType = "UniversalCorrectionDocument", Истина, Ложь));
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПодписиУПД", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройкиПодписи");

		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		ПлатформаПриОткрытии(Отказ);
		
		ИнициализироватьКэшТабличныеДокументы();
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" И (Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ДобавитьВВыделенныеПакеты") Тогда
											
			Для каждого ЭлементТаблицыДокументов из ТаблицаДокументов Цикл
				
				СтруктураСвойстваФайла= ЭлементТаблицыДокументов.СвойстваФайла;
				
				ФайлДанных= Новый Файл(СтруктураСвойстваФайла.ПолноеИмя);
				
				ЭлементТаблицыДокументов.Представление= "Неформализованный";
				ЭлементТаблицыДокументов.DocumentType=	"Nonformalized"; //по умолчанию новый файл имеет тип "Nonformalized" 
				
				СтруктураДанныеФайла= Новый_NonformalizedDocumentToSend();
				
				ЗаполнитьСтрокуТаблицыДокументов(ЭлементТаблицыДокументов, ФайлДанных, СтруктураСвойстваФайла, СтруктураДанныеФайла);
											
			КонецЦикла;
			
			УстановитьВидимостьПоТипуДокумента();
			УправлениеФормой();
			
			Элементы.ГруппаПредупреждениеОНовомФормате.Видимость= Ложь;
								
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				Организация= МетодКлиента("Модуль_Клиент", "НайтиОрганизациюВИерархииОрганизацийDiadoc", BoxID, DepartmentId);
			КонецЕсли;
			
			Organization= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(BoxID);
									
			МассивТекущаяСтрока= ТаблицаДокументов.НайтиСтроки(Новый Структура("ТекущиеДанные", Истина));
			
			ТекущаяСтрока= МассивТекущаяСтрока[0];
			IDТекущейСтроки= ТекущаяСтрока.IdСтроки;
			
			Если ТекущаяСтрока.ЭтоФайл Тогда
				УправлениеФормой();
				УстановитьВидимостьПоТипуДокумента();
				Элементы.ГруппаПредупреждениеОНовомФормате.Видимость= Ложь;
			Иначе
				ПросмотрФормы();
			КонецЕсли;
						
			Если ТаблицаДокументов.Количество()>1 Тогда
				
				// позиционируем на выбранную строку
				Если МассивТекущаяСтрока.Количество()>0 Тогда
					Элементы.ТаблицаДокументовПакета.ТекущаяСтрока= МассивТекущаяСтрока[0].ПолучитьИдентификатор(); 
				КонецЕсли;
				
				ПровестиВалидациюДокументовПакета();
				
			КонецЕсли;
			
			Если ТекущаяСтрока.ЭтоФайл Тогда
				ДанныеФайлаНаФорму(ТекущаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПровестиВалидациюДокументовПакета()
		
		ФИОПодписанта= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", Organization);
		
		НомерДокумента= 0;
		ОбщееКоличествоДокументов= ТаблицаДокументов.Количество();
		
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументов Цикл
			
			НомерДокумента= НомерДокумента + 1;
			
			Если  ЗначениеЗаполнено(IDТекущейСтроки) 
				И СтрокаТаблицыДокументов.IdСтроки = IDТекущейСтроки Тогда
				
				СтрокаТаблицыДокументов.Вкл= (СтрокаТаблицыДокументов.Вкл = Истина) И (НЕ ЗначениеЗаполнено(СтрокаТаблицыДокументов.ТекстОшибкиВалидации));
				
				Продолжить;				
			КонецЕсли;
			
			Если СтрокаТаблицыДокументов.ЭтоФайл Тогда
				Продолжить;
			КонецЕсли;
						
			Состояние("Проверка документов", НомерДокумента*100/?(ОбщееКоличествоДокументов = 0, 1, ОбщееКоличествоДокументов), "Проверено документов " + НомерДокумента + " из " + ОбщееКоличествоДокументов);
			
			ПеременнаяДокумент1С= СтрокаТаблицыДокументов.Документ1С;
			ТекущиеОшибки= "";
			
			Если СтрокаТаблицыДокументов.DocumentType = "UniversalTransferDocument" Тогда 
				ФункцияУПД= МетодКлиента("Модуль_Клиент", "ФункцияУПД", СтрокаТаблицыДокументов.ТипДокумента);
			Иначе
				ФункцияУПД= Неопределено;
			КонецЕсли;
			
			Если СтрокаТаблицыДокументов.DocumentType = "XmlTorg12" Тогда
				
				ПеременнаяНомерЗаказа= 	СтрокаТаблицыДокументов.НомерЗаказа; 
				ПеременнаяДопСведения=	СтрокаТаблицыДокументов.ДопСведения;
								
				DocumentContent= МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ПолучитьXmlTorg12Content", ПеременнаяДокумент1С, Неопределено, ПеременнаяНомерЗаказа, ПеременнаяДопСведения, ФИОПодписанта);	
				ТекущиеОшибки=	 МетодСервераБезКонтекста(,"ВалидацияXmlTorg12Content", DocumentContent);
																	
			ИначеЕсли СтрокаТаблицыДокументов.DocumentType = "Invoice" ИЛИ ФункцияУПД = "СЧФ" Тогда
				
				ПеременнаяДопСведения= СтрокаТаблицыДокументов.ДопСведения;
							
				Если МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ЭтоКСФ", ПеременнаяДокумент1С) Тогда
					
					DocumentContent=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ПолучитьInvoiceCorrectionContent", ПеременнаяДокумент1С, Неопределено, ПеременнаяДопСведения, ФИОПодписанта);
					ТекущиеОшибки=		МетодСервераБезКонтекста(, "ВалидацияInvoiceCorrectionContent", DocumentContent, ПеременнаяДокумент1С);
					
				Иначе
					
					DocumentContent=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ПолучитьInvoiceContent", ПеременнаяДокумент1С, Неопределено, ПеременнаяДопСведения, ФИОПодписанта);
					ТекущиеОшибки=		МетодСервераБезКонтекста(, "ВалидацияInvoiceContent", DocumentContent, ПеременнаяДокумент1С);
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыДокументов.DocumentType = "XmlAcceptanceCertificate" Тогда
												
				Если НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуАкта(ПеременнаяДокумент1С)) Тогда
					
					ПеременнаяДопСведения= СтрокаТаблицыДокументов.ДопСведения;
					
					DocumentContent=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ПолучитьXmlAcceptanceCertificateContent", ПеременнаяДокумент1С, Неопределено, ПеременнаяДопСведения, ФИОПодписанта);
					ТекущиеОшибки=		МетодСервераБезКонтекста(, "ВалидацияXmlAcceptanceCertificateContent", DocumentContent);
					
				Иначе
					
					РезультатВизуализации=	ПолучитьСтруктуруПечатныхФормАкта(ПеременнаяДокумент1С);
					ТекущиеОшибки=			РезультатВизуализации.СписокОшибок;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыДокументов.DocumentType = "NonformalizedProforma" Тогда	
				
				Если НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуСчета(ПеременнаяДокумент1С)) Тогда
					
					РезультатВизуализации=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "СформироватьПечатнуюФормуСчетаНаОплату", ПеременнаяДокумент1С, Неопределено, ФИОПодписанта);
					ТекущиеОшибки=			РезультатВизуализации.СписокОшибок;
					
				Иначе 
					
					РезультатВизуализации=	ПолучитьСтруктуруПечатныхФормСчета(ПеременнаяДокумент1С);
					ТекущиеОшибки=			РезультатВизуализации.СписокОшибок;
					
				КонецЕсли;
					
			ИначеЕсли СтрокаТаблицыДокументов.DocumentType = "ReconciliationAct" Тогда
				
				Если НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуАктаСверки(ПеременнаяДокумент1С)) Тогда
					РезультатВизуализации=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "СформироватьПечатнуюФормуАктаСверки", ПеременнаяДокумент1С, Неопределено, ФИОПодписанта);
				Иначе
					РезультатВизуализации=	ПолучитьСтруктуруПечатныхФормАктаСверки(ПеременнаяДокумент1С);
				КонецЕсли;
									
				ТекущиеОшибки=	РезультатВизуализации.СписокОшибок;
				
			ИначеЕсли СтрокаТаблицыДокументов.DocumentType = "UniversalTransferDocument" Тогда
				
				Если ФункцияУПД = "СЧФДОП" ИЛИ ФункцияУПД = "ДОП" Тогда
					ПеременнаяДопСведения= СтрокаТаблицыДокументов.ДопСведения;
				
					DocumentContent= 	МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьXmlUTDContent", ПеременнаяДокумент1С, Неопределено, ПеременнаяДопСведения, ФИОПодписанта, СтрокаТаблицыДокументов.ТипДокумента);
					ТекущиеОшибки=		МетодСервера(,"ВалидацияUTD", DocumentContent);
				КонецЕсли;
								
			КонецЕсли;
			
			СтрокаТаблицыДокументов.ТекстОшибкиВалидации= ТекущиеОшибки;
			
			//Сбрасываем галочки на невалидном документе
			СтрокаТаблицыДокументов.Вкл= (СтрокаТаблицыДокументов.Вкл = Истина) И (НЕ ЗначениеЗаполнено(ТекущиеОшибки));
						
		КонецЦикла;
						
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодразделениеНажатие(Элемент, СтандартнаяОбработка)
		
		СтандартнаяОбработка=	Ложь;
		
		ТекущийDepartmentId=	?(ЭДОбъект.Department = Неопределено, "", ЭДОбъект.Department.Id);
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("DepartmentId", 	ТекущийDepartmentId);
		ПараметрыФормы.Вставить("OrganizationId",	ЭДОбъект.Organization.Id);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ВыборПодразделенияОрганизации", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации", ТекущийDepartmentId);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОшибкиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
		
		СтандартнаяОбработка = Ложь;
		Если (ДанныеСобытия.Anchor<> Неопределено) И ЗначениеЗаполнено(ДанныеСобытия.Anchor.NameProp) Тогда 
			Если Найти(ДанныеСобытия.Anchor.NameProp,"НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ" ) > 0 Тогда
				НастроитьПараметрыПодписи("");
			ИначеЕсли Найти(ДанныеСобытия.Anchor.NameProp,"НАСТРОЙКДОЛЖНОСТИПОДПИСАНТА") > 0 Тогда
				ПутьПослеСлэша = МетодКлиента("Модуль_Клиент","РазвернутьGUID", BoxId)+"/EmployeesList";
				ТекстURL = МетодСервера(,"ПолучитьПутьКWEBСерверу") + ПутьПослеСлэша;
				ЗапуститьПриложение(ТекстURL);
			Иначе	
				ПараметрыСсылки = ПолучитьССылкуНаОбъект(ДанныеСобытия.Anchor.nameProp);
				МетодКлиента(,"ОткрытьФормуОбъектаИБМодально", ПараметрыСсылки.Объект, ПараметрыСсылки.Форма,,ЭтаФорма, "ОбработчикОткрытиеФормыОшибокВалидации");
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодписатьВДиадоке(Подписать, BoxID, DocumentID, ТекстОтказа = "", СтруктураДляТитула = Неопределено)
		
		Если НЕ ЭДОбъект = Неопределено Тогда
			МетодКлиента("Модуль_Клиент","ПодписатьВДиадоке", ЭДОбъект, Подписать, BoxID, DocumentID, ТекстОтказа, СтруктураДляТитула);
		КонецЕсли;
		
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ ФОРМОЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ КОМАНДЫ
	
	&НаКлиенте
	Процедура Подписать(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
		
		ЭдОбъектType = ЭдОбъект.Type;

		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("ФИО", 						ФИОПодписанта);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		ПараметрыФормы.Вставить("Организация", 				ПолучитьСвязаннуюОрганизацию(Organization.ID));
		ПараметрыФормы.Вставить("ЭДОбъектType", 			ЭдОбъектType);
		
		Если ЭдОбъектType = "UniversalTransferDocument" Тогда
			ПараметрыФормы.Вставить("OrganizationName", 	ЭдОбъект.Organization.Name);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаПодписанияДокументаУПД", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыПодписанияДокумента");
		Иначе
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаПодписанияДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыПодписанияДокумента");
        КонецЕсли;

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтказатьВПодписи(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		1);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаОтказаВПодписи");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Согласовать(Команда)
		
		ФИОПодписанта=	?(НЕ Organization.Certificate = Неопределено,  Organization.Certificate.Name, "");
		
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		2);
		ПараметрыФормы.Вставить("AuthenticateType", 		Organization.AuthenticateType);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаСогласовать");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаСогласование(Команда)
		
		МассивПомеченныеСтроки= ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		Если МассивПомеченныеСтроки.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Нет документов, отмеченных для передачи на согласование", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		ИначеЕсли НЕ МассивПомеченныеСтроки.Количество() = ТаблицаДокументов.Количество() Тогда
			ТекстВопроса= 		"Были отмечены не все документы пакета. Передать на согласование только отмеченные?";
			ОписаниеОповещения= Новый ОписаниеОповещения("ОбработчикОповещенияВопросВыбраныНеВсеДокументыПакета", ЭтаФорма, "ПередатьНаСогласование");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы); 	
		Иначе
			МетодКлиента("Модуль_Клиент", "ОтправитьЭДОбъектНаСогласование", ЭтаФорма, Организация, , "ApprovementRequest", "ПередачаНаОбработку");
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаПодписание(Команда)
		
		МассивПомеченныеСтроки= ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		Если МассивПомеченныеСтроки.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Нет документов, отмеченных для передачи на подпись", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		ИначеЕсли НЕ МассивПомеченныеСтроки.Количество() = ТаблицаДокументов.Количество() Тогда
			ТекстВопроса= 		"Были отмечены не все документы пакета. Передать на подписание только отмеченные?";
			ОписаниеОповещения= Новый ОписаниеОповещения("ОбработчикОповещенияВопросВыбраныНеВсеДокументыПакета", ЭтаФорма, "ПередатьНаПодписание");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы); 	
		Иначе
			МетодКлиента("Модуль_Клиент", "ОтправитьЭДОбъектНаСогласование", ЭтаФорма, Организация, , "SignatureRequest", "ПередачаНаОбработку");
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтказатьВСогласовании(Команда)
		
		ФИОПодписанта=	?(НЕ Organization.Certificate = Неопределено,  Organization.Certificate.Name, "");
		
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		3);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаОтказатьВСогласовании");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура Удалить(Команда)
		
		Оповещение=	Новый ОписаниеОповещения("ОбработчикУдалитьДокумент", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите удалить документ?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, КодВозвратаДиалога.Нет);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтменитьСопоставление(Команда)
		
		Оповещение=	Новый ОписаниеОповещения("ОбработчикОтменитьСопоставление", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите отменить сопоставление с документом 1С?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, КодВозвратаДиалога.Нет);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтруктураПодчиненности(Команда)
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("Режим", "СтруктураПодчиненности");
		
		ФормаСвязейДокументов= МетодКлиента(,"ПолучитьФормуОбработки", "ФормаСвязейДокументов", ПараметрыФормы, ЭтаФорма, СокрЛП(ЭДОбъект.DocumentID) + "/" + СокрЛП(ЭДОбъект.OrganizationID));
		ФормаСвязейДокументов.ЭДОбъект=		ЭДОбъект;
		ФормаСвязейДокументов.Organization=	Organization;
		
		ОткрытьФорму(ФормаСвязейДокументов);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СоздатьДокумент1С(Команда)

		Если ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" ИЛИ ЭДОбъект.Type = "UniversalTransferDocument" 
			И МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", ЭДОбъект.Function) = МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФ") Тогда

			Если ЗначениеЗаполнено(ПодходящаяСФ) Тогда
				
				СозданныйДокумент=	ПодходящаяСФ;
				Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
					ОбработчикСозданиеДокумента(СозданныйДокумент);
				КонецЕсли;
			ИначеЕсли (ЭДОбъект.Type = "Invoice" ИЛИ ЭДОбъект.Type = "UniversalTransferDocument") И МассивСсылокРНК <> Неопределено И МассивСсылокРНК.Количество() > 0 Тогда
				МетодКлиента("Модуль_ЛогикаПоведениеФорм","СоздатьНовыйСчетФактуру", ЭтаФорма, Контрагент, Организация, ЭДОбъект, МассивСсылокРНК);
			Иначе
				СоздатьДокумент("ВводСВыборомОснований");
			КонецЕсли;

		ИначеЕсли ЭДОбъект.Type = "UniversalTransferDocument" И МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", ЭДОбъект.Function) = МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФДОП") Тогда
			
			СоздатьДокумент("ВводУПД");

		Иначе
			
			СоздатьДокумент("Ввод");
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СопоставитьДокумент1С(Команда)
		
		СоздатьДокумент("Сопоставление");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтправитьСвязанныйДокумент(Команда)

		Если ЗначениеЗаполнено(Контрагент)=Ложь тогда
			ПоказатьПредупреждение(, "С "+ЭДОбъект.Counteragent.Name+" не сопоставлено ни одной карточки контрагента в 1С", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		КонецЕсли;		
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("InitialDocumentID", ЭДОбъект.DocumentID);
		
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("ОписаниеКонтрагента", Новый структура("Контрагент, CounteragentName, CounteragentID",  Контрагент, ЭДОбъект.Counteragent.Name, ЭДОбъект.Counteragent.ID));
		
		Форма_Выгрузка = МетодКлиента(,"ОткрытьФормуОбработки", "Форма_Выгрузка", ПараметрыФормы, ЭтаФорма,,,, истина);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ЗапроситьАннулирование(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		5);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаЗапросАннулирования");

	КонецПроцедуры

	&НаКлиенте
	Процедура АннулироватьДокумент(Команда)
				
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		1);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументуБезКомментария", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаАннулироватьДокумент");

	КонецПроцедуры

	&НаКлиенте
	Процедура ОтказатьВАннулировании(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		6);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаОтказатьВАннулировании");

	КонецПроцедуры

	&НаКлиенте
	Процедура ЗапроситьУточнение(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		7);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаЗапроситьУточнение", Новый Структура("Organization", Organization));

	КонецПроцедуры

	&НаКлиенте
	Процедура Декорация4Нажатие(Элемент)
				
		ТекстИнформацииОНовомФормате= МетодКлиента("Модуль_Клиент","ТекстИнформацииОНовомФормате");
		ПараметрыФормы= Новый Структура("HTMLДокумент", ТекстИнформацииОНовомФормате);
		МетодКлиента(,"ОткрытьФормуОбработки","ФормаВыводаHTMLДокумента", ПараметрыФормы);
		
	КонецПроцедуры
	
	&НаКлиенте 
	Функция ПропатчитьInvoice(DocumentType)
		Если Лев( DocumentType, 7) = "Invoice" Тогда 
			Возврат  Лев( DocumentType, 7)
		Иначе	
			Возврат  DocumentType;
		КонецЕсли;	
	КонецФункции	
	
	&НаКлиенте
	Процедура Перевыставить(Команда)

		Если НЕ ЗначениеЗаполнено(Документ1С) Тогда
			
			ПоказатьПредупреждение(, "Для перевыставления следует создать документ в 1С.", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
			
		КонецЕсли;
		
		МассивДокументовПакета= Новый Массив;
		
		ЭлементМассива= Новый Структура("Вкл, DocumentType, Документ1С, НомерДокумента, ДатаДокумента, ТипДокумента, ДопСведения, CounteragentBoxID, DepartmentID, ВнешняяПечатнаяФорма, isTest, DocumentID, Проведен, IdСтроки, ЭтоТекущиеДанные");
		
		ЭлементМассива.Вставить("Вкл",					Ложь);
		ЭлементМассива.Вставить("DocumentType",			ПропатчитьInvoice(DocumentType));
		ЭлементМассива.Вставить("Документ1С", 			Документ1С);
		ЭлементМассива.Вставить("НомерДокумента", 		"");
		ЭлементМассива.Вставить("ДатаДокумента",		"");
		ЭлементМассива.Вставить("ТипДокумента", 		ТипДокумента);
		ЭлементМассива.Вставить("ДопСведения", 			ДопСведения);
		ЭлементМассива.Вставить("CounteragentBoxID", 	CounteragentBoxID);
		ЭлементМассива.Вставить("DepartmentID",			BoxID);
		ЭлементМассива.Вставить("isTest", 				ЭДОбъект.isTest);
		ЭлементМассива.Вставить("DocumentID", 			ЭДОбъект.documentID);
		ЭлементМассива.Вставить("Проведен",				Истина);
		ЭлементМассива.Вставить("IdСтроки",				"");
		ЭлементМассива.Вставить("ЭтоТекущиеДанные", 	Истина);
		ЭлементМассива.Вставить("ВнешняяПечатнаяФорма",	Неопределено);
		ЭлементМассива.Вставить("НомерЗаказа", 			"");
		ЭлементМассива.Вставить("ОшибкаВалидации",		"");
		ЭлементМассива.Вставить("ЭтоФайл",				Ложь);
		
		МассивДокументовПакета.Добавить(ЭлементМассива);
				
		ПараметрыФормы= Новый Структура;
		ПараметрыФормы.Вставить("BoxID",					BoxID);
		ПараметрыФормы.Вставить("МассивДокументовПакета",	МассивДокументовПакета);
		ПараметрыФормы.Вставить("ТочкаВызова",				"ПеревыставлениеДокумента");
		
		МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаДокумента", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПоказатьКнопкуПодписатьЗапрошенный(UserPermissions, UserID)
		
		Возврат
		
		ЭДОбъект <> Неопределено
		И UserPermissions.CanSignDocuments
		И ТочкаВызова = "ТаблицаДокументовВнутренних"
		
		И ((ЭДОбъект.ResolutionStatus = Неопределено И ЭДОбъект.Status = "OutboundWaitingForSenderSignature") // Возможно документ отправлен на подпись самому себе
			ИЛИ (ЭДОбъект.ResolutionStatus <> Неопределено
				 И (ЭДОбъект.ResolutionStatus.type = "Approved" 					  // Документ согласован можно подписывать
				 	ИЛИ (ЭДОбъект.ResolutionStatus.type = "SignatureRequested"        // Документ отправлен на подпись
						 И (ЭДОбъект.ResolutionStatus.TargetUser = Неопределено 	  // Документ отправлен на подпись любому пользователю из подразделения
							ИЛИ ЭДОбъект.ResolutionStatus.TargetUser.Id = UserID))))) // Документ отправлен на подпись текущему пользователю
		
	КонецФункции
		
	&НаКлиенте
	Функция ПоказатьКнопкуПеревыставить(UserPermissions)
		
		Возврат
		
		ЭДОбъект <> Неопределено
		И ЭДОбъект.Direction = "Outbound"
		И UserPermissions.CanSignIncomingDocuments
		И (ЭДОбъект.isTest ИЛИ ЭДОбъект.Organization.AuthenticateType = "Certificate")
		
		И (		DocumentType = "XmlTorg12"
			ИЛИ DocumentType = "XmlAcceptanceCertificate"
			ИЛИ DocumentType = "NonformalizedProforma"
			ИЛИ DocumentType = "UniversalTransferDocument"
			ИЛИ Лев(DocumentType, 7) = "Invoice")
		
	КонецФункции

	&НаКлиенте
	Функция ПоказатьКнопкуПодписатьИОтправить(UserPermissions)
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
			Если Операция = "СоздатьНовыйПакет" Тогда 
				Возврат Истина;
			ИначеЕсли Операция = "ДобавитьВВыделенныеПакеты" Тогда
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;	
		ИначеЕсли ТочкаВызова = "ПеревыставлениеДокумента" Тогда
			Если ЗначениеЗаполнено(DocumentID) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Возврат Ложь;			
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьСодержимоеПакета()
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
			
			Если Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ДобавитьВВыделенныеПакеты" Тогда
				Возврат Истина;
			Иначе
				Возврат ТаблицаДокументов.Количество()>1; 
			КонецЕсли;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;	
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппаДокументыПакетаКнопкиВыделения()
		
		Возврат ТочкаВызова = "ТаблицаДокументовНаОтправку";
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппаДокументыПакетаКнопкиРедактированияСостоваПакета()
		
		Возврат ТочкаВызова = "ТаблицаДокументовНаОтправку";
		
	КонецФункции
		
	&НаКлиенте
	Процедура ПодписатьИОтправить(Команда)
				
		ОшибкиОтправки= "";
		
		МассивНеЗаполненныхПолей= ЕстьНеЗаполненныеПоля_ПодписатьИОтправить();
		
		Если МассивНеЗаполненныхПолей.Количество() > 0 Тогда
			 	
			ТекстПредупреждения=  "Для отправки пакета необходимо заполнить";
			Если МассивНеЗаполненныхПолей.Количество() = 1 Тогда
				ТекстПредупреждения= ТекстПредупреждения + " поле:"
			Иначе
				ТекстПредупреждения= ТекстПредупреждения + " поля:"
			КонецЕсли;
			
			Счетчик= 0; 
			Для каждого НеЗаполненноеПоле из МассивНеЗаполненныхПолей Цикл
				Счетчик= Счетчик + 1;
				ТекстПредупреждения= ТекстПредупреждения + " " + НеЗаполненноеПоле + ?(НЕ Счетчик = МассивНеЗаполненныхПолей.Количество(), ",", "");
			КонецЦикла;
			
			ПоказатьПредупреждение(,ТекстПредупреждения, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			
			Возврат;
			
		КонецЕсли;
		
		Если Organization = Неопределено Тогда 
			Organization= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(BoxID);
		КонецЕсли;
				
		Counteragent= Organization.GetCounteragentById(CounteragentBoxID);
		ЭтоТестовый= ?(Organization.isTest ИЛИ Organization.isPilot ИЛИ Counteragent.isTest ИЛИ Counteragent.isPilot, Истина, Ложь);
		
		Если  НЕ ЭтоТестовый 
			И НЕ Organization.AuthenticateType = "Certificate" Тогда
			
			ПоказатьПредупреждение(,"Отправка юридически значимого документа возможна только по сертификату", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
			
		КонецЕсли;
				
		МассивПомеченныеСтроки= ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		Если МассивПомеченныеСтроки.Количество() = 0 Тогда
			ПоказатьПредупреждение(,"Нет документов, отмеченных для отправки", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		ИначеЕсли НЕ МассивПомеченныеСтроки.Количество() = ТаблицаДокументов.Количество() Тогда
			ТекстВопроса= 		"Были отмечены не все документы пакета. Продолжить отправку?";
			ОписаниеОповещения= Новый ОписаниеОповещения("ОбработчикОповещенияВопросВыбраныНеВсеДокументыПакета", ЭтаФорма, "ПодписатьИОтправить");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы); 	
		Иначе
			ОтправкаПрошлаУспешно= ВыполнитьОтправку();
			Если ОтправкаПрошлаУспешно Тогда
				МетодКлиента(, "ОповеститьФормы", "ДиадокЗакрытьФормуДокумента", DocumentID);
			Иначе
				ВывестиОшибкуОтправкиНаФорму();
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ЕстьНеЗаполненныеПоля_ПодписатьИОтправить()
		
		МассивНеЗаполненныхПолей= Новый Массив;
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" И Операция = "СоздатьНовыйПакет" Тогда
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				МассивНеЗаполненныхПолей.Добавить("Организация");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
				МассивНеЗаполненныхПолей.Добавить("Контрагент");
			КонецЕсли;
									
		КонецЕсли;
					
		Возврат МассивНеЗаполненныхПолей;
				
	КонецФункции
		
	&НаКлиенте
	Функция ВыполнитьОтправку(ПараметрыОтправкиНаСогласование = Неопределено)
								
		Попытка 
			
			ПараметрыPackageSendTask= ПараметрыPackageSendTask(ПараметрыОтправкиНаСогласование);
			
			Для Каждого СтруктураДокументВПакете ИЗ ПараметрыPackageSendTask.МассивДокументовПакета Цикл
				Если МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", СтруктураДокументВПакете.DocumentType) Тогда
					МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", Organization.Id);
					Прервать;
				КонецЕсли;
			КонецЦикла;
									
			СоответствиеCustomIdСсылке1С= 	Новый Соответствие;
			ЗаполненныйPackageSendTask= 	МетодКлиента("Модуль_Выгрузка", "ПолучитьЗаполненныйPackageSendTask", ПараметрыPackageSendTask, СоответствиеCustomIdСсылке1С);
						
			СоответствиеВПФСсылке= МетодКлиента("Модуль_Выгрузка", "PackageSendTask_В_Соответствие", ЗаполненныйPackageSendTask.PackageSendTask, СоответствиеCustomIdСсылке1С);
			МетодКлиента("Модуль_Выгрузка", "ПередОтправкойСервер", СоответствиеВПФСсылке, ЗаполненныйPackageSendTask.PackageSendTask.DocumentsToSend.Count, ЗаполненныйPackageSendTask.PackageSendTask.OperationId);
			
			УдалитьПеревыставляемыйDocumentДляКоллекции(ПараметрыPackageSendTask.МассивДокументовПакета);
			
			DocumentPackage= ЗаполненныйPackageSendTask.PackageSendTask.Send();
																													
		Исключение
			
			ТекстОшибки= ОписаниеОшибки();
			Если НЕ ЗаполненныйPackageSendTask = Неопределено Тогда
				МетодКлиента("Модуль_Выгрузка", "ПриОшибкеОтправкиСервер", ТекстОшибки, СоответствиеВПФСсылке, ЗаполненныйPackageSendTask.PackageSendTask.DocumentsToSend.Count);
			КонецЕсли;
			
			Для каждого ДокументПакета из ТаблицаДокументов Цикл
				ДокументПакета.Вкл= Ложь;
			КонецЦикла;
			
			ОшибкиОтправки= "<p>" + ТекстОшибки + "</p>";
			Возврат Ложь;
									
		КонецПопытки;
		
		ПослеОтправкиПакета(DocumentPackage, СоответствиеCustomIdСсылке1С, СоответствиеВПФСсылке, ПараметрыОтправкиНаСогласование);
		
		Возврат Истина;
				
	КонецФункции
	
	&НаКлиенте
	Функция ПараметрыPackageSendTask(ПараметрыОтправкиНаСогласование)
		
		ПараметрыPackageSendTask= Новый Структура();
		
		ПараметрыPackageSendTask.Вставить("Получатель", 						Контрагент);
		ПараметрыPackageSendTask.Вставить("ПараметрыОтправкиНаСогласование", 	ПараметрыОтправкиНаСогласование);
		ПараметрыPackageSendTask.Вставить("ФИОПодписанта",                    	МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", Organization));
		
		ПараметрыPackageSendTask.Вставить("IdОтправленого", 					"");
		ПараметрыPackageSendTask.Вставить("Организация", 						Организация);
		
		ПараметрыPackageSendTask.Вставить("Organization", 						Organization);
		ПараметрыPackageSendTask.Вставить("CounteragentID",						CounteragentBoxID);
		
		СтруктураПодразделения= Неопределено;
				
		МассивДокументовПакета= Новый Массив;
		Для каждого ДокументТаблицы из ТаблицаДокументов Цикл
			
			Если ДокументТаблицы.Вкл Тогда
				СтрокаМассива= Новый Структура();
				СтрокаМассива.Вставить("Документ", 						ДокументТаблицы.Документ1С);
				СтрокаМассива.Вставить("DocumentType", 					ДокументТаблицы.DocumentType);
				СтрокаМассива.Вставить("ТипДокумента", 					ДокументТаблицы.ТипДокумента);
				СтрокаМассива.Вставить("ДопПоле", 						ДокументТаблицы.ДопСведения);
				СтрокаМассива.Вставить("ВнешняяПечатнаяФорма", 			ДокументТаблицы.ВнешняяПечатнаяФорма);
				СтрокаМассива.Вставить("ВыгружатьExcel", 				Ложь);
				СтрокаМассива.Вставить("CustomDocumentId", 				"");
				СтрокаМассива.Вставить("DocumentId", 					ДокументТаблицы.DocumentId);
				СтрокаМассива.Вставить("СвязующийИдентификаторСтроки", 	ДокументТаблицы.IdСтроки);
				
				МассивДокументовПакета.Добавить(СтрокаМассива);
				
				Если СтруктураПодразделения = Неопределено И ЗначениеЗаполнено(ДокументТаблицы.Документ1С) Тогда
					СтруктураПодразделения= МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ПолучитьПодразделениеПолучателя", ДокументТаблицы.Документ1С, Контрагент);	
				КонецЕсли;
				
				СтрокаМассива.Вставить("ЭтоФайл", 		ДокументТаблицы.ЭтоФайл);
				СтрокаМассива.Вставить("ДанныеФайла", 	ДокументТаблицы.ДанныеФайла);
				СтрокаМассива.Вставить("СвойстваФайла",	ДокументТаблицы.СвойстваФайла);
								
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыPackageSendTask.Вставить("МассивДокументовПакета", 			МассивДокументовПакета);
		
		Если СтруктураПодразделения = Неопределено Тогда
			ПараметрыPackageSendTask.Вставить("ReceiverDepartmentId", "");	
		Иначе
			ПараметрыPackageSendTask.Вставить("ReceiverDepartmentId", СтруктураПодразделения.ToDepartmentID);	
		КонецЕсли;
		
		ПараметрыPackageSendTask.Вставить("ЭтоПеревыставление", ТочкаВызова = "ПеревыставлениеДокумента");
				
		Возврат ПараметрыPackageSendTask; 
		
	КонецФункции
	
	&НаКлиенте
	Процедура УдалитьПеревыставляемыйDocumentДляКоллекции(МассивДокументовПакета)
		
		Для каждого ДокументПакета из МассивДокументовПакета Цикл
			Если ЗначениеЗаполнено(ДокументПакета.DocumentId) Тогда
				Organization.GetDocumentById(ДокументПакета.DocumentId).Delete();
			КонецЕсли;
		КонецЦикла;
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПослеОтправкиПакета(DocumentPackage, СоответствиеCustomIdСсылке1С, СоответствиеВПФСсылке, ПараметрыОтправкиНаСогласование)
						
		ПометитьСтрокиТаблицыДокументовНаУдаление(DocumentPackage, СоответствиеCustomIdСсылке1С);
						
		МассивПараметры= МассивПараметровДляОбработкиПослеОтправкиПакета(DocumentPackage, СоответствиеCustomIdСсылке1С, Организация);
		
		МетодСервераБезКонтекста(, "УстановитьDocumentIDДляКоллекции", МассивПараметры);
		ОбнулитьПризнакУсловноОтправленныеВПФ(СоответствиеВПФСсылке);
		
		МетодКлиента("Модуль_Выгрузка", "ОтразитьИзмененияВКоллекцииДокументов1С", МассивПараметры);
		
		МетодКлиента("Модуль_Клиент", "ОтправитьНаОбработку", DocumentPackage, ПараметрыОтправкиНаСогласование);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПометитьСтрокиТаблицыДокументовНаУдаление(DocumentPackage, СоответствиеCustomIdСсылке1С)
		
		Для Ц=0 по DocumentPackage.Documents.Count - 1 Цикл
			
			Document= DocumentPackage.Documents.GetItem(Ц);
			Значение= СоответствиеCustomIdСсылке1С.Получить(Document.CustomDocumentId);
			
			Если НЕ Значение.IdСтрокиТаблицыДокументов = Неопределено Тогда
				
				НайденныеСтроки= ТаблицаДокументов.НайтиСтроки(Новый Структура("IdСтроки", Значение.IdСтрокиТаблицыДокументов));
				Если НайденныеСтроки.Количество()>0 Тогда
					УдалитьТабличныйДокументИзКэша(Значение.IdСтрокиТаблицыДокументов);
					НайденныеСтроки[0].Действие= "удалить";
					
					//убираем не отправленные ВПФ из пакета
					Если Document.Type = "XmlTorg12" или Document.Type = "XmlAcceptanceCertificate" Тогда
						
						Документ1С= НайденныеСтроки[0].Документ1С;
						НайденныеСтроки= ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ1С", Документ1С));
						
						Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
							Если НайденнаяСтрока.DocumentType = "Nonformalized" и ЗначениеЗаполнено(НайденнаяСтрока.ВнешняяПечатнаяФорма) Тогда
								УдалитьТабличныйДокументИзКэша(НайденнаяСтрока.IdСтроки);
								НайденнаяСтрока.Действие= "удалить";
							КонецЕсли;
						КонецЦикла;
												
					КонецЕсли;
					
				КонецЕсли;
								
			КонецЕсли;
						
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция МассивПараметровДляОбработкиПослеОтправкиПакета(DocumentPackage, СоответствиеCustomIdСсылке1С, Организация)
		
		МассивПараметры= Новый Массив;
		Для Ц=0 по DocumentPackage.Documents.Count - 1 Цикл
			
			Document= DocumentPackage.Documents.GetItem(Ц);
			Значение= СоответствиеCustomIdСсылке1С.Получить(Document.CustomDocumentId);
			
			ЭлементКоллекции= Новый Структура;
			ЭлементКоллекции.Вставить("Документ1С", 					Значение.ДокументСсылкаВ1С);
			ЭлементКоллекции.Вставить("DocumentId", 					Document.DocumentId);
			ЭлементКоллекции.Вставить("Организация", 					Организация);
			ЭлементКоллекции.Вставить("OrganizationId", 				Organization.Id);
			ЭлементКоллекции.Вставить("DocumentType", 					Document.Type);
			ЭлементКоллекции.Вставить("ИспользоватьИдентификаторСчета", Document.Type="NonformalizedProforma");
			ЭлементКоллекции.Вставить("ЭтоУПД_ТипаСЧФДОП", 				МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП", Document));
			
			МассивПараметры.Добавить(ЭлементКоллекции);
											
		КонецЦикла;
		
		Возврат МассивПараметры; 
		
	КонецФункции
	
	&НаСервере
	Процедура ОбнулитьПризнакУсловноОтправленныеВПФ(СоответствиеВПФСсылке)
		
		Для каждого ЭлементСоответствия из СоответствиеВПФСсылке Цикл
			ДокументСсылка= ЭлементСоответствия.Ключ;
			
			МассивДополнительныхВПФ= МетодСервера(, "МассивВПФИзСоответствиеВПФСсылке", ЭлементСоответствия);
					
			Если МассивДополнительныхВПФ.Количество()>0 Тогда
				МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами", "ОбнулитьПризнакУсловноОтправленныйДляПакета", ДокументСсылка, МассивДополнительныхВПФ, "В");		
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура ОбработчикОткрытияФормыОшибки(РезультатВыбора, ЗакрытьФорму) Экспорт
		
		Если ЗакрытьФорму = Истина Тогда
			Закрыть();
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
		
		Если ИмяСобытия = "ДиадокЗакрытьФормуДокумента" Тогда
			
			Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
				Закрыть(ТаблицаДокументов);
			Иначе
				Если ЭДОбъект <> Неопределено И Параметр = ЭДОбъект.DocumentID Тогда
					Закрыть();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодписатьЗапрошенный(Команда)
				
		ФИОПодписанта= 		МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", Organization);
		СтруктураSigner= 	МетодСервера(, "ПолучитьДанныеПодписиСогласующим", Организация);
		
		Если НЕ ЗначениеЗаполнено(СтруктураSigner.ДолжностьПодписанта) Тогда
			ПараметрыФормы= Новый Структура();
			ПараметрыФормы.Вставить("ФИО", ФИОПодписанта);
			
			ДополнительныеПараметры= Новый Структура;
			ДополнительныеПараметры.Вставить("Document", ЭДОбъект);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПодписиАкт", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройкиПодписи_ПодписаниеЗапрошенного", ДополнительныеПараметры);
		Иначе
			ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, ЭДОбъект);	
		КонецЕсли;
				
	КонецПроцедуры
	
	&НаКлиенте
	Функция ОбработчикОткрытиеФормыНастройкиПодписи_ПодписаниеЗапрошенного(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
			ФИОПодписанта= 		РезультатЗакрытия.ФИО; 
			СтруктураSigner= 	МетодСервера(, "ПолучитьДанныеПодписиСогласующим", Организация);
			ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, ДополнительныеПараметры.Document);
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, Document) 
		
		СтруктураРезультатОперации= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПодписатьИОтправить_ПодписаниеЗапрошенного", СтруктураSigner, Document);
				
		Если СтруктураРезультатОперации.ВыполненоУспешно Тогда
			
			Если ЛЕВ(Document.type, 7) = "Invoice" Тогда
			
				ДокументСсылка1С= МетодСервера(,"DocumentID_2_Документ", Document.documentId, Document.OrganizationId);
				Если ЗначениеЗаполнено(ДокументСсылка1С) Тогда
					
					ТекстОшибки= ВнестиИзмененияВДокумент(ДокументСсылка1С);
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						Сообщить("Не удалось изменить реквизиты документа Счет-фактура по причине: " + ТекстОшибки);	
					КонецЕсли;
					
				КонецЕсли;
							
			КонецЕсли;
			
			ОбновитьЭДОбъект();
			
		Иначе
			ТекстОшибкиПодписания= СтруктураРезультатОперации.ТекстОшибки;
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Заголовок", 		"Ошибка при подписании документа");
			ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось подписать документ");
			ПараметрыФормы.Вставить("Подробности", 		ТекстОшибкиПодписания+Символы.ПС+"BoxId: "+Document.OrganizationId+Символы.ПС+"DocumentId: "+Document.DocumentId);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервереБезКонтекста	
	Функция ВнестиИзмененияВДокумент(ДокументСсылка1С)
		
		ТекстОшибки= 		"";
		ВнесеныИзменения= 	Ложь;
		
		Попытка
			ДокументОбъект1С= ДокументСсылка1С.ПолучитьОбъект();
			
			Если НЕ ДокументОбъект1С.Метаданные().Реквизиты.Найти("КодСпособаВыставления") = Неопределено Тогда 
				Если НЕ ДокументОбъект1С.КодСпособаВыставления = 2 Тогда 
					ДокументОбъект1С.КодСпособаВыставления= 2;
					ВнесеныИзменения= Истина;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ДокументОбъект1С.Метаданные().Реквизиты.Найти("ДатаВыставления") = Неопределено Тогда 
				Если НЕ ДокументОбъект1С.ДатаВыставления = НачалоДня(ТекущаяДата()) Тогда
					ДокументОбъект1С.ДатаВыставления= НачалоДня(ТекущаяДата());
					ВнесеныИзменения= Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ВнесеныИзменения Тогда 
				Если ДокументОбъект1С.Проведен Тогда
					ДокументОбъект1С.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДокументОбъект1С.Записать();
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			ТекстОшибки= ОписаниеОшибки();
		КонецПопытки;
		
		Возврат ТекстОшибки;
		
	КонецФункции
			
	&НаКлиенте
	Процедура Скрыть_Показать_Список(Команда)
		
		Если Элементы.ГруппаСодержимоеПакета.Видимость = Истина Тогда
			Элементы.КнопкаСкрытьПоказатьСоставПакета.Заголовок= ">>";
			УстановитьПодсказкуКомандыНаСервере("Скрыть_Показать_Список", "Показать список документов пакета");
			
			Элементы.ГруппаСодержимоеПакета.Видимость= 		Ложь;
			Элементы.ГруппаКнопкиКоманднойПанелиТаблицыДокументов.Видимость= Ложь;
		Иначе
			Элементы.КнопкаСкрытьПоказатьСоставПакета.Заголовок= "<<";
			УстановитьПодсказкуКомандыНаСервере("Скрыть_Показать_Список", "Скрыть список документов пакета");
			
			Элементы.ГруппаСодержимоеПакета.Видимость= 		Истина;
			Элементы.ГруппаКнопкиКоманднойПанелиТаблицыДокументов.Видимость= Истина;
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура УстановитьПодсказкуКомандыНаСервере(ИмяКоманды, ТекстПодсказки)
		
		НашаКоманда= Команды.Найти(ИмяКоманды);
		НашаКоманда.Подсказка= ТекстПодсказки;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ТаблицаДокументовПакетаПриАктивизацииСтроки(Элемент)
				
		//перезаполняем реквизиты формы и кэшируем результат визуализации
		ТекущиеДанные= 	Элемент.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			УправлениеДоступностьюКнопкиРедактированияСоставаПакета(Ложь);
			Возврат;
		КонецЕсли;
				
		Если НЕ IDТекущейСтроки = ТекущиеДанные.IdСтроки Тогда
		    			
			Если ТекущиеДанные.ЭтоФайл Тогда
							
				Элементы.Ошибки.Видимость= ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибкиВалидации);
				Элементы.ГруппаВизуализацияДокумента.ТекущаяСтраница= Элементы.СтраницаБезВизуализации;
								
				IDТекущейСтроки= ТекущиеДанные.IdСтроки;
				
				Если НЕ ТекущиеДанные.DocumentType = DocumentType Тогда
					DocumentType= 	ТекущиеДанные.DocumentType;
					Документ1С=		ТекущиеДанные.Документ1С;
					ТипДокумента=	ТекущиеДанные.ТипДокумента;
					ДопСведения=	ТекущиеДанные.ДопСведения;
					ВнешняяПечатнаяФорма= Неопределено;
				КонецЕсли;
				
				ДанныеФайлаНаФорму(ТекущиеДанные);
				
				УстановитьВидимостьПоТипуДокумента();
				
				НастроитьЗаголовок();
				
				Если ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибкиВалидации) Тогда
					Ошибки= ТекущиеДанные.ТекстОшибкиВалидации;
				Иначе
					Ошибки= "";
				КонецЕсли;
												
			Иначе
				
				Элементы.ГруппаВизуализацияДокумента.ТекущаяСтраница= Элементы.СтраницаТабличноеПоле;
												
				DocumentType=	ТекущиеДанные.DocumentType;
				Документ1С=		ТекущиеДанные.Документ1С;
				ТипДокумента=	ТекущиеДанные.ТипДокумента;
				ДопСведения=	ТекущиеДанные.ДопСведения;
				ВнешняяПечатнаяФорма= ТекущиеДанные.ВнешняяПечатнаяФорма;
						
				IDТекущейСтроки= ТекущиеДанные.IdСтроки;
				
				Если КэшТабличныеДокументы = Неопределено Тогда
					ТабДокументЗакэширован= Ложь;
				Иначе
					ТабДокументЗакэширован= (НЕ КэшТабличныеДокументы.Получить(IDТекущейСтроки) = Неопределено);
				КонецЕсли;
				
				Ошибки= "";
				
				//При наличии ошибки, сознательно повторяем валидацию и построение табличного документа
				Если НЕ ТабДокументЗакэширован
					ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибкиВалидации) Тогда
					
					Состояние("Формирую печатную форму для документа: " + ТекущиеДанные.Представление);
					ВизуализацияПечатнойФормыПоСтруктуре();
				Иначе
					ТабПоле= КэшТабличныеДокументы.Получить(IDТекущейСтроки);
					
					ТекстПолнойОшибки= ТекстПолнойОшибки();
					Ошибки= ТекстПолнойОшибки; 
				КонецЕсли;
				
				Элементы.Ошибки.Видимость= ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибкиВалидации) ИЛИ ЗначениеЗаполнено(ОшибкиОтправки);
							
				НастроитьЗаголовок();
				
			КонецЕсли;
												
		КонецЕсли;
		
		УправлениеДоступностьюКнопкиРедактированияСоставаПакета(ТекущиеДанные.ЭтоФайл);
								
	КонецПроцедуры

	&НаКлиенте
	Процедура ВыделитьВсеДокументыПакета(Команда)
		
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументов Цикл
						
			Если ЗначениеЗаполнено(СтрокаТаблицыДокументов.ВнешняяПечатнаяФорма) Тогда
							
				НаборСтрок= ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ1С", СтрокаТаблицыДокументов.Документ1С));
				
				Для каждого Строка из НаборСтрок Цикл
														
					Если ЗначениеЗаполнено(Строка.ТекстОшибкиВалидации) Тогда
						Строка.Вкл= 				 Ложь;
						СтрокаТаблицыДокументов.Вкл= Ложь;
					ИначеЕсли МетодКлиента("Модуль_Клиент", "НеобходимоОграничениеНаОтправку", СтрокаТаблицыДокументов.Документ1С, СтрокаТаблицыДокументов.ВнешняяПечатнаяФорма, СтрокаТаблицыДокументов.Проведен) Тогда
						Строка.Вкл= 				 Ложь;
						СтрокаТаблицыДокументов.Вкл= Ложь;
					Иначе
						Строка.Вкл= ?(ЗначениеЗаполнено(Строка.DocumentID) = Истина, Строка.Вкл, Истина);	
					КонецЕсли;
										
				КонецЦикла;
				
			Иначе
				
				Если МетодКлиента("Модуль_Клиент", "НеобходимоОграничениеНаОтправку", СтрокаТаблицыДокументов.Документ1С, СтрокаТаблицыДокументов.ВнешняяПечатнаяФорма, СтрокаТаблицыДокументов.Проведен) Тогда 
					СтрокаТаблицыДокументов.Вкл= Ложь;
				Иначе
					СтрокаТаблицыДокументов.Вкл= ?(ЗначениеЗаполнено(СтрокаТаблицыДокументов.ТекстОшибкиВалидации), Ложь, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура СнятьВыделениеСДокументовПакета(Команда)
		
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументов Цикл
			СтрокаТаблицыДокументов.Вкл= Ложь;
		КонецЦикла;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ТаблицаДокументовПакетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		Отказ= Истина;
	КонецПроцедуры

	&НаКлиенте
	Процедура ТаблицаДокументовПакетаПередУдалением(Элемент, Отказ)
		Отказ= Истина;
	КонецПроцедуры

	&НаКлиенте
	Процедура ТаблицаДокументовПакетаВклПриИзменении(Элемент)
		
		ТекущаяСтрока= 	Элементы.ТаблицаДокументовПакета.ТекущиеДанные;
		Документ= 		ТекущаяСтрока.Документ1С;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.DocumentID) = Ложь Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ТекстОшибкиВалидации) И ТекущаяСтрока.Вкл = Истина Тогда
				ТекущаяСтрока.Вкл= Ложь;
				ТекстПредупреждения= "При проверке документа: """ +  ТекущаяСтрока.Представление + """ обнаружены ошибки. После исправления ошибок, документ будет доступен для отправки.";
				ПоказатьПредупреждение(, ТекстПредупреждения, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				Возврат;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ВнешняяПечатнаяФорма) = Истина И ТекущаяСтрока.Вкл = Истина Тогда
							
				НаборСтрок= ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ1С", Документ));
				
				Для каждого Строка из НаборСтрок Цикл
					
					Если ЗначениеЗаполнено(Строка.ТекстОшибкиВалидации) Тогда
						
						Строка.Вкл= 		Ложь;
						ТекущаяСтрока.Вкл= 	Ложь;
																		
						ТекстПредупреждения= "При проверке документа основания: """ + Строка.Представление + """ обнаружены ошибки. "
											 "После исправления ошибок, внешняя печатная форма и документ основание будут доступны для отправки.";
						ПоказатьПредупреждение(, ТекстПредупреждения, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
						
						Возврат;
					
					ИначеЕсли МетодКлиента("Модуль_Клиент", "НеобходимоОграничениеНаОтправку", Документ, ТекущаяСтрока.ВнешняяПечатнаяФорма, ТекущаяСтрока.Проведен) Тогда
						
						Строка.Вкл= 		Ложь;
						ТекущаяСтрока.Вкл= 	Ложь;
						
						ТекстПредупреждения= "Документ основание: """ + Строка.Представление + """ валютный и не проведен." + Символы.ПС +
											 "Для отправки валютного документа, необходимо выполнить его проведение.";
						
						ПоказатьПредупреждение(, ТекстПредупреждения, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
						
						Возврат;
					Иначе
						Строка.Вкл= ?(ЗначениеЗаполнено(Строка.DocumentID) = Истина, Строка.Вкл, Истина);	
					КонецЕсли;
										
				КонецЦикла;
										
			ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВнешняяПечатнаяФорма) = Ложь И ТекущаяСтрока.Вкл = Ложь Тогда
									
				НаборСтрок= ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ1С", Документ));
									
				Для каждого Строка из НаборСтрок Цикл
					Если ЗначениеЗаполнено(Строка.ВнешняяПечатнаяФорма) = Истина Тогда
						Строка.Вкл= Ложь;
					КонецЕсли;
				КонецЦикла;
								
			КонецЕсли;
					
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьФайлыВПакет(Команда)
		
		Каталог= ?(КаталогВыбораФайлов = "", "C:\", КаталогВыбораФайлов);
		
		ДиалогВыбора= МетодКлиента("Модуль_Клиент", "ЗаполненныйДиалогВыбораФайла", Истина, Каталог);
		
		ДополнительныеПараметры= Новый Структура("ДиалогВыбораФайла", ДиалогВыбора);
		ДиалогВыбора.Показать(Новый ОписаниеОповещения("ВыполнитьДействиеПослеВыбораФайла", ЭтотОбъект, ДополнительныеПараметры));
			
	КонецПроцедуры
			
	&НаКлиенте
	Процедура ЗаменитьФайлВПакете(Команда)
		
		Каталог= ?(КаталогВыбораФайлов = "", "C:\", КаталогВыбораФайлов);
		
		ДиалогВыбора= МетодКлиента("Модуль_Клиент", "ЗаполненныйДиалогВыбораФайла", Ложь, Каталог);
		
		ДополнительныеПараметры= Новый Структура("ДиалогВыбораФайла", ДиалогВыбора);
		ДиалогВыбора.Показать(Новый ОписаниеОповещения("ВыполнитьДействиеПослеРедактированияВыбранногоФайла", ЭтотОбъект, ДополнительныеПараметры));
				
	КонецПроцедуры
		
	&НаКлиенте
	Процедура УдалитьФайлВПакете(Команда)
		
		ТекстВопроса= "Вы действительно хотите удалить файл из пакета?";
		ДополнительныеПараметры= Новый Структура("ИдентификаторТекущейСтроки", Элементы.ТаблицаДокументовПакета.ТекущаяСтрока);
		
		ОписаниеОповещения= Новый ОписаниеОповещения("ОбработчикОповещенияВопросУдалитьФайлИзПакета", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы); 
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьВВыделенныеПакеты(Команда)
		
		ОтмеченныеФайлы= ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		Если ОтмеченныеФайлы.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Укажите флажками документы, которые необходимо добавить в выделенные ранее пакеты", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		ИначеЕсли НЕ ОтмеченныеФайлы.Количество() = ТаблицаДокументов.Количество() Тогда
			ТекстВопроса= 		"Были отмечены не все файлы в списке. Продолжить операцию?";
			ОписаниеОповещения= Новый ОписаниеОповещения("ОбработчикОповещенияВопросВыбраныНеВсеФайлы", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);	
		Иначе
			ПередатьФайлыДляДобавленияВПакеты(Истина);
		КонецЕсли;
		
	КонецПроцедуры
	
	
//} КОМАНДЫ
////////////////////////////////////////////////////////////////////////////////

//{ РЕДАКТИРОВАНИЕ ПАКЕТА
////////////////////////////////////////////////////////////////////////////////

	&НаКлиенте
	Процедура УстановитьВидимостьПоТипуДокумента()
		
		Элементы.ГруппаNonformalized.Видимость= (	DocumentType = "Nonformalized" ИЛИ DocumentType = "PriceListAgreement" ИЛИ DocumentType = "CertificateRegistry" 
												ИЛИ DocumentType = "ServiceDetails" ИЛИ DocumentType = "ReconciliationAct");
		
		Элементы.Неформализованный_ЗапроситьПодписьКонтрагента.Видимость= (DocumentType = "Nonformalized" ИЛИ DocumentType = "PriceListAgreement" ИЛИ DocumentType = "CertificateRegistry");
		
		Элементы.ГруппаNonformalizedProforma.Видимость= 	(DocumentType = "NonformalizedProforma");
		Элементы.Группа_PriceList.Видимость= 				(DocumentType = "PriceList");
		Элементы.Группа_AcceptanceCertificate.Видимость= 	(DocumentType = "AcceptanceCertificate");
		Элементы.Группа_Contract.Видимость= 				(DocumentType = "Contract");
			
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОчиститьРеквизитыФормы(ОбрабатываемыйТип)
		
		Если ОбрабатываемыйТип = "AcceptanceCertificate" Тогда
				
			ЗапроситьПодписьКонтрагента= Ложь;
			
			ДокументНомер= 		"";
			ДокументДата= 		'00010101';
			ДокументСуммаСНДС= 	0;
			ДокументСуммаНДС= 	0;
			ДокументОснования= 	"";
			ДокументБезНДС= 	Ложь;
			Комментарий=		"";		
			
		ИначеЕсли ОбрабатываемыйТип = "Contract" Тогда
			
			Договор_Тип=	"";
			ДокументНомер= 	"";
			ДокументДата= 	'00010101';
			ДокументЦена=	0;
			Комментарий= 	"";
			Договор_ЦенаНеУказана= Ложь;
			
		ИначеЕсли ОбрабатываемыйТип = "NonformalizedProforma" Тогда
			
			ДокументНомер= 		"";
			ДокументДата= 		'00010101';
			ДокументСуммаСНДС= 	0;
			ДокументСуммаНДС= 	0;
			ДокументОснования= 	"";
			ДокументБезНДС= 	Ложь;
			Комментарий= 		"";
			
		ИначеЕсли ОбрабатываемыйТип = "PriceList" Тогда
			
			ДокументНомер= 				"";
			ДокументДата= 				'00010101';
			ЦеновойЛист_ВступаетВСилу= 	'00010101';
			ДокументНомерДоговора=		"";
			ДокументДатаДоговора=		"";
			Комментарий= 				"";		
			
		ИначеЕсли ОбрабатываемыйТип = "Nonformalized" ИЛИ ОбрабатываемыйТип = "PriceListAgreement" ИЛИ DocumentType = "CertificateRegistry" Тогда
			
			ЗапроситьПодписьКонтрагента= Ложь;
			ДокументНомер= 	"";
			ДокументДата= 	'00010101';
			Комментарий= 	""; 
			
		ИначеЕсли DocumentType = "ServiceDetails" ИЛИ DocumentType = "ReconciliationAct" Тогда 	
			
			ДокументНомер= 	"";
			ДокументДата= 	'00010101';
			Комментарий= 	"";
			
		Иначе
			
			Сообщить("Кэширование данного типа еще не реализовано");
			
		КонецЕсли;	
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ИзменитьПредставлениеДокументаВТаблице()
		
		ТекущиеДанные= Элементы.ТаблицаДокументовПакета.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
				
		Если 	DocumentType = "Nonformalized" ИЛИ DocumentType = "PriceListAgreement" ИЛИ DocumentType = "CertificateRegistry" 
			ИЛИ DocumentType = "ServiceDetails" ИЛИ DocumentType = "ReconciliationAct" ИЛИ DocumentType = "NonformalizedProforma"
			ИЛИ DocumentType = "AcceptanceCertificate" ИЛИ DocumentType = "Contract" Тогда
			
			Наименование= "";
			Если DocumentType = "Nonformalized" Тогда
				Наименование= "Неформализованный";
			ИначеЕсли DocumentType = "PriceListAgreement" Тогда
				Наименование= "Протокол согласования цены";
			ИначеЕсли DocumentType = "CertificateRegistry" Тогда
				Наименование= "Реестр сертификатов";
			ИначеЕсли DocumentType = "ServiceDetails" Тогда
				Наименование= "Детализация";
			ИначеЕсли DocumentType = "ReconciliationAct" Тогда
				Наименование= "Акт сверки";
			ИначеЕсли DocumentType = "NonformalizedProforma" Тогда
				Наименование= "Счет на оплату";
			ИначеЕсли DocumentType = "AcceptanceCertificate" Тогда
				Наименование= "Акт вып. работ";
			ИначеЕсли DocumentType = "Contract" Тогда
				Наименование= "Договор";
			КонецЕсли;
							
			Представление= Наименование;
			
			Если ЗначениеЗаполнено(ДокументНомер) Тогда
				Представление= Представление + 	" № " + ДокументНомер;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументДата) Тогда
				Представление= Представление +  " от " + Формат(ДокументДата, "ДЛФ=Д");	
			КонецЕсли;
			
			ТекущиеДанные.Представление= Представление; 
			
		КонецЕсли;	
			
	КонецПроцедуры
	
	&НаКлиенте
	Функция РазмерДобавляемогоФайла(РазмерВБайтах)
		
		Если РазмерВБайтах > 1024 Тогда
			РазмерВКилоБайтах= РазмерВБайтах/1024;
			Если РазмерВКилоБайтах > 1024 Тогда
				РазмерВМегаБайтах= РазмерВКилоБайтах/1024;
				РазмерНаФорму= Формат(РазмерВМегаБайтах, "ЧЦ=4; ЧДЦ=1") + " МБ"; 
			Иначе
				РазмерНаФорму= Формат(РазмерВКилоБайтах, "ЧЦ=4; ЧДЦ=1") + " КБ";
			КонецЕсли;
		Иначе
			РазмерНаФорму= Формат(РазмерВБайтах, "ЧЦ=4; ЧДЦ=1") + " Б";	
		КонецЕсли;
		
		Возврат РазмерНаФорму;
		
	КонецФункции
				
	&НаКлиенте
	Процедура ПередатьФайлыДляДобавленияВПакеты(ПередатьВсе= Ложь)
		
		ПараметрЗакрытия= Новый Структура;
						
		КоллекцияФайлов= Новый Массив;
				
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументов Цикл
			
			Если НЕ ПередатьВсе И НЕ СтрокаТаблицыДокументов.Вкл Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементКоллекции= Новый Структура("IdСтроки, СвойстваФайла, ДанныеФайла, DocumentType");
			
			ЭлементКоллекции.Вставить("IdСтроки", 		СтрокаТаблицыДокументов.IdСтроки);
			ЭлементКоллекции.Вставить("СвойстваФайла", 	СтрокаТаблицыДокументов.СвойстваФайла);
			ЭлементКоллекции.Вставить("ДанныеФайла", 	СтрокаТаблицыДокументов.ДанныеФайла);
			ЭлементКоллекции.Вставить("DocumentType", 	СтрокаТаблицыДокументов.DocumentType);
			
			КоллекцияФайлов.Добавить(ЭлементКоллекции);
			
		КонецЦикла;
		
		ПараметрЗакрытия.Вставить("МассивНеформализованныхДокументов", КоллекцияФайлов);
				
		Закрыть(ПараметрЗакрытия);
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	//{ ЗАГОТОВКИ

		&НаКлиенте
		Функция Новый_NonformalizedDocumentToSend(NeedRecipientSignature= Ложь)
			
			Возврат Новый Структура("NeedRecipientSignature, DocumentNumber, DocumentDate, Comment", NeedRecipientSignature);
			
		КонецФункции
	
		&НаКлиенте
		Функция Новый_ServiceDetails()
			
			Возврат Новый Структура("DocumentNumber, DocumentDate, Comment");
			
		КонецФункции
	
		&НаКлиенте
		Функция Новый_NonformalizedProforma()
		
			Возврат Новый Структура("БезНДС, DocumentNumber, DocumentDate, Total, Vat, Grounds, Comment", Ложь);
			
		КонецФункции
	
		&НаКлиенте
		Функция Новый_PriceList()
			Возврат Новый Структура();
		КонецФункции
	
		&НаКлиенте
		Функция Новый_AcceptanceCertificate()
			
			Возврат Новый Структура("БезНДС, NeedRecipientSignature, DocumentNumber, DocumentDate, Total, Vat, Grounds, Comment", Ложь, Истина);	
			
		КонецФункции
	
		&НаКлиенте
		Функция Новый_Contract()
			
			Возврат Новый Структура("ЦенаНеУказана, DocumentNumber, DocumentDate, ContractType, ContractPrice, Comment", Ложь);		
			
		КонецФункции
		
		&НаКлиентеНаСервереБезКонтекста
		Функция Новый_СвойстваФайла()
			
			Возврат Новый Структура("Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение, РазмерВБайтах");
			
		КонецФункции
	    
	////////////////////////////////////////////////////////////////////////////////
	//} ЗАГОТОВКИ
	
	////////////////////////////////////////////////////////////////////////////////
	//{ ОБРАБОТЧИКИ СОБЫТИЙ
	
		&НаКлиенте
		Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
			
			Элемент.СписокВыбора.Очистить();
			Элемент.СписокВыбора.ЗагрузитьЗначения(Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком);
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ОрганизацияПриИзменении(Элемент)
			
			BoxID= МетодСервера(, "Организация_2_BoxID", Организация);
			
			Если ЗначениеЗаполнено(BoxID) Тогда
				Organization= 		Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(BoxID);
				UserPermissions= 	Organization.GetUserPermissions();
			Иначе
				Organization= 		Неопределено;
				UserPermissions= 	Неопределено;
			КонецЕсли;
								
			Если ЗначениеЗаполнено(Контрагент)
				 И UserPermissions <> Неопределено
				 И (	ПоказатьКнопкуПередачиНаСогласование(UserPermissions) 
					ИЛИ ПоказатьКнопкуПередачиНаПодпись(UserPermissions)) Тогда
					
				Элементы.ГруппаПередачаНаСогласование.Видимость=  	Истина;
				Элементы.ГруппаПередачаНаСогласование.Доступность=  Истина;
			Иначе
				// только для операции "СоздатьНовыйПакет"
				Элементы.ГруппаПередачаНаСогласование.Видимость=  	Истина;
				Элементы.ГруппаПередачаНаСогласование.Доступность=  Ложь;
			КонецЕсли;
								
		КонецПроцедуры
		
		&НаКлиенте
		Процедура КонтрагентПриИзменении(Элемент)
			
			CounteragentBoxID= МетодСервера(, "Контрагент_2_CounteragentBoxID", Контрагент);
			
			Если Organization = Неопределено ИЛИ НЕ ЗначениеЗаполнено(CounteragentBoxID) Тогда
				// только для операции "СоздатьНовыйПакет"
				Элементы.ГруппаПередачаНаСогласование.Видимость=  	Истина;
				Элементы.ГруппаПередачаНаСогласование.Доступность=  Ложь;	
			Иначе
				Если UserPermissions = Неопределено Тогда
					UserPermissions= Organization.GetUserPermissions();	
				КонецЕсли;
				Если ПоказатьКнопкуПередачиНаСогласование(UserPermissions) ИЛИ ПоказатьКнопкуПередачиНаПодпись(UserPermissions) Тогда
					Элементы.ГруппаПередачаНаСогласование.Видимость=  	Истина;
					Элементы.ГруппаПередачаНаСогласование.Доступность=  Истина;	
				Иначе
					Элементы.ГруппаПередачаНаСогласование.Видимость=  	Истина;
					Элементы.ГруппаПередачаНаСогласование.Доступность=  Ложь;	
				КонецЕсли;
			КонецЕсли;
								
		КонецПроцедуры
	
		&НаКлиенте
		Процедура БезВизуализации_FileNameНажатие(Элемент)
			
			Если НЕ Элементы.ТаблицаДокументовПакета.ТекущиеДанные = Неопределено Тогда
				
				СтруктураСвойстваФайла= Элементы.ТаблицаДокументовПакета.ТекущиеДанные.СвойстваФайла;
				ЗапуститьПриложение(СтруктураСвойстваФайла.ПолноеИмя);
				
			КонецЕсли;
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура ТипДокументаПриИзменении(Элемент)
			
			ТекущиеДанные= Элементы.ТаблицаДокументовПакета.ТекущиеДанные;
			
			Если ТекущиеДанные = Неопределено Тогда
				DocumentType= ТипДокумента;
				УстановитьВидимостьПоТипуДокумента();
				Возврат;
			КонецЕсли;
						
			Если НЕ ТекущиеДанные.DocumentType = ТипДокумента Тогда
				
				ОчиститьРеквизитыФормы(ТекущиеДанные.DocumentType);
				
				Элементы.ТаблицаДокументовПакета.ТекущиеДанные.DocumentType= ТипДокумента;
				DocumentType= ТипДокумента;
				
				ПустуюЗаготовкуВДанныеФайла(ТекущиеДанные);
				
				УстановитьВидимостьПоТипуДокумента();
				
				ДанныеФайлаНаФорму(ТекущиеДанные);
				
				ИзменитьПредставлениеДокументаВТаблице();
				
				СообщитьОЗаполненииОбязательныхПолей(ТекущиеДанные,DocumentType);
								
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура СообщитьОЗаполненииОбязательныхПолей(ТекущиеДанные, DocumentType)
			
			ДанныеФайла= ТекущиеДанные.ДанныеФайла;
			
			СписокОшибок= "";
			
			Если DocumentType = "AcceptanceCertificate" ИЛИ DocumentType = "ReconciliationAct" ИЛИ DocumentType = "NonformalizedProforma" ИЛИ DocumentType = "Contract" Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеФайла.DocumentNumber) Тогда
					СписокОшибок= СписокОшибок + "<p> - Номер документа</p>";
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеФайла.DocumentDate) Тогда
					СписокОшибок= СписокОшибок + "<p> - Дата документа</p>";
				КонецЕсли;
				
			КонецЕсли;
			
			Если DocumentType = "Contract" И НЕ ДанныеФайла.ЦенаНеУказана Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеФайла.ContractPrice) Тогда
					СписокОшибок= СписокОшибок + "<p> - Цена</p>";
				КонецЕсли;
															
			КонецЕсли;
									
			Если ЗначениеЗаполнено(СписокОшибок) Тогда
				ОшибкиОтправки= МетодСервера(, "ОформитьОшибкиВHTML", СписокОшибок, "Необходимо заполнить поля:");	
				ТекущиеДанные.ТекстОшибкиВалидации= ОшибкиОтправки;
				Ошибки= ОшибкиОтправки;
			Иначе
				ТекущиеДанные.ТекстОшибкиВалидации= "";
				Ошибки= "";
			КонецЕсли;
						
			Элементы.Ошибки.Видимость= ЗначениеЗаполнено(СписокОшибок);
			
		КонецПроцедуры
		//-
	
		// Nonfomalized
	
		&НаКлиенте
		Процедура Неформализованный_ЗапроситьПодписьКонтрагентаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("NeedRecipientSignature", ЗапроситьПодписьКонтрагента);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Неформализованный_НомерПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentNumber", ДокументНомер);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументовПакета.ТекущиеДанные, DocumentType);
										
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Неформализованный_ДатаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentDate", ДокументДата);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументовПакета.ТекущиеДанные, DocumentType);
										
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Неформализованный_КомментарийПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Comment", СокрЛП(Элемент.ТекстРедактирования));
			
		КонецПроцедуры
	
		//Nonfomalized Proforma
	
		&НаКлиенте
		Процедура Счет_НомерПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentNumber", ДокументНомер);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументовПакета.ТекущиеДанные, DocumentType);
								
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Счет_ДатаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentDate", ДокументДата);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументовПакета.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Счет_СуммаСНДСПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Total", ДокументСуммаСНДС);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Счет_СуммаНДСПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Vat", ДокументСуммаНДС);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Счет_БезНДСПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("БезНДС", ДокументБезНДС);
			
			Если ДокументБезНДС Тогда
				ДокументСуммаНДС= 0;
			КонецЕсли;
			
			Элементы.Счет_СуммаНДС.Доступность= НЕ ДокументБезНДС;
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Счет_ОснованиеПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Grounds", ДокументОснования);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Счет_КомментарийПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Comment", Комментарий);
			
		КонецПроцедуры
	
		//Acceptance Certificate
	
		&НаКлиенте
		Процедура АктВыпРабот_ЗапроситьПодписьКонтрагентаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("NeedRecipientSignature", ЗапроситьПодписьКонтрагента);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура АктВыпРабот_НомерПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentNumber", ДокументНомер);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументовПакета.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура АктВыпРабот_ДатаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentDate", ДокументДата);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументовПакета.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура АктВыпРабот_СуммаСНДСПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Total", ДокументСуммаСНДС);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура АктВыпРабот_СуммаНДСПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Vat", ДокументСуммаНДС);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура ДокументБезНДСПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("БезНДС", ДокументБезНДС);
			
			Если ДокументБезНДС Тогда
				ДокументСуммаНДС= 0;
			КонецЕсли;
			
			Элементы.АктВыпРабот_СуммаНДС.Доступность= НЕ ДокументБезНДС;
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура АктВыпРабот_ОснованиеПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Grounds", ДокументОснования);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура АктВыпРабот_КомментарийПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Comment", Комментарий);	
			
		КонецПроцедуры
	
		//Contract
	
		&НаКлиенте
		Процедура Договор_ТипПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("ContractType", Договор_Тип);	
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Договор_НомерПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentNumber", ДокументНомер);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументовПакета.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Договор_ДатаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentDate", ДокументДата);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументовПакета.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Договор_ЦенаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("ContractPrice", ДокументЦена);
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументовПакета.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Договор_КомментарийПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Comment", Комментарий);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Договор_ЦенаНеУказанаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("ЦенаНеУказана", Договор_ЦенаНеУказана);
			
			Если Договор_ЦенаНеУказана Тогда
				ДокументЦена= 0;
			КонецЕсли;
			
			Элементы.Договор_Цена.Доступность= НЕ Договор_ЦенаНеУказана;
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументовПакета.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры

	
	////////////////////////////////////////////////////////////////////////////////
	//} ОБРАБОТЧИКИ СОБЫТИЙ
	
	////////////////////////////////////////////////////////////////////////////////
	//{ ОБРАБОТЧИКИ ОПОВЕЩЕНИЙ

		&НаКлиенте
		Процедура ВыполнитьДействиеПослеВыбораФайла(МассивАдресовФайлов, ДополнительныеПараметры) Экспорт
			
			Если МассивАдресовФайлов = Неопределено Тогда
				Возврат;	
			Иначе
				
				МассивБольшиеФайлы= Новый Массив;
				МетодКлиента("Модуль_Клиент", "ПроверитьРазмерВыбранныхФайлов", МассивАдресовФайлов, МассивБольшиеФайлы);
				
				Если МассивБольшиеФайлы.Количество() > 0 Тогда
					МетодКлиента("Модуль_Клиент", "ОбработатьМассивБольшихФайлов", МассивБольшиеФайлы, ЭтаФорма);
					МассивБольшиеФайлы= Неопределено;
				КонецЕсли;
												
				КаталогВыбораФайлов= ДополнительныеПараметры.ДиалогВыбораФайла.Каталог;
								
				Для каждого ВыбранныйФайл из МассивАдресовФайлов Цикл
										
					ФайлДанных= Новый Файл(ВыбранныйФайл);
					
					НоваяСтрока= ТаблицаДокументов.Добавить();
					
					НоваяСтрока.Вкл= 			Истина;
					НоваяСтрока.Представление=	"Неформализованный";
					НоваяСтрока.DocumentType=	"Nonformalized"; //по умолчанию добавляемый файл имеет тип "Nonformalized", далее пользователь настраивает сам
					НоваяСтрока.ТекущиеДанные= 	Ложь;
					НоваяСтрока.IdСтроки= 		Новый УникальныйИдентификатор;
					НоваяСтрока.ТекстОшибкиВалидации= "";
					НоваяСтрока.ЭтоФайл= 		Истина; 
												
					СтруктураДанныеФайла= 	Новый_NonformalizedDocumentToSend();
					СтруктураСвойстваФайла= Новый_СвойстваФайла();
					
					ЗаполнитьСтрокуТаблицыДокументов(НоваяСтрока, ФайлДанных, СтруктураСвойстваФайла, СтруктураДанныеФайла);
																		
				КонецЦикла;
				
				НастроитьЗаголовок();
				
			КонецЕсли;
									
		КонецПроцедуры
	
		&НаКлиенте
		Процедура ВыполнитьДействиеПослеРедактированияВыбранногоФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
			
			Если ВыбранныеФайлы = Неопределено Тогда
				Возврат;
			Иначе
				Если ВыбранныеФайлы.Количество()>0 Тогда
					
					ФайлДанных= Новый Файл(ВыбранныеФайлы[0]);
					
					Если ФайлДанных.Размер() > (5*1024*1024) Тогда
						
						ТекстПредупреждения= "Размер отправляемого файла не должен превышать 5Мб. Размер выбранного файла " + РазмерДобавляемогоФайла(ФайлДанных.Размер()); 
						ПоказатьПредупреждение(, ТекстПредупреждения, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы); 
						
					Иначе
						КаталогВыбораФайлов= ДополнительныеПараметры.ДиалогВыбораФайла.Каталог;
											
						ТекущиеДанные= Элементы.ТаблицаДокументовПакета.ТекущиеДанные; 
						СтруктураСвойстваФайла= ТекущиеДанные.СвойстваФайла;
						
						СтруктураСвойстваФайла.Имя= 				ФайлДанных.Имя;
						СтруктураСвойстваФайла.ИмяБезРасширения= 	ФайлДанных.ИмяБезРасширения;
						СтруктураСвойстваФайла.ПолноеИмя= 			ФайлДанных.ПолноеИмя;
						СтруктураСвойстваФайла.Путь= 				ФайлДанных.Путь;
						СтруктураСвойстваФайла.Расширение= 			ФайлДанных.Расширение;
						СтруктураСвойстваФайла.РазмерВБайтах= 		ФайлДанных.Размер();
					
						ТекущиеДанные.СвойстваФайла= СтруктураСвойстваФайла; 
								
						Элементы.БезВизуализации_FileName.Заголовок= 	ФайлДанных.Имя;
						Элементы.БезВизуализации_РазмерФайла.Заголовок= РазмерДобавляемогоФайла(ФайлДанных.Размер());
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
					
		КонецПроцедуры
	
		&НаКлиенте
		Процедура ОбработчикОповещенияВопросУдалитьФайлИзПакета(РезультатВопроса, ДополнительныеПараметры) Экспорт
			
			Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
				
				ИдентификаторТекущейСтроки= ДополнительныеПараметры.ИдентификаторТекущейСтроки;
				
				ТекущаяСтрока= ТаблицаДокументов.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
				
				ТаблицаДокументов.Удалить(ТекущаяСтрока);
							
				НастроитьЗаголовок();
				
				Если ТаблицаДокументов.Количество() = 0 Тогда
					ОчиститьРеквизитыФормы(ТипДокумента);
					Элементы.БезВизуализации_FileName.Заголовок= 	"";
					Элементы.БезВизуализации_РазмерФайла.Заголовок= "";
				КонецЕсли;
								
			КонецЕсли;
			
		КонецПроцедуры
		
	
	////////////////////////////////////////////////////////////////////////////////
	//} ОБРАБОТЧИКИ ОПОВЕЩЕНИЙ
	
	////////////////////////////////////////////////////////////////////////////////
	//{ РАБОТА С КЭШ

		&НаКлиенте
		Процедура ИнициализироватьКэшТабличныеДокументы()
			
			Если КэшТабличныеДокументы = Неопределено Тогда
				КэшТабличныеДокументы= Новый Соответствие;
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ЗаполнитьСтрокуТаблицыДокументов(СтрокаТаблицыДокументов, ФайлДанных, СтруктураСвойстваФайла, СтруктураДанныеФайла)
							
			ЗаполнитьЗначенияСвойств(СтруктураСвойстваФайла, ФайлДанных);
			СтруктураСвойстваФайла.РазмерВБайтах= ФайлДанных.Размер();
			
			СтрокаТаблицыДокументов.СвойстваФайла= 	СтруктураСвойстваФайла;
			СтрокаТаблицыДокументов.ДанныеФайла= 	СтруктураДанныеФайла; 
							
		КонецПроцедуры
	
		&НаКлиенте
		Процедура ИзменитьДанныеФайла(ИмяСвойстваОбъекта, ЗначениеСвойства)
			
			ДанныеТекущейСтроки= Элементы.ТаблицаДокументовПакета.ТекущиеДанные;
			
			Если ДанныеТекущейСтроки = Неопределено Тогда
				Возврат;
			КонецЕсли;
						
			СтрутураДанныеФайла= ДанныеТекущейСтроки.ДанныеФайла; 
			
			Если СтрутураДанныеФайла.Свойство(ИмяСвойстваОбъекта) Тогда
				СтрутураДанныеФайла[ИмяСвойстваОбъекта]= ЗначениеСвойства;
			КонецЕсли;
			
			Элементы.ТаблицаДокументовПакета.ТекущиеДанные.ДанныеФайла= СтрутураДанныеФайла;
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура ДанныеФайлаНаФорму(ТекущиеДанные)
			
			ТипДокумента= DocumentType;
			
			СтруктураДанныеФайла= 	ТекущиеДанные.ДанныеФайла;
			СтруктураСвойстваФайла=	ТекущиеДанные.СвойстваФайла;
			
			Если DocumentType = "AcceptanceCertificate" Тогда
				
				ЗапроситьПодписьКонтрагента= СтруктураДанныеФайла.NeedRecipientSignature;
			
				ДокументНомер= 	СтруктураДанныеФайла.DocumentNumber;
				ДокументДата= 	СтруктураДанныеФайла.DocumentDate;
				СуммаСНДС=		СтруктураДанныеФайла.Total;
				СуммаНДС=		СтруктураДанныеФайла.Vat;
				Основание=		СтруктураДанныеФайла.Grounds;
				Комментарий=	СтруктураДанныеФайла.Comment;
				
			ИначеЕсли DocumentType = "Contract" Тогда
				
				Договор_Тип= 			СтруктураДанныеФайла.ContractType;
				ДокументНомер= 			СтруктураДанныеФайла.DocumentNumber;
				ДокументДата= 			СтруктураДанныеФайла.DocumentDate;
				ДокументЦена= 			СтруктураДанныеФайла.ContractPrice;
				Договор_ЦенаНеУказана= 	СтруктураДанныеФайла.ЦенаНеУказана;
				Комментарий= 			СтруктураДанныеФайла.Comment;
				
			ИначеЕсли DocumentType = "NonformalizedProforma" Тогда
				
				ДокументНомер= 		СтруктураДанныеФайла.DocumentNumber;
				ДокументДата= 		СтруктураДанныеФайла.DocumentDate;
				ДокументСуммаНДС=	СтруктураДанныеФайла.Vat;
				ДокументСуммаСНДС= 	СтруктураДанныеФайла.Total;
				ДокументОснования=	СтруктураДанныеФайла.Grounds;
				ДокументБезНДС=		СтруктураДанныеФайла.БезНДС;
				Комментарий= 		СтруктураДанныеФайла.Comment;
				
			ИначеЕсли DocumentType = "Nonformalized" ИЛИ DocumentType = "PriceListAgreement" ИЛИ DocumentType = "CertificateRegistry" Тогда
				
				ЗапроситьПодписьКонтрагента= СтруктураДанныеФайла.NeedRecipientSignature;
				ДокументНомер= 	СтруктураДанныеФайла.DocumentNumber;
				ДокументДата= 	СтруктураДанныеФайла.DocumentDate;
				Комментарий= 	СтруктураДанныеФайла.Comment; 
										
			ИначеЕсли DocumentType = "ServiceDetails" ИЛИ DocumentType = "ReconciliationAct" Тогда
				
				ДокументНомер= 	СтруктураДанныеФайла.DocumentNumber;
				ДокументДата= 	СтруктураДанныеФайла.DocumentDate;
				Комментарий= 	СтруктураДанныеФайла.Comment;	
				
			Иначе
				
				Сообщить("Кэширование для данного типа еще не реализовано");
				
			КонецЕсли;
			
			Элементы.БезВизуализации_FileName.Заголовок= СтруктураСвойстваФайла.Имя;
				
			РазмерФайлаНаФорму= "";
			РазмерФайлаНаФорму= РазмерДобавляемогоФайла(СтруктураСвойстваФайла.РазмерВБайтах);
			
			Элементы.БезВизуализации_РазмерФайла.Заголовок= РазмерФайлаНаФорму;
						
		КонецПроцедуры
			
		&НаКлиенте
		Процедура ПустуюЗаготовкуВДанныеФайла(ТекущиеДанные)
			
			Если ТипДокумента = "Nonformalized" Тогда
				
				Заготовка= Новый_NonformalizedDocumentToSend();
				
			ИначеЕсли ТипДокумента = "PriceListAgreement" Тогда
				
				Заготовка= Новый_NonformalizedDocumentToSend(Истина);
				
			ИначеЕсли ТипДокумента = "CertificateRegistry" Тогда 
				
				Заготовка= Новый_NonformalizedDocumentToSend();
				
			ИначеЕсли ТипДокумента = "ServiceDetails" ИЛИ ТипДокумента = "ReconciliationAct" Тогда
				
				Заготовка= Новый_ServiceDetails();
				
			ИначеЕсли ТипДокумента = "NonformalizedProforma" Тогда
				
				Заготовка= Новый_NonformalizedProforma();
				
			ИначеЕсли ТипДокумента = "PriceList" Тогда
				
				Заготовка= Новый_PriceList();
				
			ИначеЕсли ТипДокумента = "AcceptanceCertificate" Тогда
				
				Заготовка= Новый_AcceptanceCertificate();
				
			ИначеЕсли ТипДокумента = "Contract" Тогда
				
				Заготовка= Новый_Contract();
				
			Иначе 
				
				Сообщить("Кэширование данного типа еще не реализовано");
				
			КонецЕсли;
			
			Если Заготовка = Неопределено Тогда
				ПоказатьПредупреждение(, "Не определен тип: " + ТипДокумента, 120);
			Иначе
				ТекущиеДанные.ДанныеФайла= Заготовка;	
			КонецЕсли;
			
		КонецПроцедуры

	////////////////////////////////////////////////////////////////////////////////
	//} РАБОТА С КЭШ 


//} РЕДАКТИРОВАНИЕ ПАКЕТА
////////////////////////////////////////////////////////////////////////////////