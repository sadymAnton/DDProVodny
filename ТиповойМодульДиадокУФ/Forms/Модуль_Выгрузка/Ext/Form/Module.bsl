
&НаКлиенте
Перем СтруктураИндентификаторовСвойств;

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт, Манифест Экспорт;

&НаКлиенте
Перем НомерИтерацииВызоваМодуля;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура Инициализировать(ИмяМодуля) Экспорт
	
	Если НомерИтерацииВызоваМодуля = Неопределено Тогда
		НомерИтерацииВызоваМодуля= 0;
	КонецЕсли;
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля + 1;
	
	Если Манифест = Неопределено Тогда
		Платформа.ЗаполнитьМанифест(ЭтаФорма, ИмяМодуля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПеременные() Экспорт
	
	// Разрывается циклическая ссылка, для того чтобы исключить утечку памяти.
	// Модуль может быть вызван повторно во вложенных методах,
	// поэтому очищаем переменные, ТОЛЬКО если это начальная итерация вызова модуля.
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля - 1;
	
	Если НомерИтерацииВызоваМодуля = 0 Тогда
		Платформа= 					  Неопределено;
		Объект.ПараметрыКлиентСервер= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МАНИФЕСТ

// Все функции и процедуры тела модуля должны быть экспортными и добавлены в соответствующую структуру!

&НаКлиенте
Функция ФункцииМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, <Имя функции>, <Параметры строкой>, <Вариант кэширования>, <Переопределение>);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НеИспользовать", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяВыполнения", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяСеанса", Истина);
	//...
	
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьИдентификаторОтправленнойВПФ", "DocumentID, ВнешняяПечатнаяФорма", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПорядковыйНомерВнешнейПечатнойФормы", "ВнешняяПечатнаяФорма", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ВернутьТаблицуОтношенийОрганизацииКонтрагентов", "Организация = Неопределено", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаполнитьКонтентДляInvoiceCorrection", "Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаполнитьКонтентДляInvoice", "Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаполнитьКонтентДляXmlTorg12", "Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, НомерЗаказа, ДопСведения, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВнешнююПечатнуюФормуСчета", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВнешнююПечатнуюФормуАктаСверки", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВнешнююПечатнуюФормуАкта", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПечатнуюФормуАктаВыполненныхРабот", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПечатнуюФормуСчета", "ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПечатнуюФормуАктаСверки", "ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаменитьНедопустимыеСимволы", "НомерДокумента", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПечатныхФормСчета", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПечатныхФормАктаСверки", "Знач СсылкаНаОбъект", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьФайлСчетаНаОплату", "ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьФайлАктаСверки", "ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПечатныхФормАкта", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьФайлАктавыполненныхРабот", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЗаполненныйPackageSendTask", "ПараметрыPackageSendTask, ПараметрыОтправкиНаСогласование", "НеИспользовать", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ВыполнитьАсинхроннуюОтправкуПакета", "ЗаполненныйPackageSendTask, СоответствиеCustomIdСсылке1С", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "PackageSendTask_В_Соответствие", "PackageSendTask, СоответствиеCustomIdСсылке1С", "НеИспользовать", Ложь);
	
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПослеАсинхроннойОтправкиСервер", "МассивДокументовПакета", "НеИспользовать", Ложь);
	
	Возврат СтруктураМетодов;
	
КонецФункции

&НаКлиенте
Функция ПроцедурыМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, <Имя процедуры>, <Параметры строкой>, <Переопределение>);
	//Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПримерПроцедуры", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", Истина);
	//...
	
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "Инициализировать", "ИмяМодуля", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОчиститьПеременные", "", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОтразитьИзмененияВДокументе1С", "Знач Организация, Знач ДокументСсылка, Знач DocumentType", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПослеОтправкиДокумента", "Знач Документ1С, Знач DocumentID, Знач BoxID, Знач DocumentType, Знач Организация", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьContentПоСтруктуре", "content, СтруктураДанных, описаниеСтруктурыДанных = """"", Истина);

	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОбработатьОтправленныйПакетДокументов", "content, СтруктураДанных, описаниеСтруктурыДанных = """"", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьПризнакУсловноОтправленныйДляДокумента", "ДокументСсылка, DocumentType, CustomDocumentId", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОтразитьИзмененияВКоллекцииДокументов1С", "Знач Коллекция", Истина);
	
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПередОтправкойСервер", "СоответствиеВПФСсылке, КоличествоДокументовВПакете, OperationIdПакета", Ложь);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПриОшибкеОтправкиСервер", "ТекстОшибки, СоответствиеВПФСсылке, КоличествоДокументовВПакете", Ложь);
	
	Возврат СтруктураМетодов;
	
КонецФункции

#КонецОбласти

#Область ТЕЛО_МОДУЛЯ

&НаКлиенте
Функция ПолучитьЗаполненныйPackageSendTask(Знач ПараметрыPackageSendTask, СоответствиеCustomIdСсылке1С) Экспорт
	
	//Параметры общие для всего пакета
	Organization= 			ПараметрыPackageSendTask.Organization;
	CounteragentId=			ПараметрыPackageSendTask.CounteragentId;
	ReceiverDepartmentId= 	ПараметрыPackageSendTask.ReceiverDepartmentId;
	
	Организация= 						ПараметрыPackageSendTask.Организация;
	ФИОПодписанта=						ПараметрыPackageSendTask.ФИОПодписанта;
	МассивДокументовПакета= 			ПараметрыPackageSendTask.МассивДокументовПакета;
	ПараметрыОтправкиНаСогласование= 	ПараметрыPackageSendTask.ПараметрыОтправкиНаСогласование;
	ЭтоПеревыставление=					ПараметрыPackageSendTask.ЭтоПеревыставление;
	
	СоответствиеCustomId= Новый Соответствие; //используем для упорядоченного хранения CustomId, что позволит формировать одинаково интерпретируемый OperationId пакета
	
	PackageSendTask= Organization.CreatePackageSendTask();
	
	PackageSendTask.CounteragentId= 	CounteragentId;
	PackageSendTask.ToDepartmentId= 	ReceiverDepartmentId;
	PackageSendTask.DelaySend= 			(ПараметрыОтправкиНаСогласование <> Неопределено);
	
	БылаОшибкаВалидации= Ложь;
	СоответствиеCustomIdСсылке1СТекущегоПакета= Новый Соответствие;
		
	//Формируем коллекцию DocumentsToSend 
	Для каждого ДокументПакета из МассивДокументовПакета Цикл
		
		//Параметры характерные только для текущего документа
		DocumentType= 			ДокументПакета.DocumentType;
		ВнешняяПечатнаяФорма= 	ДокументПакета.ВнешняяПечатнаяФорма;
		
		ПараметрыТекущегоДокумента= Новый Структура;
		ПараметрыТекущегоДокумента.Вставить("ДокументСсылка", ДокументПакета.Документ);
		ПараметрыТекущегоДокумента.Вставить("ДопСведения", 	ДокументПакета.ДопПоле); 
		ПараметрыТекущегоДокумента.Вставить("ТипДокумента", 	ДокументПакета.ТипДокумента); 
				
		ЭтоКорректировкаИсправление= Ложь;
		
		Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			
			ВыгружатьExcel=		ДокументПакета.ВыгружатьExcel;
			СтруктураДокумент= 	МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами", "СформироватьВнешнююПечатнуюФормуДляДиадокаПоСсылкеВПФ", ДокументПакета.Документ, ВнешняяПечатнаяФорма, , ВыгружатьExcel, Организация);
		
			ИмяВременногоФайла= ПолучитьИмяВременногоФайла(?(ВыгружатьExcel, "xlsx", "pdf"));
			СтруктураДокумент.Таблица.Записать(ИмяВременногоФайла, ?(ВыгружатьExcel, ТипФайлаТабличногоДокумента.XLSX, ТипФайлаТабличногоДокумента.PDF));
			
			DocumentToSend= DocumentToSend_ВПФ(PackageSendTask, ИмяВременногоФайла, СтруктураДокумент);
									
		ИначеЕсли DocumentType = "XmlTorg12" Тогда
			
			СтруктураДанныеСервера= ДанныеДляDocumentToSendНаСервере(DocumentType, ПараметрыТекущегоДокумента, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
			
			XmlTorg12Content= 	СтруктураДанныеСервера.XmlTorg12Content;
			СписокОшибок= 		СтруктураДанныеСервера.СписокОшибок;
			
			Если ЗначениеЗаполнено(СписокОшибок) Тогда
				ДокументПакета.ОшибкаВалидации= СписокОшибок;
				БылаОшибкаВалидации= Истина;
			Иначе
				DocumentToSend=	DocumentToSend_Formalized_Универсальный(PackageSendTask, DocumentType, XmlTorg12Content, "XmlTorg12Content");
				МетодКлиента("Модуль_Клиент", "ЗаполнитьПодписанта", DocumentToSend.Content, Organization);
			КонецЕсли;
															
		ИначеЕсли DocumentType = "XmlAcceptanceCertificate" Тогда
			
			Если НЕ ЗначениеЗаполнено(МетодСервера(,"ПолучитьВнешнююПечатнуюФормуАкта", ДокументПакета.Документ)) Тогда
				
				СтруктураДанныеСервера= ДанныеДляDocumentToSendНаСервере(DocumentType, ПараметрыТекущегоДокумента, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
				
				XmlAcceptanceCertificateContent= 	СтруктураДанныеСервера.XmlAcceptanceCertificateContent;
				СписокОшибок= 						СтруктураДанныеСервера.СписокОшибок;
				
				Если ЗначениеЗаполнено(СписокОшибок) тогда 
					ДокументПакета.ОшибкаВалидации= СписокОшибок;
					БылаОшибкаВалидации= Истина;	
				Иначе
					DocumentToSend=	DocumentToSend_Formalized_Универсальный(PackageSendTask, DocumentType, XmlAcceptanceCertificateContent, "XmlAcceptanceCertificateContent");
					МетодКлиента("Модуль_Клиент", "ЗаполнитьПодписанта", DocumentToSend.Content, Organization);
				КонецЕсли;
				
			Иначе
				
				СтруктураДокумент= 	ПолучитьПечатнуюФормуАктаВыполненныхРабот(ДокументПакета.Документ);
				DocumentToSend= 	DocumentToSend_AcceptanceCertificate_ВПФ(PackageSendTask, СтруктураДокумент);
				
			КонецЕсли;
															
		ИначеЕсли DocumentType = "NonformalizedProforma" Тогда
			
			Если ДокументПакета.ЭтоФайл Тогда
								
				DocumentToSend= DocumentToSend_NonformalizedProforma(PackageSendTask, ДокументПакета.ДанныеФайла, ДокументПакета.СвойстваФайла);
				
			Иначе
				
				СтруктураДокумент= 	ПолучитьПечатнуюФормуСчета(ДокументПакета.Документ, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
				DocumentToSend= 	DocumentToSend_NonformalizedProforma_ВПФ(PackageSendTask, СтруктураДокумент);
				
			КонецЕсли;
											
		ИначеЕсли DocumentType = "ReconciliationAct" Тогда
			
			Если ДокументПакета.ЭтоФайл Тогда
						
				DocumentToSend= DocumentToSend_ReconciliationAct(PackageSendTask, ДокументПакета.ДанныеФайла, ДокументПакета.СвойстваФайла);
				
			Иначе 
				
				СтруктураДокумент= 	ПолучитьПечатнуюФормуАктаСверки(ДокументПакета.Документ, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
				DocumentToSend=		DocumentToSend_ReconciliationAct_ВПФ(PackageSendTask, СтруктураДокумент);
				
			КонецЕсли;
						
		ИначеЕсли DocumentType = "UniversalTransferDocument"  Тогда
			
			СтруктураДанныеСервера= ДанныеДляDocumentToSendНаСервере(DocumentType, ПараметрыТекущегоДокумента, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
			
			СтруктураUTD= СтруктураДанныеСервера.СтруктураUTD;
			СписокОшибок= СтруктураДанныеСервера.СписокОшибок;
			
			Если ЗначениеЗаполнено(СписокОшибок) Тогда
				ДокументПакета.ОшибкаВалидации= СписокОшибок;
				БылаОшибкаВалидации= Истина;
			Иначе
				DocumentToSend=	DocumentToSend_Formalized_Универсальный(PackageSendTask, DocumentType, СтруктураUTD, "UniversalTransferDocument");
				МетодКлиента("Модуль_Клиент", "ЗаполнитьПодписанта", DocumentToSend.Content, Organization, ПараметрыОтправкиНаСогласование);	
			КонецЕсли;
												
		ИначеЕсли DocumentType = "Invoice" Тогда
			
			ТипСФ= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ОпределитьТипСчетФактуры", ДокументПакета.Документ);
			
			Если ТипСФ = "InvoiceCorrectionRevision" ИЛИ ТипСФ = "InvoiceCorrection" Тогда
				
				СтруктураДанныеСервера= ДанныеДляDocumentToSendНаСервере(ТипСФ, ПараметрыТекущегоДокумента, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
			
				InvoiceCorrectionContent= 	СтруктураДанныеСервера.InvoiceCorrectionContent;
				СписокОшибок= 				СтруктураДанныеСервера.СписокОшибок;
				
			Иначе
				
				СтруктураДанныеСервера= ДанныеДляDocumentToSendНаСервере(ТипСФ, ПараметрыТекущегоДокумента, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
			
				InvoiceContent=	СтруктураДанныеСервера.InvoiceContent;
				СписокОшибок=	СтруктураДанныеСервера.СписокОшибок;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СписокОшибок) Тогда
				ДокументПакета.ОшибкаВалидации= СписокОшибок;
				БылаОшибкаВалидации= Истина;	
			Иначе
				Если ТипСФ = "InvoiceCorrectionRevision" ИЛИ ТипСФ = "InvoiceCorrection" Тогда
					DocumentToSend=	DocumentToSend_Formalized_Универсальный(PackageSendTask, ТипСФ, InvoiceCorrectionContent, "InvoiceCorrectionContent");
				Иначе
					DocumentToSend=	DocumentToSend_Formalized_Универсальный(PackageSendTask, ТипСФ, InvoiceContent, "InvoiceContent");	
				КонецЕсли;
				
				МетодКлиента("Модуль_Клиент", "ЗаполнитьПодписанта", DocumentToSend.Content, Organization);
			КонецЕсли;
			
			Если ТипСФ = "InvoiceRevision" ИЛИ ТипСФ = "InvoiceCorrection" ИЛИ ТипСФ = "InvoiceCorrectionRevision" Тогда
				ЭтоКорректировкаИсправление= Истина;
			КонецЕсли;
					
		ИначеЕсли ДокументПакета.ЭтоФайл Тогда
						
			Если DocumentType = "Nonformalized" ИЛИ DocumentType = "PriceListAgreement" ИЛИ DocumentType = "CertificateRegistry" ИЛИ DocumentType = "ServiceDetails" Тогда
				
				DocumentToSend= DocumentToSend_Nonfomalized_Универсальный(PackageSendTask, DocumentType, ДокументПакета.ДанныеФайла, ДокументПакета.СвойстваФайла);
					
			ИначеЕсли DocumentType = "AcceptanceCertificate" Тогда	
				
				DocumentToSend= DocumentToSend_AcceptanceCertificate(PackageSendTask, ДокументПакета.ДанныеФайла, ДокументПакета.СвойстваФайла);
							
			ИначеЕсли DocumentType = "Contract" Тогда
				
				DocumentToSend= DocumentToSend_Contract(PackageSendTask, ДокументПакета.ДанныеФайла, ДокументПакета.СвойстваФайла);
												
			КонецЕсли;
		
		КонецЕсли;

		Если DocumentToSend = Неопределено Тогда
			
			Если БылаОшибкаВалидации Тогда
				ВызватьИсключение "ОшибкаВалидации";
			Иначе	
				ВызватьИсключение "Внутренняя ошибка модуля";
				// вероятнее всего, ни одно из вышестоящих условий не отработало
			КонецЕсли;
			
		КонецЕсли;
		
		DocumentToSend.CustomDocumentId= СформироватьCustomDocumentId(ДокументПакета.Документ, ВнешняяПечатнаяФорма, DocumentToSend.Type, СоответствиеCustomIdСсылке1С, СоответствиеCustomIdСсылке1СТекущегоПакета, ЭтоПеревыставление);
		
		ДокументПакета.CustomDocumentId= DocumentToSend.CustomDocumentId;
		
		ДобавитьЗаписьВСоответствиеCustomIdСсылке1С(СоответствиеCustomIdСсылке1СТекущегоПакета,
													DocumentToSend.CustomDocumentId,
													ДокументПакета.DocumentType, 
													ДокументПакета.Документ, 
													ВнешняяПечатнаяФорма, 
													ЭтоКорректировкаИсправление, 
													ДокументПакета.СвязующийИдентификаторСтроки);
						
		СоответствиеCustomId.Вставить(DocumentToSend.CustomDocumentId);
		
	КонецЦикла;
	
	Если БылаОшибкаВалидации Тогда
		PackageSendTask= Неопределено;
		ВызватьИсключение("ОшибкаВалидации");
	КонецЕсли;
		
	//Прописываем связи для документов пакета
	Для Ц=0 по PackageSendTask.DocumentsToSend.Count-1 Цикл
		Document= PackageSendTask.DocumentsToSend.GetItem(Ц);
		УстановитьСвязиДляDocument(Document, СоответствиеCustomIdСсылке1СТекущегоПакета);
	КонецЦикла;
				
	OperationIdПакета= "";
	Для каждого CustomIdДокументаСтрокой из СоответствиеCustomId Цикл
		OperationIdПакета= OperationIdПакета + CustomIdДокументаСтрокой.Ключ;
	КонецЦикла;
	PackageSendTask.OperationId= OperationIdПакета;
	
	Для каждого ЭлементСоответствия из СоответствиеCustomIdСсылке1СТекущегоПакета Цикл
		СоответствиеCustomIdСсылке1С.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
	КонецЦикла;
								
	Возврат Новый Структура("PackageSendTask, Organization", PackageSendTask, Organization);
	
КонецФункции

&НаСервере
Функция ДанныеДляDocumentToSendНаСервере(DocumentType, СтруктураДокументПакета, ПараметрыОтправкиНаСогласование, ФИОПодписанта)
	
	ДокументСсылка= СтруктураДокументПакета.ДокументСсылка;
	ДопСведения= 	СтруктураДокументПакета.ДопСведения;
	ТипДокумента=	СтруктураДокументПакета.ТипДокумента; 
	
	ДанныеДляDocumentToSend= Новый Структура;
	
	Если DocumentType = "XmlTorg12" Тогда
		
		XmlTorg12Content= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьXmlTorg12Content", ДокументСсылка, ПараметрыОтправкиНаСогласование, "", ДопСведения, ФИОПодписанта);
		СписокОшибок=	  МетодСервера(,"ВалидацияXmlTorg12Content", XmlTorg12Content);
		
		ДанныеДляDocumentToSend.Вставить("XmlTorg12Content", 	XmlTorg12Content);
		ДанныеДляDocumentToSend.Вставить("СписокОшибок", 		СписокОшибок);
		
	ИначеЕсли DocumentType = "XmlAcceptanceCertificate" Тогда 
		
		XmlAcceptanceCertificateContent=	МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьXmlAcceptanceCertificateContent", ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта);
		СписокОшибок=						МетодСервера(,"ВалидацияXmlAcceptanceCertificateContent", XmlAcceptanceCertificateContent);
		
		ДанныеДляDocumentToSend.Вставить("XmlAcceptanceCertificateContent", 	XmlAcceptanceCertificateContent);
		ДанныеДляDocumentToSend.Вставить("СписокОшибок", 						СписокОшибок);
		
	ИначеЕсли DocumentType = "UniversalTransferDocument" Тогда 
		
		СтруктураUTD=	МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьXmlUTDContent", ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта, ТипДокумента);
		СписокОшибок=	МетодСервера(, "ВалидацияUTD", СтруктураUTD);
		
		ДанныеДляDocumentToSend.Вставить("СтруктураUTD",	СтруктураUTD);
		ДанныеДляDocumentToSend.Вставить("СписокОшибок",	СписокОшибок);
		
	ИначеЕсли DocumentType = "InvoiceCorrectionRevision" ИЛИ DocumentType = "InvoiceCorrection" Тогда
				
		InvoiceCorrectionContent= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьInvoiceCorrectionContent", ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта);
		СписокОшибок= 			  МетодСервера(, "ВалидацияInvoiceCorrectionContent", InvoiceCorrectionContent, ДокументСсылка);
		
		ДанныеДляDocumentToSend.Вставить("InvoiceCorrectionContent",	InvoiceCorrectionContent);
		ДанныеДляDocumentToSend.Вставить("СписокОшибок",				СписокОшибок);
		
	Иначе
		
		InvoiceContent= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьInvoiceContent", Документссылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта);
		СписокОшибок= 	МетодСервера(,"ВалидацияInvoiceContent", InvoiceContent, ДокументСсылка);
		
		ДанныеДляDocumentToSend.Вставить("InvoiceContent",	InvoiceContent);
		ДанныеДляDocumentToSend.Вставить("СписокОшибок",	СписокОшибок);
		
	КонецЕсли;
	
	Возврат ДанныеДляDocumentToSend; 
	
КонецФункции

	#Область DocumentToSend

	&НаКлиенте
	Функция DocumentToSend_ВПФ(PackageSendTask, ИмяВременногоФайла, СтруктураДокумент)
		
		DocumentToSend = PackageSendTask.AddDocumentFromFile("Nonformalized", ИмяВременногоФайла);
				
		DocumentToSend.DocumentDate= 	СтруктураДокумент.Дата;
		DocumentToSend.DocumentNumber= 	СтруктураДокумент.Номер;
		DocumentToSend.Filename= 		СтруктураДокумент.ИмяФайла;
		DocumentToSend.NeedRecipientSignature= Истина;
		
		Возврат DocumentToSend; 
		
	КонецФункции

	&НаКлиенте
	Функция DocumentToSend_Formalized_Универсальный(PackageSendTask, DocumentType, СтруктураДанныхContent, ОписаниеСтруктурыДанных)
		
		DocumentToSend= PackageSendTask.AddDocument(DocumentType);
				
		ЗаполнитьContentПоСтруктуре(DocumentToSend.Content, СтруктураДанныхContent, ОписаниеСтруктурыДанных);
				
		Возврат DocumentToSend; 
		
	КонецФункции

	&НаКлиенте
	Функция DocumentToSend_AcceptanceCertificate_ВПФ(PackageSendTask, СтруктураДокумент)
			
		DocumentToSend= PackageSendTask.AddDocumentFromFile("AcceptanceCertificate", СтруктураДокумент.ИмяВременногоФайла);
		
		DocumentToSend.NeedRecipientSignature= Истина;
		
		DocumentToSend.DocumentDate= 	СтруктураДокумент.Дата;
		DocumentToSend.DocumentNumber= 	СтруктураДокумент.Номер;
		DocumentToSend.Total= 			СтруктураДокумент.Сумма;
		DocumentToSend.Vat= 			СтруктураДокумент.СуммаНДС;
		DocumentToSend.Filename= 		СтруктураДокумент.ИмяФайла;
		
		Возврат DocumentToSend;
		
	КонецФункции

	&НаКлиенте
	Функция DocumentToSend_NonformalizedProforma(PackageSendTask, ДанныеФайла, СвойстваФайла)
		
			DocumentToSend= PackageSendTask.AddDocumentFromFile("NonformalizedProforma", СвойстваФайла.ПолноеИмя);
			
			DocumentToSend.DocumentDate= 	ДанныеФайла.DocumentDate;
			DocumentToSend.DocumentNumber= 	ДанныеФайла.DocumentNumber;
			DocumentToSend.Total= 			ДанныеФайла.Total;
			Если НЕ ДанныеФайла.БезНДС Тогда
				DocumentToSend.Vat= 		ДанныеФайла.Vat;
			КонецЕсли;
			DocumentToSend.Comment=			ДанныеФайла.Comment;
				
		Возврат DocumentToSend;
		
	КонецФункции

	&НаКлиенте
	Функция DocumentToSend_NonformalizedProforma_ВПФ(PackageSendTask, СтруктураДокумент)
				
		DocumentToSend= PackageSendTask.AddDocumentFromFile("NonformalizedProforma", СтруктураДокумент.ИмяВременногоФайла);
			
		DocumentToSend.DocumentDate= 	СтруктураДокумент.Дата;
		DocumentToSend.DocumentNumber= 	СтруктураДокумент.Номер;
		DocumentToSend.Total= 			СтруктураДокумент.Сумма;
		DocumentToSend.Vat= 			СтруктураДокумент.СуммаНДС;
		DocumentToSend.Filename= 		СтруктураДокумент.ИмяФайла;	
		
		Возврат DocumentToSend; 
		
	КонецФункции

	&НаКлиенте
	Функция DocumentToSend_ReconciliationAct(PackageSendTask, ДанныеФайла, СвойстваФайла)
		
		DocumentToSend= PackageSendTask.AddDocumentFromFile("ReconciliationAct", СвойстваФайла.ПолноеИмя);
			
		DocumentToSend.DocumentDate= 	ДанныеФайла.DocumentDate;
		DocumentToSend.DocumentNumber= 	ДанныеФайла.DocumentNumber;
		DocumentToSend.Comment=			ДанныеФайла.Comment;
				
		Возврат DocumentToSend; 
		
	КонецФункции

	&НаКлиенте
	Функция DocumentToSend_ReconciliationAct_ВПФ(PackageSendTask, СтруктураДокумент)
					
		DocumentToSend= PackageSendTask.AddDocumentFromFile("ReconciliationAct", СтруктураДокумент.ИмяВременногоФайла);
			
		DocumentToSend.DocumentDate= 	СтруктураДокумент.Дата;
		DocumentToSend.DocumentNumber= 	СтруктураДокумент.Номер;
		DocumentToSend.Filename= 		СтруктураДокумент.ИмяФайла;
			
		Возврат DocumentToSend; 
		
	КонецФункции

	&НаКлиенте
	Функция DocumentToSend_Nonfomalized_Универсальный(PackageSendTask, DocumentType, ДанныеФайла, СвойстваФайла)
		
		DocumentToSend= PackageSendTask.AddDocumentFromFile(DocumentType, СвойстваФайла.ПолноеИмя);
					
		DocumentToSend.DocumentDate= 	ДанныеФайла.DocumentDate;
		DocumentToSend.DocumentNumber= 	ДанныеФайла.DocumentNumber;
		Если DocumentType = "Nonformalized" ИЛИ DocumentType = "PriceListAgreement" ИЛИ DocumentType = "CertificateRegistry" Тогда 
			DocumentToSend.NeedRecipientSignature= 	ДанныеФайла.NeedRecipientSignature;
		КонецЕсли;
		DocumentToSend.Comment= ДанныеФайла.Comment;
		
		Возврат DocumentToSend; 
		
	КонецФункции

	&НаКлиенте
	Функция DocumentToSend_AcceptanceCertificate(PackageSendTask, ДанныеФайла, СвойстваФайла)
		
		DocumentToSend= PackageSendTask.AddDocumentFromFile("AcceptanceCertificate", СвойстваФайла.ПолноеИмя);
					
		DocumentToSend.NeedRecipientSignature= 	ДанныеФайла.NeedRecipientSignature;
		
		DocumentToSend.DocumentDate= 	ДанныеФайла.DocumentDate;
		DocumentToSend.DocumentNumber= 	ДанныеФайла.DocumentNumber;
		DocumentToSend.Total= 			ДанныеФайла.Total;
		Если НЕ ДанныеФайла.БезНДС Тогда
			DocumentToSend.Vat= 		ДанныеФайла.Vat;
		КонецЕсли;
		DocumentToSend.Comment=			ДанныеФайла.Comment;
		
		Возврат DocumentToSend;
		
	КонецФункции

	&НаКлиенте
	Функция DocumentToSend_Contract(PackageSendTask, ДанныеФайла, СвойстваФайла)
		
		DocumentToSend= PackageSendTask.AddDocumentFromFile("Contract", СвойстваФайла.ПолноеИмя);
					
		DocumentToSend.DocumentDate= 	ДанныеФайла.DocumentDate;
		DocumentToSend.DocumentNumber= 	ДанныеФайла.DocumentNumber;
		Если НЕ ДанныеФайла.ЦенаНеУказана Тогда
			DocumentToSend.ContractPrice= 	ДанныеФайла.ContractPrice;
		КонецЕсли;
		DocumentToSend.ContractType= 	ДанныеФайла.ContractType;
		DocumentToSend.Comment=			ДанныеФайла.Comment;
		
		Возврат DocumentToSend;
		
	КонецФункции

	#КонецОбласти
//- 

&НаСервере
Процедура ОтразитьИзмененияВДокументе1С(Знач Организация, Знач ДокументСсылка, Знач DocumentType) Экспорт

	ТекстКомментарияДиадок= МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификатрСвойстваТекстКомментарияДиадок"));
	
	СчетФактураВыданныйПредставление= Объект.ПараметрыКлиентСервер.ПредставлениеДокументов.СчетФактураВыданный;

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка."+СчетФактураВыданныйПредставление) Тогда
		
		Попытка 
			ДокументОбъект= ДокументСсылка.ПолучитьОбъект();
			Записать= 	Ложь;
			Реквизиты= 	ДокументОбъект.Метаданные().Реквизиты;
			Если НЕ Реквизиты.Найти("Выставлен") = Неопределено Тогда 
				ДокументОбъект.Выставлен= 	Истина;
				Записать= 					Истина;
			КонецЕсли;
			Если НЕ Реквизиты.Найти("КодСпособаВыставления")= Неопределено Тогда 
				ДокументОбъект.КодСпособаВыставления= 2;
				Записать= Истина;
			КонецЕсли;
			Если НЕ Реквизиты.Найти("ДатаВыставления") = Неопределено Тогда 
				ДокументОбъект.ДатаВыставления= ТекущаяДата();
				Записать= Истина;
			КонецЕсли;
			Если НЕ Реквизиты.Найти("ВыставленВЭлектронномВиде") = Неопределено Тогда 
				ДокументОбъект.ВыставленВЭлектронномВиде= Истина;
				Записать= Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстКомментарияДиадок) Тогда
				ДокументОбъект.Комментарий=	?(ЗначениеЗаполнено(ДокументОбъект.Комментарий), ДокументОбъект.Комментарий + " ", "") + ТекстКомментарияДиадок;
				Записать= Истина;
			КонецЕсли;
			
			Если Записать Тогда 
				Попытка
					ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Исключение
					ДокументОбъект.Записать();
				КонецПопытки;
			КонецЕсли;
		Исключение 
			Сообщить("Не удалось установить данные о способе выставления для документа "+ ДокументСсылка);
		КонецПопытки;	 
		
	ИначеЕсли НЕ DocumentType = "NonformalizedProforma" Тогда
		
		Попытка 
			ДокументОбъект= ДокументСсылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ТекстКомментарияДиадок) Тогда
				ДокументОбъект.Комментарий=	?(ЗначениеЗаполнено(ДокументОбъект.Комментарий), ДокументОбъект.Комментарий + " ", "") + ТекстКомментарияДиадок;
				Записать= Истина;
			КонецЕсли;
			
			Попытка
				ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			Исключение
				ДокументОбъект.Записать();
			КонецПопытки;
		Исключение 
			Сообщить("Не удалось обновить комментарий в документе "+ ДокументСсылка);
		КонецПопытки;	 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьИзмененияВКоллекцииДокументов1С(Знач Коллекция) Экспорт
	
	Для каждого ЭлементКоллекции из Коллекция Цикл
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.Документ1С) Тогда
			ОтразитьИзмененияВДокументе1С(ЭлементКоллекции.Организация, ЭлементКоллекции.Документ1С, ЭлементКоллекции.DocumentType);	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторОтправленнойВПФ(DocumentID, ВнешняяПечатнаяФорма)
	Возврат   DocumentID+":"+Формат(ПолучитьПорядковыйНомерВнешнейПечатнойФормы(ВнешняяПечатнаяФорма), "ЧГ=0");
КонецФункции

&НаСервере
Функция ПолучитьПорядковыйНомерВнешнейПечатнойФормы(ВнешняяПечатнаяФорма)
	
	//получим список всех внешних печатных форм, которые исп в модуле 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеСведения.Объект,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство.Наименование = &Наименование
	|	И НЕ ДополнительныеСведения.Значение = """"";
	
	Запрос.УстановитьПараметр("Наименование", МетодСервера(,"ИдентификаторСвойстваНомерВПФ"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МаксЗначение = 0 ;
	Пока Выборка.Следующий() Цикл 
		ТекЗначение = Число(Выборка.Значение);
		Если Выборка.Объект = ВнешняяПечатнаяФорма Тогда 
			Возврат ТекЗначение;
		Иначе 
			МаксЗначение = Макс(ТекЗначение,МаксЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Результат = МаксЗначение+1;
	
	МетодСервера(,"УстановитьЗначениеСвойства", ВнешняяПечатнаяФорма, МетодСервера(,"ИдентификаторСвойстваНомерВПФ"), формат(результат, "ЧГ=0"));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПослеОтправкиДокумента(Знач Документ1С, Знач DocumentID, Знач BoxID, Знач DocumentType, Знач Организация, ЭтоУПД_ТипаСЧФДОП) Экспорт

	Если ЭтоУПД_ТипаСЧФДОП Тогда 
		МассивСсылокРНК = МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному", Документ1С);
		Для Каждого ДокументОснование ИЗ МассивСсылокРНК Цикл
			МетодСервера(,"Установить_DocumentID_Для_Документ", ДокументОснование, DocumentID, BoxID);
		КонецЦикла;
	КонецЕсли;

	МетодСервера(,"Установить_DocumentID_Для_Документ", Документ1С, DocumentID, BoxID, DocumentType = "NonformalizedProforma");

	ПредставлениеСФВыданный= "ДокументСсылка." + Объект.ПараметрыКлиентСервер.ПредставлениеДокументов.СчетФактураВыданный;
	ПредставлениеРеализации= "ДокументСсылка." + Объект.ПараметрыКлиентСервер.ПредставлениеДокументов.РеализацияТоваровУслуг;
	
	Если ЭтоУПД_ТипаСЧФДОП Тогда
		ОтразитьСобытиеВыгрузкиВСчетФактуре(Документ1С, Организация);
		Для Каждого ДокументОснование из МассивСсылокРНК Цикл
			ОтразитьСобытиеВыгрузкиВПрочемДокументе(ДокументОснование, Организация);
		КонецЦикла;
	Иначе
		Если ТипЗнч(Документ1С) = Тип(ПредставлениеСФВыданный) Тогда
			ОтразитьСобытиеВыгрузкиВСчетФактуре(Документ1С, Организация);
		ИначеЕсли НЕ (DocumentType = "NonformalizedProforma" И ТипЗнч(Документ1С) = Тип(ПредставлениеРеализации)) Тогда
			ОтразитьСобытиеВыгрузкиВПрочемДокументе(Документ1С, Организация);
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОтразитьСобытиеВыгрузкиВСчетФактуре(ДокументСсылка, Организация)
	
	ЗначенияРеквизитов= Новый Структура;
	ЗначенияРеквизитов.Вставить("Выставлен"					, Истина	   );
	ЗначенияРеквизитов.Вставить("КодСпособаВыставления"		, 2			   );
	ЗначенияРеквизитов.Вставить("ДатаВыставления"			, ТекущаяДата());
	ЗначенияРеквизитов.Вставить("ВыставленВЭлектронномВиде"	, Истина	   );
	
	ТекстКомментарияДиадок= МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификатрСвойстваТекстКомментарияДиадок"));
	Если ЗначениеЗаполнено(ТекстКомментарияДиадок) Тогда
		ЗначенияРеквизитов.Вставить("Комментарий", ТекстКомментарияДиадок);
	КонецЕсли;
	
	Если МетодСервера(,"ЕстьРеквизитыИлиСвойстваОбъекта", ДокументСсылка, ЗначенияРеквизитов) Тогда
		
		ДокументОбъект= ДокументСсылка.ПолучитьОбъект();
		
		Если ЗначенияРеквизитов.Свойство("Комментарий") И НЕ ПустаяСтрока(ДокументОбъект.Комментарий) Тогда
			ЗначенияРеквизитов.Комментарий= ДокументОбъект.Комментарий + " " + ЗначенияРеквизитов.Комментарий;
		КонецЕсли;
		
		Для каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
			Если ДокументОбъект[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				ДокументОбъект[КлючИЗначение.Ключ]= КлючИЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ДокументОбъект.Модифицированность() Тогда
			
			Попытка
				ДокументОбъект.Записать();
			Исключение
				Сообщить("Не удалось обновить комментарий в документе " + ДокументСсылка);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьСобытиеВыгрузкиВПрочемДокументе(ДокументСсылка, Организация)
	
	Если МетодСервера(,"ЕстьРеквизитИлиСвойствоОбъекта", ДокументСсылка, "Комментарий") Тогда
		
		ТекстКомментарияДиадок= МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификатрСвойстваТекстКомментарияДиадок"));
		
		Если ЗначениеЗаполнено(ТекстКомментарияДиадок) Тогда
			
			ДокументОбъект= ДокументСсылка.ПолучитьОбъект();
			
			ДокументОбъект.Комментарий= ?(НЕ ПустаяСтрока(ДокументОбъект.Комментарий), ДокументОбъект.Комментарий + " ", "") + ТекстКомментарияДиадок;
			
			Попытка
				ДокументОбъект.Записать();
			Исключение
				Сообщить("Не удалось обновить комментарий в документе " + ДокументСсылка);
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьТаблицуОтношенийОрганизацииКонтрагентов(Организация = Неопределено)
	
	//формируем мегазапрос
	//сначала получаем список организаций, подключенных к диадоку, для них берем ид-шники и настройки печатных форм
	//потом ищем свойства, которыми устанавливается "дружба" контрагентов с этими организациями 
	//затем получаем параметры этой дружбы 
	
	// Создание описателя типов для таблицы значений
	КС_строки = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС_строки); 
	
	запрос = новый Запрос;
	запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство_ИдКонтрагента
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Наименование = &НаименованиеСвойстваЯщикКонтрагента";
	
	запрос.УстановитьПараметр("НаименованиеСвойстваЯщикКонтрагента", МетодСервера(,"ИдентификаторСвойстваЯщикКонтрагентаПрефикс"));
	таблицаСвойств = запрос.Выполнить().Выгрузить();
	таблицаСвойств.Колонки.Добавить("BoxID", ОписаниеТиповС);
	для каждого стр из таблицаСвойств цикл 
		стр.BoxID = прав(стр.Свойство_ИдКонтрагента, стрДлина(стр.Свойство_ИдКонтрагента)-стрДлина("ДДКонтр_"));
		//	стр.BoxID = лев(стр.BoxID, найти(стр.BoxID, "@")-1);
	КонецЦикла;	
	
	запрос = новый запрос(
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Организация,
	|	ДополнительныеСведения.Значение КАК ИдентификаторОрганизации,
	|	НастройкиПФДляТоваров.Значение КАК ПечатнаяФормаДляТоваров,
	|	НастройкиПФДляУслуг.Значение КАК ПечатнаяФормаДляУслуг
	|ПОМЕСТИТЬ ТаблицаДанныхОрганизаций
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК НастройкиПФДляТоваров
	|		ПО ДополнительныеСведения.Объект = НастройкиПФДляТоваров.Объект
	|			И (НастройкиПФДляТоваров.Объект ССЫЛКА Справочник.Организации)
	|			И (НастройкиПФДляТоваров.Свойство.Наименование = &ПечатнаяФормаДляТоваров)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК НастройкиПФДляУслуг
	|		ПО ДополнительныеСведения.Объект = НастройкиПФДляУслуг.Объект
	|			И (НастройкиПФДляУслуг.Объект ССЫЛКА Справочник.Организации)
	|			И (НастройкиПФДляУслуг.Свойство.Наименование = &ПечатнаяФормаДляУслуг)
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Организации
	|	И ДополнительныеСведения.Свойство.Наименование = &ИдентификаторОрганизации
	|	И ДополнительныеСведения.Значение <> """"
	|	И (&Организация = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДополнительныеСведения.Объект = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.Свойство_ИдКонтрагента,
	|	ТЗ.BoxID
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Свойство_ИдКонтрагента,
	|	ВТ.BoxID,
	|	СвойстваОбъектов.Ссылка КАК Свойство_ИдПодразделенияКонтрагента,
	|	СвойстваОбъектов2.Ссылка КАК Свойство_НаименованиеПодразделенияКонтрагента
	|ПОМЕСТИТЬ ТаблицаСвойствКонтрагентов
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов
	|		ПО (""ДДИДП_"" + ВТ.BoxID = СвойстваОбъектов.Наименование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов2
	|		ПО (""ДДНП_"" + ВТ.BoxID = СвойстваОбъектов2.Наименование)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхОрганизаций.Организация,
	|	ТаблицаДанныхОрганизаций.ИдентификаторОрганизации,
	|	ТаблицаДанныхОрганизаций.ПечатнаяФормаДляТоваров,
	|	ТаблицаДанныхОрганизаций.ПечатнаяФормаДляУслуг,
	|	ТаблицаСвойствКонтрагентов.Свойство_ИдКонтрагента,
	|	ТаблицаСвойствКонтрагентов.Свойство_ИдПодразделенияКонтрагента,
	|	ТаблицаСвойствКонтрагентов.Свойство_НаименованиеПодразделенияКонтрагента,
	|	ТаблицаСвойствИДКонтрагента.Объект КАК Контрагент,
	|	ТаблицаСвойствИДКонтрагента.Значение КАК ИдКонтрагента
	|ПОМЕСТИТЬ ТаблицаСКонтрагентами
	|ИЗ
	|	ТаблицаДанныхОрганизаций КАК ТаблицаДанныхОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойствКонтрагентов КАК ТаблицаСвойствКонтрагентов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ТаблицаСвойствИДКонтрагента
	|			ПО ТаблицаСвойствКонтрагентов.Свойство_ИдКонтрагента = ТаблицаСвойствИДКонтрагента.Свойство
	|				И (ТаблицаСвойствИДКонтрагента.Объект ССЫЛКА Справочник.Контрагенты)
	|				И (ТаблицаСвойствИДКонтрагента.Значение <> """")
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСКонтрагентами.Организация,
	|	ТаблицаСКонтрагентами.ИдентификаторОрганизации,
	|	ЕСТЬNULL(ТаблицаСКонтрагентами.ПечатнаяФормаДляТоваров, """") КАК ПечатнаяФормаДляТоваров,
	|	ЕСТЬNULL(ТаблицаСКонтрагентами.ПечатнаяФормаДляУслуг, """") КАК ПечатнаяФормаДляУслуг,
	|	ТаблицаСКонтрагентами.Свойство_ИдКонтрагента,
	|	ТаблицаСКонтрагентами.Свойство_ИдПодразделенияКонтрагента,
	|	ТаблицаСКонтрагентами.Свойство_НаименованиеПодразделенияКонтрагента,
	|	ТаблицаСКонтрагентами.Контрагент,
	|	ТаблицаСКонтрагентами.ИдКонтрагента,
	|	ДополнительныеСведения.Значение КАК ИдПодразделенияКонтрагента,
	|	ДополнительныеСведения1.Значение КАК НаименованиеПодразделенияКонтрагента
	|ИЗ
	|	ТаблицаСКонтрагентами КАК ТаблицаСКонтрагентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ТаблицаСКонтрагентами.Контрагент = ДополнительныеСведения.Объект
	|			И ТаблицаСКонтрагентами.Свойство_ИдПодразделенияКонтрагента = ДополнительныеСведения.Свойство
	|			И (ДополнительныеСведения.Объект ССЫЛКА Справочник.Контрагенты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
	|		ПО ТаблицаСКонтрагентами.Контрагент = ДополнительныеСведения1.Объект
	|			И (ДополнительныеСведения1.Объект ССЫЛКА Справочник.Контрагенты)
	|			И ТаблицаСКонтрагентами.Свойство_НаименованиеПодразделенияКонтрагента = ДополнительныеСведения1.Свойство");
	
	запрос.УстановитьПараметр("Организация",			  ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	запрос.УстановитьПараметр("ИдентификаторОрганизации", МетодСервера(,"ИдентификаторСвойстваЯщикОрганизации"));
	Запрос.УстановитьПараметр("ПечатнаяФормаДляТоваров",  МетодСервера(,"ИдентификаторСвойстваПечатнаяФормаДляТоваров"));
	Запрос.УстановитьПараметр("ПечатнаяФормаДляУслуг",    МетодСервера(,"ИдентификаторСвойстваПечатнаяФормаДляУслуг"));
	запрос.УстановитьПараметр("ТЗ", 					  ТаблицаСвойств);
	
	Результат =  Запрос.ВыполнитьПакет()[4].Выгрузить();
	
	Результат.колонки.добавить("Статус");
	Результат.колонки.добавить("ЭтоТестоваяОрганизация");
	Результат.колонки.добавить("ЭтоТестовыйКонтрагент");
	
	Возврат МетодСервера(,"ТаблицаЗначений_2_МассивСтруктур", Результат);
	
КонецФункции 

&НаКлиенте
//Устанавливает связи с другими документами пакета или ранее отправленными документами
//
//Параметры:
//	Document - COMОбъект - элемент коллекции DocumentsToSend сущности PackageSendTask
//	СоответствиеCustomIdСсылке1С - соответствие - хранит соответствие CustomDocumentId ссылке на документ в 1С
//
Процедура УстановитьСвязиДляDocument(Знач Document, Знач СоответствиеCustomIdСсылке1СПакета)
			
	//1. связанный документ может быть в пакете, который еще не отправлен
	//2. связанный документ может быть уже отправлен ранее
	
	DocumentType= 		Document.Type;
	CustomDocumentId= 	Document.CustomDocumentId;
	
	СтруктураСоответствия= СоответствиеCustomIdСсылке1СПакета.Получить(CustomDocumentId); 
		
	DocumentСсылкаВ1С= 	СтруктураСоответствия.ДокументСсылкаВ1С;
	ЭтоВПФ= 			СтруктураСоответствия.ЭтоВПФ;
	ЭтоКорректировкаИсправление= СтруктураСоответствия.ЭтоКорректировкаИсправление;
	
	Если ЭтоВПФ Тогда
		
		//Сценарий для неформализованного документа, добавленного через механиз доплнительных внешних печатных форм
		CustomDocumentIdОснования= "";
		
		Для каждого СтрокаСоответствия из СоответствиеCustomIdСсылке1СПакета Цикл
			
			Если ЗначениеЗаполнено(CustomDocumentIdОснования) Тогда
				Прервать;
			КонецЕсли;
			
			СтруктураСоответствия= СтрокаСоответствия.Значение;
			
			Если  СтруктураСоответствия.ДокументСсылкаВ1С = DocumentСсылкаВ1С
				И СтруктураСоответствия.ЭтоВПФ = Ложь Тогда
				
				CustomDocumentIdОснования= СтрокаСоответствия.Ключ; 
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(CustomDocumentIdОснования) Тогда
			Document.AddInitialDocumentFromPackage(CustomDocumentIdОснования);
		Иначе
			IdДокументаОснования= МетодСервера(, "Документ_2_DocumentID", DocumentСсылкаВ1С);	
			Если ЗначениеЗаполнено(IdДокументаОснования) Тогда
				Document.AddInitialDocument(IdДокументаОснования);
			КонецЕсли
		КонецЕсли;
		
	ИначеЕсли   DocumentType = "Nonformalized" ИЛИ DocumentType = "AcceptanceCertificate" ИЛИ DocumentType = "ReconciliationAct"
			ИЛИ DocumentType = "ServiceDetails" ИЛИ DocumentType = "Contract" ИЛИ DocumentType = "PriceListAgreement"
			ИЛИ DocumentType = "CertificateRegistry" ИЛИ DocumentType = "NonformalizedProforma" Тогда 
		
		// Сценарий для неформализованного документа добавленного с диска
		Если СоответствиеCustomIdСсылке1СПакета.Количество() > 1 Тогда
			
			// Будем в качестве родителя указывать первый элемент соответствия с отличающимся CustomDocumentId
			Для каждого ЭлементСоответствия из СоответствиеCustomIdСсылке1СПакета Цикл
				Если НЕ CustomDocumentId = ЭлементСоответствия.Ключ Тогда
					Document.AddInitialDocumentFromPackage(ЭлементСоответствия.Ключ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;		
			
	Иначе
		
		СтруктураДанныеОСвязях= ЗаполнитьИнформациюОСвязяхДокументаНаСервере(DocumentСсылкаВ1С, DocumentType, ЭтоКорректировкаИсправление);
		
		МассивПодчиненныхДокументов= 	СтруктураДанныеОСвязях.МассивПодчиненныхДокументов;
		МассивSubordinateDocumentId= 	СтруктураДанныеОСвязях.МассивSubordinateDocumentId;
		МассивРодительскихДокументов= 	СтруктураДанныеОСвязях.МассивРодительскихДокументов;
		МассивInitialDocumentId= 		СтруктураДанныеОСвязях.МассивInitialDocumentId;
		
		//*** Подчиненные доки
					
		//1. сперва проверяем наличие подчиненного документа среди документов пакета
		Для каждого ПодчиненныйДокумент из МассивПодчиненныхДокументов Цикл //строка структуры("ссылка, ЭтоСчетНаОплату")
									
			Для каждого СтрокаСоответствия из СоответствиеCustomIdСсылке1СПакета Цикл
				
				СтруктураСоответствия= СтрокаСоответствия.Значение;
				
				Если НЕ CustomDocumentId = СтрокаСоответствия.Ключ
					И СтруктураСоответствия.ДокументСсылкаВ1С = ПодчиненныйДокумент.Ссылка
					И СтруктураСоответствия.ЭтоВПФ = Ложь Тогда
					
					Document.AddSubordinateDocumentFromPackage(СтрокаСоответствия.Ключ);
					
				КонецЕсли;
				
			КонецЦикла;
					
		КонецЦикла;
		
		//2. вторым шагом ищем среди уже отправленных документов
		Для каждого SubordinateDocumentId из МассивSubordinateDocumentId Цикл 
			Document.AddSubordinateDocument(SubordinateDocumentId);
		КонецЦикла;
		
		//*** Родительские доки
				
		//1. сперва проверяем наличие подчиненного документа среди документов пакета
		Для каждого РодительскийДокумент из МассивРодительскихДокументов Цикл
			
			РодительскийДокСсылка= РодительскийДокумент.Ссылка;
			
			Для каждого СтрокаСоответствия из СоответствиеCustomIdСсылке1СПакета Цикл
												
				СтруктураСоответствия= СтрокаСоответствия.Значение;
				
				Если НЕ CustomDocumentId = СтрокаСоответствия.Ключ
					И СтруктураСоответствия.ДокументСсылкаВ1С = РодительскийДокумент.Ссылка
					И СтруктураСоответствия.ЭтоВПФ = Ложь Тогда
					
					Document.AddInitialDocumentFromPackage(СтрокаСоответствия.Ключ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		//2. вторым шагом ищем среди уже отправленных документов
		Для каждого InitialDocumentId из МассивInitialDocumentId Цикл 
			Document.AddInitialDocument(InitialDocumentId);
		КонецЦикла;
										
	КонецЕсли;
	
КонецПроцедуры //УстановитьСвязиДляDocument()

&НаСервере
Функция ЗаполнитьИнформациюОСвязяхДокументаНаСервере(Знач ДокументСсылка, Знач DocumentType, Знач ЭтоКорректировкаИсправление = Ложь)
	
	СтруктураДанныеОСвязях= Новый Структура();
	
	МассивПодчиненныхДокументов= ПолучитьМассивПодчиненныхДокументов(ДокументСсылка, DocumentType);
	МассивSubordinateDocumentId= МассивДокументов_2_МассивDocumentId(МассивПодчиненныхДокументов);
	
	МассивРодительскихДокументов= 	ПолучитьМассивРодительскихДокументов(ДокументСсылка, DocumentType, ЭтоКорректировкаИсправление);
	МассивInitialDocumentId= 		МассивДокументов_2_МассивDocumentId(МассивРодительскихДокументов);

	
	СтруктураДанныеОСвязях.Вставить("МассивПодчиненныхДокументов", 	МассивПодчиненныхДокументов);
	СтруктураДанныеОСвязях.Вставить("МассивSubordinateDocumentId", 	МассивSubordinateDocumentId);
	СтруктураДанныеОСвязях.Вставить("МассивРодительскихДокументов", МассивРодительскихДокументов);
	СтруктураДанныеОСвязях.Вставить("МассивInitialDocumentId", 		МассивInitialDocumentId);
	
	Возврат СтруктураДанныеОСвязях;	
	
КонецФункции

&НаСервере
Функция ПолучитьМассивПодчиненныхДокументов(Знач ДокументСсылка, Знач DocumentType)
	
	МассивПодчиненныхДокументов= Новый Массив;
	
	Если НЕ DocumentType = "NonformalizedProforma" Тогда
		
		СсылкаСФ= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию", ДокументСсылка);
		Если ЗначениеЗаполнено(СсылкаСФ) Тогда
			МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", СсылкаСФ, Ложь));
		КонецЕсли;
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоНакладная", ДокументСсылка) Тогда
		
		//счет на оплату на основании РТУ
		МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ДокументСсылка, Ложь));
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоСчетНаОплату", ДокументСсылка) Тогда
		
		//счет на оплату на основании счета на оплату
		МассивРТУ= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьМассивСсылокРТУПоСчетуНаОплату", ДокументСсылка);
		Для каждого ДокументРТУ из МассивРТУ Цикл
			МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ДокументРТУ, Ложь));
		КонецЦикла;
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоЗаказПокупателя", ДокументСсылка) Тогда
		
		//счет на оплату на основании заказа покупателя
		МассивРТУ= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьМассивСсылокРТУПоСчетуНаОплату", ДокументСсылка);
		Для каждого ДокументРТУ из МассивРТУ Цикл
			МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ДокументРТУ, Ложь));
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат МассивПодчиненныхДокументов;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивРодительскихДокументов(Знач ДокументСсылка, Знач DocumentType, Знач ЭтоКорректировкаИсправление = Ложь)	
	
	МассивРодительскихДокументов= Новый Массив;
	
	Если НЕ Найти(DocumentType, "Invoice") = 0 Тогда
		
		Если ЭтоКорректировкаИсправление Тогда
			// ищем СФ - основание
			СФОснование= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьСФОснованиеПоИСФ_КСФ", ДокументСсылка);
			Если ЗначениеЗаполнено(СФОснование) Тогда
				МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", СФОснование, Ложь));
			КонецЕсли;
		Иначе
			МассивСсылокРНК= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьМассивРасходныхНакладныхПоСчетуФактуреВыданному", ДокументСсылка);
			Для каждого СсылкаРНК из МассивСсылокРНК Цикл 
				МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", СсылкаРНК, Ложь));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоКорректировкаРеализации", ДокументСсылка) Тогда
		
		ДокРТУСсылка= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьДокОснованиеКорректировкиРеализации", ДокументСсылка);
		Если ЗначениеЗаполнено(ДокРТУСсылка) Тогда
			МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ДокРТУСсылка, Ложь));
		КонецЕсли;
	
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоНакладная", ДокументСсылка) Тогда
					
		Если НЕ DocumentType = "NonformalizedProforma" Тогда 
			СчетНаОплату= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьСчетНаОплатуНаОснованииРТУ", ДокументСсылка);
			Если ЗначениеЗаполнено(СчетНаОплату) Тогда 
				МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", СчетНаОплату, Истина));
			Иначе
				ЗаказПокупателя= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьЗаказПокупателяНаОснованииРТУ", ДокументСсылка);
				Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
					МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ЗаказПокупателя, Истина));
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивРодительскихДокументов;
	
КонецФункции

&НаКлиенте
Функция СформироватьCustomDocumentId(Знач ТекущийДокументСсылка, Знач ВнешняяПечатнаяФорма, Знач DocumentType, Знач СоответствиеCustomIdСсылке1С, Знач СоответствиеCustomIdСсылке1СТекущегоПакета, Знач ЭтоПеревыставление= Ложь)
	
	Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			
		DocId= МетодСервера(,"Документ_2_DocumentID", ТекущийДокументСсылка);
		
		Если НЕ ЗначениеЗаполнено(DocId) Тогда
									
			// ищем CustomID документа основания среди документов пакета
			IDДокОснования= ПолучитьIDДокументаОснования(ТекущийДокументСсылка, СоответствиеCustomIdСсылке1СТекущегоПакета);
			
			// ищем CustomID документа основания среди отправляемых в текущей итерации
			Если НЕ ЗначениеЗаполнено(IDДокОснования) Тогда
				IDДокОснования= ПолучитьIDДокументаОснования(ТекущийДокументСсылка, СоответствиеCustomIdСсылке1С);
			КонецЕсли;
						
		Иначе
			// берем ID уже отправленного
			IDДокОснования= DocId;
		КонецЕсли;
		
		//зададим идентификатор для поиска документа
		CustomDocumentId= ПолучитьИдентификаторОтправленнойВПФ(IDДокОснования, ВнешняяПечатнаяФорма);
	
	Иначе 
		
		Если ЗначениеЗаполнено(DocumentType) И DocumentType = "NonformalizedProforma" Тогда
			НаименованиеИдентификатораСвойства= ПолучитьИдентификаторСвойства("ИдентификаторСвойстваДиадокCustomDocumentIdСчет");
		Иначе
			НаименованиеИдентификатораСвойства= ПолучитьИдентификаторСвойства("ИдентификаторСвойстваДиадокCustomDocumentId");
		КонецЕсли;
		
		Если НЕ ЭтоПеревыставление Тогда
			//при перевыставлении необходимо принудительно менять OperationId, иначе сервер вернет тот же самый документ
			OperationId= МетодСервера(, "ПолучитьЗначениеСвойства", ТекущийДокументСсылка, НаименованиеИдентификатораСвойства);	
		КонецЕсли;
						
		Если ЗначениеЗаполнено(OperationId) Тогда
			CustomDocumentId= OperationId;		
		Иначе
			CustomDocumentId= Строка(Новый УникальныйИдентификатор);	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат CustomDocumentId;
	
КонецФункции

&НаКлиенте
Функция ПолучитьIDДокументаОснования(ДокументОснованиеСсылка, ПараметрСоответствиеCustomIdСсылке1С)
	
	IDДокОснования= "";
	
	Для каждого ЭлементСоответствия из ПараметрСоответствиеCustomIdСсылке1С Цикл
				
		СтруктураСоответствия= ЭлементСоответствия.Значение;
		
		Если ДокументОснованиеСсылка = СтруктураСоответствия.ДокументСсылкаВ1С Тогда
			IDДокОснования= ЭлементСоответствия.Ключ; 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат IDДокОснования;
	
КонецФункции

&НаСервере
Функция МассивДокументов_2_МассивDocumentId(МассивДокументов)
	
	МассивDocumentId= Новый Массив;
	
	Для каждого Док из МассивДокументов Цикл 
		Если Док.ЭтоСчетНаОплату Тогда 
			DocId= МетодСервера(, "Документ_2_DocumentID", Док.Ссылка, Истина);
		Иначе 	
			DocId= МетодСервера(, "Документ_2_DocumentID", Док.Ссылка); 
		КонецЕсли;	
		Если ЗначениеЗаполнено(DocId) Тогда
			МассивDocumentId.Добавить(DocId);
		КонецЕсли;
	КонецЦикла;	  
	
	Возврат МассивDocumentId;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторСвойства(ИмяФункцииПолученияИдентификатора)
	
	Если СтруктураИндентификаторовСвойств = Неопределено Тогда
		СтруктураИндентификаторовСвойств= Новый Структура;
	КонецЕсли;
	
	НайденноеЗначение= Неопределено;
	СтруктураИндентификаторовСвойств.Свойство(ИмяФункцииПолученияИдентификатора, НайденноеЗначение);
	
	Если НайденноеЗначение = Неопределено Тогда
		
		Ключ= 		ИмяФункцииПолученияИдентификатора;
		Значение=	МетодСервера(, ИмяФункцииПолученияИдентификатора);
		
		СтруктураИндентификаторовСвойств.Вставить(Ключ, Значение);
		
		Возврат Значение;
		
	Иначе
		
		Возврат НайденноеЗначение;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

# Область ОБЩИЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

&НаКлиенте
Процедура ЗаполнитьContentПоСтруктуре(content, СтруктураДанных, описаниеСтруктурыДанных = "") экспорт 
	
	Для каждого Элемент из СтруктураДанных цикл 
		Если (Элемент.ключ="Totals") или (Элемент.ключ="TotalGrossQuantity") или (Элемент.ключ="TotalParcelsQuantity")  или (Элемент.ключ="TotalSum") 
			или (Элемент.ключ="TotalsInc")  или (Элемент.ключ="TotalsDec") тогда
			//итоги не инициализируем в объекте
		ИначеЕсли типЗнч(Элемент.значение) = тип("Структура") И Найти(Элемент.Ключ, "Ссылка") = 0 тогда
			
			Если (Элемент.ключ="AmountsDec") или (Элемент.ключ="AmountsInc") Тогда
				//итоги пропускаем	
			Иначе
				попытка
					ЭлементКонтента = Content[Элемент.ключ];
				Исключение
					ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(ЭлементКонтента, Элемент.Значение, описаниеСтруктурыДанных+"."+Элемент.ключ);
			КонецЕсли;
			
		ИначеЕсли Элемент.ключ = "Items"  тогда 
			для каждого стр из СтруктураДанных.items цикл 
				попытка 
					item =content.addItem();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(item, стр, описаниеСтруктурыДанных+".Items");
			конеццикла;
		ИначеЕсли Элемент.ключ = "PaymentDocuments"  тогда 
			для каждого стр из СтруктураДанных.PaymentDocuments цикл 
				попытка 
					PaymentDocument =content.addPaymentDocument();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(PaymentDocument, стр, описаниеСтруктурыДанных+".PaymentDocuments");
			конеццикла;
			
		ИначеЕсли Элемент.ключ = "StructedAdditionalInfos" Тогда 
			
			для каждого стр из СтруктураДанных.StructedAdditionalInfos цикл 
				попытка 
					AdditionalInfo =content.addStructedAdditionalInfo();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(AdditionalInfo, стр, описаниеСтруктурыДанных+".StructedAdditionalInfos");
			конеццикла;
			
		ИначеЕсли Элемент.ключ = "OriginalInvoices"  тогда 
			для каждого стр из СтруктураДанных.OriginalInvoices цикл 
				попытка 
					OriginalInvoice =content.addOriginalInvoice();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(OriginalInvoice, стр, описаниеСтруктурыДанных+".OriginalInvoices");
			конеццикла;

		ИначеЕсли Элемент.ключ = "AdditionalInfoId" И ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			
			Для каждого стр из СтруктураДанных.AdditionalInfoId.StructedAdditionalInfos Цикл
				Попытка 
					AdditionalInfo = content.AdditionalInfoId.addStructedAdditionalInfo();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(AdditionalInfo, стр, описаниеСтруктурыДанных+".StructedAdditionalInfos");
			КонецЦикла;	
			
		ИначеЕсли Элемент.ключ = "TransferBases" Тогда
			
			Для каждого стр из СтруктураДанных.TransferBases Цикл
				Попытка 
					TransferBase = content.addTransferBase();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(TransferBase, стр, описаниеСтруктурыДанных+".TransferBases");
			КонецЦикла;	
			
		ИначеЕсли Элемент.ключ = "Waybills" Тогда
			
			Для каждого стр из СтруктураДанных.Waybills Цикл
				Попытка 
					Waybill = content.addWaybill();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(Waybill, стр, описаниеСтруктурыДанных+".Waybills");
			КонецЦикла;	
			
		ИначеЕсли Элемент.ключ = "Signers" Тогда
			
			Для каждого стр из СтруктураДанных.Signers Цикл
				Попытка 
					Signer = content.addSigner();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(Signer, стр, описаниеСтруктурыДанных+".Signer");
			КонецЦикла;	
			
		ИначеЕсли Элемент.ключ = "CustomDeclarations" И СтруктураДанных.CustomDeclarations <> Неопределено Тогда
			
			Попытка
				ЭлементКонтента = content;
			Исключение
				ВызватьИсключение("Не удается инициализировать коллекцию Item для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );	
			КонецПопытки;
			Для каждого стр из СтруктураДанных.CustomDeclarations Цикл
				Попытка 
					CustomDeclaration = ЭлементКонтента.addCustomDeclaration();
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(CustomDeclaration, стр, описаниеСтруктурыДанных+".CustomDeclarations");
			КонецЦикла;

		ИначеЕсли (Элемент.ключ="AmountsDec") или (Элемент.ключ="AmountsInc") тогда 
			//итоги пропускаем
		ИначеЕсли (Элемент.ключ = "OriginalValues") или    (Элемент.ключ = "CorrectedValues") тогда 
			попытка
				ЭлементКонтента =  content[Элемент.ключ];
			Исключение
				ВызватьИсключение("Не удается инициализировать реквизит "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
			КонецПопытки;
			ЗаполнитьContentПоСтруктуре(ЭлементКонтента,СтруктураДанных[Элемент.ключ], описаниеСтруктурыДанных+"."+Элемент.ключ);
			
		ИначеЕсли найти(Элемент.ключ, "Ссылка") = 0 И Элемент.Значение <> Неопределено тогда  
			попытка
				content[Элемент.ключ] =  ?(типЗнч(Элемент.Значение)=тип("Строка"), СокрЛП(СтрЗаменить(Элемент.Значение, Символы.НПП, "")), Элемент.Значение);
			Исключение
				ВызватьИсключение("Не удается инициализировать реквизит "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
			КонецПопытки
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТестовогоПодписанта(Content, Organization)
	
	ФИОТекущегоПользователяДиадок = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
	
	Signer = Content.Signer;
	
	Signer.Surname		= МетодКлиента("ВыделитьСлово", ФИОТекущегоПользователяДиадок);
	Signer.FirstName	= МетодКлиента("ВыделитьСлово", ФИОТекущегоПользователяДиадок);
	Signer.Patronymic	= МетодКлиента("ВыделитьСлово", ФИОТекущегоПользователяДиадок);
	
КонецПроцедуры	 

&НаСервере
Процедура ЗаполнитьМассивSubordinateDocumentId(МассивSubordinateDocumentId, Знач СсылкаНаОбъект, Знач DocumentType)
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
		ЗаполнитьМассивSubordinateDocumentId_УНФ(МассивSubordinateDocumentId, СсылкаНаОбъект, DocumentType);	
	Иначе
		ЗаполнитьМассивSubordinateDocumentId_Типовой(МассивSubordinateDocumentId, СсылкаНаОбъект, DocumentType);	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивSubordinateDocumentId_УНФ(МассивSubordinateDocumentId, Знач СсылкаНаОбъект, Знач DocumentType)
	
	Если DocumentType = "XmlTorg12" Тогда
		
		Запрос= Новый Запрос;
		Если НЕ Метаданные.Документы.СчетФактура.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Запрос.Текст= "ВЫБРАТЬ
				|	СчетФактураВыданныйДокументыОснования.Ссылка
				|ИЗ
				|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
				|ГДЕ
				|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование
				|	И СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ";
		Иначе 
			Запрос.Текст= "ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка
				|ИЗ
				|	Документ.СчетФактура КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
				|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект);
		
		Выборка= Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			docID=  МетодСервера(,"Документ_2_DocumentID", Выборка.Ссылка);
			Если ЗначениеЗаполнено(docID) Тогда
				МассивSubordinateDocumentId.Добавить(docID);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли DocumentType = "NonformalizedProforma" Тогда
		
		ВидДокумента= МетодСервера(,"ИмяТипаОбъекта", СсылкаНаОбъект);
		
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда 
			
			docID= МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект);
			
			Если ЗначениеЗаполнено(docID) Тогда
				МассивSubordinateDocumentId.Добавить(docID);
			КонецЕсли;		
			
		ИначеЕсли ВидДокумента = "СчетНаОплату" И ТипЗнч(СсылкаНаОбъект.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			
			docID= МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект.ДокументОснование);
			Если ЗначениеЗаполнено(docID) Тогда
				МассивSubordinateDocumentId.Добавить(docID);
			КонецЕсли;	 		

		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивSubordinateDocumentId_Типовой(МассивSubordinateDocumentId, Знач СсылкаНаОбъект, Знач DocumentType)
	
	Если DocumentType = "XmlTorg12" Тогда
		
		Запрос= Новый Запрос;
		Если НЕ Метаданные.Документы.СчетФактураВыданный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Запрос.Текст= "ВЫБРАТЬ
				|	СчетФактураВыданныйДокументыОснования.Ссылка
				|ИЗ
				|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
				|ГДЕ
				|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование
				|	И СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ";
		Иначе 
			Запрос.Текст= "ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
				|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ"

		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект);
		
		Выборка= Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			docID=  МетодСервера(,"Документ_2_DocumentID", Выборка.Ссылка);
			Если ЗначениеЗаполнено(docID) Тогда
				МассивSubordinateDocumentId.Добавить(docID);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли DocumentType = "NonformalizedProforma" Тогда
		
		ВидДокумента= МетодСервера(,"ИмяТипаОбъекта", СсылкаНаОбъект);
		
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда 
			
			docID= МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект);
			
			Если ЗначениеЗаполнено(docID) Тогда
				МассивSubordinateDocumentId.Добавить(docID);
			КонецЕсли;		
			
		ИначеЕсли ВидДокумента = "СчетНаОплатуПокупателю" И МетодСервера(,"СуществуетОбъектМетаданных", "Документ.РеализацияТоваровУслуг.Реквизит.СчетНаОплатуПокупателю") Тогда 
		
			Запрос= Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Документ.РеализацияТоваровУслуг КАК Т ГДЕ СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю И НЕ ПометкаУдаления");
			Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СсылкаНаОбъект);
			
			Выборка= Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				docID= МетодСервера(,"Документ_2_DocumentID", Выборка.Ссылка);
				Если ЗначениеЗаполнено(docID) Тогда
					МассивSubordinateDocumentId.Добавить(docID);
				КонецЕсли;	 		
			КонецЦикла;

		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивInitialDocumentID(МассивInitialDocumentID, Знач СсылкаНаОбъект, Знач DocumentType)

	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
		ЗаполнитьМассивInitialDocumentID_УНФ(МассивInitialDocumentID, СсылкаНаОбъект, DocumentType);	
	Иначе
		ЗаполнитьМассивInitialDocumentID_Типовой(МассивInitialDocumentID, СсылкаНаОбъект, DocumentType);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивInitialDocumentID_УНФ(МассивInitialDocumentID, Знач СсылкаНаОбъект, Знач DocumentType)
	
	Если DocumentType = "Invoice" Тогда
		
		Запрос= Новый Запрос;
		Если НЕ Метаданные.Документы.СчетФактура.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Запрос.Текст= 
			"ВЫБРАТЬ
			|	СчетФактураВыданныйДокументыОснования.ДокументОснование
			|ИЗ
			|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
			|ГДЕ
			|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
		Иначе 
			Запрос.Текст= 
			"ВЫБРАТЬ
			|	СчетФактураВыданный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактура КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.Ссылка = &Ссылка";
		КонецЕсли;							 
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		Выборка= Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			docID= МетодСервера(,"Документ_2_DocumentID", Выборка.ДокументОснование);
			Если ЗначениеЗаполнено(docID) Тогда
				МассивInitialDocumentID.Добавить(docID);
			КонецЕсли;	  
		КонецЦикла;
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоНакладная", СсылкаНаОбъект) Тогда 
		
		//ищем ид счета в РНК
		docID= МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект, Истина);
		Если ЗначениеЗаполнено(docID) Тогда
			МассивInitialDocumentID.Добавить(docID);
		КонецЕсли;	  
				
		//ищем ид счета в документе-основании
		Если НЕ Метаданные.Документы.Найти("СчетНаОплату") = Неопределено Тогда
			
			Запрос= Новый Запрос;
			Запрос.Текст= "ВЫБРАТЬ
              |	СчетНаОплату.Ссылка КАК СчетНаОплату
              |ИЗ
              |	Документ.СчетНаОплату КАК СчетНаОплату
              |ГДЕ
              |	СчетНаОплату.ДокументОснование = &ДокументОснование";
						  
			Запрос.Параметры.Вставить("ДокументОснование", СсылкаНаОбъект);
			
			Выборка= Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				docID= МетодСервера(,"Документ_2_DocumentID", Выборка.СчетНаОплату, Истина);
				Если ЗначениеЗаполнено(docID) Тогда
					МассивInitialDocumentID.Добавить(docID);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивInitialDocumentID_Типовой(МассивInitialDocumentID, Знач СсылкаНаОбъект, Знач DocumentType)
	
	Если DocumentType = "Invoice" Тогда
		
		Запрос= Новый Запрос;
		Если НЕ Метаданные.Документы.СчетФактураВыданный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Запрос.Текст= 
			"ВЫБРАТЬ
			|	СчетФактураВыданныйДокументыОснования.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
			|ГДЕ
			|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
		Иначе 
			Запрос.Текст= 
			"ВЫБРАТЬ
			|	СчетФактураВыданный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.Ссылка = &Ссылка";
		КонецЕсли;							 
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		Выборка= Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			docID= МетодСервера(,"Документ_2_DocumentID", Выборка.ДокументОснование);
			Если ЗначениеЗаполнено(docID) Тогда
				МассивInitialDocumentID.Добавить(docID);
			КонецЕсли;	  
		КонецЦикла;
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоНакладная", СсылкаНаОбъект) Тогда 
		
		//ищем ид счета в РНК
		docID= МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект, Истина);
		Если ЗначениеЗаполнено(docID) Тогда
			МассивInitialDocumentID.Добавить(docID);
		КонецЕсли;	  
				

		//ищем ид счета в документе-основании
		Если НЕ СсылкаНаОбъект.Метаданные().Реквизиты.Найти("СчетНаОплатуПокупателю") = Неопределено
			И ЗначениеЗаполнено(СсылкаНаОбъект.СчетНаОплатуПокупателю) Тогда 
			
			docID= МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект.СчетНаОплатуПокупателю, Истина);
			Если ЗначениеЗаполнено(docID) Тогда
				МассивInitialDocumentID.Добавить(docID);
			КонецЕсли;	  
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеОбОснованииИСФВМассивInitialDocumentID(МассивInitialDocumentID, ДанныеОбОснованииИСФ)
	
	Если ДанныеОбОснованииИСФ.Свойство("СФОснование")
		И ЗначениеЗаполнено(ДанныеОбОснованииИСФ.СФОснование) Тогда
		docID =  МетодСервера(,"Документ_2_DocumentID", ДанныеОбОснованииИСФ.СФОснование);
		Если ЗначениеЗаполнено(docID) тогда
			МассивInitialDocumentID.Добавить(docID);
		КонецЕсли;	  
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

# Область ФОРМИРОВАНИЕ_ПЕЧАТНЫХ_ФОРМ

&НаСервере
Функция ПолучитьВнешнююПечатнуюФормуСчета(ДокументСсылка)
	
	Возврат МетодСервера(,"ПолучитьВнешнююПечатнуюФормуСчета", ДокументСсылка);
	
КонецФункции

&НаСервере
Функция ПолучитьВнешнююПечатнуюФормуАктаСверки(ДокументСсылка)
	
	Возврат МетодСервера(,"ПолучитьВнешнююПечатнуюФормуАктаСверки", ДокументСсылка);
	
КонецФункции

&НаСервере
Функция ПолучитьВнешнююПечатнуюФормуАкта(ДокументСсылка)
	
	Возврат МетодСервера(,"ПолучитьВнешнююПечатнуюФормуАкта", ДокументСсылка);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПечатнуюФормуАктаВыполненныхРабот(ДокументСсылка)
	
	Результат=		СформироватьФайлАктавыполненныхРабот(ДокументСсылка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПечатнуюФормуСчета(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта)
	
	Результат=	СформироватьФайлСчетаНаОплату(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПечатнуюФормуАктаСверки(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта)
	
	Результат =	СформироватьФайлАктаСверки(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаменитьНедопустимыеСимволы(НомерДокумента)
	
	НедопустимыеЗнаки = "\/:*?""<>|";
	Пока СтрДлина(НедопустимыеЗнаки)>0 Цикл
		ТекСимвол = Лев(НедопустимыеЗнаки,1);
		Если Найти(НомерДокумента,ТекСимвол)<>0 Тогда
			НомерДокумента = СтрЗаменить(НомерДокумента,ТекСимвол,"_");
		КонецЕсли;
		НедопустимыеЗнаки = Сред(НедопустимыеЗнаки,2);
	КонецЦикла;
	
	Возврат НомерДокумента;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПечатныхФормСчета(ДокументСсылка)
	Возврат МетодСервера(,"ПолучитьСтруктуруПечатныхФормСчета", ДокументСсылка);
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПечатныхФормАктаСверки(Знач СсылкаНаОбъект)
	Возврат МетодСервера(,"ПолучитьСтруктуруПечатныхФормАктаСверки", СсылкаНаОбъект);
КонецФункции

&НаКлиенте
Функция СформироватьФайлСчетаНаОплату(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта)
	
	Если НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуСчета(ДокументСсылка)) Тогда
		Результат= МетодСервера("Модуль_ИнтеграцияУниверсальный", "СформироватьПечатнуюФормуСчетаНаОплату", ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
	Иначе
		Результат= ПолучитьСтруктуруПечатныхФормСчета(ДокументСсылка);
		
		МетаСчета= МетодСервера("Модуль_ИнтеграцияУниверсальный","СформироватьМетуСчетаНаОплату", ДокументСсылка);
		Для каждого ЭлементМетыСчета Из МетаСчета Цикл
			Результат.Вставить(ЭлементМетыСчета.Ключ, ЭлементМетыСчета.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		
		ИмяВременногоФайла=	ПолучитьИмяВременногоФайла("pdf");
		Результат.Таблица.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
		Результат.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
		
		ИмяФайла = "Счет №" + ЗаменитьНедопустимыеСимволы(Результат.Номер) + " от " + Формат(Результат.Дата, "ДЛФ=Д") + ".pdf";
		Результат.Вставить("ИмяФайла",	ИмяФайла);
		
	Исключение
		
		Результат.Вставить("СписокОшибок", Результат.СписокОшибок + Символы.ПС + ОписаниеОшибки());
		
		Результат.Вставить("АдресДвоичныхДанныхФайла", 	"");
		Результат.Вставить("ИмяФайла",	"");
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СформироватьФайлАктаСверки(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта)
	
	Если НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуАктаСверки(ДокументСсылка)) Тогда
		Результат= МетодСервера("Модуль_ИнтеграцияУниверсальный","СформироватьПечатнуюФормуАктаСверки", ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
	Иначе
		Результат= ПолучитьСтруктуруПечатныхФормАктаСверки(ДокументСсылка);
	КонецЕсли;
	
	МетаАктаСверки=	МетодСервера("Модуль_ИнтеграцияУниверсальный","СформироватьМетуАктаСверки", ДокументСсылка);
	Для каждого ЭлементМетыАктаСверки Из МетаАктаСверки Цикл
		Результат.Вставить(ЭлементМетыАктаСверки.Ключ, ЭлементМетыАктаСверки.Значение);
	КонецЦикла;
	
	Попытка
		
		ИмяВременногоФайла=		ПолучитьИмяВременногоФайла("pdf");
		Результат.Таблица.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
		Результат.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
		
		ИмяФайла = "Акт сверки №" + ЗаменитьНедопустимыеСимволы(Результат.Номер) + " от " + Формат(Результат.Дата, "ДЛФ=Д") + ".pdf";
		Результат.Вставить("ИмяФайла",	ИмяФайла);
		
	Исключение
		
		Результат.Вставить("СписокОшибок", Результат.СписокОшибок + Символы.ПС + ОписаниеОшибки());
		
		Результат.Вставить("АдресДвоичныхДанныхФайла", 	"");
		Результат.Вставить("ИмяФайла",	"");
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПечатныхФормАкта(ДокументСсылка)
	
	Возврат	МетодСервера(,"ПолучитьСтруктуруПечатныхФормАкта", ДокументСсылка);
	
КонецФункции

&НаКлиенте
Функция СформироватьФайлАктавыполненныхРабот(ДокументСсылка)
	
	Результат= ПолучитьСтруктуруПечатныхФормАкта(ДокументСсылка);
	
	МетаАкта= МетодСервера("Модуль_ИнтеграцияУниверсальный", "СформироватьМетуАктаВыполненныхРабот", ДокументСсылка);
	Для каждого ЭлементМетыАкта Из МетаАкта Цикл
		Результат.Вставить(ЭлементМетыАкта.Ключ, ЭлементМетыАкта.Значение);
	КонецЦикла;
	
	Попытка
		
		ИмяВременногоФайла=		ПолучитьИмяВременногоФайла("pdf");
		Результат.Таблица.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
		Результат.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
		
		ИмяФайла = "Акт №" + ЗаменитьНедопустимыеСимволы(Результат.Номер) + " от " + Формат(Результат.Дата, "ДЛФ=Д") + ".pdf";
		Результат.Вставить("ИмяФайла",	ИмяФайла);
		
	Исключение
		
		Результат.Вставить("СписокОшибок", Результат.СписокОшибок + Символы.ПС + ОписаниеОшибки());
		
		Результат.Вставить("АдресДвоичныхДанныхФайла", 	"");
		Результат.Вставить("ИмяФайла",	"");
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОТПРАВКА_ДОКУМЕНТОВ_НА_СЕРВЕР_ДИАДОК

&НаКлиенте
Функция ВыполнитьАсинхроннуюОтправкуПакета(ЗаполненныйPackageSendTask, СоответствиеCustomIdСсылке1С) Экспорт
	
	PackageSendTask= ЗаполненныйPackageSendTask.PackageSendTask;
	
	ВГраница= PackageSendTask.DocumentsToSend.Count - 1;
	Для Ц=0 по ВГраница Цикл
		DocumentToSend = PackageSendTask.DocumentsToSend.GetItem(Ц);
		Если МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", DocumentToSend.Type) Тогда
			МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЗаполненныйPackageSendTask.Organization.Id);
			Прервать;
		КонецЕсли;
	КонецЦикла;
			
	//транзакция по отправке пакета
	//если пакет отправлен, то отправлены все документы пакета,
	//если пакет отправить не удалось, то не отправлен ни один документ пакета
	Попытка
		
		СоответствиеВПФСсылке= PackageSendTask_В_Соответствие(PackageSendTask, СоответствиеCustomIdСсылке1С); 
		
		ПередОтправкойСервер(СоответствиеВПФСсылке, PackageSendTask.DocumentsToSend.Count, PackageSendTask.OperationId);
					
		AsyncTask= PackageSendTask.SendAsync();
		
	Исключение
		
		ТекстОшибки= ОписаниеОшибки();
		
		ПриОшибкеОтправкиСервер(ТекстОшибки, СоответствиеВПФСсылке, PackageSendTask.DocumentsToSend.Count);
						
		ВызватьИсключение ТекстОшибки;
				
	КонецПопытки;
	
	Возврат AsyncTask;
	
КонецФункции

&НаКлиенте
Функция PackageSendTask_В_Соответствие(PackageSendTask, СоответствиеCustomIdСсылке1С) Экспорт
	
	//преобразуем COM в конструкцию, удобную для работы с сервером
	//СоответствиеВПФСсылке 	- Соответствие 	- Ключ: ДокументСсылка, Значение: СоответствиеСущности
	//СоответствиеСущности 		- Соответствие 	- Ключ: DocumentType, Значение: СтруктураХарактеристики 
	//СтруктураХарактеристики 	- Структура 	- Элементы: CustomDocumentID, МассивВПФ
	//МассивВПФ 				- Массив 		- Содержит коллекцию ВПФ, отправляемых для конкретного ДокументСсылка
	
	СоответствиеВПФСсылке= Новый Соответствие;
	
	Для Ц=0 по PackageSendTask.DocumentsToSend.Count - 1 Цикл
		
		DocumentToSend= 	PackageSendTask.DocumentsToSend.GetItem(Ц);
		CustomDocumentId= 	DocumentToSend.CustomDocumentId;
		
		СтруктураСоответствия=	СоответствиеCustomIdСсылке1С.Получить(CustomDocumentId);
		ДокументСсылка=			СтруктураСоответствия.ДокументСсылкаВ1С;
		ВнешняяПечатнаяФорма=	СтруктураСоответствия.ВнешняяПечатнаяФорма;
		DocumentType=			СтруктураСоответствия.Type;
		
		Если СоответствиеВПФСсылке.Получить(ДокументСсылка) = Неопределено Тогда
			
			//еще не было записи по такому ДокументСсылка вообще
			СоответствиеСущности= 		Новый Соответствие;
			СтруктураХарактеристики= 	Новый Структура;
			МассивВПФ= 					Новый Массив;
			
		Иначе
			
			//уже была запись по такому ДокументСсылка 
			СоответствиеСущности= СоответствиеВПФСсылке.Получить(ДокументСсылка);
			
			Если СоответствиеСущности.Получить(DocumentType) = Неопределено Тогда
				
				//но еще не было записи по такому DocumentType вообще
				СтруктураХарактеристики= 	Новый Структура;
				МассивВПФ= 					Новый Массив;
									
			Иначе
				
				//и уже была запись по такому DocumentType
				ИнициализированМассивВПФ= СтруктураХарактеристики.Свойство(DocumentType);
				
				Если ИнициализированМассивВПФ Тогда
					МассивВПФ= СтруктураХарактеристики.МассивВПФ;	
				Иначе
					МассивВПФ= Новый Массив;	
				КонецЕсли;
								
			КонецЕсли;
																				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			МассивВПФ.Добавить(ВнешняяПечатнаяФорма);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			//только для документа основания
			СтруктураХарактеристики.Вставить("CustomDocumentId", CustomDocumentId);
		КонецЕсли;
		СтруктураХарактеристики.Вставить("МассивВПФ", МассивВПФ);
		
		СоответствиеСущности.Вставить(DocumentType, СтруктураХарактеристики);
		
		СоответствиеВПФСсылке.Вставить(ДокументСсылка, СоответствиеСущности);
		
	КонецЦикла;
		
	Возврат СоответствиеВПФСсылке; 
	
КонецФункции //PackageSendTask_В_Соответствие()

&НаСервере
Процедура ПередОтправкойСервер(Знач СоответствиеВПФСсылке, Знач КоличествоДокументовВПакете, Знач OperationIdПакета) Экспорт
	
	//Признак условно отправленный для формализованного документа
	Для каждого ЭлементСоответствия из СоответствиеВПФСсылке Цикл
				
		ДокументСсылка= ЭлементСоответствия.Ключ;
		
		СоответствиеСущности= 	ЭлементСоответствия.Значение;
		Для каждого ЭлементСущности из СоответствиеСущности Цикл
			
			DocumentType= ЭлементСущности.Ключ;
			
			Если НЕ DocumentType = "Nonformalized" Тогда 
			
				СтруктураХарактеристики= ЭлементСущности.Значение; 
				CustomDocumentId= 	СтруктураХарактеристики.CustomDocumentId;
			
				УстановитьПризнакУсловноОтправленныйДляДокумента(ДокументСсылка, DocumentType, CustomDocumentId);
				
			КонецЕсли;
			
		КонецЦикла;
								
	КонецЦикла;
	
	//Признак условно отправленный для внешней печатной формы
	МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами", "ПередАсинхроннойОтправкой", СоответствиеВПФСсылке);
							
	Если КоличествоДокументовВПакете > 1 
		ИЛИ КоличествоДокументовВПакете = 1 И НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ЗаписьЖурналаРегистрации("Диадок.ОтправкаПакета.НачалоАсинхроннойОтправки", УровеньЖурналаРегистрации.Информация, , , OperationIdПакета);
	Иначе
		ЗаписьЖурналаРегистрации("Диадок.Отправка.НачалоАсинхроннойОтправки", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакУсловноОтправленныйДляДокумента(ДокументСсылка, DocumentType, CustomDocumentId) Экспорт
	
	Если ЗначениеЗаполнено(DocumentType) И DocumentType = "NonformalizedProforma" Тогда
		НаименованиеИдентификатораСвойства= МетодСервера(, "ИдентификаторСвойстваДиадокCustomDocumentIdСчет");
	Иначе
		НаименованиеИдентификатораСвойства= МетодСервера(, "ИдентификаторСвойстваДиадокCustomDocumentId");
	КонецЕсли;
	
	МетодСервера(, "УстановитьЗначениеСвойства", ДокументСсылка, НаименованиеИдентификатораСвойства, , CustomDocumentId);	
	
КонецПроцедуры

&НаСервере
Процедура ПриОшибкеОтправкиСервер(Знач ТекстОшибки, Знач СоответствиеВПФСсылке, Знач КоличествоДокументовВПакете) Экспорт
	
	Если Найти(ТекстОшибки, "##200") = 0 И Найти(ТекстОшибки, "##400") = 0 Тогда
		
		Для каждого ЭлементСоответствия из СоответствиеВПФСсылке Цикл
			ДокументСсылка= 			ЭлементСоответствия.Ключ;
			
			МассивДополнительныхВПФ= МетодСервера(, "МассивВПФИзСоответствиеВПФСсылке", ЭлементСоответствия);
					
			Если МассивДополнительныхВПФ.Количество()>0 Тогда
				МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами", "ОбнулитьПризнакУсловноОтправленныйДляПакета", ДокументСсылка, МассивДополнительныхВПФ, "Н");		
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ДокументСсылка= СоответствиеВПФСсылке[0].Ключ;	
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Диадок.ОтправкаПакета.ОшибкаЗапускаАнинхроннойОтправки", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтправленныйПакетДокументов(Package, СоответствиеCustomIdСсылке1С, ПараметрыОтправкиНаСогласование = Неопределено) Экспорт
			
	МассивДокументовПакета= Новый Массив;
	
	Для Ц=0 по Package.Documents.Count - 1 Цикл
		
		Document= Package.Documents.GetItem(Ц);
		
		CustomDocumentId= Document.CustomDocumentId;
			
		СтруктураСоответствия= СоответствиеCustomIdСсылке1С.Получить(Document.CustomDocumentId);
		
		Если НЕ СтруктураСоответствия = Неопределено Тогда
			
			СтруктураПараметры= СтруктураСоответствия;
						
			СтруктураПараметры.Вставить("DocumentId", 		 Document.DocumentId);
			СтруктураПараметры.Вставить("OrganizationId", 	 Document.OrganizationId);
			СтруктураПараметры.Вставить("ЭтоУПД_ТипаСЧФДОП", МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП", Document));
						
			МассивДокументовПакета.Добавить(СтруктураПараметры);
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТекстОшибкиВыполнения= ПослеАсинхроннойОтправкиСервер(МассивДокументовПакета);	
	
	Если ЗначениеЗаполнено(ТекстОшибкиВыполнения) Тогда
		ВызватьИсключение(ТекстОшибкиВыполнения);
	Иначе
		Если НЕ ПараметрыОтправкиНаСогласование = Неопределено Тогда
			МетодКлиента("Модуль_Клиент", "ОтправитьНаОбработку", Package, ПараметрыОтправкиНаСогласование);
		КонецЕсли;
	КонецЕсли;		
	                                                                           
КонецПроцедуры

&НаСервере
Функция ПослеАсинхроннойОтправкиСервер(Знач МассивДокументовПакета) Экспорт
	
	ТекстОшибкиВыполнения= "";
	
	Для каждого ДокументПакета из МассивДокументовПакета Цикл
		
		ТекстОшибки= "";
		
		Попытка
			
			Если ЗначениеЗаполнено(ДокументПакета.ВнешняяПечатнаяФорма) Тогда
				МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами", "ОбнулитьПризнакУсловноОтправленныйДляДокумента", ДокументПакета.ДокументСсылкаВ1С, ДокументПакета.ВнешняяПечатнаяФорма, "В");	
			Иначе 
				
				Если ЗначениеЗаполнено(ДокументПакета.ДокументСсылкаВ1С) Тогда
					ПослеОтправкиДокумента(ДокументПакета.ДокументСсылкаВ1С, ДокументПакета.DocumentId, ДокументПакета.OrganizationId, ДокументПакета.Type, ДокументПакета.ДокументСсылкаВ1С.Организация, ДокументПакета.ЭтоУПД_ТипаСЧФДОП);
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки= ОписаниеОшибки();
			
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибкиВыполнения= ТекстОшибкиВыполнения + ?(ЗначениеЗаполнено(ТекстОшибкиВыполнения), Символы.ПС, "") + ТекстОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстОшибкиВыполнения; 
	
КонецФункции

#КонецОбласти

#Область ВСПОМОГАТЕЛЬНЫЕ_ФУНКЦИИ_И_ПРОЦЕДУРЫ

&НаКлиенте
Процедура ДобавитьЗаписьВСоответствиеCustomIdСсылке1С(СоответствиеCustomIdСсылке1С, CustomDocumentId, DocumentType, ДокументСсылкаВ1С, ВнешняяПечатнаяФорма, ЭтоКорректировкаИсправление, IdСтроки)
		
	Если СоответствиеCustomIdСсылке1С.Получить(CustomDocumentId) = Неопределено Тогда
		
		СтруктураСоответствия= Новый Структура;
		
		СтруктураСоответствия.Вставить("Type", 							DocumentType);
		СтруктураСоответствия.Вставить("ДокументСсылкаВ1С", 			ДокументСсылкаВ1С);
		СтруктураСоответствия.Вставить("ЭтоВПФ", 						?(ЗначениеЗаполнено(ВнешняяПечатнаяФорма)=Истина, Истина, Ложь));
		СтруктураСоответствия.Вставить("ВнешняяПечатнаяФорма", 			ВнешняяПечатнаяФорма);
		СтруктураСоответствия.Вставить("IdСтрокиТаблицыДокументов", 	IdСтроки);
		СтруктураСоответствия.Вставить("ЭтоКорректировкаИсправление", 	ЭтоКорректировкаИсправление);
				
		СоответствиеCustomIdСсылке1С.Вставить(CustomDocumentId, СтруктураСоответствия);
		
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

