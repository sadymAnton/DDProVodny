//{ ПЕРЕМЕННЫЕ МОДУЛЯ
	
	&НаКлиенте
	Перем СтруктураИнтервалов Экспорт;
	
	&НаКлиенте
	Перем ДатаПоследнегоЗаполненияСписокВыбораКонтрагентID;
	
//} ПЕРЕМЕННЫЕ МОДУЛЯ

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодКлиента(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Инициализация параметров Клиент -> Сервер
	
	Объект.ПараметрыКлиентСервер= Новый Структура;
	
	Объект.ПараметрыКлиентСервер.Вставить("ВызовИзРасширения", Параметры.Свойство("ВызовИзРасширения"));
	
	Объект.ПараметрыКлиентСервер.Вставить("УникальныйИдентификаторОсновнойФормы", УникальныйИдентификатор);
	
	Объект.ПараметрыКлиентСервер.Вставить("ВременноеХранилище", Новый Структура);
	Объект.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресКэшаСервераНаВремяСеанса", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Объект.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресКэшДополнительныхПФ"	  	, ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Объект.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресПодключенныеОбработки"	, ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Объект.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресПодключаемыйМодуль"		, ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Объект.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресНеСуществующиеОбработки"	, ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Объект.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресОбработкаОбъект"			, ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Объект.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресПодписантыОрганизаций"	, ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	
	Объект.ПараметрыКлиентСервер.Вставить("ФайловыйРежимРаботы"	 , Найти(СтрокаСоединенияИнформационнойБазы(), "File=") > 0);
	
	ОбработкаОбъектМетаданные= ОбработкаОбъект().Метаданные();
	ОбработкаОбъектМетаданныеПолноеИмя= ОбработкаОбъектМетаданные.ПолноеИмя();
	
	Объект.ПараметрыКлиентСервер.Вставить("ИмяОбработки"	   , ОбработкаОбъектМетаданные.Имя);
	Объект.ПараметрыКлиентСервер.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	Объект.ПараметрыКлиентСервер.Вставить("ВерсияКонфигурации" , Метаданные.Версия);
	
	Выборка= ХранилищеСистемныхНастроек.Выбрать(Новый Структура("Пользователь, КлючОбъекта", ИмяПользователя(), ОбработкаОбъектМетаданныеПолноеИмя + ".Форма.Форма_Основная/ТекущиеДанные"));
	Если Выборка.Следующий() Тогда
		Объект.ПараметрыКлиентСервер.Вставить("КаталогМодулейСервера", Выборка.Настройки["КаталогМодулейСервера"]);
		Объект.ПараметрыКлиентСервер.Вставить("РежимОтладкиСервера"	 , Выборка.Настройки["РежимОтладкиСервера"]);
	Иначе
		Объект.ПараметрыКлиентСервер.Вставить("КаталогМодулейСервера", КаталогМодулейСервера);
		Объект.ПараметрыКлиентСервер.Вставить("РежимОтладкиСервера"	 , РежимОтладкиСервера);
	КонецЕсли;
	
	Объект.ПараметрыКлиентСервер.Вставить("ПодключаемыйМодуль", Новый Структура("ИспользоватьМодуль, Инициализирован, ПутьКФормам, РасположениеМодуля, ПутьКМодулю", Ложь, Ложь, ""));
	Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль= МетодСервера(,"ПолучитьЗначениеКонстанты", "ИспользоватьПодключаемыйМодуль") = Истина;
	Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля= МетодСервера(,"ПолучитьЗначениеКонстанты", "РасположениеПодключаемогоМодуля");
	Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю= 		МетодСервера(,"ПолучитьЗначениеКонстанты", "ПутьКПодключаемомуМодулю");
	
	Если Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль Тогда
		ИнициализироватьПодключаемыйМодульСервер();
	КонецЕсли;
	
	Объект.ПараметрыКлиентСервер.Вставить("МаркерКонфигурации", МетодСервера(,"ПолучитьМаркерКонфигурации"));
	Объект.ПараметрыКлиентСервер.Вставить("ИмяФормыИнтеграции", МетодСервера(,"ИмяФормыИнтеграции"));
	
	Объект.ПараметрыКлиентСервер.Вставить("ПараметрыКлиент", Новый Структура);
	Объект.ПараметрыКлиентСервер.ПараметрыКлиент.Вставить("ПолноеИмяОбработки",  ОбработкаОбъектМетаданныеПолноеИмя);
	Объект.ПараметрыКлиентСервер.ПараметрыКлиент.Вставить("ПутьКФормам", 		 Объект.ПараметрыКлиентСервер.ПараметрыКлиент.ПолноеИмяОбработки + ".Форма.");
	Объект.ПараметрыКлиентСервер.ПараметрыКлиент.Вставить("СловарьWL",			 МетодСервера(,"ПолучитьСловарь"));
	Объект.ПараметрыКлиентСервер.ПараметрыКлиент.Вставить("УстановкаРасширения", МетодСервера(,"ПроверитьНеобходимостьУстановкиРасширения"));
	
	Объект.ПараметрыКлиентСервер.Вставить("РазрешитьНеструктурированныеАдреса", МетодСервера(, "ПолучитьЗначениеКонстанты", "РазрешитьНеструктурированныеАдреса") = Истина);	
		
	// Будем определять наименование документа, в зависимости от конфигурации
	Объект.ПараметрыКлиентСервер.Вставить("ПредставлениеДокументов", Новый Структура);
	Если НЕ Метаданные.Документы.Найти("СчетФактураВыданный") = Неопределено Тогда
		Объект.ПараметрыКлиентСервер.ПредставлениеДокументов.Вставить("СчетФактураВыданный", "СчетФактураВыданный");
	Иначе
		Объект.ПараметрыКлиентСервер.ПредставлениеДокументов.Вставить("СчетФактураВыданный", "СчетФактура");
	КонецЕсли;
	Если НЕ Метаданные.Документы.Найти("РеализацияТоваровУслуг") = Неопределено Тогда
		Объект.ПараметрыКлиентСервер.ПредставлениеДокументов.Вставить("РеализацияТоваровУслуг", "РеализацияТоваровУслуг");
	ИначеЕсли НЕ Метаданные.Документы.Найти("НакладнаяНаРеализациюТорг12") = Неопределено Тогда //БГУ
		Объект.ПараметрыКлиентСервер.ПредставлениеДокументов.Вставить("РеализацияТоваровУслуг", "НакладнаяНаРеализациюТорг12");
	Иначе
		Объект.ПараметрыКлиентСервер.ПредставлениеДокументов.Вставить("РеализацияТоваровУслуг", "РасходнаяНакладная");
	КонецЕсли;
	
	Объект.ПараметрыКлиентСервер.Вставить("ПредставлениеСправочников", Новый Структура);
	Если НЕ Метаданные.Справочники.Найти("Склады") = Неопределено Тогда
		Объект.ПараметрыКлиентСервер.ПредставлениеСправочников.Вставить("Склады", "Склады");
	Иначе
		Объект.ПараметрыКлиентСервер.ПредставлениеСправочников.Вставить("Склады", "СтруктурнаяЕдиница");
	КонецЕсли;
	
	Объект.ПараметрыКлиентСервер.Вставить("ПредставлениеКонстант", Новый Структура);
	Если НЕ Метаданные.Константы.Найти("ВалютаУчета") = Неопределено Тогда
		Объект.ПараметрыКлиентСервер.ПредставлениеКонстант.Вставить("ВалютаРеглУчета", "ВалютаУчета");
	Иначе
		Объект.ПараметрыКлиентСервер.ПредставлениеКонстант.Вставить("ВалютаРеглУчета", "ВалютаРегламентированногоУчета");
	КонецЕсли;
	
		
	// Последующие измененеия параметров выполняется ТОЛЬКО на клиенте!
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПлатформу() Экспорт
	
	Платформа= ПолучитьФорму(Объект.ПараметрыКлиентСервер.ПараметрыКлиент.ПутьКФормам+"Платформа",,ЭтаФорма, Истина);
	Платформа.ИнициализироватьПлатформу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Если НЕ Объект.ПараметрыКлиентСервер.ВызовИзРасширения Тогда
		
		Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//{ УПРАВЛЕНИЕ ВЕРСИЯМИ

	&НаКлиенте
	Функция ПроверитьКонфигурацию()
		
		Результат= Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		Если Объект.ПараметрыКлиентСервер.ИмяФормыИнтеграции = Неопределено Тогда
			
			Результат.ОписаниеОшибки=	"Ошиба поддержки конфигурации";
			Результат.Подробности=		"Текущая конфигурация системы: """ + Платформа.ПараметрыКлиент.СинонимКонфигурации + """ не поддерживается. 
										|Обработка будет закрыта.
										|Список поддерживаемых конфигураций:
										|" + ПолучитьТекстПоддерживаемыхКонфигураций();
			Результат.Отказ= Истина;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ТребуемаяВерсияКомпонентыДиадок()
		
		Возврат "5.17.0.206";
		
	КонецФункции	
		
	&НаКлиенте
	Функция ПолучитьТекстПоддерживаемыхКонфигураций() Экспорт
		
		Возврат 
			"    Бухгалтерия предприятия, ред 3.0,
			|    Бухгалтерия государственного учреждения, ред 2.0,
			|    Управление торговлей, ред 11.0,
			|    Управление торговлей, ред 11.1,
			|    Комплексная автоматизация, ред 2.0,
			|    1С:ERP Управление предприятием, ред 2.0,
			|    Управление небольшой фирмой, ред 1.6";
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьТекущуюВерсиюПлатформы() Экспорт
		
		СистемнаяИнформация=	Новый СистемнаяИнформация;
		Возврат СистемнаяИнформация.ВерсияПриложения;
		
	КонецФункции
	
//} УПРАВЛЕНИЕ ВЕРСИЯМИ

//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

	&НаКлиентеНаСервереБезКонтекста
	Функция НайтиСтрокиВМассивеСтруктур(МассивСтруктур, ПараметрыОтбора) //вместо НайтиСтроки таблицы значений
		Результат = Новый Массив;
		Для Каждого Стр из МассивСтруктур Цикл
			БылоНесоответствие = Ложь;
			Для Каждого Стр1 из ПараметрыОтбора Цикл
				Если СокрЛП(ПараметрыОтбора[Стр1.Ключ]) <>  СокрЛП(Стр[Стр1.Ключ]) Тогда
					БылоНесоответствие = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если БылоНесоответствие = Ложь Тогда
				Результат.Добавить(Стр);
			КонецЕсли;
			
		КонецЦикла;
		Возврат Результат;
	КонецФункции
	
	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
					
		ЗаполнитьРасположениеПодключаемогоМодуля();
		ЗаполнитьРеквизитыЗначениямиНастроек();
		
		НастроитьЭлементыФормы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьПараметрыВыборки(Режим =  Неопределено)
		
		ПараметрыВыборки=	Новый Структура();
		
		ПараметрыВыборки.Вставить("Направление", ПолучитьЗначениеНаправления());
		ПараметрыВыборки.Вставить("СписокДокументооборота", ?(Режим = "Подписание", 2, ?(ПустаяСтрока(СостояниеДокументооборота), 0, Число(СостояниеДокументооборота))));
		ПараметрыВыборки.Вставить("ТипыДокументов", ТипыДокументов);
		ПараметрыВыборки.Вставить("ПодразделениеID", ПодразделениеID);
		ПараметрыВыборки.Вставить("ВключатьПодчиненныеПодазделения", ВключатьПодчиненныеПодазделения);
		ПараметрыВыборки.Вставить("ПолучатьРезолюции", Ложь);
		ПараметрыВыборки.Вставить("ОтбиратьПоДатеДокумента", ?(ПараметрыВыборки.Направление = "Inbound", СтруктураИнтервалов.Полученные.ОтбиратьПоДатеДокумента, СтруктураИнтервалов.Отправленные.ОтбиратьПоДатеДокумента));
		
		Возврат ПараметрыВыборки;
		
	КонецФункции
		
	&НаКлиенте
	Процедура ПоказатьДокументВДиадоке(ДокументДиадока) Экспорт
		
		МетодКлиента("Модуль_Клиент","ПоказатьДокументВДиадоке", ДокументДиадока.OrganizationId, ДокументДиадока.DocumentId);
		
	КонецПроцедуры 
	
	&НаСервере 
	Функция ПолучитьТаблицуДокументовПоИдДиадока(Знач ТаблицаИД)
		
		ТабДокументов=		МассивСтруктур_2_ТаблицаЗначений(ТаблицаИД);
		Результат=			МетодСервера(,"ПолучитьТаблицуДокументовПоИдДиадока", ТабДокументов);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция МассивСтруктур_2_ТаблицаЗначений(МассивСтруктур)
		СтрЗаменТипов = Новый Структура("Справочник,Документ,Перечисление","СправочникСсылка","ДокументСсылка","ПеречислениеСсылка");
		Результат = Новый ТаблицаЗначений;
		Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
			Возврат Результат;
		Иначе 
			Образец = МассивСтруктур[0];
			Для Каждого  Стр из Образец Цикл
				Результат.Колонки.Добавить(Стр.Ключ,ПолучитьОписаниеТипаЗначение(Стр.Значение) );
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Стр Из МассивСтруктур Цикл
			СтрТ = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
		КонецЦикла;
		Возврат Результат;
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ПолучитьОписаниеТипаЗначение(ЗначениеЭл)
		СтрЗаменТипов = Новый Структура("Справочник,Документ,Перечисление","СправочникСсылка","ДокументСсылка","ПеречислениеСсылка");
		
		ТипКолонки = ТипЗнч(ЗначениеЭл);
		МассивТ= Новый массив;
		МД = метаданные.найтипотипу(типзнч(ЗначениеЭл));
		Если МД = Неопределено Тогда
			ПолноеИмяТипа = Строка(ТипЗнч(ЗначениеЭл));
		Иначе
			ПолноеИмяТипа = МД.ПолноеИмя();
			Для Каждого стрхх из СтрЗаменТипов цикл
				Если Найти(ПолноеИмяТипа,стрхх.Ключ) <> 0 Тогда
					ПолноеИмяТипа = СтрЗаменить(ПолноеИмяТипа, стрхх.Ключ, стрхх.Значение);
					прервать;
				КонецЕсли;
			конеццикла;
		КонецЕсли;
		Если ПолноеИмяТипа  = "Не определено" ИЛИ ПолноеИмяТипа = "Форматированная строка" Тогда
			ПолноеИмяТипа = "Строка"; //проверить - заглушка пока!!!
		КонецЕсли;
		
		Если найти( ПолноеИмяТипа, "ДокументСсылка")>0 Тогда
			возврат Документы.ТипВсеСсылки();
		иначе;	
			возврат  новый ОписаниеТипов(ПолноеИмяТипа)
		КонецЕсли;	
	КонецФункции	
	
	&НаКлиенте
	Процедура ОткрытьФормуВыводаОшибкиИнтернет()
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибкиИнтернет",,ЭтаФорма, "ОбработчикВыводОшибкиИнтернет");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОткрытьФормуВыводаОшибки(Результат, ЗакрытьФорму = Ложь, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено)
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", 		"Ошибка работы с модулем " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		ПараметрыФормы.Вставить("ОписаниеОшибки", 	Результат.ОписаниеОшибки);
		ПараметрыФормы.Вставить("Подробности", 		Результат.Подробности);
		
		Если ИмяОбработчика = Неопределено Тогда
			ИмяОбработчика= 	  "ОбработчикОткрытияФормыОшибки";
			ПараметрыОбработчика= ЗакрытьФорму;
		КонецЕсли;
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма, ИмяОбработчика, ПараметрыОбработчика);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НачатьОбновлениеСпискаДокументов() Экспорт
		
		ТаблицаДокументовВходящих.Очистить();
		ТаблицаДокументовИсходящих.Очистить();
		ТаблицаДокументовВнутренних.Очистить();
		СписокАктивные.Очистить();
		ТаблицаЖурналаДокументов.Очистить();
		
		ПодключитьОбработчикОжидания("ОбработчикОбновлениеСпискаДокументов", 0.1, истина);
				
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗагрузитьТаблицуДоков(Знач Направление, Знач ТаблицаДанных);
		
		ТаблицаПД=	ПолучитьТаблицуДокументовПоИдДиадока(ТаблицаДанных);
		Если ТаблицаПД.Колонки.Количество() > 0 Тогда
			ТаблицаПД.Индексы.Добавить("DocumentId");
			ТаблицаПД.Индексы.Добавить("BoxID");
		КонецЕсли;
		
		Для Каждого Стр из ТаблицаДанных Цикл 
			МассивДоков= НайтиСтрокиВМассивеСтруктур(ТаблицаПД, Новый Структура("DocumentId, BoxID", стр.DocumentId, стр.BoxID));
			Если МассивДоков.Количество()>0 Тогда 
				Стр.Вставить("ПервичныйДокумент", МассивДоков[0].Ссылка);
			Иначе
				СФВыданныйПредставление= Объект.ПараметрыКлиентСервер.ПредставлениеДокументов.СчетФактураВыданный;
				Стр.Вставить("ПервичныйДокумент", Документы[СФВыданныйПредставление].ПустаяСсылка());
			КонецЕсли;
		КонецЦикла;	
		
		ТаблицаДокументов= МассивСтруктур_2_ТаблицаЗначений(ТаблицаДанных);
		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			
			ДобавленныеДокументы= Новый Соответствие;
			
			ОбратныйИндекс= ТаблицаДокументов.Количество()-1;
			
			Пока ОбратныйИндекс > -1 Цикл
				
				ТекущийDocumentId= ТаблицаДокументов[ОбратныйИндекс].DocumentId;
				
				Если ДобавленныеДокументы[ТекущийDocumentId] = Истина Тогда
					ТаблицаДокументов.Удалить(ОбратныйИндекс);
				Иначе
					ДобавленныеДокументы.Вставить(ТекущийDocumentId, Истина);
				КонецЕсли;
				
				ОбратныйИндекс= ОбратныйИндекс - 1;
				
			КонецЦикла;
			
			ДобавленныеДокументы= Неопределено;
			ТекущийDocumentId= 	  Неопределено;
			ОбратныйИндекс= 	  Неопределено;
			
			Для Каждого Строка Из ТаблицаДокументов Цикл
				Строка.ДатаУчета = НачалоДня(Строка.ДатаУчета);
			КонецЦикла;
			
			СтрокаСортировки= "MessageId, ПозицияСортировки";
			Если НЕ ТаблицаДокументов.Колонки.Найти("ДатаУчета") = Неопределено Тогда
				СтрокаСортировки= "ДатаУчета Убыв, " + СтрокаСортировки;
			КонецЕсли;
			
			ТаблицаДокументов.Сортировать(СтрокаСортировки);
			
		КонецЕсли;
		
		ТаблицаДокументов.Колонки.Добавить("ИндексИконкиПакетаКопия", Новый ОписаниеТипов("Число"));
								
		Для каждого Стр из ТаблицаДокументов Цикл
		
			ТекущийMessageId= Стр.MessageId;
			
			МассивСтрок= ТаблицаДокументов.НайтиСтроки(Новый Структура("MessageId", ТекущийMessageId));
			Если МассивСтрок.Количество()>1 Тогда
				Для Ц=0 по МассивСтрок.ВГраница() Цикл
					
					СтрокаМассива= МассивСтрок[Ц];
					
					Если СтрокаМассива.ИндексИконкиПакета = 0 Тогда
						Если Ц=0 Тогда
							СтрокаМассива.ИндексИконкиПакета= 1;
						ИначеЕсли Ц=МассивСтрок.ВГраница() Тогда
							СтрокаМассива.ИндексИконкиПакета= 3;
						Иначе
							СтрокаМассива.ИндексИконкиПакета= 2;
						КонецЕсли;
					КонецЕсли;
					
					СтрокаМассива.ИндексИконкиПакетаКопия= СтрокаМассива.ИндексИконкиПакета;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Направление = "OutboundWaitingForSenderSignature" Тогда
			ТаблицаДокументовВнутренних.Загрузить(ТаблицаДокументов);
		ИначеЕсли Направление = "Outbound" Тогда
			ТаблицаДокументовИсходящих.Загрузить(ТаблицаДокументов);
		Иначе
			ТаблицаДокументовВходящих.Загрузить(ТаблицаДокументов);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура НастроитьЭлементыФормы()
		
		Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
			Элементы.ФормаЗагрузитьИОтправить.Ширина= 22;
		Иначе
			Элементы.ФормаЗагрузитьИОтправить.Ширина= 23;
		КонецЕсли;
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		Команды.ПолученныеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Подсказка= "Открыть карточку документа, отправленного через " + СловарьWL.НаименованиеСистемы;
			
		Команды.ДобавщитьЯщикДиадок.Подсказка= 		"Добавщить ящик " + СловарьWL.НаименованиеСистемы;
		Команды.УдалитьЯщикДиадок.Подсказка= 		"Удалить ящик " + СловарьWL.НаименованиеСистемы;
		Команды.КонтрагентыНайтиВДиадоке.Подсказка= "Контрагенты найти в " + СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж;
				
		Элементы.ДекорацияТехподдержка.Заголовок= 	"Техподдержка (v " + СтрЗаменить(МетодСервера(,"ВерсияОбработкиДиадокСервер"), "_", ".") + ")";
		
		Элементы.УдалитьУстановитьРасширениеКонфигурации.Видимость= НЕ  Объект.ПараметрыКлиентСервер.ПараметрыКлиент.УстановкаРасширения.ОтсутствуютПраваАдминистратора
		                                                            И ( Объект.ПараметрыКлиентСервер.ПараметрыКлиент.УстановкаРасширения.НеобходимоУстановить
																	ИЛИ Объект.ПараметрыКлиентСервер.ПараметрыКлиент.УстановкаРасширения.РасширениеУжеУстановлено
																	ИЛИ Объект.ПараметрыКлиентСервер.ПараметрыКлиент.УстановкаРасширения.БылОтказОтУстановки);
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УправлениеФормой()
		
		Если НЕ Объект.ПараметрыКлиентСервер.ВызовИзРасширения Тогда
			Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок;
		КонецЕсли;
		
		ВключатьПодчиненныеПодазделения= истина;

		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			Элементы.СтраницаЖурналыДокументов.Доступность=	Ложь;
		КонецЕсли;
		
		НастроитьЭлементыПодключаемогоМодуля();
		
		НастроитьЭлементыОтладкаСерверныхМодулей();
		
		НастроитьЭлементУдалитьУстановитьРасширениеКонфигурации();
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьРасположениеПодключаемогоМодуля()
		
		ИспользоватьПодключаемыйМодуль= Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль;
		РасположениеПодключаемогоМодуля= Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля;
		
		Если РасположениеПодключаемогоМодуля = "НаДиске" Тогда
			ПутьКПодключаемомуМодулюДиск= Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
		ИначеЕсли РасположениеПодключаемогоМодуля = "ВБазеДанных" Тогда
			ПутьКПодключаемомуМодулюСсылка= Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
		ИначеЕсли РасположениеПодключаемогоМодуля = "ВСоставеКонфигурации" Тогда
			
			МетаданныеОбработки= Метаданные.Обработки.Найти(Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю);
			Если МетаданныеОбработки <> Неопределено Тогда
				Элементы.ПутьКПодключаемомуМодулюИмяОбработки.СписокВыбора.Добавить(Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю, МетаданныеОбработки.Представление());
				ПутьКПодключаемомуМодулюИмяОбработки= Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьРеквизитыЗначениямиНастроек()
		
		РазрешитьНеструктурированныеАдреса= Объект.ПараметрыКлиентСервер.РазрешитьНеструктурированныеАдреса; 
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура НастроитьЭлементыПодключаемогоМодуля()
		
		Если НЕ Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль Тогда
			Элементы.СтраницыПутьКПодключаемомуМодулю.ТекущаяСтраница= Элементы.СтраницаПутьКПодключаемомуМодулюНеИспользуется;
			Элементы.СтраницыПодключитьПМ.ТекущаяСтраница= 	 Элементы.СтраницаПодключитьПМОтключен;
		ИначеЕсли РасположениеПодключаемогоМодуля = "НаДиске" Тогда
			Элементы.СтраницыПутьКПодключаемомуМодулю.ТекущаяСтраница= Элементы.СтраницаПутьКПодключаемомуМодулюДиск;
			Элементы.СтраницыПодключитьПМ.ТекущаяСтраница= 	 Элементы.СтраницаПодключитьПМ;
		ИначеЕсли РасположениеПодключаемогоМодуля = "ВБазеДанных" Тогда
			Элементы.СтраницыПутьКПодключаемомуМодулю.ТекущаяСтраница= Элементы.СтраницаПутьКПодключаемомуМодулюСсылка;
			Элементы.СтраницыПодключитьПМ.ТекущаяСтраница= 	 Элементы.СтраницаПодключитьПМ;
		ИначеЕсли РасположениеПодключаемогоМодуля = "ВСоставеКонфигурации" Тогда
			Элементы.СтраницыПутьКПодключаемомуМодулю.ТекущаяСтраница= Элементы.СтраницаПутьКПодключаемомуМодулюИмяОбработки;
			Элементы.СтраницыПодключитьПМ.ТекущаяСтраница= 	 Элементы.СтраницаПодключитьПМ;
		Иначе
			Элементы.СтраницыПутьКПодключаемомуМодулю.ТекущаяСтраница= Элементы.СтраницаПутьКПодключаемомуМодулюНеВыбрано;
			Элементы.СтраницыПодключитьПМ.ТекущаяСтраница= 	 Элементы.СтраницаПодключитьПМОтключен;
		КонецЕсли;
		
		Элементы.ПереключательРасположенияПодключаемогоМодуля.Доступность= ИспользоватьПодключаемыйМодуль;
		Элементы.ГруппаРасположениеПодключениеПМ.Доступность= 			   ИспользоватьПодключаемыйМодуль;
		
		Если Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль Тогда
			Если Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Инициализирован Тогда
				Элементы.СтраницаПодключаемыйМодуль.Заголовок= "Подключаемый модуль (подключен)";
			ИначеЕсли НЕ ПустаяСтрока(Платформа.ПараметрыКлиент.ПодключаемыйМодуль.ОписаниеОшибки) Тогда
				Элементы.СтраницаПодключаемыйМодуль.Заголовок= "Подключаемый модуль (Ошибка!)";
			КонецЕсли;
			Элементы.ДекорацияОшибкаИнициализацииПМ.Заголовок= Платформа.ПараметрыКлиент.ПодключаемыйМодуль.ОписаниеОшибки;
		Иначе
			Элементы.СтраницаПодключаемыйМодуль.Заголовок= 	   "Подключаемый модуль";
			Элементы.ДекорацияОшибкаИнициализацииПМ.Заголовок= "";
		КонецЕсли;
		
		НастроитьЭлементПодключитьПМ();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьЭлементПодключитьПМ()
		
		Если Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Инициализирован Тогда
			Если Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Свойство("НастройкиМодуляОбновлены") Тогда
				Элементы.ПодключитьПМ.Заголовок= "Переподключить";
			Иначе
				Элементы.ПодключитьПМ.Заголовок= "Подключен";
			КонецЕсли;
		Иначе
			Элементы.ПодключитьПМ.Заголовок= "Подключить";
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьЭлементыОтладкаСерверныхМодулей()
		
		Если РежимОтладкиСервера Тогда
			Элементы.СтраницыКаталогМодулейСервера.ТекущаяСтраница= Элементы.СтраницаКаталогМодулейСервера;
		Иначе
			Элементы.СтраницыКаталогМодулейСервера.ТекущаяСтраница= Элементы.СтраницаОтладкаМодулейСервераОтключена;
		КонецЕсли;
		
		Элементы.СтраницыКаталогМодулейСервера.Доступность= РежимОтладкиСервера;
		Элементы.ВыгрузитьСерверныеМодули.Доступность= 		РежимОтладкиСервера;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьЭлементУдалитьУстановитьРасширениеКонфигурации()
		
		Если Элементы.УдалитьУстановитьРасширениеКонфигурации.Видимость Тогда
			
			Если Платформа.ПараметрыКлиент.УстановкаРасширения.РасширениеУжеУстановлено Тогда
				Элементы.УдалитьУстановитьРасширениеКонфигурации.Заголовок= "Удалить расширение конфигурации";
			Иначе	
				Элементы.УдалитьУстановитьРасширениеКонфигурации.Заголовок= "Установить расширение конфигурации";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура РасположенияПодключаемогоМодуляПриИзменении()
		
		Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Вставить("НастройкиМодуляОбновлены");
		
		Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.Вставить("РасположениеМодуля", РасположениеПодключаемогоМодуля);
		
		Если РасположениеПодключаемогоМодуля = "НаДиске" Тогда
			Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.Вставить("ПутьКМодулю", ПутьКПодключаемомуМодулюДиск);
		ИначеЕсли РасположениеПодключаемогоМодуля = "ВБазеДанных" Тогда
			Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.Вставить("ПутьКМодулю", ПутьКПодключаемомуМодулюСсылка);
		ИначеЕсли РасположениеПодключаемогоМодуля = "ВСоставеКонфигурации" Тогда
			Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.Вставить("ПутьКМодулю", ПутьКПодключаемомуМодулюИмяОбработки);
		Иначе
			Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.Вставить("ПутьКМодулю" , Неопределено);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьЗначениеНаправления()
		
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда
			Возврат "OutboundWaitingForSenderSignature";
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда
			Возврат "Outbound";
		Иначе
			Возврат "Inbound";
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьТекущийПериод()
		
		Направление=	ПолучитьЗначениеНаправления();
		
		Возврат Новый Структура("ДатаНачала, ДатаОкончания, ОтбиратьПоДатеДокумента", 
		?(Направление = "Inbound", СтруктураИнтервалов.Полученные.ДатаНачала   , СтруктураИнтервалов.Отправленные.ДатаНачала),
		?(Направление = "Inbound", СтруктураИнтервалов.Полученные.ДатаОкончания, СтруктураИнтервалов.Отправленные.ДатаОкончания),
		?(Направление = "Inbound", СтруктураИнтервалов.Полученные.ОтбиратьПоДатеДокумента, СтруктураИнтервалов.Отправленные.ОтбиратьПоДатеДокумента));
		
	КонецФункции

	&НаСервере
	Функция НайтиОбъекты(МассивСтруктур) Экспорт
		//на входе массив структура вида
		//НаименованиеСвойства
		//НазначениеСвойстваСтрокой
		//ЗначениеСвойства
		//НаименованиеСвойства2
		//НазначениеСвойстваСтрокой2
		//ЗначениеСвойства2
		
	КонецФункции
	
	&НаСервере
	Функция РасшифровкаТекущегоСостоянияВзаимоотношенийСервер(ТекущийСтатус)
		Возврат МетодСервера(,"РасшифровкаТекущегоСостоянияВзаимоотношений", ТекущийСтатус);
	КонецФункции
	
	&НаКлиенте
	Процедура ОтправитьПринятьПриглашениеКонтрагенту(ПараметрыПриглашения) Экспорт

		Контрагент = ПараметрыПриглашения.ТекущиеДанные;
		
		Organization= МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
		Результат	= МетодКлиента("Модуль_Клиент", "ОтправитьПринятьПриглашениеКонтрагенту", Organization, Контрагент.ID, Контрагент.ИНН, ПараметрыПриглашения.Комментарий, ПараметрыПриглашения.ПутьКФайлу);
		
		Если Результат = Истина Тогда
			
			Counteragent=	Organization.GetCounteragentById(Контрагент.ID);
			
			ПараметрыПриглашения.ТекущиеДанные.ТекущийСтатус=				Counteragent.GetStatus();
			ПараметрыПриглашения.ТекущиеДанные.ТекущийСтатусРасшифровка=	РасшифровкаТекущегоСостоянияВзаимоотношенийСервер(Контрагент.ТекущийСтатус);
			
			СписокАктивныеПриАктивизацииСтроки(Элементы);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьНаименованиеСистемы()
		
		Заголовок = "Модуль работы с электронными документами через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + ?(РежимОтладкиСервера, " (Режим отладки)", "");
		Элементы.ФормаЗагрузитьИОтправить.Заголовок = "Отправка документов" + Символы.ПС + "через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		Элементы.СписокАктивныеКонтрагентыНайтиВДиадоке.Заголовок = "Найти контрагентов в " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж;
		Элементы.СписокЯщиковДиадока.Заголовок = "Список ящиков " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
		Элементы.СписокПочтовыхЯщиков.ПодчиненныеЭлементы.СписокПочтовыхЯщиковнаименованиеЯщика.Заголовок = "Наименование ящика в " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж; 
		
		ОбновитьЗаголовокИнтервала("Полученные");
		ОбновитьЗаголовокИнтервала("Отправленные");
		ОбновитьЗаголовокИнтервалаЖурналаДокументов();
		
		Если Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы <> "Диадок" Тогда
			ЗаменитьКартинкуЖурналовДокументов();
		КонецЕсли;
		
	КонецПроцедуры // ЗаполнитьЗаголовкиФормы()
	
	&НаКлиенте
	Процедура ЗаменитьКартинкуЖурналовДокументов()
		
		ТаблицаДокументовЕстьВДиадоке =  ЭтаФорма.Элементы.ТаблицаДокументовРеализацияТоваровУслуг.ПодчиненныеЭлементы.ТаблицаДокументовЕстьВДиадоке;
		ТаблицаДокументовЕстьВДиадоке.КартинкаЗначений = БиблиотекаКартинок.ЗеленаяГалка;
		
	КонецПроцедуры // ()
	
	&НаКлиенте
	Процедура УстановитьТекущуюСтраницуПанелейОтбораПоШагу(Элемент, Шаг)
		
		ПозицияРазделителя= Найти(Элемент.Родитель.Имя, "_");
		
		Если ПозицияРазделителя > 0 Тогда
			
			НовыйНомерТекущейСтраницы= Число(Сред(Элемент.Родитель.Имя, ПозицияРазделителя + 1)) + Шаг;
			
			МаскаИмениЭлемента= Лев(Элемент.Родитель.Имя, ПозицияРазделителя - 1);
			
			НайденнаяСтаница= Элементы.Найти(МаскаИмениЭлемента + "_" + НовыйНомерТекущейСтраницы);
			
			Если НайденнаяСтаница <> Неопределено И НайденнаяСтаница.Родитель = Элемент.Родитель.Родитель Тогда
				Элемент.Родитель.Родитель.ТекущаяСтраница= Элементы.Найти(МаскаИмениЭлемента + "_" + НовыйНомерТекущейСтраницы);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокВыбораКонтрагентID(Элемент)
		
		Если Элемент.СписокВыбора.Количество() > 1 И ТекущаяДата() - ДатаПоследнегоЗаполненияСписокВыбораКонтрагентID < 10 Тогда
			Возврат;
		КонецЕсли;
		
		Элемент.СписокВыбора.Очистить();
		ДобавленныеЗначения= Новый Соответствие;
		
		СписокЯщиков= ПолучитьСписокЯщиковТекущегоКонтекста();
		
		Для Каждого Ящик ИЗ СписокЯщиков Цикл 
			
			CounteragentList= Ящик.Значение.GetCounteragentListByStatus("IsMyCounteragent");
			
			ВГраница= CounteragentList.Count - 1;
			
			Для ИндексЦикла= 0 ПО ВГраница Цикл
				
				Counteragent= CounteragentList.GetItem(ИндексЦикла);
				
				Если ДобавленныеЗначения[Counteragent.id] <> Истина Тогда 
					Элемент.СписокВыбора.Добавить(Counteragent.id, Counteragent.Name);
					ДобавленныеЗначения.Вставить(Counteragent.id, Истина);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;	
		
		ДобавленныеЗначения= Неопределено;
		Элемент.СписокВыбора.СортироватьПоПредставлению();
		
		ДатаПоследнегоЗаполненияСписокВыбораКонтрагентID= ТекущаяДата();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокВыбораСтатусВзаимоотношений(Элемент)
		
		Если Элемент.СписокВыбора.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		Элемент.СписокВыбора.Добавить("IsMyCounteragent", "Партнерские отношения");
		Элемент.СписокВыбора.Добавить("InvitesMe"		, "Получен запрос");
		Элемент.СписокВыбора.Добавить("IsInvitedByMe"	, "Ожидается ответ");
		Элемент.СписокВыбора.Добавить("Rejected"		, "Заблокированные");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокВыбораТипыДокументов(Элемент)
		
		Если Элемент.СписокВыбора.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		
		ПустаяПиктограмма= МетодКлиента("Модуль_Клиент", "ЭДО_БиблиотекаКартинок").ПустаяПиктограмма;
				
		Элемент.СписокВыбора.Очистить();
		
		Элемент.СписокВыбора.Добавить("1",  "Накладные");
		Элемент.СписокВыбора.Добавить("11", "Торг-12"												, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("12", "Акт"													, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("13", МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "ДОП")	, , ПустаяПиктограмма);
				
		Элемент.СписокВыбора.Добавить("2",  "Счета-фактуры");
		Элемент.СписокВыбора.Добавить("21", "Оригинальные СФ"										, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("22", "Исправленные СФ"										, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("23", "Корректировочные СФ"									, ,	ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("24", МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФ")	, , ПустаяПиктограмма);
				
		Элемент.СписокВыбора.Добавить("5",  МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФДОП"));

		Элемент.СписокВыбора.Добавить("3",  "Счета на оплату");
		
		Элемент.СписокВыбора.Добавить("4",  "Неформализованные");
		Элемент.СписокВыбора.Добавить("41", "Акт сверки"				, ,	ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("42", "Детализация"				, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("43", "Договор"					, ,	ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("44", "Протокол согласования цены", , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("45", "Приглашение к ЭДО"			, ,	ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("46", "Реестр сертификатов"		, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("47", "Прочее"					, ,	ПустаяПиктограмма);
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокВыбораСостояниеДокументооборота(Элемент)
		
		Если Элемент.СписокВыбора.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		
		ПустаяПиктограмма= МетодКлиента("Модуль_Клиент", "ЭДО_БиблиотекаКартинок").ПустаяПиктограмма;
		
		ТолькоСогласование = (Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок);
		Список = Элемент.СписокВыбора;
		
		Список.Очистить();
		
		Список.Добавить("0", "Все документы");
		
		Если НЕ ТолькоСогласование Тогда
			
			Список.Добавить("-1",	"Статус подписания");  // "-1" = группа
			Список.Добавить("1",	"Завершен"			, , ПустаяПиктограмма);
			Список.Добавить("2",	"Не завершен"		, , ПустаяПиктограмма);
			Список.Добавить("3",	"Прекращен"			, , ПустаяПиктограмма);
								
		КонецЕсли;
		
		Список.Добавить("-1",	"Статус согласования");  // "-1" = группа
		Список.Добавить("11",	"На согласовании"			, , ПустаяПиктограмма);
		Список.Добавить("12",	"Согласован"				, , ПустаяПиктограмма);
		Список.Добавить("13",	"Отказано в согласовании"	, , ПустаяПиктограмма);
		Список.Добавить("14",	"Отказано в подписании"		, , ПустаяПиктограмма);
					
		Если НЕ ТолькоСогласование Тогда
			
			Список.Добавить("-1",	"Статус аннулирования");  // "-1" = группа
			Список.Добавить("21",	"Ожидается аннулирование"	, , ПустаяПиктограмма);
			Список.Добавить("22",	"Требуется аннулирование"	, , ПустаяПиктограмма);
			Список.Добавить("23",	"Документ аннулирован"		, , ПустаяПиктограмма);
			Список.Добавить("24",	"Отказано в аннулировании"	, , ПустаяПиктограмма);
						
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьЗаголовок()
		
		Если НЕ Элементы.ДекорацияТекущаяСтраница.Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда 
			Элементы.ДекорацияТекущаяСтраница.Заголовок= "Отправленные через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда 
			Элементы.ДекорацияТекущаяСтраница.Заголовок= "Полученные через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда 
			Элементы.ДекорацияТекущаяСтраница.Заголовок= "Исходящие на согласование через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаКонтрагенты Тогда
			Элементы.ДекорацияТекущаяСтраница.Заголовок= "Список контрагентов";
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаНастройка Тогда
			Элементы.ДекорацияТекущаяСтраница.Заголовок= "Настройка";
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаЖурналыДокументов Тогда
			Элементы.ДекорацияТекущаяСтраница.Заголовок= "Журналы документов (beta)";
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписок(Команда) Экспорт
		
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаКонтрагенты тогда 
			
			ПриОткрытииСтраницыКонтрагентов();
			
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаЖурналыДокументов тогда 
			
			СформироватьЖурналДокументов();
			
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок тогда
			
			НачатьОбновлениеСпискаДокументов();
			
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок тогда
			
			НачатьОбновлениеСпискаДокументов();
			
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок тогда
			
			НачатьОбновлениеСпискаДокументов();
			
		КонецЕсли;
		
	КонецПроцедуры
	
//}СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ	
	
//{ ЗАПУСК
	
	//{ Инициализация
	
		&НаКлиенте
		Функция ОчиститьПеременныеМодуля()
			
			Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок= Неопределено;
			Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком.Очистить();

		КонецФункции
		
		&НаКлиенте
		Функция ИнициализацияКонтекста(ПутьКМакету, Версия1С) 
			
			Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
			
			РезультатИнициализации= ИнициализироватьОбъектыАПИ(Версия1С);
			Если РезультатИнициализации.Отказ = Истина Тогда
				ЗаполнитьЗначенияСвойств(Результат, РезультатИнициализации);
				ОткрытьФормуВыводаОшибки(Результат, Истина);
				Возврат Результат;
			КонецЕсли;
			
			РезультаУстановкиПодключения= УстановитьПодключение();
			Если РезультаУстановкиПодключения.Отказ = Истина Тогда
				ЗаполнитьЗначенияСвойств(Результат, РезультаУстановкиПодключения);
				ОткрытьФормуВыводаОшибкиИнтернет();
				Возврат Результат;
			КонецЕсли;
			
			РезультатПроверкиКонфигурации= ПроверитьКонфигурацию();
			Если РезультатПроверкиКонфигурации.Отказ = Истина Тогда 
				ЗаполнитьЗначенияСвойств(Результат, РезультатПроверкиКонфигурации);
				ОткрытьФормуВыводаОшибки(Результат, Истина);
				Возврат Результат;
			КонецЕсли;
			
			Возврат Результат;
			
		КонецФункции
		
		&НаКлиенте
		Функция ИнициализироватьКонфигурацию()
			
			Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
			
			РезультатПодготовкиКонфигурации= МетодСервераБезКонтекста(,"ПодготовкаКонфигурацииКРаботе");
			
			Если РезультатПодготовкиКонфигурации.Отказ Тогда
				ЗаполнитьЗначенияСвойств(Результат, РезультатПодготовкиКонфигурации);
				Возврат Результат;
			КонецЕсли;
			
			ХарактеристикаКонфигурации= МетодСервераБезКонтекста(,"СформироватьХарактеристикуКонфигурации");
			
			НастройкиПрокси=				ХарактеристикаКонфигурации.НастройкиПрокси;
			ПрофильКонфигурации=			ХарактеристикаКонфигурации.ПрофильКонфигурации;
			
			Если ПустаяСтрока(Объект.ПараметрыКлиентСервер.МаркерКонфигурации) Тогда
				Результат.Отказ= 		   Истина;
				Результат.ОписаниеОшибки = "Модуль интеграции не определен!";
				Результат.Подробности= 	   "Текущая конфигурация программы """ + Платформа.ПараметрыКлиент.СинонимКонфигурации + """ не поддерживается!
				|В окне техподдержки, можно принудительно выбрать модуль интеграции.";
			КонецЕсли;
			
			Возврат Результат;
			
		КонецФункции
		
		&НаКлиенте
		Процедура ИнициализироватьКомпоненту()
			
			ПутьКМакету=  Платформа.ПараметрыКлиент.ПолноеИмяОбработки + ".Макет.AddInDiadocAPI";
			
			ВКПодключена= ПодключитьВнешнююКомпоненту(ПутьКМакету, "DiadocAPI", ТипВнешнейКомпоненты.COM);
			
			Если НЕ ВКПодключена Тогда
				ВКПодключена= ПодключитьВнешнююКомпоненту("ОбщийМакет.AddInDiadocAPI_" + СтрЗаменить(ТребуемаяВерсияКомпонентыДиадок(), ".","_"), "DiadocAPI", ТипВнешнейКомпоненты.COM);
			КонецЕсли;
			
			ПараметрыИнициализации=	Новый Структура("ПутьКМакету, ВКПодключена", ПутьКМакету, ВКПодключена);
			
			Если НЕ ВКПодключена Тогда
				НачатьУстановкуВнешнейКомпоненты(Новый ОписаниеОповещения("ИнициализироватьКомпонентуЗавершение", ЭтаФорма, ПараметрыИнициализации), ПутьКМакету);
			Иначе
				ИнициализироватьКомпонентуЗавершение(ПараметрыИнициализации);
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ИнициализироватьКомпонентуЗавершение(ПараметрыИнициализации) Экспорт
			
			ПутьКМакету=  ПараметрыИнициализации.ПутьКМакету;
			ВКПодключена= ПараметрыИнициализации.ВКПодключена;
			
			Если НЕ ВКПодключена Тогда
				ВКПодключена= ПодключитьВнешнююКомпоненту(ПутьКМакету, "DiadocAPI", ТипВнешнейКомпоненты.COM);
			КонецЕсли;
			
			Если НЕ ВКПодключена Тогда
				ПараметрыФормы= Новый Структура;
				ПараметрыФормы.Вставить("ОписаниеОшибки", "ОшибкаВнешняя компонента не загружена и не проинициализирована. Работа в модуле невозможна.");
				ПараметрыФормы.Вставить("Подробности"	, "Файл внешней компоненты: " + Символы.ПС + ПутьКМакету);
				ОткрытьФормуВыводаОшибки(ПараметрыФормы, Истина);
				Возврат;
			КонецЕсли;
			
			РезультатИнициализации=	ИнициализацияКонтекста(ПутьКМакету, ПолучитьОписаниеКонфигурацииДляДиадок(Платформа.ПараметрыКлиент.УстановкаРасширения.КонтекстРасширения));
			Если РезультатИнициализации.Отказ = Истина Тогда
				Возврат;
			КонецЕсли;
			
			АвторизоватьсяИЗаполнитьКонтекст(Истина);
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ПроверитьИнициализациюПодключаемогоМодуля()
			
			Если Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль 
				И НЕ Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Инициализирован Тогда
				// Возможно сервер не имеет доступа к файлу подключаемого модуля или возникла иная ошибка инициализации на сервере.
				// Поэтому выполняем еще одну попытку инициализации с клиента.
				ИнициализироватьПодключаемыйМодуль();
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ИнициализироватьПодключаемыйМодуль(ПоказатьФормуОшибки= Истина)
			
			Результат= Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
			
			Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Инициализирован= Ложь;
			
			Если Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Свойство("НастройкиМодуляОбновлены") Тогда
				МетодКлиента(,"СохранитьНастройкиПодключаемогоМодуля");
				Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Удалить("НастройкиМодуляОбновлены")
			КонецЕсли;
				
			МетодКлиента(,"УдалитьКлиентскиеМодули");
			
			// Помещаем подключаемый модуль с диска во временное хранилище, чтобы передать его с клиента на сервер и подключить в сеанс
			Если Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль
				И Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "НаДиске"
				И НЕ Объект.ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
				
				Если НЕ ПустаяСтрока(Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю) Тогда
					
					НайденныеФайлы= НайтиФайлы(Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю,,Ложь);
					Если НайденныеФайлы.Количество() > 0 Тогда
						
						Попытка
							ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(НайденныеФайлы[0].ПолноеИмя), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресПодключаемыйМодуль);
						Исключение
							Результат.ОписаниеОшибки= "Не удалось прочитать файл подключаемого модуля!";
							Результат.Подробности= 	  "Путь к файлу:" + Символы.ПС + Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
							Результат.Отказ=		  Истина;
						КонецПопытки;
						
					Иначе
						Результат.ОписаниеОшибки= "Не удалось найти файл подключаемого модуля!";
						Результат.Подробности= 	  "Путь к файлу:" + Символы.ПС + Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
						Результат.Отказ=		  Истина;
					КонецЕсли;
					
				Иначе
					Результат.ОписаниеОшибки= "Не удалось найти файл подключаемого модуля!";
					Результат.Подробности= 	  "Не указан путь к файлу";
					Результат.Отказ=		  Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ Результат.Отказ Тогда 
				Результат= МетодСервераБезКонтекста(,"ИнициализироватьПодключаемыйМодуль");
			КонецЕсли;
			
			Если Результат.Отказ Тогда
				
				Платформа.ПараметрыКлиент.ПодключаемыйМодуль.ПутьКФормам=     "";
				Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Инициализирован= Ложь;
				Платформа.ПараметрыКлиент.ПодключаемыйМодуль.ОписаниеОшибки=  Результат.ОписаниеОшибки;
				
				Если ПоказатьФормуОшибки Тогда
					
					ПараметрыФормы=	Новый Структура;
					ПараметрыФормы.Вставить("Заголовок", 		"Ошибка инициализации подключаемого модуля!");
					ПараметрыФормы.Вставить("ОписаниеОшибки", 	Результат.ОписаниеОшибки);
					ПараметрыФормы.Вставить("Подробности", 		Результат.Подробности);
					
					МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
					
				КонецЕсли;
				
			Иначе
				
				Платформа.ПараметрыКлиент.ПодключаемыйМодуль.ПутьКФормам=     Результат.ПодключаемыйМодульПутьКФормам;
				Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Инициализирован= Истина;
				Платформа.ПараметрыКлиент.ПодключаемыйМодуль.ОписаниеОшибки=  "";
				
			КонецЕсли;
			
		КонецПроцедуры

		&НаСервере
		Процедура ИнициализироватьПодключаемыйМодульСервер()
			
			// Помещаем подключаемый модуль с диска во временное хранилище чтобы подключить его в сеанс
			Если Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль
				И Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "НаДиске"
				И НЕ Объект.ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
				
				НайденныеФайлы= НайтиФайлы(Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю,,Ложь);
				Если НайденныеФайлы.Количество() > 0 Тогда
					ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(НайденныеФайлы[0].ПолноеИмя), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресПодключаемыйМодуль);
				КонецЕсли;
				
			КонецЕсли;
			
			РезультатПодключения= МетодСервера(,"ИнициализироватьПодключаемыйМодуль");
			
			Если НЕ РезультатПодключения.Отказ Тогда
				Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКФормам=     РезультатПодключения.ПодключаемыйМодульПутьКФормам;
				Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.Инициализирован= Истина;
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ИнициализироватьСтруктуруИнтервалов()
			
			СтруктураИнтервалов= Новый Структура;
			
			ДатаНачала=    НачалоДня(ТекущаяДата());
			ДатаОкончания= КонецДня(ТекущаяДата());
			
			СтруктураИнтервалов.Вставить("Полученные"	   , Новый Структура("ДатаНачала, ДатаОкончания, ОтбиратьПоДатеДокумента", ДатаНачала, ДатаОкончания, Ложь));
			СтруктураИнтервалов.Вставить("Отправленные"	   , Новый Структура("ДатаНачала, ДатаОкончания, ОтбиратьПоДатеДокумента", ДатаНачала, ДатаОкончания, Ложь));
			СтруктураИнтервалов.Вставить("ЖурналДокументов", Новый Структура("ДатаНачала, ДатаОкончания, ОтбиратьПоДатеДокумента", ДатаНачала, ДатаОкончания, Ложь));
			
		КонецПроцедуры
		
	//} Инициализация
		
	&НаКлиенте
	Процедура ИнициализироватьМодуль() Экспорт
		
		ПроверитьИнициализациюПодключаемогоМодуля();
			
		Если Объект.ПараметрыКлиентСервер.ВызовИзРасширения 
			И Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль
			И НЕ Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Инициализирован Тогда		
			ИнициализироватьПодключаемыйМодуль();
		КонецЕсли;
		
		РезультатИнициализацииКонфигурации = ИнициализироватьКонфигурацию();
		Если РезультатИнициализацииКонфигурации.Отказ = Истина Тогда
			
			Если РезультатИнициализацииКонфигурации.ОписаниеОшибки = "Модуль интеграции не определен!" Тогда
				ОткрытьФормуВыводаОшибки(РезультатИнициализацииКонфигурации, Ложь, "ОбработчикОткрытьФормуТехПоддержки");
			Иначе
				ОткрытьФормуВыводаОшибки(РезультатИнициализацииКонфигурации, Истина);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
				
		ИнициализироватьКомпоненту();
		
		Если СтруктураИнтервалов = Неопределено Тогда
			ИнициализироватьСтруктуруИнтервалов();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗапуститьМодуль()
		
		УправлениеФормой();
		ОбновитьКонтекстДиадока();
		ПредложитьУстановкуРасширенияКонфигурации();
		
		ПанельРежимовПриСменеСтраницы("", Элементы.ПанельРежимов.ТекущаяСтраница);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаИзменитьпараметрыПодключенияПрокси(Команда)
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПроксиСервера",,ЭтаФорма);
		
	КонецПроцедуры

	&НаСервере
	Функция ПолучитьОписаниеКонфигурацииДляДиадок(ОписаниеКонтекстаРасширения="") 
		
		ОписаниеКонфигурации = Метаданные.Синоним + " ("+Метаданные.Версия+")";
		ОписаниеКонфигурации = ОписаниеКонфигурации + " extention: "+ОписаниеКонтекстаРасширения;
		
		Возврат ОписаниеКонфигурации;
				
	КонецФункции
	
	&НаКлиенте 
	Процедура УстановитьКонтекстРаботыКонфигурации(Версия1С)
		
		Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPI.OneSConfigaration = Версия1С;
		Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPIДляТестированияПодключения.OneSConfigaration = Версия1С;
		
	КонецПроцедуры	
	
	&НаКлиенте
	Функция ИнициализироватьОбъектыАПИ(Версия1С)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок= Новый Структура("DiadocInvoiceAPI, DiadocInvoiceAPIДляТестированияПодключения, DiadocConnection, ПредставлениеПользователя");
		
		Попытка
			АПИObjectКомпонента=						Новый("AddIn.DiadocAPI.DiadocInvoiceAPI");
			Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPI= 							АПИObjectКомпонента.CreateObject();
			Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPIДляТестированияПодключения=	АПИObjectКомпонента.CreateObject();
		Исключение 
			Результат.ОписаниеОшибки=	"Ошибка при создании COM-объекта AddIn.DiadocInvoiceAPI";
			Результат.Подробности=		ОписаниеОшибки();
			Результат.Отказ=			Истина;
			Возврат Результат;
		КонецПопытки;	
		
		УстановитьКонтекстРаботыКонфигурации(Версия1С);
		
		ТекущаяВерсияКомпоненты= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPI.GetVersion();
		Если ТекущаяВерсияКомпоненты <> ТребуемаяВерсияКомпонентыДиадок() Тогда
			Результат.ОписаниеОшибки=	"Ошибка загрузки компоненты";
			Результат.Подробности=		"Версия загруженной компоненты отличается от требуемой.
										|Перезапустите программу 1С.
										|В случае повторения ошибки обратитесь в техподдержку " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + ".
										|Текущая версия компоненты - " + ТекущаяВерсияКомпоненты;
			Результат.Отказ=			Истина;
			Возврат Результат;
		КонецЕсли;
		
		Возврат Результат;

	КонецФункции
	
	&НаКлиенте
	Функция УстановитьПодключение()
		
		Результат= Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		НастройкиПрокси= МетодСервераБезКонтекста(,"ПолучитьНастройкиПрокси");
		УстановитьНастройкиПодключения(Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPI, НастройкиПрокси);
		УстановитьНастройкиПодключения(Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPIДляТестированияПодключения, НастройкиПрокси);
		
		Если Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPIДляТестированияПодключения.TestConnection() <> Истина Тогда
			Результат.ОписаниеОшибки= "Ошибка подключения к " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыДательныйПадеж;
			Результат.Отказ= Истина;
			Возврат Результат;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура УстановитьНастройкиПодключения(DiadocInvoiceAPI, НастройкиПрокси)
		
		ПараметрыПодключения = ПолучитьПараметрыПодключения(); 
		
		DiadocInvoiceAPI.ApiClientId= ПараметрыПодключения.КлючРазработчика;
		DiadocInvoiceAPI.ServerURL=	  ПараметрыПодключения.АдресАПИ;
		
		Если НастройкиПрокси.ВариантИспользования = "ИспользоватьНастройкиIE" Тогда
			DiadocInvoiceAPI.ProxyMode=	"UseDefaultProxy";
		ИначеЕсли НастройкиПрокси.ВариантИспользования = "ИспользоватьПроксиСервер" Тогда
			
			DiadocInvoiceAPI.ProxyMode=	"UseProxy";
			
			ProxySettings=			DiadocInvoiceAPI.ProxySettings;
			ProxySettings.URL=		НастройкиПрокси.Адрес;
			ProxySettings.Login=	НастройкиПрокси.Логин;
			ProxySettings.Password=	НастройкиПрокси.Пароль;
			
		Иначе
			DiadocInvoiceAPI.ProxyMode=	"NoProxy";
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция АвторизоватьсяИЗаполнитьКонтекст(ВходПоПоследнемуСертификату = Ложь) Экспорт
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		МассивНаименованийНастроек= Новый Массив;
		МассивНаименованийНастроек.Добавить("ДиадокПоследнийСертификатПользователя");
		МассивНаименованийНастроек.Добавить("ДиадокПоследнееПредставлениеПользователя");
		
		ПараметрыАвторизации= МетодСервераБезКонтекста(,"ПолучитьНастройкиПользователя", МассивНаименованийНастроек);
		
		Если Лев(ПараметрыАвторизации.ДиадокПоследнийСертификатПользователя, 6) = "login:" Тогда
			Логин = Сред(ПараметрыАвторизации.ДиадокПоследнийСертификатПользователя, 7);
			Режим = "АвторизацияПоЛогину";
		Иначе
			Режим = "АвторизацияПоСертификату";
		КонецЕсли;
		
		
		Если ВходПоПоследнемуСертификату = Истина
			И Режим = "АвторизацияПоСертификату" 
			И НЕ ПустаяСтрока(ПараметрыАвторизации.ДиадокПоследнийСертификатПользователя) Тогда
			
			РезультатАвторизации = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьDiadocConnection", ПараметрыАвторизации.ДиадокПоследнийСертификатПользователя, ПараметрыАвторизации.ДиадокПоследнееПредставлениеПользователя);
			
			Если РезультатАвторизации.DiadocConnection <> Неопределено Тогда
				
				Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection= 		   РезультатАвторизации.DiadocConnection;
				Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.ПредставлениеПользователя= РезультатАвторизации.ПредставлениеПользователя;
				
				ВыполнитьЛогикуПослеАвторизации();
				
			Иначе
				
				ПараметрыФормы=	Новый Структура;
				ПараметрыФормы.Вставить("Режим"						 , Режим);
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_Авторизация", ПараметрыФормы, ЭтаФорма, "ОбработчикАвторизации");
				
			КонецЕсли;
			
		Иначе
			
			ПараметрыФормы=	Новый Структура;
			ПараметрыФормы.Вставить("Режим"						 , Режим);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_Авторизация", ПараметрыФормы, ЭтаФорма, "ОбработчикАвторизации");
			
		КонецЕсли;
	
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПредложитьУстановкуРасширенияКонфигурации()
		
		Если НЕ Объект.ПараметрыКлиентСервер.ВызовИзРасширения И Платформа.ПараметрыКлиент.УстановкаРасширения.НеобходимоУстановить Тогда
			
			ПараметрыФормы= Новый Структура("ТекущяяВерсияРасширенияДиадок", Платформа.ПараметрыКлиент.УстановкаРасширения.ТекущяяВерсияРасширенияДиадок);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаУстановкиРасширенияКонфигурации", ПараметрыФормы, ЭтаФорма, "ОбработчикЗапросУстановкиРасширенияКонфигурации");
			
		КонецЕсли;
		
	КонецПроцедуры
	
//} ЗАПУСК

//{ НАСТРОЙКИ
	
	&НаКлиенте
	Функция ПолучитьПараметрыПодключения() Экспорт
		
		ПараметрыПодключения = Новый Структура;
		
		ПараметрыПодключения.Вставить("КлючРазработчика", "1S83_5_5-fd5f5572-b071-404a-971b-9bfd226a8856");
		ПараметрыПодключения.Вставить("АдресАПИ"		, "https://diadoc-api.kontur.ru:443");
		
		Возврат ПараметрыПодключения;
		
	КонецФункции	
	
	&НаКлиенте
	Процедура ОбновитьПараметрыПрокси()
		
		Если НЕ ПустаяСтрока(Элементы.ЗначениеВариантИспользованияПроксиСервера.Заголовок) Тогда
			Возврат;
		КонецЕсли;
		
		НастрокиПроксиСервера= МетодСервераБезКонтекста(,"ПолучитьНастройкиПрокси");
		
		ВариантИспользованияПроксиСервераПредставление= МетодКлиента("Модуль_Клиент","ВариантыИспользованияПроксиСервера").НайтиПоЗначению(НастрокиПроксиСервера.ВариантИспользования).Представление;
		
		ПозицияРазделителя= Найти(НастрокиПроксиСервера.Адрес, ":");
		Если ПозицияРазделителя > 0 тогда 
			ПортПроксиСервера=  Сред(НастрокиПроксиСервера.Адрес, ПозицияРазделителя + 1);
			АдресПроксиСервера= Лев(НастрокиПроксиСервера.Адрес , ПозицияРазделителя - 1);
		Иначе
			АдресПроксиСервера= НастрокиПроксиСервера.Адрес;
		КонецЕсли;	
		
		ЛогинПроксиСервера=  НастрокиПроксиСервера.Логин;
		ПарольПроксиСервера= НастрокиПроксиСервера.Пароль;
		
		Элементы.ЗначениеВариантИспользованияПроксиСервера.Заголовок = ВариантИспользованияПроксиСервераПредставление;
		Элементы.ЗначениеАдресПроксиСервера.Заголовок				 = АдресПроксиСервера;
		Элементы.ЗначениеПортПроксиСервера.Заголовок				 = ПортПроксиСервера;
		Элементы.ЗначениеЛогинПроксиСервера.Заголовок				 = ЛогинПроксиСервера;
		Элементы.ЗначениеПарольПроксиСервера.Заголовок				 = ?(ПустаяСтрока(ПарольПроксиСервера), "", "***");
		
	КонецПроцедуры 
	
	&НаСервере
	Процедура ОбновитьОпции()
		ТочностьЦеныСФ = ХранилищеОбщихНастроек.Загрузить("НастройкаОпций_Диадок", "ТочностьЦеныСФ_Диадок");
		Если ЗначениеЗаполнено(ТочностьЦеныСФ) Тогда
			ТочностьЦеныСФ = ТочностьЦеныСФ;
		Иначе
		    ТочностьЦеныСФ = 2;
			СохранитьЗначенияОпцийНаСервере(ТочностьЦеныСФ);
		КонецЕсли;
	КонецПроцедуры
		
	&НаКлиенте
	Процедура СформироватьПредставленияФормированияПечатныхФорм(СтрокаТаблицы)
		
		Если СтрокаТаблицы.СпособФормированияАкта = 0 Тогда
			СтрокаТаблицы.СпособФормированияАктаПредставление = "Использовать форму рекомендованную ФНС";
		Иначе
			СтрокаТаблицы.СпособФормированияАктаПредставление = "Использовать внешнюю печатную форму";
		КонецЕсли;
		
		Если СтрокаТаблицы.ФормироватьСчетНаОсновании = Неопределено Тогда
			ФормироватьСчетНаОсновании=	0;
		Иначе
			ФормироватьСчетНаОсновании=	СтрокаТаблицы.ФормироватьСчетНаОсновании;
		КонецЕсли;	
		
		ЗначениеСпискаФормироватьСчетНаОсновании=	СписокФормироватьСчетНаОсновании.НайтиПоЗначению(ФормироватьСчетНаОсновании);
		
		Если ФормироватьСчетНаОсновании = 2 Тогда
			СтрокаТаблицы.СпособФормированияСчетаПредставление=	ЗначениеСпискаФормироватьСчетНаОсновании.Представление;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнешняяПечатнаяФормаСчета) Тогда
				СтрокаТаблицы.СпособФормированияСчетаПредставление = "На основании: " + ЗначениеСпискаФормироватьСчетНаОсновании.Представление + ", использовать стандартную форму";
			Иначе
				СтрокаТаблицы.СпособФормированияСчетаПредставление = "На основании: " + ЗначениеСпискаФормироватьСчетНаОсновании.Представление + ", использовать внешнюю печатную форму";
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
			
	&НаКлиенте
	Процедура ОбновитьДанныеСтраницыНастроек()
		
		ЗаполнитьДанныеТаблицыСписокЯщиковДиадока(Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком);
		ОбновитьОпции();
				
	КонецПроцедуры	 
	
	&НаКлиенте
	Процедура ОчиститьФильтрОрганизация()
		ОрганизацияID = "";
		ПодразделениеID = "";
		ВключатьПодчиненныеПодазделения = истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОчиститьФильтрКонтрагент()
		//КонтрагентПредставление = "Все"; 
		КонтрагентID = "";
	КонецПроцедуры
	
	&НаСервере 
	Процедура ЗаполнитьДанныеТаблицыСписокЯщиковДиадока(ОрганизацииФилиалыСопоставленныеСДиадоком)
		
		ТаблицаЯщиков= МетодСервера(,"ПолучитьТаблицуЯщиковДиадокОрганизации",,ОрганизацииФилиалыСопоставленныеСДиадоком);
		
		ТаблицаДанных = новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Организация");
		ТаблицаДанных.Колонки.Добавить("НаименованиеЯщика");
		ТаблицаДанных.Колонки.Добавить("IdBox");
		
		Для каждого стр из ТаблицаЯщиков цикл 
			стр2 = ТаблицаДанных.Добавить();
			стр2.организация = стр.Объект;
			стр2.НаименованиеЯщика = стр.Представление;
			стр2.idBox = стр.Значение
		Конеццикла;
		
		СписокПочтовыхЯщиков.Загрузить(ТаблицаДанных);
		
	КонецПроцедуры	 
	
	&НаКлиенте
	Процедура ИзменитьВидТаблицыДокументов(Вид)
		
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда
			Таблица= ТаблицаДокументовВходящих;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда 
			Таблица= ТаблицаДокументовИсходящих;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда 
			Таблица= ТаблицаДокументовВнутренних;
		КонецЕсли;
		
		Если Вид = "Классический" Тогда
					
			Для Каждого Строка ИЗ Таблица Цикл
				Строка.ИндексИконкиПакета= 0;
			КонецЦикла;
									
		ИначеЕсли Вид = "Пакеты" Тогда	
			
			Для Каждого Строка ИЗ Таблица Цикл
				Строка.ИндексИконкиПакета= Строка.ИндексИконкиПакетаКопия;
			КонецЦикла;
						
			Таблица.Сортировать("MessageId, ИндексИконкиПакета, ПозицияСортировки, ДатаУчета Убыв");
			
		КонецЕсли;
			
	КонецПроцедуры
	
//} НАСТРОЙКИ

//{ ОБРАБОТЧИК
	
	&НаКлиенте
	Процедура ОбработчикАвторизации(РезультатАвторизации, ДополнительныеПараметры) Экспорт
		
		Если РезультатАвторизации = Неопределено Тогда
			
			Если НЕ Объект.ПараметрыКлиентСервер.ВызовИзРасширения Тогда
				Закрыть();
			Иначе
				Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок= Неопределено;
				Платформа.ПараметрыКлиент.КонтекстДиадока.Очистить();	
				Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком.Очистить();
			КонецЕсли;
			
			Возврат;
		Иначе 	
			Организация = Неопределено;
			ОрганизацияID = "";
			Платформа.ПараметрыКлиент.КонтекстДиадока.Очистить();	
			КэшФорм = новый Структура; // формы кэшируют в т.ч. контекст коннекшна
		КонецЕсли;
		
		Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection = РезультатАвторизации.DiadocConnection;
		Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.ПредставлениеПользователя = РезультатАвторизации.ПредставлениеПользователя;

		ВыполнитьЛогикуПослеАвторизации();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытияФормыОшибки(РезультатВыбора, ЗакрытьФорму) Экспорт
		
		Если ЗакрытьФорму = Истина Тогда
			Закрыть();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикВыводОшибкиИнтернет(РезультатВыбора, ДополнительныеПараметры) Экспорт
		Закрыть();
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикВыборОрганизации(РезультатВыбора, Элемент) Экспорт
		
		Если РезультатВыбора <> Неопределено тогда 
			
			Организация= РезультатВыбора.Значение;
			
			ОрганизацияКонтрагентыПриИзменении(Элемент);
									
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикБлокировкаКонтрагента(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			
			Organization = МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
			Если Organization = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
			Counteragent=	Organization.GetCounteragentById(ДополнительныеПараметры.ID);
			Попытка
				Counteragent.BreakWithCounteragent("");
			Исключение 
				
				ПараметрыФормы=	Новый Структура();
				ПараметрыФормы.Вставить("Заголовок", 		"Ошибка работы с контрагентом");
				ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось заблокировать контрагента");
				ПараметрыФормы.Вставить("Подробности", 		ОписаниеОшибки());
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);

				Возврат;
				
			КонецПопытки;
			
			Counteragent=										Organization.GetCounteragentById(ДополнительныеПараметры.ID);
			ДополнительныеПараметры.ТекущийСтатус=				Counteragent.GetStatus();
			ДополнительныеПараметры.ТекущийСтатусРасшифровка=	РасшифровкаТекущегоСостоянияВзаимоотношенийСервер(ДополнительныеПараметры.ТекущийСтатус);
			СписокАктивныеПриАктивизацииСтроки(Элементы);
			
		КонецЕсли;

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОбновлениеСпискаДокументов()
		
		Состояние("Получение документов с сервера " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж);
		
		Если УстановитьПодключение().Отказ Тогда
			ОткрытьФормуВыводаОшибкиИнтернет();
			Возврат;
		КонецЕсли;
		
		Направление= ПолучитьЗначениеНаправления();
		
		Если Направление = "OutboundWaitingForSenderSignature" Тогда
			ТаблицаДокументовВнутренних.Очистить();
		ИначеЕсли Направление = "Outbound" Тогда
			ТаблицаДокументовИсходящих.Очистить();
		Иначе
			ТаблицаДокументовВходящих.Очистить();
		КонецЕсли;
		
		ПериодВыборки= ПолучитьТекущийПериод();
		
		МассивДанных= МетодКлиента( "Модуль_Клиент", 						
									"ВернутьВыборкуРНКИСчетовФактурДиадок",
		                             ПериодВыборки.ДатаНачала, 
									 ПериодВыборки.ДатаОкончания, 
									 Организация, 
									 КонтрагентID, 
									 ПолучитьПараметрыВыборки());
		
		Состояние("Производится загрузка таблицы документов");
		ЗагрузитьТаблицуДоков(Направление, МассивДанных);
		
		Состояние("Получение документов с сервера " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж + " завершено");
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораИнтервала(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда 
			
			Если РезультатЗакрытия.ТекущаяСтраница = "СтраницаОтправленныеДиадок" Тогда
				
				Если 	РезультатЗакрытия.ДатаНачала <> СтруктураИнтервалов.Отправленные.ДатаНачала
					ИЛИ РезультатЗакрытия.ДатаОкончания <> СтруктураИнтервалов.Отправленные.ДатаОкончания
					ИЛИ РезультатЗакрытия.ОтбиратьПоДатеДокумента <> СтруктураИнтервалов.Отправленные.ОтбиратьПоДатеДокумента
				Тогда
					ЗаполнитьЗначенияСвойств(СтруктураИнтервалов.Отправленные, РезультатЗакрытия);
					ОбновитьЗаголовокИнтервала("Отправленные");
					НачатьОбновлениеСпискаДокументов();
				КонецЕсли;
				
			ИначеЕсли РезультатЗакрытия.ТекущаяСтраница = "СтраницаПолученныеДиадок" Тогда
				
				Если 	РезультатЗакрытия.ДатаНачала <> СтруктураИнтервалов.Полученные.ДатаНачала
					ИЛИ РезультатЗакрытия.ДатаОкончания <> СтруктураИнтервалов.Полученные.ДатаОкончания
					ИЛИ РезультатЗакрытия.ОтбиратьПоДатеДокумента <> СтруктураИнтервалов.Полученные.ОтбиратьПоДатеДокумента
				Тогда
					ЗаполнитьЗначенияСвойств(СтруктураИнтервалов.Полученные, РезультатЗакрытия);
					ОбновитьЗаголовокИнтервала("Полученные");
					НачатьОбновлениеСпискаДокументов();
				КонецЕсли;
				
			ИначеЕсли РезультатЗакрытия.ТекущаяСтраница = "СтраницаЖурналыДокументов" Тогда
				
				Если 	РезультатЗакрытия.ДатаНачала <> СтруктураИнтервалов.ЖурналДокументов.ДатаНачала
					ИЛИ РезультатЗакрытия.ДатаОкончания <> СтруктураИнтервалов.ЖурналДокументов.ДатаОкончания
				Тогда
					ЗаполнитьЗначенияСвойств(СтруктураИнтервалов.ЖурналДокументов, РезультатЗакрытия);
					ОбновитьЗаголовокИнтервалаЖурналаДокументов();
					СформироватьЖурналДокументов();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыКарточкиКонтрагента(РезультатЗакрытия, ТекущиеДанные) Экспорт

		Если РезультатЗакрытия.Свойство("ВнесеныИзменения") <> Неопределено И РезультатЗакрытия.ВнесеныИзменения = Истина Тогда
			
			ОтборСтрок=	Новый Структура("ИНН", ТекущиеДанные.ИНН);
			
			ЗаполнитьСписокКонтрагентов();
			
			НайденныеСтроки= СписокАктивные.НайтиСтроки(ОтборСтрок);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.СписокАктивные.ТекущаяСтрока=	НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаКомментария(РезультатЗакрытия, ТекущиеДанные) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			ПараметрыПриглашения=	Новый Структура();
			ПараметрыПриглашения.Вставить("ТекущиеДанные", 	ТекущиеДанные);
			ПараметрыПриглашения.Вставить("Комментарий", 	РезультатЗакрытия.Комментарий);
			ПараметрыПриглашения.Вставить("ПутьКФайлу", 	РезультатЗакрытия.ПутьКФайлу);
			
			ОтправитьПринятьПриглашениеКонтрагенту(ПараметрыПриглашения);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыДобавленияЯщиковПриСтарте(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			ВычислитьОрганизацииФилиалыСопоставленныеСДиадоком();
			ОбновитьДанныеСтраницынастроек();
			//ПоказатьПредупреждение(, "Для окончании настройки вам необходимо добавить
			//						|своих покупателей в список контрагентов " + СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж + ".
			//						| 
			//						|Это делается в разделе ""Контрагенты"".", 120, СловарьWL.НаименованиеСистемы);
			ЗапуститьМодуль();			
		Иначе
			СброситьПоследнийСертификатПользователя();
			Закрыть();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытьФормуТехПоддержки(РезультатВыбора, ДополнительныеПараметры) Экспорт
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияОбработки"	 , СтрЗаменить(МетодСервера(,"ВерсияОбработкиДиадокСервер"), "_", "."));
		ПараметрыФормы.Вставить("ВерсияКомпоненты"	 , ?(Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок <> Неопределено, Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPI.GetVersion(), ""));
		ПараметрыФормы.Вставить("ТелефонТехподдержки", Платформа.ПараметрыКлиент.СловарьWL.ТелефонТехподдержки);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаТехподдержка", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыДобавленияЯщиков(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
	    	ВычислитьОрганизацииФилиалыСопоставленныеСДиадоком();
			ОбновитьКонтекстДиадока();
			ОбновитьДанныеСтраницынастроек();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикПутьКПодключаемомуМодулюДискЗавершениеВыбораФайла(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПутьКПодключаемомуМодулюДиск= РезультатЗакрытия[0];
		
		РасположенияПодключаемогоМодуляПриИзменении();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикКаталогМодулейСервераЗавершениеВыбораКаталога(РезультатВыбора, ДополнительныеПараметры) Экспорт
		
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		КаталогМодулейСервера= РезультатВыбора[0];
		
		КаталогМодулейСервераПриИзменении(Неопределено);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикКомандаСохранитьШаблонПМЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
		
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МетодКлиента(,"ВыгрузитьШаблонПодключаемогоМодуля", РезультатВыбора[0]);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытияФормыНастройкиПараметров(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			ПараметрыСвойствОтправки = РезультатЗакрытия;
			МетодКлиента("Модуль_Клиент","УстановитьЗначениеПараметровСвойствОтправки", Элементы.СписокПочтовыхЯщиков.ТекущиеДанные.Организация, ПараметрыСвойствОтправки);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикЗаполнитьСписок(РезультатВыбора, ДополнительныеПараметры) Экспорт
		
		Если РезультатВыбора <> Неопределено Тогда
			ЗаполнитьСписок(Неопределено);
		КонецЕсли;
		
	КонецПроцедуры
	
//} ОБРАБОТЧИК

//{ КОМАНДЫ

	&НаКлиенте
	Процедура КомандаПодписать(Команда)
		
		Если УстановитьПодключение().Отказ = Истина Тогда
			ОткрытьФормуВыводаОшибкиИнтернет();
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = СтруктураПараметровФормыГрупповойОбработкиДокументов();
		ПараметрыФормы.Вставить("ПолеВыбораДействия", "Подписать");
						
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаГрупповаяОбработка", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаСохранитьНаДиск(Команда)
		
		Если УстановитьПодключение().Отказ = Истина Тогда
			ОткрытьФормуВыводаОшибкиИнтернет();
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = СтруктураПараметровФормыГрупповойОбработкиДокументов();
		ПараметрыФормы.Вставить("Режим", "Сохранить");
		ПараметрыФормы.Вставить("ПолеВыбораДействия", "СохранитьНаДиск");
						
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаГрупповаяОбработка", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаСопоставить(Команда)
		
		Если УстановитьПодключение().Отказ = Истина Тогда
			ОткрытьФормуВыводаОшибкиИнтернет();
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = СтруктураПараметровФормыГрупповойОбработкиДокументов();
		ПараметрыФормы.Вставить("ПолеВыбораДействия", "Сопоставить");
						
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаГрупповаяОбработка", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура КомандаЗагрузитьИОтправить(Команда) Экспорт 
		
		Форма_Выгрузка= МетодКлиента(, "ОткрытьФормуОбработки", "Форма_Выгрузка", Новый Структура("Организация, ИспользоватьСтарыйИнтерфейсОтправкиФайлов", Организация, ОтправкаФайловСтарыйИнтерфейс), ЭтаФорма);
						
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаТаблицаЖурналаДокументовСоздать(Команда)
		
		Если ТекущийЭлемент.Имя = "ТаблицаДокументовРеализацияТоваровУслуг" Тогда
			РеализацияТоваровУслугПредставление= Объект.ПараметрыКлиентСервер.ПредставлениеДокументов.РеализацияТоваровУслуг;
			ИмяНовойФормы= "Документ."+РеализацияТоваровУслугПредставление+".ФормаОбъекта";
		ИначеЕсли ТекущийЭлемент.Имя = "ТаблицаДокументовСчетФактураВыданный" Тогда
			СчетФактураВыданныйПредставление= Объект.ПараметрыКлиентСервер.ПредставлениеДокументов.СчетФактураВыданный;
			ИмяНовойФормы= "Документ."+СчетФактураВыданныйПредставление+".ФормаОбъекта";
		КонецЕсли;
		
		МетодКлиента(,"ОткрытьФормуОбъектаИБ",,ИмяНовойФормы);
		СформироватьЖурналДокументов();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаТаблицаЖурналаДокументовИзменить(Команда)
		
		ТекущиеДанные= Элементы[ТекущийЭлемент.Имя].ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			МетодКлиента(,"ОткрытьФормуОбъектаИБ", ТекущиеДанные.Ссылка);
			СформироватьЖурналДокументов();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаТаблицаЖурналаДокументовУдалить(Команда)
		
		Если НЕ Элементы[ТекущийЭлемент.Имя].ТекущиеДанные = Неопределено Тогда
			СсылкаНаДокумент=	Элементы[ТекущийЭлемент.Имя].ТекущиеДанные.Ссылка;
			ПометитьДокументНаУдаление(СсылкаНаДокумент);
			ОтобразитьИзменениеДанных(СсылкаНаДокумент, ВидИзмененияДанных.Изменение);
			СформироватьЖурналДокументов();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаТаблицаЖурналаДокументовУстановитьИнтервал(Команда)
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("ДатаНачала"			 	  , СтруктураИнтервалов.ЖурналДокументов.ДатаНачала);
		ПараметрыФормы.Вставить("ДатаОкончания"			 	  , СтруктураИнтервалов.ЖурналДокументов.ДатаОкончания);
		ПараметрыФормы.Вставить("ТекущаяСтраница"			  , Элементы.ПанельРежимов.ТекущаяСтраница.Имя);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораИнтервала", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораИнтервала");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаТаблицаЖурналаДокументовПровести(Команда)
		
		Если НЕ Элементы[ТекущийЭлемент.Имя].ТекущиеДанные = Неопределено Тогда
			СсылкаНаДокумент=	Элементы[ТекущийЭлемент.Имя].ТекущиеДанные.Ссылка;
			Если ПровестиОтменитьДокумент(СсылкаНаДокумент, "Проведение") Тогда
				ОтобразитьИзменениеДанных(СсылкаНаДокумент, ВидИзмененияДанных.Изменение);
				СформироватьЖурналДокументов();
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаТаблицаЖурналаДокументовОтменаПроведения(Команда)
		
		Если НЕ Элементы[ТекущийЭлемент.Имя].ТекущиеДанные = Неопределено Тогда
			СсылкаНаДокумент=	Элементы[ТекущийЭлемент.Имя].ТекущиеДанные.Ссылка;
			Если ПровестиОтменитьДокумент(СсылкаНаДокумент, "ОтменаПроведения") Тогда
				ОтобразитьИзменениеДанных(СсылкаНаДокумент, ВидИзмененияДанных.Изменение);
				СформироватьЖурналДокументов();
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаПолученныеДиадокКоманднаяПанельУстановитьИнтервал(Команда)
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("ДатаНачала"			 	  , СтруктураИнтервалов.Полученные.ДатаНачала);
		ПараметрыФормы.Вставить("ДатаОкончания"			 	  , СтруктураИнтервалов.Полученные.ДатаОкончания);
		ПараметрыФормы.Вставить("ОтбиратьПоДатеДокумента"	  , СтруктураИнтервалов.Полученные.ОтбиратьПоДатеДокумента);
		ПараметрыФормы.Вставить("ТекущаяСтраница"			  , Элементы.ПанельРежимов.ТекущаяСтраница.Имя);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораИнтервала", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораИнтервала");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаОтправленныеДиадокКоманднаяПанельУстановитьИнтервал(Команда)
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("ДатаНачала"			 	  , СтруктураИнтервалов.Отправленные.ДатаНачала);
		ПараметрыФормы.Вставить("ДатаОкончания"			 	  , СтруктураИнтервалов.Отправленные.ДатаОкончания);
		ПараметрыФормы.Вставить("ОтбиратьПоДатеДокумента"	  , СтруктураИнтервалов.Отправленные.ОтбиратьПоДатеДокумента);
		ПараметрыФормы.Вставить("ТекущаяСтраница"			  , Элементы.ПанельРежимов.ТекущаяСтраница.Имя);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораИнтервала", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораИнтервала");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ГрупповаяОбработкаКонтрагентовОткрыть(Команда)
		ТекДанные = Элементы.СписокАктивные.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Organization = МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
		Если Organization = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("Контрагенты", СписокАктивные);

		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаГрупповаяОбработкаКонтрагентов", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыКарточкиКонтрагента", ТекДанные);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаОткрытьКарточкуКонтрагента(Команда)
		
		ТекДанные = Элементы.СписокАктивные.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Organization = МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
		Если Organization = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("СписокКонтрагентовВ1С", ТекДанные.СписокКонтрагентовВ1С);
		ПараметрыФормы.Вставить("CounteragentID"	   , ТекДанные.ID);
		ПараметрыФормы.Вставить("НаименованиеДД"	   , ТекДанные.Контрагент + ?(ПустаяСтрока(ТекДанные.ИНН), "", " (" + ТекДанные.ИНН) + ?(ПустаяСтрока(ТекДанные.КПП), "", "/" + ТекДанные.КПП) + ")");
		ПараметрыФормы.Вставить("Организация"		   , Организация);
		ПараметрыФормы.Вставить("ИНН"				   , ТекДанные.ИНН);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаКарточкиКонтрагента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыКарточкиКонтрагента", ТекДанные);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаКонтрагентыЗаблокироватьКонтрагента(Команда)
		
		ТекущиеДанные= Элементы.СписокАктивные.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение=	Новый ОписаниеОповещения("ОбработчикБлокировкаКонтрагента", ЭтаФорма, ТекущиеДанные);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите заблокировать контрагента?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, КодВозвратаДиалога.Нет);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаКонтрагентыПринятьОтправитьПриглашение(Команда)
		
		ТекущиеДанные= Элементы.СписокАктивные.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ТекущийСтатус = "InvitesMe" Тогда
			
			ПараметрыПриглашения=	Новый Структура();
			ПараметрыПриглашения.Вставить("ТекущиеДанные", 	ТекущиеДанные);
			ПараметрыПриглашения.Вставить("Комментарий", 	"");
			ПараметрыПриглашения.Вставить("ПутьКФайлу", 	"");
			
			ОтправитьПринятьПриглашениеКонтрагенту(ПараметрыПриглашения);
			
		ИначеЕсли ТекущиеДанные.ТекущийСтатус = "RejectsMe" 
			ИЛИ ТекущиеДанные.ТекущийСтатус = "IsRejectedByMe" Тогда
			
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("Заголовок",	"Отправка приглашения");
			ПараметрыФормы.Вставить("Комментарий", 	"Предлагаем обмениваться электронными документами через систему " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + ".");
			ПараметрыФормы.Вставить("Режим", 		"ОтправкаПриглашения");
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаКомментария", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаКомментария", ТекущиеДанные);

		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаКонтрагентыНайтиВДиадоке(Команда)
		
		ФормаПоискаКонтрагента=									МетодКлиента(,"ПолучитьФормуОбработки", "ФормаПоискаИПриглашенияКонтрагента");
		ФормаПоискаКонтрагента.Organization=					МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
		ФормаПоискаКонтрагента.Открыть();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаДобавщитьЯщикДиадок(Команда)
		
		СписокДобавленныхIdBox=	Новый СписокЗначений;
		Для каждого Ящик Из СписокПочтовыхЯщиков Цикл
			СписокДобавленныхIdBox.Добавить(Ящик.IdBox);
		КонецЦикла;
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("СписокДобавленныхIdBox", СписокДобавленныхIdBox);
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаДобавлениеЯщиков", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыДобавленияЯщиков");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаУдалитьЯщикДиадок(Команда)
		
		ТекСтрока=	Элементы.СписокПочтовыхЯщиков.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		МетодСервераБезКонтекста(,"Установить_BoxID_для_Организация", ТекСтрока.Организация, "", "");
	
		ц = 0;
		Пока ц < Платформа.ПараметрыКлиент.КонтекстДиадока.Количество() Цикл 
			Если Платформа.ПараметрыКлиент.КонтекстДиадока[ц].Организация = ТекСтрока.Организация Тогда 
				Платформа.ПараметрыКлиент.КонтекстДиадока.Удалить(ц);
			Иначе 
				ц =ц+1;
			КонецЕсли;
		КонецЦикла;
		
		ВычислитьОрганизацииФилиалыСопоставленныеСДиадоком();
		
		Если Текстрока.Организация = Организация Тогда
			Организация= Неопределено;
		КонецЕсли;
		
		ОбновитьДанныеСтраницыНастроек();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаПолученныеДиадокКоманднаяПанельОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаДокументовВходящих");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаОтправленныеДиадокКоманднаяПанельОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаДокументовИсходящих");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаВнутренниеДиадокКоманднаяПанельОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаДокументовВнутренних");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаГрупповаяОбработкаДокументовОткрыть(Команда)
		
		Если УстановитьПодключение().Отказ = Истина Тогда
			ОткрытьФормуВыводаОшибкиИнтернет();
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = СтруктураПараметровФормыГрупповойОбработкиДокументов();
				
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаГрупповаяОбработка", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура КомандаНастроитьПараметрыОтправки(Команда)
		// Вставить содержимое обработчика.
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СохранитьЗначенияОпций(Команда)
		СохранитьЗначенияОпцийНаСервере(ТочностьЦеныСФ);
	КонецПроцедуры
	
	&НаСервере
	Процедура СохранитьЗначенияОпцийНаСервере(ТочностьЦеныСФ)
		ХранилищеОбщихНастроек.Сохранить("НастройкаОпций_Диадок", "ТочностьЦеныСФ_Диадок", ТочностьЦеныСФ);
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УдалитьУстановитьРасширениеКонфигурации(Команда)
		
		МетодКлиента("Модуль_Клиент","ПодтверждениеВыполненияОперации", "ОбработчикУдалитьУстановитьРасширениеКонфигурации", ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикУдалитьУстановитьРасширениеКонфигурации(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
			ОбработчикЗапросУстановкиРасширенияКонфигурации(Истина, Новый Структура("ТолькоУдалить", Платформа.ПараметрыКлиент.УстановкаРасширения.РасширениеУжеУстановлено));
			НастроитьЭлементУдалитьУстановитьРасширениеКонфигурации();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаПодключитьМодули(Команда)
		
		ИнициализироватьПодключаемыйМодуль();
		
		НастроитьЭлементыПодключаемогоМодуля();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаВыгрузитьСерверныеМодули(Команда)
		
		Если НЕ ЗначениеЗаполнено(КаталогМодулейСервера) Тогда
			
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("Заголовок", 		"Ошибка");
			ПараметрыФормы.Вставить("ОписаниеОшибки", 	"");
			ПараметрыФормы.Вставить("Подробности", 		"Укажите каталог, в который необходимо выгрузить серверные модули/");
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
			
			Возврат;
		КонецЕсли;
		
		МетодКлиента(,"ВыгрузитьСерверныеМодули", Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Инициализирован);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаСохранитьШаблонПМ(Команда)
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.МножественныйВыбор= Ложь;
		ДиалогВыбораФайла.Фильтр = "Внешняя обработка (*.epf)|*.epf";
		ДиалогВыбораФайла.ПолноеИмяФайла= "ПодключаемыйМодульДиадок.epf";
		ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ОбработчикКомандаСохранитьШаблонПМЗавершение", ЭтаФорма));
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВидПакеты(Команда)
		
		ИзменитьВидТаблицыДокументов("Пакеты");
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовСортироватьАЯ(Команда)
		
		ИзменитьВидТаблицыДокументов("Классический");
		СортироватьТаблицуДокументов("Возр");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовСортироватьЯА(Команда)
		
		ИзменитьВидТаблицыДокументов("Классический");
		СортироватьТаблицуДокументов("Убыв");
						
	КонецПроцедуры	
		
//} КОМАНДЫ

//{ СОБЫТИЯ
	
	&НаКлиенте
	Процедура СтраницыДокументовПриСменеСтраницы(Элемент)
		
		СформироватьЖурналДокументов();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПанельРежимовПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
		
		Элементы.ПолученныеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Доступность= 							  Ложь;
		Элементы.ТаблицаДокументовИсходящихОтправленныеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Доступность= Ложь;
		Элементы.ТаблицаДокументовВнутреннихВнутренниеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Доступность=  Ложь;
		
		Элементы.СостояниеДокументооборота.Доступность= Истина;
				
		ОбновитьЗаголовок();
		
		Если ТекущаяСтраница = Элементы.СтраницаНастройка тогда 
			
			Элементы.СтраницыОтбор.ТекущаяСтраница= Элементы.СтраницаПустойОтбор;
			
			ОбновитьДанныеСтраницыНастроек();
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКонтрагенты тогда 
			
			Если ЗначениеЗаполнено(Организация) Тогда
				Элементы.СтраницыКонтрагенты.ТекущаяСтраница= Элементы.СтраницаКонтрагентыСписок;
			Иначе
				Элементы.СтраницыКонтрагенты.ТекущаяСтраница= Элементы.СтраницаКонтрагентыПодсказкаВыбораОрганизации;
			КонецЕсли;
			
			Элементы.СтраницыОтбор.ТекущаяСтраница= Элементы.СтраницаОтборОрганизацияСтатус;
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				ПодключитьОбработчикОжидания("ВыборОрганизацииИзСписка", 0.3, Истина)
			Иначе
				ПриОткрытииСтраницыКонтрагентов();
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЖурналыДокументов тогда 
			
			Элементы.СтраницыОтбор.ТекущаяСтраница= Элементы.СтраницаПустойОтбор;
			
			СформироватьЖурналДокументов();
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок тогда
			
			Элементы.СтраницыОтбор.ТекущаяСтраница= Элементы.СтраницаОтбор;
						
			НачатьОбновлениеСпискаДокументов();
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок тогда
			
			Элементы.СтраницыОтбор.ТекущаяСтраница= Элементы.СтраницаОтбор;
						
			НачатьОбновлениеСпискаДокументов();
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок тогда
			
			Элементы.СтраницыОтбор.ТекущаяСтраница= Элементы.СтраницаОтбор;
						
			Элементы.СостояниеДокументооборота.Доступность= Ложь;
			СостояниеДокументооборота= "0";
						
			НачатьОбновлениеСпискаДокументов();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервереБезКонтекста
	Функция ЗначениеНастройкиХранилищаОбщихНастроек(КлючОбъекта, КлючНастроек)
		
		Возврат ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);	
		
	КонецФункции
	
	&НаКлиенте
	Процедура СтраницыНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
		Если ТекущаяСтраница = Элементы.Прокси Тогда
			
			ОбновитьПараметрыПрокси();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытииСтраницыКонтрагентов()
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Элементы.СтраницыКонтрагенты.ТекущаяСтраница= Элементы.СтраницаКонтрагентыСписок;
		Иначе
			Элементы.СтраницыКонтрагенты.ТекущаяСтраница= Элементы.СтраницаКонтрагентыПодсказкаВыбораОрганизации;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ЗаполнитьСписокКонтрагентов", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.ЗагрузитьЗначения(Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		Если Платформа = Неопределено Тогда
			ИнициализироватьПлатформу();
		КонецЕсли;
		
		Если СтруктураИнтервалов = Неопределено Тогда
			ИнициализироватьСтруктуруИнтервалов();
		КонецЕсли;
		
		УстановитьНаименованиеСистемы();
		
		Если Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок = Неопределено Тогда
			ПодключитьОбработчикОжидания("ИнициализироватьМодуль", 0.1, Истина);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаЖурналаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		ТекущиеДанные= Элементы[ТекущийЭлемент.Имя].ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			МетодКлиента(,"ОткрытьФормуОбъектаИБ", ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовПриАктивизацииСтроки(Элемент)
		
		Если НЕ Элементы.СтраницыДокументов.ПодчиненныеЭлементы.Найти(ТекущийЭлемент.Имя) = Неопределено Тогда
			Если НЕ Элементы[ТекущийЭлемент.Имя].ТекущиеДанные = Неопределено Тогда
				
				КнопкаПроведения=		Элементы[Элемент.Имя].КоманднаяПанель.ПодчиненныеЭлементы.Найти(Элемент.Имя + "Провести");
				КнопкаОтменыПроведения=	Элементы[Элемент.Имя].КоманднаяПанель.ПодчиненныеЭлементы.Найти(Элемент.Имя + "ОтменаПроведения");
				
				Если Элементы[Элемент.Имя].ТекущиеДанные.СостояниеДокумента = 0 Тогда
					КнопкаПроведения.Доступность=		Ложь;
					КнопкаОтменыПроведения.Доступность=	Истина;
				ИначеЕсли Элементы[Элемент.Имя].ТекущиеДанные.СостояниеДокумента = 1 Тогда
					КнопкаПроведения.Доступность=		Истина;
					КнопкаОтменыПроведения.Доступность=	Ложь;
				Иначе
					КнопкаПроведения.Доступность=		Ложь;
					КнопкаОтменыПроведения.Доступность=	Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВходящихВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаДокументовВходящих");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовИсходящихВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		Если Поле.Имя = "ТаблицаДокументовИсходящихСостояниеПередачиЧерезРоуминг" Тогда
			
			ТекущиеДанные= Элемент.ТекущиеДанные;
			
			//ТекущаяСтрока= ТаблицаДокументовИсходящих.Получить(ВыбраннаяСтрока);
			
			Если НРег(Лев(ТекущиеДанные.СостояниеПередачиЧерезРоуминг, 6)) = "ошибка" Тогда
				
				ЭДОбъект= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ТекущиеДанные.BoxID).GetDocumentById(ТекущиеДанные.DocumentID);
				
				ТекущиеДанные.СостояниеПередачиЧерезРоуминг= МетодКлиента("Модуль_Клиент","ПредставлениеСтатусаРоуминг", ЭДОбъект);
				
				Если НРег(Лев(ТекущиеДанные.СостояниеПередачиЧерезРоуминг, 6)) = "ошибка" Тогда
					
					ПараметрыФормы= Новый Структура("Заголовок, ОписаниеОшибки, Подробности",
					ТекущиеДанные.СостояниеПередачиЧерезРоуминг,
					ТекущиеДанные.СостояниеПередачиЧерезРоуминг,
					ТекущиеДанные.СостояниеПередачиЧерезРоумингДетали);
					
					МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаДокументовИсходящих");
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВнутреннихВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаДокументовВнутренних");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентIDНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораКонтрагентID(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентIDПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, КонтрагентID);
		
		НачатьОбновлениеСпискаДокументов()
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентIDАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораКонтрагентID(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВходящихПередНачаломИзменения(Элемент, Отказ)
		Отказ = истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаПередУдалением(Элемент, Отказ)
		Отказ = истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовИсходящихПриАктивизацииСтроки(Элемент)
		
		Элементы.ТаблицаДокументовИсходящихОтправленныеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Доступность= Элемент.ТекущаяСтрока <> Неопределено;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВходящихПриАктивизацииСтроки(Элемент)
		
		Элементы.ПолученныеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Доступность= Элемент.ТекущаяСтрока <> Неопределено;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВнутреннихПриАктивизацииСтроки(Элемент)
		
		Элементы.ТаблицаДокументовВнутреннихВнутренниеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Доступность= Элемент.ТекущаяСтрока <> Неопределено;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработкаОповещения(ИмяСобытия, ПараметрыОповещения, Источник) Экспорт
		
		Если ИмяСобытия = "ИзменениеСтатусаДокументаДиадок"
			И Тип(Источник) = Тип("УправляемаяФорма") 
			И (Источник.ИмяФормы = Платформа.ПараметрыКлиент.ПутьКФормам+"ФормаДокумента"
			ИЛИ Источник.ИмяФормы = Платформа.ПараметрыКлиент.ПутьКФормам+"ФормаДокументаБезВизуализации" 
			ИЛИ Источник.ИмяФормы = Платформа.ПараметрыКлиент.ПутьКФормам+"ФормаГрупповаяОбработка")
			И ЗначениеЗаполнено(ПараметрыОповещения.BoxID)
			И ЗначениеЗаполнено(ПараметрыОповещения.DocumentID) Тогда
			
			Попытка
				Док 		= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ПараметрыОповещения.BoxID).GetDocumentById(ПараметрыОповещения.DocumentID);
				НовыйСтатус = МетодКлиента("Модуль_Клиент","ПредставлениеСтатуса", Док);
			Исключение КонецПопытки;
						
			Если НовыйСтатус <> Неопределено Тогда
				
				ОтборСтрок=	Новый Структура;
				ОтборСтрок.Вставить("BoxID", ПараметрыОповещения.BoxID);
				ОтборСтрок.Вставить("DocumentID", ПараметрыОповещения.DocumentID);
			
				НайденныеСтроки=	ТаблицаДокументовВходящих.НайтиСтроки(ОтборСтрок);
				Для Каждого СтрокаДокумента ИЗ НайденныеСтроки Цикл
					СтрокаДокумента.СостояниеДокументооборота= НовыйСтатус;
				КонецЦикла;
				
				НайденныеСтроки= ТаблицаДокументовВнутренних.НайтиСтроки(ОтборСтрок);
				Для Каждого СтрокаДокумента ИЗ НайденныеСтроки Цикл
					СтрокаДокумента.СостояниеДокументооборота= НовыйСтатус;
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ИмяСобытия = "ИзменениеСвязиДД1С"
			И ЗначениеЗаполнено(ПараметрыОповещения.BoxID)
			И ЗначениеЗаполнено(ПараметрыОповещения.DocumentID) Тогда
			
			Если ПараметрыОповещения.ТипСущности = "Документ"
				И ПараметрыОповещения.Свойство("Документ1С") Тогда
				
				ОтборСтрок=	Новый Структура;
				ОтборСтрок.Вставить("BoxID", ПараметрыОповещения.BoxID);
				ОтборСтрок.Вставить("DocumentID", ПараметрыОповещения.DocumentID);
				
				НайденныеСтроки=	ТаблицаДокументовВходящих.НайтиСтроки(ОтборСтрок);
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаДокумента=					НайденныеСтроки[0];
					СтрокаДокумента.ПервичныйДокумент=	ПараметрыОповещения.Документ1С;
				КонецЕсли;
				
				НайденныеСтроки =	ТаблицаДокументовИсходящих.НайтиСтроки(ОтборСтрок);
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаДокумента						= НайденныеСтроки[0];
					СтрокаДокумента.ПервичныйДокумент	= ПараметрыОповещения.Документ1С;
				КонецЕсли;
								
			КонецЕсли;
			
		ИначеЕсли ИмяСобытия = "УдалениеДокументов" Тогда
			
			Для каждого ПараметрыДокумента Из ПараметрыОповещения Цикл
				
				ОтборСтрок=	Новый Структура;
				ОтборСтрок.Вставить("BoxID", 		ПараметрыДокумента.BoxID);
				ОтборСтрок.Вставить("DocumentID", 	ПараметрыДокумента.DocumentID);
				
				ТаблицаДокументов=	Неопределено;
				Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда
					ТаблицаДокументов=	ТаблицаДокументовВходящих;
				ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда
					ТаблицаДокументов=	ТаблицаДокументовИсходящих;
				ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда
					ТаблицаДокументов=	ТаблицаДокументовВнутренних;
				КонецЕсли;
				
				Если НЕ ТаблицаДокументов = Неопределено Тогда
					НайденныеСтроки=	ТаблицаДокументов.НайтиСтроки(ОтборСтрок);
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаДокумента=	НайденныеСтроки[0];
						ИндексСтроки=		ТаблицаДокументов.Индекс(СтрокаДокумента);
						ТаблицаДокументов.Удалить(ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ИмяСобытия = "ИзменениеПодразделения" Тогда
			
			ОтборСтрок=	Новый Структура;
			
			ОтборСтрок.Вставить("BoxID", 		ПараметрыОповещения.BoxID);
			ОтборСтрок.Вставить("DocumentID", 	ПараметрыОповещения.DocumentID);
			
			ТаблицаДокументов=	Неопределено;
			Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда
				ТаблицаДокументов=	ТаблицаДокументовВходящих;
			ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда
				ТаблицаДокументов=	ТаблицаДокументовИсходящих;
			ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда
				ТаблицаДокументов=	ТаблицаДокументовВнутренних;
			КонецЕсли;
			
			Если НЕ ТаблицаДокументов = Неопределено Тогда
				НайденныеСтроки=	ТаблицаДокументов.НайтиСтроки(ОтборСтрок);
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаДокумента=	НайденныеСтроки[0];
					СтрокаДокумента.Подразделение=	ПараметрыОповещения.DepartmentName;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СформироватьЖурналДокументов()
		
		ПараметрыЖурнала=	Новый Структура();
		ПараметрыЖурнала.Вставить("НачалоПериода", СтруктураИнтервалов.ЖурналДокументов.ДатаНачала);
		ПараметрыЖурнала.Вставить("КонецПериода", СтруктураИнтервалов.ЖурналДокументов.ДатаОкончания);
		
		Состояние("Получение списка документов");
		ЗаполнитьТаблицуДокументов(ПараметрыЖурнала);
		
		Connection=	Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection;
		
		НомерДокумента=				0;
		ОбщееКоличествоДокументов=	ТаблицаЖурналаДокументов.Количество();
		
		Для Каждого СтрокаЖурнала Из ТаблицаЖурналаДокументов Цикл
			НомерДокумента=	НомерДокумента + 1;
			Если ЗначениеЗаполнено(СтрокаЖурнала.ИдЯщикОрганизации) И ЗначениеЗаполнено(СтрокаЖурнала.ИдДокументДиадок) Тогда
				Состояние("Обновление статуса документов", НомерДокумента*100/?(ОбщееКоличествоДокументов = 0, 1, ОбщееКоличествоДокументов) , "Обновлено " + НомерДокумента + " из " + ОбщееКоличествоДокументов);
				Попытка
					ОбновитьДанныеСтроки(Connection, СтрокаЖурнала);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокАктивныеПередНачаломИзменения(Элемент, Отказ)
		Отказ = истина;
		КомандаОткрытьКарточкуКонтрагента("")
	КонецПроцедуры
	
	
	&НаКлиенте
	Процедура ТаблицаДокументовВходящихПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовИсходящихПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВнутреннихПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВнутреннихПередНачаломИзменения(Элемент, Отказ)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВнутреннихПередУдалением(Элемент, Отказ)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокАктивныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокПочтовыхЯщиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры

	
	&НаКлиенте
	Процедура ДекорацияВыходНажатие(Элемент)
		
		Элементы.ДекорацияТекущийПользовательВДиадоке.Заголовок= "< Авторизация... >";
		
		СброситьПоследнийСертификатПользователя();
		ОчиститьПеременныеМодуля();
		ИнициализироватьМодуль();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДекорацияТехподдержкаНажатие(Элемент)
		
		ОбработчикОткрытьФормуТехПоддержки(Неопределено, Неопределено);
		
	КонецПроцедуры                   
	
	&НаКлиенте
	Процедура ДекорацияИсторияОбновленийНажатие(Элемент)
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаНовости",,ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтатусВзаимоотношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораСтатусВзаимоотношений(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтатусВзаимоотношенийПриИзменении(Элемент)
		
		ЗаполнитьСписокКонтрагентов();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокАктивныеПриАктивизацииСтроки(Элемент)
		
		ТекущиеДанные=	Элементы.СписокАктивные.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			
			Если ТекущиеДанные.ТекущийСтатус = "InvitesMe"
				ИЛИ ТекущиеДанные.ТекущийСтатус = "RejectsMe"
				ИЛИ ТекущиеДанные.ТекущийСтатус = "IsRejectedByMe" Тогда
				Элементы.СписокАктивные.КоманднаяПанель.ПодчиненныеЭлементы.СписокАктивныеКонтрагентыПринятьОтправитьПриглашение.Доступность=	Истина;
				Элементы.СписокАктивные.КонтекстноеМеню.ПодчиненныеЭлементы.СписокАктивныеКонтекстноеМенюГруппа1.ПодчиненныеЭлементы.
				СписокАктивныеКонтекстноеМенюКонтрагентыПринятьОтправитьПриглашение.Доступность=						Истина;
			Иначе
				Элементы.СписокАктивные.КоманднаяПанель.ПодчиненныеЭлементы.СписокАктивныеКонтрагентыПринятьОтправитьПриглашение.Доступность=	Ложь;
				Элементы.СписокАктивные.КонтекстноеМеню.ПодчиненныеЭлементы.СписокАктивныеКонтекстноеМенюГруппа1.ПодчиненныеЭлементы.
				СписокАктивныеКонтекстноеМенюКонтрагентыПринятьОтправитьПриглашение.Доступность=						Ложь;
			КонецЕсли;
			
			Если ТекущиеДанные.ТекущийСтатус = "InvitesMe" Тогда
				Элементы.СписокАктивные.КоманднаяПанель.ПодчиненныеЭлементы.СписокАктивныеКонтрагентыПринятьОтправитьПриглашение.Заголовок= 	"Принять приглашение";
				Элементы.СписокАктивные.КонтекстноеМеню.ПодчиненныеЭлементы.СписокАктивныеКонтекстноеМенюГруппа1.ПодчиненныеЭлементы.
				СписокАктивныеКонтекстноеМенюКонтрагентыПринятьОтправитьПриглашение.Заголовок= 							"Принять приглашение";
			ИначеЕсли ТекущиеДанные.ТекущийСтатус = "RejectsMe"
				ИЛИ ТекущиеДанные.ТекущийСтатус = "IsRejectedByMe" Тогда
				Элементы.СписокАктивные.КоманднаяПанель.ПодчиненныеЭлементы.СписокАктивныеКонтрагентыПринятьОтправитьПриглашение.Заголовок= 	"Отправить новое приглашение";
				Элементы.СписокАктивные.КонтекстноеМеню.ПодчиненныеЭлементы.СписокАктивныеКонтекстноеМенюГруппа1.ПодчиненныеЭлементы.
				СписокАктивныеКонтекстноеМенюКонтрагентыПринятьОтправитьПриглашение.Заголовок= 							"Отправить новое приглашение";
			КонецЕсли;
			
			Если ТекущиеДанные.ТекущийСтатус = "IsMyCounteragent"
				ИЛИ ТекущиеДанные.ТекущийСтатус = "InvitesMe"
				ИЛИ ТекущиеДанные.ТекущийСтатус = "IsInvitedByMe" Тогда
				Элементы.СписокАктивные.КоманднаяПанель.ПодчиненныеЭлементы.СписокАктивныеКонтрагентыЗаблокироватьКонтрагента.Доступность=		Истина;
				Элементы.СписокАктивные.КонтекстноеМеню.ПодчиненныеЭлементы.СписокАктивныеКонтекстноеМенюГруппа1.ПодчиненныеЭлементы.
				СписокАктивныеКонтекстноеМенюКонтрагентыЗаблокироватьКонтрагента.Доступность=											Истина;
			Иначе
				Элементы.СписокАктивные.КоманднаяПанель.ПодчиненныеЭлементы.СписокАктивныеКонтрагентыЗаблокироватьКонтрагента.Доступность=		Ложь;
				Элементы.СписокАктивные.КонтекстноеМеню.ПодчиненныеЭлементы.СписокАктивныеКонтекстноеМенюГруппа1.ПодчиненныеЭлементы.
				СписокАктивныеКонтекстноеМенюКонтрагентыЗаблокироватьКонтрагента.Доступность=											Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТочностьЦеныСФПриИзменении(Элемент)
		Если ТочностьЦеныСФ < 2 ИЛИ ТочностьЦеныСФ > 11 Тогда
			ТочностьЦеныСФ = 2;
			Сообщить("Точность цены счета-фактуры должна иметь значение от 2 до 11 знаков.");
		КонецЕсли;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ИспользоватьПодключаемыйМодульПриИзменении(Элемент)
		
		Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.Вставить("ИспользоватьМодуль", ИспользоватьПодключаемыйМодуль);
		
		Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Вставить("НастройкиМодуляОбновлены");
		
		Если НЕ Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль Тогда
			МетодСервераБезКонтекста(,"УдалитьПодключенныеОбработки");
			Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Инициализирован= Ложь;
			Платформа.ПараметрыКлиент.ПодключаемыйМодуль.ОписаниеОшибки=  "";
		КонецЕсли;
		
		НастроитьЭлементыПодключаемогоМодуля();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПереключательРасположенияПодключаемогоМодуляПриИзменении(Элемент)
		
		РасположенияПодключаемогоМодуляПриИзменении();
		
		НастроитьЭлементыПодключаемогоМодуля();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюПриИзменении(Элемент)
		
		РасположенияПодключаемогоМодуляПриИзменении();
		
		НастроитьЭлементПодключитьПМ();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюСсылкаПриИзменении(Элемент)
		
		РасположенияПодключаемогоМодуляПриИзменении();
		
		НастроитьЭлементПодключитьПМ();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюИмяОбработкиПриИзменении(Элемент)
		
		РасположенияПодключаемогоМодуляПриИзменении();
		
		НастроитьЭлементПодключитьПМ();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ДиалогВыбораФайла= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.МножественныйВыбор= Ложь;
		ДиалогВыбораФайла.ПолноеИмяФайла= ПутьКПодключаемомуМодулюДиск;
		ДиалогВыбораФайла.Фильтр = "Внешняя обработка (*.epf)|*.epf";
		ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ОбработчикПутьКПодключаемомуМодулюДискЗавершениеВыбораФайла", ЭтаФорма));
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюИмяОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		Элемент.СписокВыбора.Очистить();
		
		СписокОбработокДереваКонфигурации= МетодКлиента("Модуль_Клиент","СписокОбработокДереваКонфигурации");
		
		Для Каждого ЭлементСписка ИЗ СписокОбработокДереваКонфигурации Цикл
			Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюИмяОбработкиИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
		
		Элемент.СписокВыбора.Очистить();
		
		СписокОбработокДереваКонфигурации= МетодКлиента("Модуль_Клиент","СписокОбработокДереваКонфигурации");
		
		Для Каждого ЭлементСписка ИЗ СписокОбработокДереваКонфигурации Цикл
			Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюИмяОбработкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
		ОбратныйИндекс= Элемент.СписокВыбора.Количество()-1;
		Пока ОбратныйИндекс > -1 Цикл
			
			Если Элемент.СписокВыбора[ОбратныйИндекс].Значение <> ВыбранноеЗначение Тогда
				Элемент.СписокВыбора.Удалить(ОбратныйИндекс);
			КонецЕсли;
			
			ОбратныйИндекс= ОбратныйИндекс - 1;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура РежимОтладкиСервераПриИзменении(Элемент)
		
		Объект.ПараметрыКлиентСервер.РежимОтладкиСервера= РежимОтладкиСервера;
		
		Если Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Инициализирован
			И Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "НаДиске"
			Тогда
			ИнициализироватьПодключаемыйМодуль();
		КонецЕсли;
		
		НастроитьЭлементыОтладкаСерверныхМодулей();
		
		УстановитьНаименованиеСистемы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КаталогМодулейСервераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ДиалогВыбораФайла= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайла.МножественныйВыбор= Ложь;
		ДиалогВыбораФайла.Каталог= КаталогМодулейСервера;
		ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ОбработчикКаталогМодулейСервераЗавершениеВыбораКаталога", ЭтаФорма));
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КаталогМодулейСервераПриИзменении(Элемент)
		
		Объект.ПараметрыКлиентСервер.КаталогМодулейСервера= КаталогМодулейСервера;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТипыДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораТипыДокументов(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТипыДокументовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораТипыДокументов(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТипыДокументовПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, ТипыДокументов);
		
		НачатьОбновлениеСпискаДокументов()
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СостояниеДокументооборотаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораСостояниеДокументооборота(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СостояниеДокументооборотаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораСостояниеДокументооборота(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СостояниеДокументооборотаПриИзменении(Элемент)
		
		Если СостояниеДокументооборота = "-1" Тогда
			СостояниеДокументооборота = "0";  // Запретим выбирать группы
		КонецЕсли;
		
		НачатьОбновлениеСпискаДокументов();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, Организация);
		
		НачатьОбновлениеСпискаДокументов()
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияКонтрагентыПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, Организация);
		
		Если ЗначениеЗаполнено(Организация) Тогда
			
			Элементы.СтраницыКонтрагенты.ТекущаяСтраница= Элементы.СтраницаКонтрагентыСписок;
			
			ЗаполнитьСписокКонтрагентов();
			
		Иначе
			Элементы.СтраницыКонтрагенты.ТекущаяСтраница= Элементы.СтраницаКонтрагентыПодсказкаВыбораОрганизации;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура РазрешитьНеструктурированныеАдресаПриИзменении(Элемент)
		
		Объект.ПараметрыКлиентСервер.Вставить("РазрешитьНеструктурированныеАдреса", РазрешитьНеструктурированныеАдреса);
		МетодСервера(, "УстановитьЗначениеКонстанты", "РазрешитьНеструктурированныеАдреса", РазрешитьНеструктурированныеАдреса);  
		
	КонецПроцедуры
	
	
//} СОБЫТИЯ
		
//{ ТЕЛО МОДУЛЯ
	
	&НаСервере
	функция ПровестиОтменитьДокумент(СсылкаНаДокумент, Действие)
		
		ДокИзменен=	Ложь;
		
		Док=	СсылкаНаДокумент.ПолучитьОбъект();
		Попытка
			Док.Записать(РежимЗаписиДокумента[Действие]);
			ДокИзменен=	Истина;
		Исключение
			СообщениеПользователю=	Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	ОписаниеОшибки();
			СообщениеПользователю.Сообщить();
		КонецПопытки;
		
		Возврат ДокИзменен;
		
	КонецФункции
	
	&НаСервере
	Процедура ПометитьДокументНаУдаление(СсылкаНаДокумент)
		
		ДокументОбъект=	СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(НЕ ДокументОбъект.ПометкаУдаления);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьКонтекстДиадока()
		
		Для каждого СопоставленнаяОрганизация Из Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком Цикл
			НайденныеСтрокиСОрганизацией= НайтиСтрокиВМассивеСтруктур(Платформа.ПараметрыКлиент.КонтекстДиадока, Новый Структура("Организация", СопоставленнаяОрганизация));
			Если НайденныеСтрокиСОрганизацией.Количество() = 0 Тогда
				МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", СопоставленнаяОрганизация);
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СброситьПоследнийСертификатПользователя()
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("ДиадокПоследнийСертификатПользователя",Неопределено);
		СтруктураНастроек.Вставить("ДиадокПоследнееПредставлениеПользователя", 	"");
		
		МетодСервераБезКонтекста(,"УстановитьНастройкиПользователей", СтруктураНастроек);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьРасширениеФайлаДиадок(ИмяФайла)
		КолСим = СтрДлина(ИмяФайла);
		Для ИндЦикла = 1 По КолСим Цикл
			Инд = КолСим + 1 - ИндЦикла;
			Если Сред(ИмяФайла, Инд, 1) = "." Тогда
				Возврат ?(КолСим = Инд, 0, Сред(ИмяФайла, Инд + 1, КолСим - Инд));
			КонецЕсли;
		КонецЦикла;
	КонецФункции
	
	&НаКлиенте
	Процедура СформироватьПечатнуюФормуПоФайлуДиадок(ИмяТаблицыДокументов)
		
		Состояние("Формирование печатной формы документа " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		
		ТекущиеДанные=	Элементы[ИмяТаблицыДокументов].ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ПоказатьПредупреждение(, "Не выбран документ", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		Попытка
			Document= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ТекущиеДанные.BoxID).GetDocumentById(ТекущиеДанные.DocumentID);
		Исключение
			
			Результат=	Новый Структура();
			Результат.Вставить("ОписаниеОшибки", 	"Ошибка получения документа с сервера " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Результат.Вставить("Подробности", 		ТекущиеДанные.DocumentID);
			ОткрытьФормуВыводаОшибки(Результат, Истина);
			
			Возврат;
			
		КонецПопытки;
		
		ПараметрыФормы=	Новый Структура;
		
		Если НЕ Document.Department = Неопределено Тогда
			ПараметрыФормы.Вставить("DepartmentKpp", 		Document.Department.Kpp);
			ПараметрыФормы.Вставить("DepartmentId", 		Document.Department.Id);
		КонецЕсли;
		
		ЭлементМассива= Новый Структура("Вкл, DocumentType, Документ1С, НомерДокумента, ДатаДокумента, ТипДокумента, ДопСведения, ВнешняяПечатнаяФорма, ЭтоТекущиеДанные");
		
		ЭлементМассива.Вставить("CounteragentBoxID", 		Document.Counteragent.ID);
		ЭлементМассива.Вставить("НомерДокумента", 			ТекущиеДанные.Номер);
		ЭлементМассива.Вставить("ДатаДокумента", 			ТекущиеДанные.Дата);
		ЭлементМассива.Вставить("РасширениеФайлаДиадок", 	ПолучитьРасширениеФайлаДиадок(Document.FileName));
		ЭлементМассива.Вставить("DocumentType",				Document.Type);
		ЭлементМассива.Вставить("Документ1С", 				ТекущиеДанные.ПервичныйДокумент);
		ЭлементМассива.Вставить("ТипДокумента",				ТекущиеДанные.ТипДокумента);
		ЭлементМассива.Вставить("ДопСведения", 				"");
		ЭлементМассива.Вставить("DocumentID", 				"");
		ЭлементМассива.Вставить("Проведен",					Истина);
		ЭлементМассива.Вставить("IdСтроки",					"");
		ЭлементМассива.Вставить("ЭтоТекущиеДанные",			Истина);
		ЭлементМассива.Вставить("НомерЗаказа",				"");
		ЭлементМассива.Вставить("ОшибкаВалидации",			"");
		ЭлементМассива.Вставить("ЭтоФайл",					Ложь);
				
		МассивДокументовПакета= Новый Массив;
		МассивДокументовПакета.Добавить(ЭлементМассива);
		
		ПараметрыФормы.Вставить("BoxID", 					Document.OrganizationID);
		ПараметрыФормы.Вставить("CounteragentBoxID", 		Document.Counteragent.ID);
		ПараметрыФормы.Вставить("МассивДокументовПакета", 	МассивДокументовПакета);
		ПараметрыФормы.Вставить("ТочкаВызова", 				ИмяТаблицыДокументов);
		ПараметрыФормы.Вставить("Операция", 				"ОткрытьПакет");
				
		ИмяФормыПросмотра= 	МетодКлиента("Модуль_Клиент", "ПолучитьИмяФормыДокумента", Document);
		
		ФормаПросмотра= 			МетодКлиента(, "ПолучитьФормуОбработки", ИмяФормыПросмотра, ПараметрыФормы, ЭтаФорма, СокрЛП(Document.DocumentID) + "/" + СокрЛП(Document.OrganizationID));
		ФормаПросмотра.ЭДОбъект= 	Document;
		ФормаПросмотра.Открыть();
		
		Состояние("Формирование печатной формы завершено");
		
	КонецПроцедуры
	
	&НаСервере
	процедура ЗаполнитьСписокКонтрагентовСервер(МассивЗагрузки); 
		
		ТаблицаКонтрагентовСервер=	МассивСтруктур_2_ТаблицаЗначений(МассивЗагрузки);
		ТаблицаКонтрагентовСервер.Колонки.Добавить("КонтрагентВ1С");
		ТаблицаКонтрагентовСервер.Колонки.Добавить("СписокКонтрагентовВ1С", , Новый ОписаниеТипов("ТаблицаЗначений"));
		ТаблицаКонтрагентовСервер.Колонки.Добавить("ПредставлениеСпискаКонтрагентов1С", Новый ОписаниеТипов("Строка"));
		
		Если  ТаблицаКонтрагентовСервер.Количество()>0 Тогда 
			ТабКонтагентовДляМаршрутизации = МетодСервера(,"ВернутьТаблицуМаршрутизацииПоТаблицеКонтрагентов", ТаблицаКонтрагентовСервер.Скопировать(, "Id"));
		КонецЕсли;	
		
		Для Каждого СтрокаТаблицыКонтрагентов Из ТаблицаКонтрагентовСервер Цикл
			
			СтрокаСписка=	СписокАктивные.Добавить();
			
			СтрокаСписка.ID=			СтрокаТаблицыКонтрагентов.ID;
			СтрокаСписка.ИНН=			СтрокаТаблицыКонтрагентов.ИНН;
			СтрокаСписка.КПП=			СтрокаТаблицыКонтрагентов.КПП;
			СтрокаСписка.Контрагент=	СтрокаТаблицыКонтрагентов.Контрагент;
			СтрокаСписка.ТекущийСтатус=	СтрокаТаблицыКонтрагентов.ТекущийСтатус;
			
			СтрокаСписка.ТекущийСтатусРасшифровка=	МетодСервера(,"РасшифровкаТекущегоСостоянияВзаимоотношений", СтрокаСписка.ТекущийСтатус);

			ПараметрыОтбора 	= Новый Структура("Id", СтрокаТаблицыКонтрагентов.Id);
			ТабМаршрутизации 	= ТабКонтагентовДляМаршрутизации.НайтиСтроки(ПараметрыОтбора);
			
			Для каждого СтрокаТабМаршрутизации Из ТабМаршрутизации Цикл
				
				СтрокаПоКонтрагенту=							СтрокаСписка.СписокКонтрагентовВ1С.ПолучитьЭлементы().Добавить();
				СтрокаПоКонтрагенту.КонтрагентВ1С=				СтрокаТабМаршрутизации.Контрагент;
				СтрокаПоКонтрагенту.ПодразделениеКонтрагента=	СтрокаТабМаршрутизации.ПодразделениеКонтрагента;
				СтрокаПоКонтрагенту.ToDepartmentID=				СтрокаТабМаршрутизации.ToDepartmentID;
				
				ТабМаршрутизацииПоДоговорам=	МетодСервера(,"ВернутьТаблицуМаршрутизацииПоДоговорам", Организация, СтрокаТабМаршрутизации.Контрагент);
				Для каждого СтрокаТабМаршрутизацииПоДоговорам Из ТабМаршрутизацииПоДоговорам Цикл
					
					СтрокаПоДоговорам=							СтрокаПоКонтрагенту.ПолучитьЭлементы().Добавить();
					СтрокаПоДоговорам.Договор=					СтрокаТабМаршрутизацииПоДоговорам.Договор;
					СтрокаПоДоговорам.ПодразделениеКонтрагента=	СтрокаТабМаршрутизацииПоДоговорам.ПодразделениеДоговора;
					СтрокаПоДоговорам.ToDepartmentID=			СтрокаТабМаршрутизацииПоДоговорам.ToDepartmentID;
					
					СтрокаПоДоговорам.КонтрагентВ1С=			СтрокаПоКонтрагенту.КонтрагентВ1С;
					
				КонецЦикла;
				
				НаименованиеКонтрагента=	СокрЛП(СтрокаТабМаршрутизации.Контрагент.Наименование);
				СтрокаСписка.ПредставлениеСпискаКонтрагентов1С=	СтрокаСписка.ПредставлениеСпискаКонтрагентов1С + ?(ПустаяСтрока(СтрокаСписка.ПредставлениеСпискаКонтрагентов1С), "", "; ") + НаименованиеКонтрагента;
				
			КонецЦикла;
			
			Если СтрокаСписка.СписокКонтрагентовВ1С.ПолучитьЭлементы().Количество() > 1 Тогда
				СтрокаСписка.ПредставлениеСпискаКонтрагентов1С=	СтрокаСписка.ПредставлениеСпискаКонтрагентов1С + ";";
			КонецЕсли;
			
		КонецЦикла;	
		
		СписокАктивные.Сортировать("Контрагент Возр");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентов)
		
		Для Индекс = 0 По КоллекцияКонтрагентов.Count - 1 Цикл
			
			ЭлементКоллекции=	КоллекцияКонтрагентов.GetItem(Индекс);
			
			ЗаполненнаяСтруктура=	Новый Структура;
			ТекстДополнения= "";
			Если ЭлементКоллекции.IsTest или ЭлементКоллекции.IsPilot Тогда
				ТекстДополнения= "тестовый";	
			КонецЕсли;
			Если ЭлементКоллекции.IsRoaming Тогда
				ТекстДополнения= ТекстДополнения + ?(ЗначениеЗаполнено(ТекстДополнения), ", ", "") + "роуминговый";	
			КонецЕсли;
			ЗаполненнаяСтруктура.Вставить("Контрагент", 				ЭлементКоллекции.Name + ?(ЗначениеЗаполнено(ТекстДополнения), " (" + ТекстДополнения + ")", ""));
			
			ЗаполненнаяСтруктура.Вставить("ИНН", 						ЭлементКоллекции.Inn);
			ЗаполненнаяСтруктура.Вставить("КПП", 						ЭлементКоллекции.Kpp);
			ЗаполненнаяСтруктура.Вставить("Id",							ЭлементКоллекции.ID);
			ЗаполненнаяСтруктура.Вставить("ТекущийСтатус",				ЭлементКоллекции.GetStatus());
			ЗаполненнаяСтруктура.Вставить("ТекущийСтатусРасшифровка",	Неопределено);
			
			МассивЗагрузки.Добавить(ЗаполненнаяСтруктура);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокКонтрагентов()
		
		СписокАктивные.Очистить();
		
		Organization = МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации",Организация);
		Если Organization = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивЗагрузки=		Новый Массив;
		
		Если ПустаяСтрока(СтатусВзаимоотношений) Тогда
			
			КоллекцияКонтрагентовActive=		Organization.GetCounteragentListByStatus("IsMyCounteragent");
			ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентовActive);
			
			КоллекцияКонтрагентовInviting=		Organization.GetCounteragentListByStatus("InvitesMe");
			ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентовInviting);
			
			КоллекцияКонтрагентовIsInvited=		Organization.GetCounteragentListByStatus("IsInvitedByMe");
			ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентовIsInvited);
			
			КоллекцияКонтрагентовDenied=		Organization.GetCounteragentListByStatus("Rejected");
			ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентовDenied);
			
		ИначеЕсли СтатусВзаимоотношений = "RejectsMe" ИЛИ СтатусВзаимоотношений = "IsRejectedByMe" Тогда
			
			КоллекцияКонтрагентовDenied=		Organization.GetCounteragentListByStatus("Rejected");
			ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентовDenied);
			
		Иначе
			
			КоллекцияКонтрагентовFilter=		Organization.GetCounteragentListByStatus(СтатусВзаимоотношений);
			ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентовFilter);
			
		КонецЕсли;
		
		ЗаполнитьСписокКонтрагентовСервер(МассивЗагрузки);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыполнитьЛогикуПослеАвторизации()
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ВычислитьОрганизацииФилиалыСопоставленныеСДиадоком();
		
		Платформа.ПараметрыКлиент.КонтекстДиадока.Очистить();
		
		Элементы.ДекорацияТекущийПользовательВДиадоке.Заголовок= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.ПредставлениеПользователя;
		
		ОчиститьФильтрОрганизация();
		ОчиститьФильтрКонтрагент();
		
		Если Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком.Количество()=0 Тогда
			
			СписокДобавленныхIdBox=	Новый СписокЗначений;
			Для каждого Ящик Из СписокПочтовыхЯщиков Цикл
				СписокДобавленныхIdBox.Добавить(Ящик.IdBox);
			КонецЦикла;
			
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("СписокДобавленныхIdBox", СписокДобавленныхIdBox);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаДобавлениеЯщиков", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыДобавленияЯщиковПриСтарте");
			
		Иначе
			ЗапуститьМодуль();
		КонецЕсли;	
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьДанныеOrganizationDepartmentДляСопоставления() Экспорт
		
		массивOrganizationDepartmentДляСопоставления = Новый Массив;
		
		OrganizationList= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationList(); 

		Для Индекс = 0 По OrganizationList.Count - 1 Цикл
			
			Organization= OrganizationList.GetItem(Индекс);
			
			СтруктураОрганизации=	Новый Структура;
			СтруктураОрганизации.Вставить("OrganizationId", Organization.Id);
			СтруктураОрганизации.Вставить("Name",			Organization.Name);
			СтруктураОрганизации.Вставить("Inn",			Organization.Inn);
			СтруктураОрганизации.Вставить("Kpp",			Organization.Kpp);
			СтруктураОрганизации.Вставить("DepartmentKpp",	Неопределено);
			
			массивOrganizationDepartmentДляСопоставления.Добавить(СтруктураОрганизации);
			
			Для ИндексПодразделения = 0 По Organization.Departments.Count - 1 Цикл
				
				department=	Organization.Departments.GetItem(ИндексПодразделения);
				
				Если НЕ ПустаяСтрока(department.Kpp) И department.Kpp <> Organization.Kpp Тогда
					
					СтруктураПодразделенияОрганизации=	Новый Структура;
					СтруктураПодразделенияОрганизации.Вставить("OrganizationId", 	Organization.Id);
					СтруктураПодразделенияОрганизации.Вставить("Name",				Organization.Name + " (" + department.Name + ")");
					СтруктураПодразделенияОрганизации.Вставить("Inn",				Organization.Inn);
					СтруктураПодразделенияОрганизации.Вставить("Kpp",				department.Kpp);
					СтруктураПодразделенияОрганизации.Вставить("DepartmentKpp",		department.Kpp);
					
					массивOrganizationDepartmentДляСопоставления.Добавить(СтруктураПодразделенияОрганизации);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Возврат массивOrganizationDepartmentДляСопоставления;
		
	Конецфункции
	
	&НаКлиенте
	Процедура ДобавитьПодразделенияВИерархиюОрганизацийDiadoc(Organization, Parent, Departments)
		
		ВГраница = Departments.Count-1;
		
		Для ИндексЦикла = 0 По ВГраница Цикл
			
			Item= Departments.GetItem(ИндексЦикла);
			
			Платформа.ПараметрыКлиент.ИерархияОрганизацийDiadoc.Вставить(Item.Id, 
			Новый Структура("Name, Id, Inn, Kpp, DepartmentKpp, ParentId", 
			Item.Name, Item.Id, Organization.Inn, Item.Kpp, Item.Kpp, Parent.Id));
			
			ДобавитьПодразделенияВИерархиюОрганизацийDiadoc(Organization, Item, Item.Subdepartments);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьИерархиюОрганизацийDiadoc()
		
		OrganizationList= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationList();
		
		ВГраница= OrganizationList.Count-1;
		
		Для ИндексЦикла = 0 По ВГраница Цикл
			
			Item= OrganizationList.GetItem(ИндексЦикла);
			
			Платформа.ПараметрыКлиент.ИерархияОрганизацийDiadoc.Вставить(Item.Id, 
			Новый Структура("Name, Id, Inn, Kpp, DepartmentKpp, ParentId", Item.Name, Item.Id, Item.Inn, Item.Kpp));
			
			ДобавитьПодразделенияВИерархиюОрганизацийDiadoc(Item, Item, Item.Departments);
			
		КонецЦикла;

		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ВычислитьОрганизацииФилиалыСопоставленныеСДиадоком()
		
		ЗаполнитьИерархиюОрганизацийDiadoc();
		
		НаборСтруктурПараметров= Новый Массив;
		
		Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком= МетодСервераБезКонтекста(,"ПолучитьОрганизацииФилиалыСопоставленныеСДиадоком", ПолучитьДанныеOrganizationDepartmentДляСопоставления());
		
	КонецФункции
	
	&НаСервере
	Процедура УстановитьРеквизитКонтрагента(id,  ВыбКонтрагент)
		
		МетодСервера(,"Установить_CounteragentBoxID_для_Контрагент", ВыбКонтрагент, id);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьСписокЯщиковТекущегоКонтекста()
		
		Результат= Новый СписокЗначений;
		
		Для Каждого Стр ИЗ Платформа.ПараметрыКлиент.КонтекстДиадока Цикл 
			Если НЕ ЗначениеЗаполнено(Организация) ИЛИ Стр.Организация = Организация Тогда 
				Результат.Добавить(Стр.box);
			КонецЕсли;	
		КонецЦикла;	
		
		Возврат Результат;
		
	КонецФункции	

	&НаСервере
	Функция ПолучитьСписокДокументов(ТекущаяСтраницаИмя, ПараметрыСписка)
		
		Запрос=	Новый Запрос;
		
		Если ТекущаяСтраницаИмя = "СтраницаРеализацияТоваровУслуг" Тогда
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				
				Запрос.Текст=
					"ВЫБРАТЬ
					|	РасходнаяНакладная.Номер,
					|	РасходнаяНакладная.Дата КАК Дата,
					|	РасходнаяНакладная.Организация,
					|	РасходнаяНакладная.Контрагент,
					|	РасходнаяНакладная.СтруктурнаяЕдиница КАК Склад,
					|	ИдЯщикОрганизации.Значение КАК ИдЯщикОрганизации,
					|	ИдДокументДиадок.Значение КАК ИдДокументДиадок,
					|	РасходнаяНакладная.Ссылка,
					|	"""" КАК СостояниеДокументооборота,
					|	ВЫБОР
					|		КОГДА ИдДокументДиадок.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ЕстьВДиадоке,
					|	ВЫБОР
					|		КОГДА РасходнаяНакладная.Проведен
					|			ТОГДА 0
					|		ИНАЧЕ ВЫБОР
					|				КОГДА НЕ РасходнаяНакладная.ПометкаУдаления
					|					ТОГДА 1
					|				ИНАЧЕ 2
					|			КОНЕЦ
					|	КОНЕЦ КАК СостояниеДокумента,
					|	РасходнаяНакладная.СуммаДокумента
					|ИЗ
					|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваЯщикОрганизации) КАК ИдЯщикОрганизации
					|		ПО РасходнаяНакладная.Организация = ИдЯщикОрганизации.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваИдентификаторДокументаВДиадок) КАК ИдДокументДиадок
					|		ПО РасходнаяНакладная.Ссылка = ИдДокументДиадок.Объект
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ РасходнаяНакладная.Ссылка = &Ссылка
					|		КОНЕЦ
					|	И РасходнаяНакладная.Дата МЕЖДУ &НачалоПериода И &КонецПериода
					|
					|УПОРЯДОЧИТЬ ПО
					|	Дата";
					
			Иначе
					
				Запрос.Текст=
					"ВЫБРАТЬ
					|	РеализацияТоваровУслуг.Номер,
					|	РеализацияТоваровУслуг.Дата КАК Дата,
					|	РеализацияТоваровУслуг.Организация,
					|	РеализацияТоваровУслуг.Контрагент,
					|	РеализацияТоваровУслуг.Склад,
					|	ИдЯщикОрганизации.Значение КАК ИдЯщикОрганизации,
					|	ИдДокументДиадок.Значение КАК ИдДокументДиадок,
					|	РеализацияТоваровУслуг.Ссылка,
					|	"""" КАК СостояниеДокументооборота,
					|	ВЫБОР
					|		КОГДА ИдДокументДиадок.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ЕстьВДиадоке,
					|	ВЫБОР
					|		КОГДА РеализацияТоваровУслуг.Проведен
					|			ТОГДА 0
					|		ИНАЧЕ ВЫБОР
					|				КОГДА НЕ РеализацияТоваровУслуг.ПометкаУдаления
					|					ТОГДА 1
					|				ИНАЧЕ 2
					|			КОНЕЦ
					|	КОНЕЦ КАК СостояниеДокумента,
					|	РеализацияТоваровУслуг.СуммаДокумента
					|ИЗ
					|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваЯщикОрганизации) КАК ИдЯщикОрганизации
					|		ПО РеализацияТоваровУслуг.Организация = ИдЯщикОрганизации.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваИдентификаторДокументаВДиадок) КАК ИдДокументДиадок
					|		ПО РеализацияТоваровУслуг.Ссылка = ИдДокументДиадок.Объект
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ РеализацияТоваровУслуг.Ссылка = &Ссылка
					|		КОНЕЦ
					|	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
					|
					|УПОРЯДОЧИТЬ ПО
					|	Дата";		
				
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтраницаИмя = "СтраницаСчетФактураВыданный" Тогда
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				
				Запрос.Текст=
					"ВЫБРАТЬ
					|	СчетФактураВыданный.Номер,
					|	СчетФактураВыданный.Дата КАК Дата,
					|	СчетФактураВыданный.Организация,
					|	СчетФактураВыданный.ДокументОснование.Контрагент КАК Контрагент,
					|	"""" КАК Склад,
					|	ИдЯщикОрганизации.Значение КАК ИдЯщикОрганизации,
					|	ИдДокументДиадок.Значение КАК ИдДокументДиадок,
					|	СчетФактураВыданный.Ссылка,
					|	"""" КАК СостояниеДокументооборота,
					|	ВЫБОР
					|		КОГДА ИдДокументДиадок.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ЕстьВДиадоке,
					|	ВЫБОР
					|		КОГДА СчетФактураВыданный.ДокументОснование.Проведен
					|			ТОГДА 0
					|		ИНАЧЕ ВЫБОР
					|				КОГДА НЕ СчетФактураВыданный.ПометкаУдаления
					|					ТОГДА 1
					|				ИНАЧЕ 2
					|			КОНЕЦ
					|	КОНЕЦ КАК СостояниеДокумента,
					|	СчетФактураВыданный.ДокументОснование.СуммаДокумента КАК СуммаДокумента
					|ИЗ
					|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваЯщикОрганизации) КАК ИдЯщикОрганизации
					|		ПО СчетФактураВыданный.Организация = ИдЯщикОрганизации.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваИдентификаторДокументаВДиадок) КАК ИдДокументДиадок
					|		ПО СчетФактураВыданный.Ссылка = ИдДокументДиадок.Объект
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ СчетФактураВыданный.Ссылка = &Ссылка
					|		КОНЕЦ
					|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
					|
					|УПОРЯДОЧИТЬ ПО
					|	Дата";
					
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
					
				Запрос.Текст=
					"ВЫБРАТЬ
					|	СчетФактураВыданный.Номер,
					|	СчетФактураВыданный.Дата КАК Дата,
					|	СчетФактураВыданный.Организация,
					|	СчетФактураВыданный.ДокументОснование.Контрагент КАК Контрагент,
					|	"""" КАК Склад,
					|	ИдЯщикОрганизации.Значение КАК ИдЯщикОрганизации,
					|	ИдДокументДиадок.Значение КАК ИдДокументДиадок,
					|	СчетФактураВыданный.Ссылка,
					|	"""" КАК СостояниеДокументооборота,
					|	ВЫБОР
					|		КОГДА ИдДокументДиадок.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ЕстьВДиадоке,
					|	ВЫБОР
					|		КОГДА СчетФактураВыданный.Проведен
					|			ТОГДА 0
					|		ИНАЧЕ ВЫБОР
					|				КОГДА НЕ СчетФактураВыданный.ПометкаУдаления
					|					ТОГДА 1
					|				ИНАЧЕ 2
					|			КОНЕЦ
					|	КОНЕЦ КАК СостояниеДокумента,
					|	ТаблицаДокОснований.СуммаДокумента КАК СуммаДокумента
					|ИЗ
					|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваЯщикОрганизации) КАК ИдЯщикОрганизации
					|		ПО СчетФактураВыданный.Организация = ИдЯщикОрганизации.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваИдентификаторДокументаВДиадок) КАК ИдДокументДиадок
					|		ПО СчетФактураВыданный.Ссылка = ИдДокументДиадок.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			СУММА(СчетФактураВыданныйДокументыОснования.ДокументОснование.СуммаДокумента) КАК СуммаДокумента,
					|			СчетФактураВыданныйДокументыОснования.Ссылка КАК СсылкаНаСФ
					|		ИЗ
					|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
					|		
					|		СГРУППИРОВАТЬ ПО
					|			СчетФактураВыданныйДокументыОснования.Ссылка) КАК ТаблицаДокОснований
					|		ПО СчетФактураВыданный.Ссылка = ТаблицаДокОснований.СсылкаНаСФ
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ СчетФактураВыданный.Ссылка = &Ссылка
					|		КОНЕЦ
					|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
					|
					|УПОРЯДОЧИТЬ ПО
					|	Дата";

			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				
				Запрос.Текст=
					"ВЫБРАТЬ
					|	СчетФактураВыданный.Номер,
					|	СчетФактураВыданный.Дата КАК Дата,
					|	СчетФактураВыданный.Организация,
					|	СчетФактураВыданный.ДокументОснование.Контрагент КАК Контрагент,
					|	"""" КАК Склад,
					|	ИдЯщикОрганизации.Значение КАК ИдЯщикОрганизации,
					|	ИдДокументДиадок.Значение КАК ИдДокументДиадок,
					|	СчетФактураВыданный.Ссылка,
					|	"""" КАК СостояниеДокументооборота,
					|	ВЫБОР
					|		КОГДА ИдДокументДиадок.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ЕстьВДиадоке,
					|	ВЫБОР
					|		КОГДА СчетФактураВыданный.Проведен
					|			ТОГДА 0
					|		ИНАЧЕ ВЫБОР
					|				КОГДА НЕ СчетФактураВыданный.ПометкаУдаления
					|					ТОГДА 1
					|				ИНАЧЕ 2
					|			КОНЕЦ
					|	КОНЕЦ КАК СостояниеДокумента,
					|	ТаблицаДокОснований.СуммаДокумента КАК СуммаДокумента
					|ИЗ
					|	Документ.СчетФактура КАК СчетФактураВыданный
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваЯщикОрганизации) КАК ИдЯщикОрганизации
					|		ПО СчетФактураВыданный.Организация = ИдЯщикОрганизации.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваИдентификаторДокументаВДиадок) КАК ИдДокументДиадок
					|		ПО СчетФактураВыданный.Ссылка = ИдДокументДиадок.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			СУММА(СчетФактураВыданныйДокументыОснования.ДокументОснование.СуммаДокумента) КАК СуммаДокумента,
					|			СчетФактураВыданныйДокументыОснования.Ссылка КАК СсылкаНаСФ
					|		ИЗ
					|			Документ.СчетФактура.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
					|		
					|		СГРУППИРОВАТЬ ПО
					|			СчетФактураВыданныйДокументыОснования.Ссылка) КАК ТаблицаДокОснований
					|		ПО СчетФактураВыданный.Ссылка = ТаблицаДокОснований.СсылкаНаСФ
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ СчетФактураВыданный.Ссылка = &Ссылка
					|		КОНЕЦ
					|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
					|
					|УПОРЯДОЧИТЬ ПО
					|	Дата";				
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если Параметры.Свойство("Ссылка") Тогда
			Запрос.УстановитьПараметр("Ссылка", ПараметрыСписка.Ссылка);
		Иначе
			Запрос.УстановитьПараметр("Ссылка", Неопределено);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыСписка.НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", ПараметрыСписка.КонецПериода);
		
		ИдентификаторСвойстваЯщикОрганизации= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(МетодСервера(,"ИдентификаторСвойстваЯщикОрганизации"));
		Запрос.УстановитьПараметр("ИдентификаторСвойстваЯщикОрганизации", ИдентификаторСвойстваЯщикОрганизации);
		
		ИдентификаторСвойстваИдентификаторДокументаВДиадок=	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(МетодСервера(,"ИдентификаторСвойстваИдентификаторДокументаВДиадок"));
		Запрос.УстановитьПараметр("ИдентификаторСвойстваИдентификаторДокументаВДиадок", ИдентификаторСвойстваИдентификаторДокументаВДиадок);
		
		ТабДанных= Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТабДанных Из ТабДанных Цикл
			СтрокаТабДанных.ИдДокументДиадок= МетодСервера(,"Документ_2_DocumentID", СтрокаТабДанных.Ссылка);
		КонецЦикла;
		
		Возврат ТабДанных;
		
	КонецФункции
	
	&НаСервере
	Процедура ЗаполнитьТаблицуДокументов(ПараметрыЖурнала)
		
		ИмяТекущейСтраницы=	Элементы.СтраницыДокументов.ТекущаяСтраница.Имя;
		ТабДанных=			ПолучитьСписокДокументов(ИмяТекущейСтраницы, ПараметрыЖурнала);
		ЗначениеВДанныеФормы(ТабДанных, ТаблицаЖурналаДокументов);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ГрупповаяОбработкаДокументов(Режим)
		
		Если УстановитьПодключение().Отказ = Истина Тогда
			ОткрытьФормуВыводаОшибкиИнтернет();
			Возврат;
		КонецЕсли;

		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("Режим"			  , Режим);
		ПараметрыФормы.Вставить("ТекущийПериод"	  , ПолучитьТекущийПериод());
		ПараметрыФормы.Вставить("КонтрагентID"	  , КонтрагентID);
		ПараметрыФормы.Вставить("ПараметрыВыборки", ПолучитьПараметрыВыборки(Режим));
		ПараметрыФормы.Вставить("Организация"	  , Организация);
				
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаГрупповаяОбработка", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыборОрганизацииИзСписка() Экспорт
		
		Элементы.Организация_2.СписокВыбора.Очистить();
		Элементы.Организация_2.СписокВыбора.ЗагрузитьЗначения(Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком);
		Элементы.Организация_2.СписокВыбора.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ОбработчикВыборОрганизации", ЭтаФорма, Элементы.Организация_2));

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьЗаголовокИнтервала(ИмяИнтервала)
		
		Элементы["Интервал"+ИмяИнтервала].Заголовок= МетодКлиента("Модуль_Клиент","ПредставлениеПериодаДД", СтруктураИнтервалов[ИмяИнтервала].ДатаНачала, СтруктураИнтервалов[ИмяИнтервала].ДатаОкончания) + " " + ?(СтруктураИнтервалов[ИмяИнтервала].ОтбиратьПоДатеДокумента, "(по дате документа)", "(по дате учета)");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьЗаголовокИнтервалаЖурналаДокументов()
		
		ПредставлениеПериодаДД= МетодКлиента("Модуль_Клиент","ПредставлениеПериодаДД", СтруктураИнтервалов.ЖурналДокументов.ДатаНачала, СтруктураИнтервалов.ЖурналДокументов.ДатаОкончания);
		
		Элементы.ИнтервалЖурналДокументов_1.Заголовок= ПредставлениеПериодаДД;
		Элементы.ИнтервалЖурналДокументов_2.Заголовок= ПредставлениеПериодаДД;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьДанныеСтроки(Connection, СтрокаЖурнала)
		
		Box=		Connection.GetOrganizationById(СтрокаЖурнала.ИдЯщикОрганизации);
		Document=	Box.GetDocumentById(СтрокаЖурнала.ИдДокументДиадок);
		
		СтрокаЖурнала.СостояниеДокументооборота= МетодКлиента("Модуль_Клиент","ПредставлениеСтатуса", Document);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокПочтовыхЯщиковПараметрыОтправки(Команда)
		
		Если Элементы.СписокПочтовыхЯщиков.ТекущиеДанные = Неопределено Тогда
			ПоказатьПредупреждение(,"Не выбрана организация!", , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		Иначе
			ПараметрыФормы = Новый Структура("НастройкиОрганизации, ПредставлениеОрганизации, BoxId",
			МетодКлиента("Модуль_Клиент","ПолучитьНастройкиОрганизации", Элементы.СписокПочтовыхЯщиков.ТекущиеДанные.Организация),
			Элементы.СписокПочтовыхЯщиков.ТекущиеДанные.НаименованиеЯщика,
			Элементы.СписокПочтовыхЯщиков.ТекущиеДанные.IdBox);
		
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаНастройкаПараметровОтправки", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытияФормыНастройкиПараметров");
		КонецЕсли;
								
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СортироватьТаблицуДокументов(НаправлениеСортировки)
		
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда
			
			ПараметрКолонки= ПараметрыСортировки(Элементы.ТаблицаДокументовВходящих.ТекущийЭлемент.Имя, "ТаблицаДокументовВходящих", НаправлениеСортировки);
			ТаблицаДокументовВходящих.Сортировать(ПараметрКолонки);
						
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда 
			
			ПараметрКолонки= ПараметрыСортировки(Элементы.ТаблицаДокументовИсходящих.ТекущийЭлемент.Имя, "ТаблицаДокументовИсходящих", НаправлениеСортировки);
			ТаблицаДокументовИсходящих.Сортировать(ПараметрКолонки);
					
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда 
			
			ПараметрКолонки= ПараметрыСортировки(Элементы.ТаблицаДокументовВнутренних.ТекущийЭлемент.Имя, "ТаблицаДокументовВнутренних", НаправлениеСортировки);
			ТаблицаДокументовВнутренних.Сортировать(ПараметрКолонки);
								
		КонецЕсли;
		
	КонецПроцедуры
			
	&НаКлиенте
	Функция ПараметрыСортировки(ИмяТекущегоЭлемента, ИмяТаблицыДокументов, НаправлениеСортировки)
		
		ИмяКолонкиСортировки= 	СтрЗаменить(ИмяТекущегоЭлемента, ИмяТаблицыДокументов, "");
		ИмяКолонкиСортировки= 	СтрЗаменить(ИмяКолонкиСортировки, "ИконкаПакета", "ИндексИконкиПакета");
		ПараметрКолонки= 		ИмяКолонкиСортировки + ?(ЗначениеЗаполнено(НаправлениеСортировки), " " + НаправлениеСортировки, "");
		
		Возврат ПараметрКолонки;
		
	КонецФункции
	
	&НаКлиенте
	Функция СтруктураПараметровФормыГрупповойОбработкиДокументов()
		
		Результат = Новый Структура();
		Результат.Вставить("Режим"			  ,		"");
		Результат.Вставить("ТекущийПериод"	  ,		ПолучитьТекущийПериод());
		Результат.Вставить("КонтрагентID"	  ,		КонтрагентID);
		Результат.Вставить("ПараметрыВыборки",		ПолучитьПараметрыВыборки());
		Результат.Вставить("Организация"	  ,		Организация);
		Результат.Вставить("ПолеВыбораДействия",	Неопределено);
		
		Возврат Результат;
		
	КонецФункции
	
//} ТЕЛО МОДУЛЯ

//{ РАСШИРЕНИЕ КОНФИГУРАЦИИ

	&НаКлиенте
	Функция РазобратьВерсиюПриложенияПоРазрядам(Знач ВерсияПриложения)
		
		Платформа1С = Новый Структура("ПервыеДвеЦифры, ТретьяЦифра, ЧетвертаяЦифра");
		
		ВерсияПриложения 	= СокрЛП(ВерсияПриложения);
				
		ПерваяЦифра = Сред(ВерсияПриложения, 1, Найти(ВерсияПриложения, ".")-1);
		ПромежуточнаяСтрока = Сред(ВерсияПриложения, Найти(ВерсияПриложения, ".")+1, СтрДлина(ВерсияПриложения));
		
		ВтораяЦифра = Сред(ПромежуточнаяСтрока, 1, Найти(ПромежуточнаяСтрока, ".")-1);
		ПромежуточнаяСтрока = Сред(ПромежуточнаяСтрока, Найти(ПромежуточнаяСтрока, ".")+1, СтрДлина(ПромежуточнаяСтрока));
		
		ПервыеДвеЦифры = ПерваяЦифра + "." + ВтораяЦифра;
		
		ТретьяЦифра = Сред(ПромежуточнаяСтрока, 1, Найти(ПромежуточнаяСтрока, ".")-1);
		ПромежуточнаяСтрока = Сред(ПромежуточнаяСтрока, Найти(ПромежуточнаяСтрока, ".")+1, СтрДлина(ПромежуточнаяСтрока));
		
		ЧетвертаяЦифра = СокрЛП(ПромежуточнаяСтрока);
		
		Платформа1С.Вставить("ПервыеДвеЦифры", ПервыеДвеЦифры);
		Платформа1С.Вставить("ТретьяЦифра", ТретьяЦифра);
		Платформа1С.Вставить("ЧетвертаяЦифра", ЧетвертаяЦифра);
		
		Возврат Платформа1С;
		
	КонецФункции
			
	&НаКлиенте
	Процедура ОбработчикЗапросУстановкиРасширенияКонфигурации(РезультатЗапроса, ДополнительныеПараметры) Экспорт
		
		ТолькоУдалить= Ложь;
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДополнительныеПараметры.Свойство("ТолькоУдалить", ТолькоУдалить);
		КонецЕсли;
		
		Если РезультатЗапроса <> Истина Тогда
			Возврат;
		КонецЕсли;
		
		ТекстСообщения= 			"";
		РазделительТекстаСообщения= "";
		ПерезапуститьПрограмму= 	Ложь;
		
		Результат= МетодСервераБезКонтекста(,"УдалитьРасширениеКонфигурации");
		Если НЕ Результат.Отказ Тогда
			Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
				ТекстСообщения= ТекстСообщения + РазделительТекстаСообщения + Результат.ОписаниеОшибки;
				РазделительТекстаСообщения = Символы.ПС + Символы.ПС;
			КонецЕсли;
			ПерезапуститьПрограмму= МАКС(ПерезапуститьПрограмму, Результат.ПерезапуститьПрограмму);
		Иначе
			ОткрытьФормуВыводаОшибки(Результат);
			Возврат;
		КонецЕсли;
		
		Если НЕ ТолькоУдалить Тогда
			
			Результат= МетодСервераБезКонтекста(,"УстановитьРасширениеКонфигурации");
			Если НЕ Результат.Отказ Тогда
				Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
					ТекстСообщения= ТекстСообщения + РазделительТекстаСообщения + Результат.ОписаниеОшибки;
					РазделительТекстаСообщения = Символы.ПС + Символы.ПС;
				КонецЕсли;
				ПерезапуститьПрограмму= МАКС(ПерезапуститьПрограмму, Результат.ПерезапуститьПрограмму);
			Иначе
				ОткрытьФормуВыводаОшибки(Результат);
				Возврат;
			КонецЕсли;
			
			Результат= МетодСервераБезКонтекста(,"ПоместитьИнтеграционныйМодульВДополнительныеОбработки");
			Если НЕ Результат.Отказ Тогда
				Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
					ТекстСообщения= ТекстСообщения + РазделительТекстаСообщения + Результат.ОписаниеОшибки;
					РазделительТекстаСообщения = Символы.ПС + Символы.ПС;
				КонецЕсли;
			Иначе
				ОткрытьФормуВыводаОшибки(Результат);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		КнопкиВопроса= Новый СписокЗначений;
		Если ПерезапуститьПрограмму Тогда
			ТекстСообщения= ТекстСообщения + РазделительТекстаСообщения + "Программу необходимо перезапустить!";
			КнопкиВопроса.Добавить("ПерезапуститьПрограмму", "Перезапустить программу");
		КонецЕсли;
		КнопкиВопроса.Добавить("ПродолжитьРаботу", "Продолжить работу");
		
		Платформа.ПараметрыКлиент.УстановкаРасширения= МетодСервераБезКонтекста(,"ПроверитьНеобходимостьУстановкиРасширения");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикЗапросУстановкиРасширенияКонфигурацииЗавершение", ЭтаФорма), ТекстСообщения, КнопкиВопроса, 120, "ПродолжитьРаботу");
		
		НастроитьЭлементУдалитьУстановитьРасширениеКонфигурации();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикЗапросУстановкиРасширенияКонфигурацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = "ПерезапуститьПрограмму" Тогда
			ПрекратитьРаботуСистемы(Истина);
		КонецЕсли;
		
	КонецПроцедуры
	

	//{ РАБОТА С ОРГАНИЗАЦИЕЙ
		&НаКлиенте
		Процедура ВыполнитьСопоставлениеОрганизации() Экспорт
			
			СписокДобавленныхIdBox = ПолучитьСписокСписокДобавленныхIdBox(Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком);
				
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокДобавленныхIdBox", СписокДобавленныхIdBox);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаДобавлениеЯщиков", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыДобавленияЯщиковРасширение");
			
		КонецПроцедуры
	
		&НаСервере
		Функция ПолучитьСписокСписокДобавленныхIdBox(ОрганизацииФилиалыСопоставленныеСДиадоком)
			
			ТаблицаЯщиков= МетодСервера(,"ПолучитьТаблицуЯщиковДиадокОрганизации",,ОрганизацииФилиалыСопоставленныеСДиадоком);
			
			СписокДобавленныхIdBox = Новый СписокЗначений;
			
			Для каждого Ящик Из ТаблицаЯщиков Цикл
				СписокДобавленныхIdBox.Добавить(Ящик.Значение);
			КонецЦикла;
			
		КонецФункции
		
		&НаКлиенте
		Процедура ОбработчикОткрытиеФормыДобавленияЯщиковРасширение(РезультатЗакрытия, ТекущиеДанные) Экспорт
			
			Если РезультатЗакрытия = Истина Тогда
				Оповестить("РасширениеДиадокСопосталениеОрганизации");
			КонецЕсли;
			
		КонецПроцедуры
		
	//} РАБОТА С ОРГАНИЗАЦИЕЙ
	
	//{ РАБОТА С КОНТРАГЕНТОМ
	
		&НаКлиенте
		Процедура ЗаполнитьПараметрыПриглашенияИзДД(ПараметрыПриглашенияКА) Экспорт
			
			Organization= МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", ПараметрыПриглашенияКА.Организация);
			
			Если Organization <> Неопределено Тогда 
				
				КоллекцияКонтрагентов= Organization.GetCounteragentListByInnKpp(ПараметрыПриглашенияКА.ИннКонтрагента);
				
				Если КоллекцияКонтрагентов.Count = 0 Тогда
					
					Сообщить("Контрагент по ИНН и КПП не найден!"); //!! необходимо обработать ситуацию
					
				Иначе 
					
					Counteragent= КоллекцияКонтрагентов.GetItem(0);
					
					ПараметрыПриглашенияКА.Organization= 	   Organization;
					ПараметрыПриглашенияКА.CounteragentId= 	   Counteragent.Id;
					ПараметрыПриглашенияКА.CounteragentStatus= Counteragent.GetStatus();
					
				КонецЕсли;
				
			Иначе
				Сообщить("Не найдена Организаця!");
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаКлиенте
		Функция ПригласитьКАРасширение(ПараметрыПриглашенияКА) Экспорт
			
			CounteragentStatus = ПараметрыПриглашенияКА.CounteragentStatus;
			
			Organization= 	ПараметрыПриглашенияКА.Organization;
			CounteragentId= ПараметрыПриглашенияКА.CounteragentId;
				
			Если CounteragentStatus = "InvitesMe" Тогда
				
				Результат = МетодКлиента("Модуль_Клиент","ОтправитьПринятьПриглашениеКонтрагенту", Organization, CounteragentId, ПараметрыПриглашенияКА.ИннКонтрагента, "", "");
				Если Результат = Истина Тогда
					УстановитьCounteragentBoxID(CounteragentId, ПараметрыПриглашенияКА.Контрагент);
					ПоказатьПредупреждение(,"Контрагенту отправлено приглашение");
					Оповестить("РасширениеДиадокРаботаСКонтрагентом");
				КонецЕсли;
				
			ИначеЕсли CounteragentStatus = "NotInCounteragentList" или CounteragentStatus = "RejectsMe" или CounteragentStatus = "IsRejectedByMe" Тогда
				
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("Заголовок", 	"Отправка приглашения");
				ПараметрыФормы.Вставить("Комментарий", 	"Предлагаем обмениваться электронными документами через систему Диадок");
				ПараметрыФормы.Вставить("Режим", 		"ОтправкаПриглашения");
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаКомментария", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаКомментарияРасширение", ПараметрыПриглашенияКА);
				
			ИначеЕсли CounteragentStatus = "IsMyCounteragent" ИЛИ CounteragentStatus = "IsInvitedByMe" Тогда
				
				УстановитьCounteragentBoxID(CounteragentId, ПараметрыПриглашенияКА.КонтрагентСсылка);
				ПоказатьПредупреждение(,"Контрагент из Диадок сопоставлен контрагенту из 1С");
				Оповестить("РасширениеДиадокРаботаСКонтрагентом");
				
			КонецЕсли;
				
		КонецФункции
		
		&НаКлиенте
		Процедура ОбработчикОткрытиеФормыВводаКомментарияРасширение(РезультатЗакрытия, ТекущиеДанные) Экспорт
			
			Organization 	= ТекущиеДанные.Organization;
			CounteragentID 	= ТекущиеДанные.CounteragentID;
			
			Результат =	МетодКлиента("Модуль_Клиент","ОтправитьПринятьПриглашениеКонтрагенту", Organization, CounteragentID, ТекущиеДанные.ИннКонтрагента, РезультатЗакрытия.Комментарий, РезультатЗакрытия.ПутьКФайлу);
			
			Если Результат = Истина Тогда
				УстановитьCounteragentBoxID(CounteragentID, ТекущиеДанные.КонтрагентСсылка);
				ПоказатьПредупреждение(,"Контрагенту отправлено приглашение");
				Оповестить("РасширениеДиадокРаботаСКонтрагентом");
			КонецЕсли;
					
		КонецПроцедуры
		
		&НаСервере
		Процедура УстановитьCounteragentBoxID(Id, ВыбКонтрагент) Экспорт
		
			МетодСервера(,"Установить_CounteragentBoxID_для_Контрагент", ВыбКонтрагент, id);
		
		КонецПроцедуры
	
	//} РАБОТА С КОНТРАГЕНТОМ

	
	//{ ОТПРАВИТЬ ДОКУМЕНТ
	
		&НаКлиенте
		Процедура ОтправитьЧерезДиадокРасширение(ПараметрыОтправкиДокумента) Экспорт
			
			ТекущаяОрганизация=	ПараметрыОтправкиДокумента.Организация;
			ДанныеКонтрагента= 	ПараметрыОтправкиДокумента.ДанныеКонтрагента;
			
			Organization= МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", ТекущаяОрганизация);
			Если Organization = Неопределено Тогда 
				ПараметрыФормы= Новый Структура();
				ПараметрыФормы.Вставить("Заголовок", 		"Ошибка отправки документа");
				ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось отправить документ");
				ПараметрыФормы.Вставить("Подробности", 		"Не могу получить текущую организацию на сервере Диадок.");
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
				Возврат;
			КонецЕсли;
			
			ЗаголовокОшибки= 	"";
			ОписаниеОшибки= 	"";
			ПодробностиОшибки= 	"";
			
			CounteragentList= Organization.GetCounteragentListByInnKpp(ДанныеКонтрагента.Инн, ДанныеКонтрагента.Кпп);
			Если CounteragentList.Count > 0 Тогда
				CounteragentItem= CounteragentList.GetItem(0);
				Status= CounteragentItem.GetStatus();
				Если НЕ Status = "IsMyCounteragent" Тогда
					ЗаголовокОшибки= 	"Ошибка отправки документа";
					ОписаниеОшибки= 	"Не удалось отправить документ";
					ПодробностиОшибки= 	"Нельзя отправить документы контрагенту, с которым не установлены партнерские отношения.";
				КонецЕсли;
			Иначе
				ЗаголовокОшибки= 	"Ошибка отправки документа";
				ОписаниеОшибки= 	"Не удалось отправить документ";
				ПодробностиОшибки= 	"Не могу найти контрагента с ИНН: " + ДанныеКонтрагента.Инн + " КПП: " + ДанныеКонтрагента.Кпп + " на сервере Диадок.";		
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ПараметрыФормы= Новый Структура();
				ПараметрыФормы.Вставить("Заголовок", 		ЗаголовокОшибки);
				ПараметрыФормы.Вставить("ОписаниеОшибки", 	ОписаниеОшибки);
				ПараметрыФормы.Вставить("Подробности", 		ПодробностиОшибки);
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
				Возврат;	
			КонецЕсли;
			
			//ЗаполнитьСписокКонтрагентов();
		
			Форма_Выгрузка= МетодКлиента(,"ПолучитьФормуОбработки", "Форма_Выгрузка",,ЭтаФорма);
			
			Форма_Выгрузка.СтруктураПараметрыДокументаРасширение= ПараметрыОтправкиДокумента;
			
			Форма_Выгрузка.НачатьВыгрузку(Новый Структура("Организация", Организация));
			
		КонецПроцедуры
	
	//} ОТПРАВИТЬ ДОКУМЕНТ


	//{ ПОСМОТРЕТЬ ДОКУМЕНТ
	
	&НаКлиенте
	Процедура ПоказатьОтправленныйДокумент(СтруктураИсходныеДанные) Экспорт
		
		СтруктураID= ПолучитьСтруктуруId(СтруктураИсходныеДанные);
		
		Document= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(СтруктураID.BoxID).GetDocumentById(СтруктураID.DocumentID);
		
		ПараметрыФормы= Новый Структура;
		
		Если НЕ Document.Department = Неопределено Тогда
			ПараметрыФормы.Вставить("DepartmentKpp", 		Document.Department.Kpp);
			ПараметрыФормы.Вставить("DepartmentId", 		Document.Department.Id);
		КонецЕсли;
		
		ЭлементМассива= Новый Структура;
				
		ЭлементМассива.Вставить("Вкл", 						Истина);
		ЭлементМассива.Вставить("DocumentType",				Document.Type);
		ЭлементМассива.Вставить("Документ1С", 				СтруктураИсходныеДанные.ДокументСсылка);
		ЭлементМассива.Вставить("НомерДокумента", 			"");
		ЭлементМассива.Вставить("ДатаДокумента", 			"");
		ЭлементМассива.Вставить("ТипДокумента",				"");
		ЭлементМассива.Вставить("ДопСведения", 				"");
		ЭлементМассива.Вставить("CounteragentBoxID", 		Document.Counteragent.ID);
		ЭлементМассива.Вставить("РасширениеФайлаДиадок", 	ПолучитьРасширениеФайлаДиадок(Document.FileName));
		ЭлементМассива.Вставить("DocumentID", 				"");
		ЭлементМассива.Вставить("Проведен",					Истина);
		ЭлементМассива.Вставить("IdСтроки",					"");
		ЭлементМассива.Вставить("ЭтоТекущиеДанные",			Истина);
		ЭлементМассива.Вставить("НомерЗаказа",				"");
		ЭлементМассива.Вставить("ВнешняяПечатнаяФорма",		Неопределено);
		ЭлементМассива.Вставить("ОшибкаВалидации",			"");
		ЭлементМассива.Вставить("ЭтоФайл",			Ложь);
								
		МассивДокументовПакета= Новый Массив;
		МассивДокументовПакета.Добавить(ЭлементМассива);
			
		ПараметрыФормы.Вставить("BoxID", 					Document.OrganizationID);
		ПараметрыФормы.Вставить("CounteragentBoxID", 		Document.Counteragent.ID);
		ПараметрыФормы.Вставить("МассивДокументовПакета", 	МассивДокументовПакета);
		ПараметрыФормы.Вставить("ТочкаВызова", 				"ТаблицаДокументовИсходящих");
				
		ИмяФормыПросмотра= 	МетодКлиента("Модуль_Клиент","ПолучитьИмяФормыДокумента", Document);
		ФормаПросмотра= 	МетодКлиента(,"ПолучитьФормуОбработки", ИмяФормыПросмотра, ПараметрыФормы, ЭтаФорма, СокрЛП(Document.DocumentID) + "/" + СокрЛП(Document.OrganizationID));
		
		ФормаПросмотра.ЭДОбъект= Document;
		ФормаПросмотра.Открыть();
		
	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьСтруктуруId(Знач СтруктураИсходныеДанные)
		
		СтруктураID = Новый Структура("BoxID, DocumentID");
		
		НаименованиеСвойстваИдентификаторЯщикДокументаВДиадок = МетодСервера(,"ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок");
		ПВХИдентификаторЯщикДокументаВДиадок = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(НаименованиеСвойстваИдентификаторЯщикДокументаВДиадок);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеСведения.Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект = &Объект
		|	И ДополнительныеСведения.Свойство = &Свойство";
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Объект", СтруктураИсходныеДанные.ДокументСсылка);
		Запрос.УстановитьПараметр("Свойство", ПВХИдентификаторЯщикДокументаВДиадок);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество()>0 Тогда
			СтруктураID.BoxID = РезультатЗапроса[0].Значение;				
		КонецЕсли;
		
		СтруктураID.DocumentID = МетодСервера(,"Документ_2_DocumentID", СтруктураИсходныеДанные.ДокументСсылка);
		
		Возврат СтруктураID;			
		
	КонецФункции

	//} ПОСМОТРЕТЬ ДОКУМЕНТ
	
	//{ ОТМЕНИТЬ СОПОСТАВЛЕНИЕ
	
	&НаКлиенте
	Процедура ОтменитьСопоставлениеРасширение(ПараметрыОтмены) Экспорт
		
		НаименованиеСистемы= Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		КоличествоДокументовОтмены= ПараметрыОтмены.МассивДокументов.Количество();
		Если КоличествоДокументовОтмены > 1 Тогда
			ТекстНачалоВопроса= "Вы действительно хотите отменить сопоставление для " + КоличествоДокументовОтмены + " документов";
		Иначе
			ТекстНачалоВопроса= "Вы действительно хотите отменить сопоставление для документа";
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОтменитьСопоставление", ЭтаФорма, ПараметрыОтмены), 
					   ТекстНачалоВопроса + " " + НаименованиеСистемы + "?", 
					   РежимДиалогаВопрос.ДаНет, 
					   120, 
					   КодВозвратаДиалога.Нет, 
					   НаименованиеСистемы, 
					   КодВозвратаДиалога.Нет);
			
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОтменитьСопоставление(РезультатВопроса, ПараметрыОбработчика) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			Для Каждого ТекДок Из ПараметрыОбработчика.МассивДокументов Цикл
				МетодСервера(,"Установить_DocumentID_Для_Документ", ТекДок, "", "");
				МетодСервера(,"ОчиститьCustomDocumentId", ТекДок);
			КонецЦикла;
			Если ПараметрыОбработчика.ФормаВызова <> Неопределено Тогда
				ПараметрыОбработчика.ФормаВызова.РасширениеДиадок_НастроитьФормуДокумента();
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	//} ОТМЕНИТЬ СОПОСТАВЛЕНИЕ

//} РАСШИРЕНИЕ КОНФИГУРАЦИИ	

&НаКлиенте
Процедура ОтправкаФайловСтарыйИнтерфейсПриИзменении(Элемент)
	
	ПоказатьПредупреждение(, "Для того, чтобы изменения вступили в силу, необходимо закрыть окно ""Отправка документов через Диадок""", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы); 
	
КонецПроцедуры
