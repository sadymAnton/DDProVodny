
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	СловарьWL= МетодСервера(,"ПолучитьСловарь");
	
	Заголовок= СловарьWL.КраткоеНаименованиеСистемы + ": Техническая поддержка";
	
	Элементы.НадписьУдаленноеПодключениеVNC.Видимость = СловарьWL.КраткоеНаименованиеСистемы = "Диадок";
	Элементы.НадписьПровестиДиагностику.Видимость = СловарьWL.КраткоеНаименованиеСистемы = "Диадок";
	
	ТелефонТехподдержки = Параметры.ТелефонТехподдержки;
	
	Элементы.НадписьТелефонТехподдержки.Заголовок = ?(стрДлина(ТелефонТехподдержки)<20, "Телефон техподдержки: " + ТелефонТехподдержки, ТелефонТехподдержки);
	
	ВерсияОбработки 	= Параметры.ВерсияОбработки;
	ВерсияКомпоненты 	= Параметры.ВерсияКомпоненты;
	ИмяМодуляИнтеграции = Объект.ПараметрыКлиентСервер.ИмяФормыИнтеграции;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ВерсияПлатформы 			= СистемнаяИнформация.ВерсияПриложения;
	ВерсияОперационнойСистемы 	= СистемнаяИнформация.ВерсияОС;
	ТипПлатформы				= Строка(СистемнаяИнформация.ТипПлатформы);
	
	СтрокаСоединения			= СтрокаСоединенияИнформационнойБазы();
			
	ИнформацияОКонфигурации = Метаданные.ПодробнаяИнформация + " (" + Метаданные.Версия + ")";
	
	Если ПустаяСтрока(Объект.ПараметрыКлиентСервер.ИмяФормыИнтеграции) Тогда
		ИмяМодуляИнтеграции= "Модуль интеграции не определен!";
		Элементы.ИмяМодуляИнтеграции.ЦветТекста= WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПлатформаПриОткрытии(Отказ);
	
	СтрокаПодключаемыйМодуль= Новый Массив;
	СтрокаПодключаемыйМодуль.Добавить(?(Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль, "Используется", "Не используется"));
	Если Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль И НЕ Платформа.ПараметрыКлиент.ПодключаемыйМодуль.Инициализирован Тогда
		СтрокаПодключаемыйМодуль.Добавить(". ");
		СтрокаПодключаемыйМодуль.Добавить(Новый ФорматированнаяСтрока("Ошибка подключения!",,WebЦвета.Красный));
	КонецЕсли;
	Элементы.НадписьПодключаемыйМодульЗначение.Заголовок = Новый ФорматированнаяСтрока(СтрокаПодключаемыйМодуль);
	
	#Если ТонкийКлиент Тогда
		ВидКлиента = "Тонкий клиент";
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		ВидКлиента = "Толстый клиент обычное приложение";
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
		ВидКлиента = "Толстый клиент управляемые формы";
	#ИначеЕсли ВебКлиент Тогда
		ВидКлиента = "Веб клиент";
	#ИначеЕсли НаСервере Тогда
		ВидКлиента = "Сервер";
	#ИначеЕсли ВнешнееСоединение Тогда
		ВидКлиента = "Внешнее соединение";
	#КонецЕсли
			
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьУдаленноеПодключениеVNCНажатие(Элемент)
	ОткрытьХостВIE("https://help.kontur.ru/vnc");
КонецПроцедуры

&НаКлиенте
Процедура НадписьПровестиДиагностикуНажатие(Элемент)
	
	ОткрытьХостВIE("https://help.kontur.ru/diadoc");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьХостВIE(Хост)
	
	Попытка
		IE=	Новый COMОбъект("InternetExplorer.Application"); 
	Исключение
		Сообщить("Ошибка при открытии приложения Internet Explorer");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	IE.Visible=	True;
	IE.Navigate2(Хост);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТехИнформацию(Команда)
	
	ТекстовыйДокумент =	Новый ТекстовыйДокумент;
	
	ТекстовыйДокумент.ДобавитьСтроку("Версия модуля: " + ВерсияОбработки);
	ТекстовыйДокумент.ДобавитьСтроку("Версия компоненты: " + ВерсияКомпоненты);
	ТекстовыйДокумент.ДобавитьСтроку("Версия платформы: " + ВерсияПлатформы);
	ТекстовыйДокумент.ДобавитьСтроку("Версия ОС: " + ВерсияОперационнойСистемы);
	ТекстовыйДокумент.ДобавитьСтроку("Тип платформы: " + ТипПлатформы);
	ТекстовыйДокумент.ДобавитьСтроку("Вид клиента: " + ВидКлиента);
	ТекстовыйДокумент.ДобавитьСтроку("Строка соединения: " + СтрокаСоединения);
	//ТекстовыйДокумент.ДобавитьСтроку("Подключаемый модуль: " + ИспользованиеПодключаемогоМодуля);
	ТекстовыйДокумент.ДобавитьСтроку("Информация о конфигурации: " + ИнформацияОКонфигурации);
	
	Попытка
		Wscript 	= Новый COMobject("Wscript.Shell");
		ПутьКФайлу 	= "C:\" + Wscript.ExpandEnvironmentStrings("%HomePath%") + "\Desktop\ТехническаяИнформацияДиадок.txt";
		ТекстовыйДокумент.Записать(ПутьКФайлу, КодировкаТекста.UTF8);
		Предупреждение("Техническая информация сохранена на Рабочий Стол в файл ТехническаяИнформацияДиадок.txt, отправьте его специалисту технической поддержки", 120, "Диадок");
	Исключение
		Сообщить("Не удалось сохранить файл с технической информацией " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяМодуляИнтеграцииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборМодуляИнтеграции();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМодуляИнтеграции();
	
	ДопустимыеМаркерыКонфигураций = МетодСервераБезКонтекста(,"ДопустимыеМаркерыКонфигураций");
	
	ДопустимыеМаркерыКонфигурацийТекущийЭлемент= ДопустимыеМаркерыКонфигураций.НайтиПоЗначению(Объект.ПараметрыКлиентСервер.МаркерКонфигурации);
	
	ДопустимыеМаркерыКонфигураций.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВыборМодуляИнтеграции_ОбработкаВыбораМаркераКонфигурации", ЭтаФорма) , Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемы + ": Выбор базовой конфигурации", ДопустимыеМаркерыКонфигурацийТекущийЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМодуляИнтеграции_ОбработкаВыбораМаркераКонфигурации(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено ИЛИ ВыбранныйЭлемент.Значение = Объект.ПараметрыКлиентСервер.МаркерКонфигурации Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки("МаркерКонфигурации", ВыбранныйЭлемент.Значение);
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации <> МетодСервераБезКонтекста(,"ПолучитьМаркерКонфигурации") Тогда
		
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПерезапускМодуля", ЭтаФорма),
		"Необходима повторная инициализация!
		| Модуль закрыт и открыт повторно.",,Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезапускМодуля(ДополнительныеПараметры) Экспорт
	
	ВладелецФормыИмяФормы = ВладелецФормы.ИмяФормы;
	
	ВладелецФормы.Закрыть();
	
	ОткрытьФорму(ВладелецФормыИмяФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройки(КлючНастроек, Настройки)
	
	ХранилищеОбщихНастроек.Сохранить("МодульДиадок", КлючНастроек, Настройки);
	
КонецПроцедуры
