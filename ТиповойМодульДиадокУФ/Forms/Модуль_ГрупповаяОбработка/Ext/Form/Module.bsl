
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт, Манифест Экспорт;

&НаКлиенте
Перем НомерИтерацииВызоваМодуля;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
	Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
	Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
	Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
	Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура Инициализировать(ИмяМодуля) Экспорт
	
	Если НомерИтерацииВызоваМодуля = Неопределено Тогда
		НомерИтерацииВызоваМодуля= 0;
	КонецЕсли;
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля + 1;
	
	Если Манифест = Неопределено Тогда
		Платформа.ЗаполнитьМанифест(ЭтаФорма, ИмяМодуля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПеременные() Экспорт
	
	// Разрывается циклическая ссылка, для того чтобы исключить утечку памяти.
	// Модуль может быть вызван повторно во вложенных методах,
	// поэтому очищаем переменные, ТОЛЬКО если это начальная итерация вызова модуля.
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля - 1;
	
	Если НомерИтерацииВызоваМодуля = 0 Тогда
		Платформа= 					  Неопределено;
		Объект.ПараметрыКлиентСервер= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МАНИФЕСТ

// Все функции и процедуры тела модуля должны быть экспортными и добавлены в соответствующую структуру!

&НаКлиенте
Функция ФункцииМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, <Имя функции>, <Параметры строкой>, <Вариант кэширования>, <Переопределение>);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НеИспользовать", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяВыполнения", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяСеанса", Истина);
	//...
	
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СоздатьНовыйСчетФактуру", "ИсходныеДанные",,Истина);
	
	Возврат СтруктураМетодов;
	
КонецФункции

&НаКлиенте
Функция ПроцедурыМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, <Имя процедуры>, <Параметры строкой>, <Переопределение>);
	//Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПримерПроцедуры", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", Истина);
	//...
	
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОбновитьКодСпособаПолучения", "ДокументСсылка, DocumentType", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПровестиПриходнуюНакладную", "ДокументСсылка", Истина);
	
	Возврат СтруктураМетодов;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОбновитьКодСпособаПолучения(ДокументСсылка, DocumentType) Экспорт
	
	Если  МетодСервера(,"ЕстьРеквизитПрикладногоОбъекта", ТипЗнч(ДокументСсылка), "КодСпособаПолучения") 
		И ДокументСсылка.КодСпособаПолучения <> 2 
		И НЕ ДокументСсылка.ПометкаУдаления
		И (Лев(DocumentType, 7) = "Invoice" ИЛИ НЕ ДокументСсылка.Проведен)
		Тогда
		
		ДокументОбъект= ДокументСсылка.ПолучитьОбъект();
		
		ДокументОбъект.КодСпособаПолучения= 2;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			
			Попытка
				ДокументОбъект.Записать();
			Исключение
				Сообщить(ДокументОбъект + Символы.ПС + "Не удалось обновить значение реквизита ""Код способа выставления""!");
			КонецПопытки;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПровестиПриходнуюНакладную(ДокументСсылка) Экспорт
	
	Перем ДокументОбъект;
	
	Если НЕ ДокументСсылка.Проведен Тогда
		ДокументОбъект= ДокументСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если МетодСервера(,"ЕстьРеквизитПрикладногоОбъекта", ТипЗнч(ДокументСсылка), "ПредъявленСчетФактура") И ДокументСсылка.ПредъявленСчетФактура Тогда
		
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект= ДокументСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ДокументОбъект.ПредъявленСчетФактура= Ложь;
		
	КонецЕсли;
	
	Если ДокументОбъект <> Неопределено Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Не удалось провести документ!" + Символы.ПС + ДокументОбъект);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьНовыйСчетФактуру(ИсходныеДанные) Экспорт
	
	Результат = Новый Структура("ПрошлоУспешно, СчетФактураПолученный, ОписаниеОшибки", Истина, Неопределено, "");
	
	СчетФактураПолученный 			= Документы.СчетФактураПолученный.СоздатьДокумент();
	МассивСсылокДокументовОснований = ИсходныеДанные.МассивСсылокДокументовОснований;
	
	Если МассивСсылокДокументовОснований.Количество()>1 Тогда		
		ЗаполнитьСчетФактуруПолученнуюНаОснованииМассиваСсылокРНК(СчетФактураПолученный, МассивСсылокДокументовОснований);
	ИначеЕсли МассивСсылокДокументовОснований.Количество() = 1 Тогда  
		
		ДокументОснование = МассивСсылокДокументовОснований[0];
		СчетФактураПолученный.Заполнить(ДокументОснование);
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Попытка
				ПараметрыСФ= Вычислить("УчетНДСПереопределяемый.ПолучитьПараметрыСчетаФактуры(СчетФактураПолученный)");
			Исключение
				ПараметрыСФ= Вычислить("УчетНДСПереопределяемый.ПараметрыСчетаФактуры(СчетФактураПолученный)");
			КонецПопытки;
			
			Если НЕ ПараметрыСФ=Неопределено Тогда
				СчетФактураПолученный.СуммаДокумента = ПараметрыСФ.СуммаДокумента;
				Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("СуммаНДСДокумента")=Неопределено Тогда
					СчетФактураПолученный.СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыСчетФактурыПолученной(СчетФактураПолученный, ИсходныеДанные);
	
	Попытка
		СчетФактураПолученный.Записать(РежимЗаписиДокумента.Проведение);
		Результат.Вставить("СчетФактураПолученный", СчетФактураПолученный.Ссылка);
		Возврат Результат; 
	Исключение
		Результат.Вставить("ПрошлоУспешно", Ложь);
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСчетФактуруПолученнуюНаОснованииМассиваСсылокРНК(СчетФактураПолученный, МассивСсылокРНК)
	
	Инд = 1;
	Для каждого Эл Из МассивСсылокРНК Цикл
		Если Инд = 1 Тогда
			СчетФактураПолученный.Заполнить(МассивСсылокРНК[0]);
		Иначе
			СтрОсн = СчетФактураПолученный.ДокументыОснования.Добавить();
			СтрОсн.ДокументОснование = Эл;
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСчетФактурыПолученной(СчетФактураПолученный, ИсходныеДанные)
	
	Если ИсходныеДанные.Направление = "Входящий" Тогда
		Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("НомерВходящегоДокумента")=Неопределено Тогда
			Если ИсходныеДанные.Type = "Invoice" Тогда
				СчетФактураПолученный.НомерВходящегоДокумента 	= ИсходныеДанные.DocumentNumber;
				СчетФактураПолученный.ДатаВходящегоДокумента 	= ИсходныеДанные.DocumentDate;	
			ИначеЕсли ИсходныеДанные.Type = "InvoiceRevision" Тогда
				СчетФактураПолученный.Исправление 		= Истина;
				СчетФактураПолученный.НомерИсправления 	= ИсходныеДанные.DocumentNumber;
				СчетФактураПолученный.ДатаИсправления 	= ИсходныеДанные.DocumentDate;
				
				СчетФактураПолученный.НомерВходящегоДокумента = ИсходныеДанные.OriginalDocumentNumber;
				СчетФактураПолученный.ДатаВходящегоДокумента  = ИсходныеДанные.OriginalDocumentDate;
			КонецЕсли;
		ИначеЕсли НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("ВхДокНомер")=Неопределено Тогда
			СчетФактураПолученный.ВхДокНомер 	= ИсходныеДанные.DocumentNumber;
			СчетФактураПолученный.ВхДокДата 	= ИсходныеДанные.DocumentDate;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("Контрагент")=Неопределено Тогда
		СчетФактураПолученный.Контрагент 	= ИсходныеДанные.ВероятныйКонтрагент;
	КонецЕсли;
	Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("Организация")=Неопределено Тогда
		СчетФактураПолученный.Организация 	= ИсходныеДанные.ВероятнаяОрганизация;
	КонецЕсли;
	
	Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("КодВидаОперации")=Неопределено Тогда 
		СчетФактураПолученный.КодВидаОперации = "01";
	КонецЕсли;
	
	Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("КодСпособаПолучения")=Неопределено Тогда 
		СчетФактураПолученный.КодСпособаПолучения = 2;
	КонецЕсли;
	
	Если ИсходныеДанные.Направление = "Исходящий" Тогда 
		Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("Выставлен")=Неопределено Тогда 
			СчетФактураПолученный.Выставлен = Истина;
		КонецЕсли;
		Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("КодСпособаВыставления")=Неопределено Тогда 
			СчетФактураПолученный.КодСпособаВыставления = 2;
		КонецЕсли;
		Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("ДатаВыставления")=Неопределено Тогда 
			СчетФактураПолученный.ДатаВыставления = ИсходныеДанные.ConfirmationDate;
		КонецЕсли;
	КонецЕсли;	 
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
		
		ДатаПоставки = ?(СчетФактураПолученный.ДокументыОснования.Количество()>0,  СчетФактураПолученный.ДокументыОснования[0].ДокументОснование.Дата, Неопределено);
		ДатаВходящегоДокумента = СчетФактураПолученный.ДатаВходящегоДокумента;
		
		ПериодЗакрытияМесяца = МетодСервера(,"ПолучитьКоличествоДнейОтсрочки", СчетФактураПолученный.Организация);
		
		СчетФактураПолученный.Дата = ПолучитьДатуУчетаСФ(ДатаПоставки, ИсходныеДанные.ДатаУчета, ПериодЗакрытияМесяца);
		
	Иначе
		
		СчетФактураПолученный.Дата = ТекущаяДата();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуУчетаСФ(ДатаПоставки, ДатаУчета, ПериодЗакрытияМесяца)
	
	Если ЗначениеЗаполнено(ДатаПоставки) Тогда
		
		ДатаОкончанияМесяца		= КонецМесяца(ДатаПоставки) + ПериодЗакрытияМесяца*24*3600;
		ДатаОкончанияКвартала	= КонецКвартала(ДатаПоставки) + ПериодЗакрытияМесяца*24*3600;
		
		Если ДатаУчета <= ДатаОкончанияМесяца Тогда
			Возврат ДатаПоставки;
		ИначеЕсли ДатаУчета <= ДатаОкончанияКвартала Тогда
			Возврат КонецКвартала(ДатаПоставки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаУчета)=Истина Тогда
		Возврат ДатаУчета;
	Иначе
		Возврат ТекущаяДата();
	КонецЕсли;
	
КонецФункции


