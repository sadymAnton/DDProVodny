
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

&НаКлиенте
Перем ИНН_СертифкатаАвторизации;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПлатформаПриОткрытии(Отказ);
	
	ИНН_ИзДанныхСертификатаАвторизации = МетодКлиента("Модуль_Клиент", "ДанныеСертифкатаАвторизации", Организация).INN;
	ИНН_СертифкатаАвторизации = МетодКлиента("Модуль_Клиент", "УдалитьЛидирующиеНули", ИНН_ИзДанныхСертификатаАвторизации);	
	
	ЗаполнитьСписокиВыбора_ОбластьПолномочий();
	ЗаполнитьСписокиВыбора_СтатусРаботника();
	
	ЗаполнитьНастройкиПодписи();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)

	Отказ = Ложь;

	СохранитьНастройкиПодписи(Отказ);
	
	Если НЕ Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)

	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	Организация = Параметры.Организация;
	Исходящие   = Параметры.Исходящие;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокиВыбора_ОбластьПолномочий()
	
	Элементы.ОбластьПолномочий.СписокВыбора.Очистить();
	
	Если Исходящие Тогда
		
		Элементы.ОбластьПолномочий.СписокВыбора.Добавить("PersonMadeOperation"							 , "Лицо, совершившее сделку"															  );
		Элементы.ОбластьПолномочий.СписокВыбора.Добавить("PersonDocumentedOperation"					 , "Лицо, ответственное за оформление сделки"											  );
		Элементы.ОбластьПолномочий.СписокВыбора.Добавить("MadeAndSignOperation"						 	 , "Лицо, совершившее сделку и ответственное оформление"								  );
		Элементы.ОбластьПолномочий.СписокВыбора.Добавить("MadeOperationAndSignedInvoice"				 , "Лицо, совершившее сделку и ответственное за подписание счетов-фактур"				  );
		Элементы.ОбластьПолномочий.СписокВыбора.Добавить("MadeAndResponsibleForOperationAndSignedInvoice", "Лицо, совершившее сделку и ответственное за оформление и за подписание счетов-фактур");
		Элементы.ОбластьПолномочий.СписокВыбора.Добавить("ResponsibleForOperationAndSignerForInvoice"	 , "Лицо, ответственное за оформление сделки и за подписание счетов-фактур"			  );
		Элементы.ОбластьПолномочий.СписокВыбора.Добавить("InvoiceSigner"								 , "Лицо, ответственное за подписание счетов-фактур");
		
	Иначе
		
		Элементы.ОбластьПолномочий.СписокВыбора.Добавить("PersonMadeOperation"							 , "Лицо, совершившее сделку"							 );
		Элементы.ОбластьПолномочий.СписокВыбора.Добавить("PersonDocumentedOperation"					 , "Лицо, ответственное за оформление сделки"			 );
		Элементы.ОбластьПолномочий.СписокВыбора.Добавить("MadeAndSignOperation"						     , "Лицо, совершившее сделку и ответственное оформление");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокиВыбора_СтатусРаботника()
	
	Элементы.СтатусРаботника.СписокВыбора.Очистить();
	
	Если Исходящие Тогда
		
		Элементы.СтатусРаботника.СписокВыбора.Добавить("SellerEmployee"			   , "Работник организации продавца"						 );
		Элементы.СтатусРаботника.СписокВыбора.Добавить("InformationCreatorEmployee", "Работник организации - составителя информации продавца");
		
	Иначе
		
		Элементы.СтатусРаботника.СписокВыбора.Добавить("SellerEmployee"			   , "Работник организации покупателя"						   );
		Элементы.СтатусРаботника.СписокВыбора.Добавить("InformationCreatorEmployee", "Работник организации - составителя информации покупателя");
		
	КонецЕсли;
	
	Элементы.СтатусРаботника.СписокВыбора.Добавить("OtherOrganizationEmployee"	   , "Работник иной уполномоченной организации");
	
	Если СтрДлина(ИНН_СертифкатаАвторизации) = 12 Тогда
		Элементы.СтатусРаботника.СписокВыбора.Добавить("AuthorizedPerson", "Уполномоченное физическое лицо (в том числе индивидуальный предприниматель)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройкиПодписи()
	
	ExtendedSignerDetailsToPost = МетодКлиента("Модуль_Клиент", "ПрочитатьДанныеПодписанта", Организация, Исходящие, ДляКорректировки);
	
	Должность= 			ExtendedSignerDetailsToPost.JobTitle;
	ОбластьПолномочий= 	ExtendedSignerDetailsToPost.Powers;
	СтатусРаботника= 	ExtendedSignerDetailsToPost.Status;
	ИныеСведения= 		ExtendedSignerDetailsToPost.SignerInfo;
	
	ОснованияПолномочийОрганизации= ExtendedSignerDetailsToPost.OrganizationPowersBase;
	ОснованияПолномочийСотрудника= 	ExtendedSignerDetailsToPost.PowersBase;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПодписи(Отказ)
	
	ExtendedSignerDetailsToPost = МетодКлиента("Модуль_Клиент", "Новый_ExtendedSignerDetailsToPost");
	
	ExtendedSignerDetailsToPost.JobTitle= 	Должность;
	ExtendedSignerDetailsToPost.Powers=	  	ОбластьПолномочий;
	ExtendedSignerDetailsToPost.Status=		СтатусРаботника;
	ExtendedSignerDetailsToPost.SignerInfo= ИныеСведения;
	
	ExtendedSignerDetailsToPost.OrganizationPowersBase= ОснованияПолномочийОрганизации;
	ExtendedSignerDetailsToPost.PowersBase= 			ОснованияПолномочийСотрудника;
	
	ExtendedSignerDetailsToPost.SignerType= ?(СтрДлина(ИНН_СертифкатаАвторизации) = 12, "IndividualEntity", "LegalEntity");
	
	Если ExtendedSignerDetailsToPost.SignerType = "IndividualEntity" Тогда
		ExtendedSignerDetailsToPost.RegistrationCertificate = МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьДатуНомерСвидетельстваОГосРегистрацииИП", Организация);
	КонецЕсли;
	
	МетодКлиента("Модуль_Клиент", "ЗаписатьДанныеПодписанта", Организация, ExtendedSignerDetailsToPost, Исходящие);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	УправлениеФормой_ОснованияПолномочийОрганизации();
	УправлениеФормой_КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой_ОснованияПолномочийОрганизации()
	
	Элементы.ОснованияПолномочийОрганизации.Доступность= 				СтатусРаботника = "OtherOrganizationEmployee";
	Элементы.ОснованияПолномочийОрганизации.АвтоОтметкаНезаполненного=  Элементы.ОснованияПолномочийОрганизации.Доступность;
	Элементы.ОснованияПолномочийОрганизации.ОтметкаНезаполненного= 	    Элементы.ОснованияПолномочийОрганизации.АвтоОтметкаНезаполненного И НЕ ЗначениеЗаполнено(ОснованияПолномочийОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой_КнопкаСохранить_УстановитьДоступность()
	
	Элементы.Сохранить.Доступность=
	
	  ЗначениеЗаполнено(Организация) 
	И ЗначениеЗаполнено(ОбластьПолномочий)
	И ЗначениеЗаполнено(СтатусРаботника)
	И ЗначениеЗаполнено(Должность)
	И (СтатусРаботника <> "OtherOrganizationEmployee" ИЛИ ЗначениеЗаполнено(ОснованияПолномочийОрганизации))
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьПолномочийПриИзменении(Элемент)
	
	УправлениеФормой_КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	УправлениеФормой_КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусРаботникаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры


