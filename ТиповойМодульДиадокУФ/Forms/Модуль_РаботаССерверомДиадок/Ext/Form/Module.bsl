&НаКлиенте
Перем ТекущийПользовательДиадок;

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт, Манифест Экспорт;

&НаКлиенте
Перем НомерИтерацииВызоваМодуля;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура Инициализировать(ИмяМодуля) Экспорт
	
	Если НомерИтерацииВызоваМодуля = Неопределено Тогда
		НомерИтерацииВызоваМодуля= 0;
	КонецЕсли;
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля + 1;
	
	Если Манифест = Неопределено Тогда
		Платформа.ЗаполнитьМанифест(ЭтаФорма, ИмяМодуля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПеременные() Экспорт
	
	// Разрывается циклическая ссылка, для того чтобы исключить утечку памяти.
	// Модуль может быть вызван повторно во вложенных методах,
	// поэтому очищаем переменные, ТОЛЬКО если это начальная итерация вызова модуля.
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля - 1;
	
	Если НомерИтерацииВызоваМодуля = 0 Тогда
		Платформа= 					  Неопределено;
		Объект.ПараметрыКлиентСервер= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МАНИФЕСТ

// Все функции и процедуры тела модуля должны быть экспортными и добавлены в соответствующую структуру!

&НаКлиенте
Функция ФункцииМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, <Имя функции>, <Параметры строкой>, <Вариант кэширования>, <Переопределение>);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НеИспользовать", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяВыполнения", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяСеанса", Истина);
	//...
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьDiadocConnection", "ДиадокПоследнийСертификатПользователя, ДиадокПоследнееПредставлениеПользователя", "НеИспользовать", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьДоступКОрганизации", "DiadocConnection, Организация", "НеИспользовать", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьФИОТекущегоПользователяДиадок", "Organization", "НеИспользовать", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьФИОПодписанта", "Organization", "НеИспользовать", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьТекущегоПользователяДиадок", "Organization", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПодписатьИОтправить_ПодписаниеЗапрошенного", "СтруктураSigner, Document", "НеИспользовать", Ложь);
	
	Возврат СтруктураМетодов;
	
КонецФункции

&НаКлиенте
Функция ПроцедурыМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, <Имя процедуры>, <Параметры строкой>, <Переопределение>);
	//Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПримерПроцедуры", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", Истина);
	//...
	
	Возврат СтруктураМетодов;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПолучитьDiadocConnection(ДиадокПоследнийСертификатПользователя, ДиадокПоследнееПредставлениеПользователя) Экспорт
	
	РезультатАвторизации = Новый Структура("ПредставлениеПользователя, DiadocConnection", ДиадокПоследнееПредставлениеПользователя);
	
	ТекущийПользовательДиадок= Неопределено;
	
	Попытка
		ConnectionByCertificate = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPI.CreateConnectionByCertificate(ДиадокПоследнийСертификатПользователя);
		РезультатАвторизации.DiadocConnection= ConnectionByCertificate;
	Исключение КонецПопытки;
	
	Возврат РезультатАвторизации;

КонецФункции

&НаКлиенте
Функция ПроверитьДоступКОрганизации(DiadocConnection, Организация) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Истина;
	КонецЕсли;
	
	BoxID  = МетодСервера(,"Организация_2_BoxID", Организация);
	
	Если BoxID = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		DiadocConnection.GetOrganizationById(BoxID).GetDocumentById("127CB1F7-BD30-444B-99BA-DAB072DA70BF127CB1F7-BD30-444B-99BA-DAB072DA70BF");
		Возврат Истина;
	Исключение
		строкаИсключения = ОписаниеОшибки();
		Если Найти(нрег(строкаИсключения), "code:403") <> 0 Тогда
			Возврат Ложь;
		ИначеЕсли Найти(нрег(строкаИсключения), "code:404") <> 0 Тогда
			Возврат Истина;
		Иначе
			ВызватьИсключение строкаИсключения;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФИОТекущегоПользователяДиадок(Organization) Экспорт
		
	Если ТекущийПользовательДиадок = Неопределено Тогда
		ТекущийПользовательДиадок = ПолучитьТекущегоПользователяДиадок(Organization);
	КонецЕсли;
	
	Если НЕ ТекущийПользовательДиадок = Неопределено Тогда
		
		ПредставлениеФИО= ТекущийПользовательДиадок.LastName+" "+ТекущийПользовательДиадок.FirstName+" "+ТекущийПользовательДиадок.MiddleName;
		
	Иначе
		ПредставлениеФИО = "Иванов Иван Иванович";
	КонецЕсли;
		
	Возврат ПредставлениеФИО;
		
КонецФункции

&НаКлиенте
Функция ПолучитьФИОПодписанта(Organization) Экспорт
	
	Если НЕ Organization.Certificate = Неопределено Тогда
		ПредставлениеФИО = Organization.Certificate.Name;
	Иначе
		ПредставлениеФИО = ПолучитьФИОТекущегоПользователяДиадок(Organization);
	КонецЕсли;
	
	Возврат ПредставлениеФИО;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекущегоПользователяДиадок(Organization) Экспорт
	
	Возврат Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetMyUser();
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////
////			 ПОДПИСАТЬ И ОТПРАВИТЬ ДОКУМЕНТ, ПО КОТОРОМУ ЗАПРОШЕНА ПОДПИСЬ

&НаКлиенте
Функция ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, Document) Экспорт
	
	ВозвращаемаяСтруктура= Новый Структура("ВыполненоУспешно, ТекстОшибки", Истина, "");
	
	OutDocumentSignTask= Document.CreateOutDocumentSignTask();
	
	Если Document.Type = "UniversalTransferDocument" Тогда
		
		ExtendedSigner= OutDocumentSignTask.AddExtendedSigner();
		
		Если Document.Organization.AuthenticateType = "Certificate" Тогда
			
			ExtendedSigner.BoxId= Document.Organization.Id;
			ExtendedSigner.CertificateThumbprint= Document.Organization.Certificate.thumbprint;
			
		Иначе
			
			UserPermissions= Document.Organization.GetUserPermissions();
			
			Если НЕ UserPermissions.CanSignDocuments Тогда
				
				ExtendedSigner.SignerDetails.Surname=	 "-";
				ExtendedSigner.SignerDetails.FirstName=	 "-";
				
				ExtendedSigner.SignerDetails.SignerType= "IndividualEntity";
				ExtendedSigner.SignerDetails.Status= 	 "InformationCreatorEmployee";
				ExtendedSigner.SignerDetails.Powers= 	 "PersonDocumentedOperation";
				ExtendedSigner.SignerDetails.Inn= 	 	 "999999999950";
				
			Иначе
				
				User= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьТекущегоПользователяДиадок", Document.Organization);
				
				ExtendedSigner.SignerDetails.Surname=	 User.LastName;
				ExtendedSigner.SignerDetails.FirstName=	 User.FirstName;
				ExtendedSigner.SignerDetails.Patronymic= User.MiddleName ;
				
				ExtendedSigner.SignerDetails.SignerType= "LegalEntity";
				ExtendedSigner.SignerDetails.Status= 	 "SellerEmployee";
				ExtendedSigner.SignerDetails.JobTitle=   UserPermissions.JobTitle;
				ExtendedSigner.SignerDetails.Powers=   	 "MadeAndResponsibleForOperationAndSignedInvoice";
				ExtendedSigner.SignerDetails.Inn= 		 Document.Organization.Inn;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		OutDocumentSignTask.Signer.Surname= 	СтруктураSigner.Фамилия;
		OutDocumentSignTask.Signer.FirstName= 	СтруктураSigner.Имя;
		OutDocumentSignTask.Signer.Patronymic= 	СтруктураSigner.Отчество;
		OutDocumentSignTask.Signer.JobTitle= 	СтруктураSigner.ДолжностьПодписанта;
		OutDocumentSignTask.Signer.Inn= 		Document.Organization.Inn;
		
	КонецЕсли;
	
	Попытка
		OutDocumentSignTask.Send();
	Исключение
		
		ВозвращаемаяСтруктура.ВыполненоУспешно= Ложь;
		ВозвращаемаяСтруктура.ТекстОшибки=		ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции
