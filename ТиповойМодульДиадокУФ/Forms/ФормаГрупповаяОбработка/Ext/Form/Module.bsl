&НаКлиенте
Перем СтруктураДействийПоДокументу;
&НаКлиенте
Перем СтруктураРаботаСНомеромАкта;
&НаКлиенте
Перем МассивЗадачНаОтказ;
&НаКлиенте
Перем МассивЗаданийОтправкаТитулаПокупателя;
&НаКлиенте
Перем МаксимальноеКоличествоЗаданий;

// сохранение документов
&НаКлиенте
Перем МассивЗадачСохраненияНаДиск;
&НаКлиенте
Перем КоличествоЗаданий;
&НаКлиенте
Перем Каталог;
&НаКлиенте
Перем СохранятьПротокол;

&НаКлиенте
Перем СтатистикаСобытий;
&НаКлиенте
Перем ДатаСтартаПроцесса;
&НаКлиенте
Перем ДатаСтартаОбработкиДокумента;
&НаКлиенте
Перем ДатаСтартаОперации;
&НаКлиенте
Перем ТекущаяОперация;
&НаКлиенте
Перем КоличествоОбработанныхДокументов;
&НаКлиенте
Перем ОбрабатываемыйДокументСсылка;

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//{ УПРАВЛЕНИЕ ФОРМОЙ
	
	&НаКлиенте
	Процедура УправлениеФормой()
		
		Заголовок = "Групповая обработка документов";
		
		Элементы.ПолеВыбораДействия.СписокВыбора.Очистить();
		Элементы.ПолеВыбораДействия.СписокВыбора.Добавить("Подписать", "Подписать");
		Элементы.ПолеВыбораДействия.СписокВыбора.Добавить("Сопоставить", "Сопоставить");
		Элементы.ПолеВыбораДействия.СписокВыбора.Добавить("СохранитьНаДиск", "Сохранить на диск");
		Если НЕ Платформа.Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			Элементы.ПолеВыбораДействия.СписокВыбора.Добавить("КомплекснаяОбработкаТорговыеСети", "Комплексная обработка для торговых сетей");	
		КонецЕсли;
		
		Если ПолеВыбораДействия = Неопределено Тогда
			ПолеВыбораДействия = "Подписать";
		Иначе
			ПолеВыбораДействия = ПолеВыбораДействия;
			Элементы.ПолеВыбораДействия.Доступность = Ложь;
		КонецЕсли;
		//ПолеВыбораДействия= ?(ПолеВыбораДействия = Неопределено, "Подписать", ПолеВыбораДействия);

		ЗаполнитьПолеСценариев();
		ДоступностьПолеСценариев();
		
		ЗаполнитьСтруктуруДействийПоДокументу();
		
		Если ПолеВыбораДействия = "Подписать" Тогда
			НастроитьФормуПодписать();
			ПроверитьНеобходимостьПодписи();
		ИначеЕсли ПолеВыбораДействия = "Сопоставить" Тогда 
			НастроитьФормуСопоставить();	
		ИначеЕсли ПолеВыбораДействия = "КомплекснаяОбработкаТорговыеСети" Тогда
			НастроитьФормуПодКомплекснуюОбработкуДляТорговыхСетей(Истина);	
		ИначеЕсли ПолеВыбораДействия = "СохранитьНаДиск" Тогда
			НастроитьФормуСохранитьНаДиск();
		КонецЕсли;
		
		ЭтаФорма.Элементы.КонтрольнаяСуммаДокументовДД.Заголовок= "документы " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура ЗаполнитьПолеСценариев()
		
		Элементы.ПолеВыбораСценарий.СписокВыбора.Очистить();
		
		Если ПолеВыбораДействия = "КомплекснаяОбработкаТорговыеСети" Тогда 
			Если Режим = "ОбработкаДокументов" Тогда
				Элементы.ПолеВыбораСценарий.СписокВыбора.Добавить("ОбработатьВсеАвтоматически",		"Выполнить все действия автоматически");
				Элементы.ПолеВыбораСценарий.СписокВыбора.Добавить("ОбработатьКорректныеДокументы",	"Обработать корректные документы");
				Элементы.ПолеВыбораСценарий.СписокВыбора.Добавить("ОбработатьДокументыСОшибками",	"Обработать документы с ошибками");
			КонецЕсли;
			
			ПолеВыбораСценарий = ?(ПолеВыбораСценарий = Неопределено, "ОбработатьВсеАвтоматически", ПолеВыбораСценарий);
		КонецЕсли;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура ПолеВыбораДействияПриИзменении(Элемент)
		
		Если ПолеВыбораДействия = "Сопоставить" Тогда
			НастроитьФормуСопоставить();
		ИначеЕсли ПолеВыбораДействия = "Подписать" Тогда
			НастроитьФормуПодписать();
			ПроверитьНеобходимостьПодписи();
		ИначеЕсли ПолеВыбораДействия = "КомплекснаяОбработкаТорговыеСети" Тогда
			НастроитьФормуПодКомплекснуюОбработкуДляТорговыхСетей(Истина);
		ИначеЕсли ПолеВыбораДействия = "СохранитьНаДиск" Тогда
			НастроитьФормуСохранитьНаДиск();
		КонецЕсли;
			
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьФормуСохранитьНаДиск()
		
		Режим = "Сохранить";
		
		ДоступностьПолеСценариев();
		ЗаполнитьПолеСценариев();
		
		ЗаполнитьСтруктуруДействийПоДокументу();
		
		УстановитьКартинкуИЗаголовокКнопкиПометки(Ложь);
		ОбработатьПометки();
		
		Элементы.ТаблицаДокументовОбработать.Заголовок		= "Скачать выделенные";
		
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСопоставляемыйДокумент1С.Видимость=		Ложь;
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСопоставляемыйДокумент1С.Доступность=	Ложь;
			
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовГруппа2.Видимость=						Истина;
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовГруппа2.Доступность=					Истина;
			
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Видимость=				Ложь;
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Доступность=			Ложь;
			
		Элементы.ГруппаКС.Видимость=	Ложь;
		Элементы.ГруппаКС.Доступность=	Ложь;
		
		Для Каждого стр Из ТаблицаДокументов Цикл
			стр.Вкл = Истина;
			стр.СостояниеОбработки = "";			
			стр.КомментарийКДействию = "";
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьФормуСопоставить()
				
		Режим = "АнализДокументов";
					
		ДоступностьПолеСценариев();
		ЗаполнитьПолеСценариев();
		
		ЗаполнитьСтруктуруДействийПоДокументу();
		
		УстановитьКартинкуИЗаголовокКнопкиПометки(Ложь);
		ОбработатьПометки();
				
		Элементы.ТаблицаДокументовОбработать.Заголовок 		= "Анализ документов";
		Элементы.ТаблицаДокументовОбработать.Отображение	= ОтображениеКнопки.Текст;
				
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСтатусСогласования.Видимость=			Ложь;
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСтатусСогласования.Доступность=			Ложь;
		
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСопоставляемыйДокумент1С.Видимость=		Истина;
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСопоставляемыйДокумент1С.Доступность=	Истина;
		
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовГруппа2.Видимость=						Истина;
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовГруппа2.Доступность=					Истина;
		
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Видимость=				Истина;
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Доступность=			Истина;
		
		
		
		Элементы.ГруппаКС.Видимость=	Истина;
		Элементы.ГруппаКС.Доступность=	Истина;
		
		Для каждого СтрокаТаблицы из ТаблицаДокументов Цикл
			СтрокаТаблицы.СостояниеОбработки = "";
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьФормуПодписать()
		
		Режим = "АнализДокументов";
					
		ДоступностьПолеСценариев();
		ЗаполнитьПолеСценариев();
		
		ЗаполнитьСтруктуруДействийПоДокументу();
		
		УстановитьКартинкуИЗаголовокКнопкиПометки(Ложь);
		ОбработатьПометки();	
		
		Элементы.ТаблицаДокументовОбработать.Заголовок		= "Подписать выделенные";
					
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСопоставляемыйДокумент1С.Видимость=		Ложь;
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСопоставляемыйДокумент1С.Доступность=	Ложь;
			
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовГруппа2.Видимость=						Истина;
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовГруппа2.Доступность=					Истина;
			
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Видимость=				Ложь;
		Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Доступность=			Ложь;
			
		Элементы.ГруппаКС.Видимость=	Ложь;
		Элементы.ГруппаКС.Доступность=	Ложь;
		
	КонецПроцедуры
	
	&НаКлиенте 
	Процедура НастроитьФормуПодКомплекснуюОбработкуДляТорговыхСетей(ОткрытиеФормы = Ложь)
		
		Если ОткрытиеФормы Тогда
			Режим = "АнализДокументов";
		КонецЕсли;
		
		Если Режим = "АнализДокументов" Тогда
			Элементы.ТаблицаДокументовОбработать.Заголовок = "Выполнить анализ";
			ДоступностьПолеСценариев();
					
			ЗаполнитьСтруктуруДействийПоДокументу();
		
			УстановитьКартинкуИЗаголовокКнопкиПометки(Ложь);
			ОбработатьПометки();
		
			Элементы.ТаблицаДокументовОбработать.Заголовок	= "Анализ документов";
			
			Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСопоставляемыйДокумент1С.Видимость		= Истина;
			Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСопоставляемыйДокумент1С.Доступность	= Истина;
			
			Для каждого СтрокаТаблицы из ТаблицаДокументов Цикл
				СтрокаТаблицы.СостояниеОбработки = "";
			КонецЦикла;
			
		ИначеЕсли Режим = "ОбработкаДокументов" Тогда
			
			Элементы.ТаблицаДокументовОбработать.Заголовок = "Выполнить обработку";
			
			ДоступностьПолеСценариев();
			ЗаполнитьПолеСценариев();
	    КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ДоступностьПолеСценариев()
		
		Если НЕ ПолеВыбораДействия = "КомплекснаяОбработкаТорговыеСети" Тогда
				
			Элементы.ПолеВыбораСценарий.СписокВыбора.Очистить();
			Элементы.ПолеВыбораСценарий.Доступность = Ложь;
		Иначе
			Если ПолеВыбораДействия = "КомплекснаяОбработкаТорговыеСети" 
				И Режим = "АнализДокументов" Тогда 
				
				Элементы.ПолеВыбораСценарий.СписокВыбора.Очистить();
				Элементы.ПолеВыбораСценарий.Доступность = Ложь;
			Иначе
				Элементы.ПолеВыбораСценарий.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСтруктуруДействийПоДокументу()
		
		СтруктураДействийПоДокументу = Новый Структура;
		
		Если Режим = "Сохранить" Тогда
			
			СтруктураДействийПоДокументу.Вставить("Сохранение", "Сохранение...");
			СтруктураДействийПоДокументу.Вставить("УспешноСохранен", "Успешно сохранен");
			СтруктураДействийПоДокументу.Вставить("ОшибкаСохранения", "Ошибка сохранения");
			
		ИначеЕсли ПолеВыбораДействия = "Сопоставить" Тогда
			
			СтруктураДействийПоДокументу.Вставить("ГотовКСопоставлению", 				"Готов к сопоставлению");
			СтруктураДействийПоДокументу.Вставить("ДокументВ1СНеНайден", 				"Документ в 1С не найден");
			СтруктураДействийПоДокументу.Вставить("НайденоНесколькоДокументовВ1С", 		"Найдено подходящих документов");
			СтруктураДействийПоДокументу.Вставить("НеСопоставленоПоступление", 			"Не сопоставлено поступление");
			СтруктураДействийПоДокументу.Вставить("БылСопоставленРанее",			 	"Сопоставлен ранее");
			СтруктураДействийПоДокументу.Вставить("Обработано",			 				"Обработано");
			
		ИначеЕсли ПолеВыбораДействия = "Подписать" Тогда
			
			СтруктураДействийПоДокументу.Вставить("ГотовКПодписанию",	 				"Готов к подписи");
			СтруктураДействийПоДокументу.Вставить("ПодписанРанее", 						"Подписан ранее");
			СтруктураДействийПоДокументу.Вставить("УспешноПодписан",	 				"Подписан");
			СтруктураДействийПоДокументу.Вставить("НеТребуетПодписания",				"Не требует подписи");
			СтруктураДействийПоДокументу.Вставить("ОшибкаПриПодписании",				"Ошибка");
			
		ИначеЕсли ПолеВыбораДействия = "КомплекснаяОбработкаТорговыеСети" Тогда
				
			СтруктураДействийПоДокументу.Вставить("СопоставитьИПодписать", 	"Сопоставить и подписать");
			СтруктураДействийПоДокументу.Вставить("СопоставитьСФ",		 	"Сопоставить");
			СтруктураДействийПоДокументу.Вставить("СоздатьОтсутствующиеСФ", "Создать СФ и сопоставить");
			СтруктураДействийПоДокументу.Вставить("ОтказатьВПодписи", 		"Отказать в подписи");
			СтруктураДействийПоДокументу.Вставить("ЗапроситьУточнение",		"Запросить уточнение");
			СтруктураДействийПоДокументу.Вставить("Пропустить",		 		"Не обрабатывать");
			СтруктураДействийПоДокументу.Вставить("ОшибкаОбработки", 		"Ошибка");
			
			СтруктураДействийПоДокументу.Вставить("Обработано", 			"Обработано");
					
		КонецЕсли;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		ПлатформаПриОткрытии(Отказ);
		
		ЗаполнитьТаблицу();
		УправлениеФормой();
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОткрытьДокумент1С(Команда)
		
		Перем ДокументСсылка;
		
		ТекущиеДанные= Элементы.ТаблицаДокументов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ПервичныйДокумент) Тогда
			ДокументСсылка = ТекущиеДанные.ПервичныйДокумент; 	
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СопоставляемыйДокумент1С) Тогда
			ДокументСсылка = ТекущиеДанные.СопоставляемыйДокумент1С;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			МетодКлиента(,"ОткрытьФормуОбъектаИБ", ДокументСсылка);
		КонецЕсли;
		
	КонецПроцедуры
	
	
	
	&НаКлиенте
	Процедура СнятьУстановитьПометки(Пометка)
		
		Для Каждого СтрокаСпискаДокументов Из ТаблицаДокументов Цикл
			Если Пометка Тогда
				Если ПолеВыбораДействия = "СохранитьНаДиск" Тогда
					СтрокаСпискаДокументов.Вкл = Пометка;
				ИначеЕсли ПолеВыбораДействия = "Сопоставить" Тогда
					СтрокаСпискаДокументов.Вкл = ?(НЕ ЗначениеЗаполнено(СтрокаСпискаДокументов.ПервичныйДокумент), Истина, Ложь);
				ИначеЕсли ПолеВыбораДействия = "Подписать" Тогда
					СтрокаСпискаДокументов.Вкл = ?(НЕ СтрокаСпискаДокументов.Подписан, Истина, Ложь);
				ИначеЕсли ПолеВыбораДействия = "КомплекснаяОбработкаТорговыеСети" Тогда
					СтрокаСпискаДокументов.Вкл = Пометка;
				КонецЕсли;
			Иначе
				СтрокаСпискаДокументов.Вкл=	Пометка;
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьКартинкуИЗаголовокКнопкиПометки(Пометка)
		
		Если Пометка Тогда
			Элементы.ТаблицаДокументовСнятьУстановитьПометки.Картинка 	= БиблиотекаКартинок.УстановитьФлажки;
			Элементы.ТаблицаДокументовСнятьУстановитьПометки.Заголовок 	= "Снять пометку со всех документов";
		Иначе
			Элементы.ТаблицаДокументовСнятьУстановитьПометки.Картинка 	= БиблиотекаКартинок.СнятьФлажки;
			Элементы.ТаблицаДокументовСнятьУстановитьПометки.Заголовок 	= "Пометить все документы";
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьПометки(СбросПометок = Ложь)
		
		Если Элементы.ТаблицаДокументовСнятьУстановитьПометки.Картинка = БиблиотекаКартинок.СнятьФлажки И НЕ СбросПометок Тогда
			Если НЕ ПолеВыбораДействия = "КомплекснаяОбработкаТорговыеСети" ИЛИ Режим = "АнализДокументов" Тогда
				УстановитьКартинкуИЗаголовокКнопкиПометки(Истина);
				СнятьУстановитьПометки(Истина);
			КонецЕсли;
		Иначе
			УстановитьКартинкуИЗаголовокКнопкиПометки(Ложь);
			СнятьУстановитьПометки(Ложь);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СнятьУстановитьПометкиКоманда(Команда)
		
		ОбработатьПометки();
		
		Если Режим = "Сопоставление" Тогда
			ПересчитатьКонтрольныеСуммы();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Обновить(Команда)
		
		ЗаполнитьТаблицу();
		УправлениеФормой();
				
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ ФОРМОЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

	&НаСервереБезКонтекста
	Функция ПолучитьОписаниеТипаЗначение(ЗначениеЭл)
		СтрЗаменТипов = Новый Структура("Справочник,Документ,Перечисление","СправочникСсылка","ДокументСсылка","ПеречислениеСсылка");
		
		ТипКолонки = ТипЗнч(ЗначениеЭл);
		МассивТ= Новый массив;
		МД = метаданные.найтипотипу(типзнч(ЗначениеЭл));
		Если МД = Неопределено Тогда
			ПолноеИмяТипа = Строка(ТипЗнч(ЗначениеЭл));
		Иначе
			ПолноеИмяТипа = МД.ПолноеИмя();
			Для Каждого стрхх из СтрЗаменТипов цикл
				Если Найти(ПолноеИмяТипа,стрхх.Ключ) <> 0 Тогда
					ПолноеИмяТипа = СтрЗаменить(ПолноеИмяТипа, стрхх.Ключ, стрхх.Значение);
					прервать;
				КонецЕсли;
			конеццикла;
		КонецЕсли;
		Если ПолноеИмяТипа = "Не определено" Тогда
			//ПолноеИмяТипа = "Строка"; //проверить - заглушка пока!!!
			ПолноеИмяТипа= Неопределено;
		КонецЕсли;
		
		Если найти( ПолноеИмяТипа, "ДокументСсылка")>0 Тогда
			возврат Документы.ТипВсеСсылки();
		иначе;	
			возврат  новый ОписаниеТипов(ПолноеИмяТипа)
		КонецЕсли;	
	КонецФункции	

	&НаСервереБезКонтекста
	Функция МассивСтруктур_2_ТаблицаЗначений(МассивСтруктур)
		СтрЗаменТипов = Новый Структура("Справочник,Документ,Перечисление","СправочникСсылка","ДокументСсылка","ПеречислениеСсылка");
		Результат = Новый ТаблицаЗначений;
		Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
			Возврат Результат;
		Иначе 
			Образец = МассивСтруктур[0];
			Для Каждого  Стр из Образец Цикл
				Результат.Колонки.Добавить(Стр.Ключ, ПолучитьОписаниеТипаЗначение(Стр.Значение) );
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Стр Из МассивСтруктур Цикл
			СтрТ = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
		КонецЦикла;
		Возврат Результат;
	КонецФункции
	
	&НаКлиентеНаСервереБезКонтекста
	Функция НайтиСтрокиВМассивеСтруктур(МассивСтруктур, ПараметрыОтбора) //вместо НайтиСтроки таблицы значений
		Результат = Новый Массив;
		Для Каждого Стр из МассивСтруктур Цикл
			БылоНесоответствие = Ложь;
			Для Каждого Стр1 из ПараметрыОтбора Цикл
				Если СокрЛП(ПараметрыОтбора[Стр1.Ключ]) <>  СокрЛП(Стр[Стр1.Ключ]) Тогда
					БылоНесоответствие = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если БылоНесоответствие = Ложь Тогда
				Результат.Добавить(Стр);
			КонецЕсли;
			
		КонецЦикла;
		Возврат Результат;
	КонецФункции

	&НаСервере
	Функция ПолучитьСвязаннуюОрганизацию(BoxID)
		
		Возврат МетодСервера(,"BoxID_2_Организация", BoxID);
		
	КонецФункции

	//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

&НаСервереБезКонтекста
Функция ПолучитьРеквизитСсылки(СсылкаНаОбъект, ИмяРеквизита) Экспорт
	
	ЗначениеРеквизита=	Неопределено;
	
	ОбъектИзСсылки=	СсылкаНаОбъект.ПолучитьОбъект();
	Если НЕ ОбъектИзСсылки.Метаданные().Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		ЗначениеРеквизита=	ОбъектИзСсылки[ИмяРеквизита];
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

&НаСервере
Функция НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК)
	
	Запрос=	Новый Запрос;
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		
		Если Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.Найти("ВсегоПоДокументу") <> Неопределено Тогда
			
			Запрос.Текст=	
			"ВЫБРАТЬ
			|	СчетФактура.Ссылка,
			|	ЕСТЬNULL(ВсегоПоДокументу.СуммаСНДС, 0) КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
			|				ИЛИ УжеСопоставленные.Значение = """"
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК УжеСопоставлен
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактура
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ДополнительныеСведения.Объект КАК Объект,
			|			ДополнительныеСведения.Свойство КАК Свойство,
			|			ДополнительныеСведения.Значение КАК Значение
			|		ИЗ
			|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ГДЕ
			|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
			|		ПО СчетФактура.Ссылка = УжеСопоставленные.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СУММА(СчетФактураПолученныйВсегоПоДокументу.СуммаСНДС) КАК СуммаСНДС,
			|			СчетФактураПолученныйВсегоПоДокументу.Ссылка КАК Ссылка
			|		ИЗ
			|			Документ.СчетФактураПолученный.ВсегоПоДокументу КАК СчетФактураПолученныйВсегоПоДокументу
			|		
			|		СГРУППИРОВАТЬ ПО
			|			СчетФактураПолученныйВсегоПоДокументу.Ссылка) КАК ВсегоПоДокументу
			|		ПО СчетФактура.Ссылка = ВсегоПоДокументу.Ссылка
			|ГДЕ
			|	СчетФактура.ДокументОснование В(&МассивСсылокРНК)";
			
		Иначе
			
			Запрос.Текст=	
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Ссылка,
			|	0 КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА ДС.Объект ЕСТЬ НЕ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК УжеСопоставлен
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДС
			|		ПО Т.Ссылка = ДС.Объект
			|			И (ДС.Свойство = &Свойство)
			|			И (ДС.Значение <> """")
			|ГДЕ
			|	Т.ДокументОснование В(&МассивСсылокРНК)";
			
		КонецЕсли;
		
	ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда	
		
		Запрос.Текст=	
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Ссылка,
			|	0 КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА ДС.Объект ЕСТЬ НЕ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК УжеСопоставлен
			|ИЗ
			|	Документ.СчетФактураПолученный КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДС
			|		ПО Т.Ссылка = ДС.Объект
			|			И (ДС.Свойство = &Свойство)
			|			И (ДС.Значение <> """")
			|ГДЕ
			|	Т.ДокументОснование В(&МассивСсылокРНК)";
	
	Иначе
		
		Запрос.Текст=	
		"ВЫБРАТЬ
		|	СчетФактура.Ссылка,
		|	ЕСТЬNULL(СчетФактура.Ссылка.СуммаДокумента, 0) КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
		|				ИЛИ УжеСопоставленные.Значение = """"
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УжеСопоставлен
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактура
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДополнительныеСведения.Объект КАК Объект,
		|			ДополнительныеСведения.Свойство КАК Свойство,
		|			ДополнительныеСведения.Значение КАК Значение
		|		ИЗ
		|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ГДЕ
		|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
		|		ПО СчетФактура.Ссылка = УжеСопоставленные.Объект
		|ГДЕ
		|	СчетФактура.ДокументОснование В (&МассивСсылокРНК)";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылокРНК", МассивСсылокРНК);
	Запрос.УстановитьПараметр("Свойство", ИдентификаторДокументаВДиадок);
	
	РезультатЗапроса=	Запрос.Выполнить();
	Выборка=			РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер(СписокСсылок, BoxID)
	
	Результат=	Новый Массив;
	
	Для Каждого InitialDocumentId Из СписокСсылок Цикл
		СсылкаРНК=	МетодСервера(,"DocumentID_2_Документ", InitialDocumentId.Значение, BoxID);
		Если НЕ СсылкаРНК = Неопределено Тогда
			Результат.Добавить(СсылкаРНК);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбработатьТаблицуДокументов(ТаблицаДокументов)
	
	ТаблицаПД=	МетодСервера(,"ПолучитьТаблицуДокументовПоИдДиадока", МассивСтруктур_2_ТаблицаЗначений(ТаблицаДокументов));
	
	Для Каждого СтрокаТаблицы из ТаблицаДокументов Цикл
		
		ОтборСтрок=	Новый Структура("DocumentId, BoxID", СтрокаТаблицы.DocumentId, СтрокаТаблицы.BoxID);
		
		МассивДоков=	НайтиСтрокиВМассивеСтруктур(ТаблицаПД, ОтборСтрок);
		Если МассивДоков.Количество()>0 Тогда 
			СтрокаТаблицы.Вставить("ПервичныйДокумент", МассивДоков[0].Ссылка);
		Иначе
			СтрокаТаблицы.Вставить("ПервичныйДокумент", Неопределено);
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаДокументов=	МассивСтруктур_2_ТаблицаЗначений(ТаблицаДокументов);
	
	Если НЕ ТаблицаДокументов.Колонки.Найти("ДатаУчета") = Неопределено Тогда
		ТаблицаДокументов.Сортировать("ДатаУчета Убыв");
	КонецЕсли;
	
	ТаблицаДокументов=	МетодСервера(,"ПреобразоватьТаблицуЗначенийВМассивСтруктур", ТаблицаДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицу()
	
	Состояние("Подготовка списка документов для " + ?(Режим = "Подписание", "подписания", "сопоставления"));
	
	ВыборкаДокументов= МетодКлиента("Модуль_Клиент","ВернутьВыборкуРНКИСчетовФактурДиадок",
	ТекущийПериод.ДатаНачала, 
	ТекущийПериод.ДатаОкончания, 
	Организация, 
	КонтрагентID, 
	ПараметрыВыборки);
	
	ТаблицаДокументов.Очистить();
	ОбработатьТаблицуДокументов(ВыборкаДокументов);
	
	ОбщееКоличествоДокументов=	ВыборкаДокументов.Количество();
	НомерДокумента=				0;
	
	Для каждого ВходящийДокумент Из ВыборкаДокументов Цикл
		
		ОбработкаПрерыванияПользователя();
		
		НомерДокумента=	НомерДокумента + 1;
		
		Состояние("Подготовка документов", НомерДокумента*100/?(ОбщееКоличествоДокументов = 0, 1, ОбщееКоличествоДокументов) , "Подготовлено документов " + НомерДокумента + " из " + ОбщееКоличествоДокументов);
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВходящийДокумент);
						
		Если ВходящийДокумент.DocumentType <> "NonformalizedProforma" И (ВходящийДокумент.СостояниеДокументооборота = "Требуется подпись" ИЛИ ВходящийДокумент.СостояниеДокументооборота = "Ошибка подписи")Тогда
							
			ТекстСогласовано = "";
				
			Resolutions = ВходящийДокумент.Resolutions;
				
			Для Индекс = 0 По Resolutions.Количество() - 1 Цикл
				Resolution = Resolutions.Получить(Индекс);
				
				Если Resolution.ResolutionType = "ResolutionRequest" Тогда
					ТекстСогласовано = "Согласование запросил";
				ИначеЕсли Resolution.ResolutionType = "ResolutionApprove" Тогда
					ТекстСогласовано = "Согласовано";
				ИначеЕсли Resolution.ResolutionType = "ResolutionDisapprove" Тогда
					ТекстСогласовано = "В согласовании отказано";
				ИначеЕсли Resolution.ResolutionType = "SignatureRequest" Тогда
					ТекстСогласовано = "Запросил подпись";
				ИначеЕсли Resolution.ResolutionType = "SignatureApprove" Тогда
					ТекстСогласовано = "Подписано";
				ИначеЕсли Resolution.ResolutionType = "SignatureDisapprove" Тогда
					ТекстСогласовано = "Отказано в подписи";
				КонецЕсли;
				
				Если НЕ Resolution.Author = Неопределено И ЗначениеЗаполнено(Resolution.Author) Тогда
					
					АвторРезолюции 	= Resolution.Author;
					ФамилияАвтора 	= МетодКлиента("ВыделитьСлово", АвторРезолюции);
					ИмяАвтора 		= МетодКлиента("ВыделитьСлово", АвторРезолюции);
					ОтчествоАвтора 	= МетодКлиента("ВыделитьСлово", АвторРезолюции);
					ПредставлениеАвтора = ФамилияАвтора + " " + ?(СтрДлина(ИмяАвтора)>0, Сред(ИмяАвтора,1,1)+?(СтрДлина(ОтчествоАвтора)>0, ". "+Сред(ОтчествоАвтора,1,1)+".", ""), "");
					
				КонецЕсли;
				НоваяСтрока.СтатусСогласования 	= ТекстСогласовано + " " + ПредставлениеАвтора + " (" + Формат(Resolution.CreationDate, "ДФ=dd.MM.yy")+");";
				НоваяСтрока.ResolutionType		= Resolution.ResolutionType;
				
			КонецЦикла;
			
		КонецЕсли;
			
		Если ВходящийДокумент.DocumentType = "XmlTorg12" 
			ИЛИ ВходящийДокумент.DocumentType = "XmlAcceptanceCertificate" Тогда
			
			Если ВходящийДокумент.Status = "InboundWithRecipientSignature" Тогда
				НоваяСтрока.Подписан = Истина;
			КонецЕсли;
		КонецЕсли;
						
		
		Если Найти(ВходящийДокумент.DocumentType, "Invoice") > 0
				ИЛИ ВходящийДокумент.DocumentType = "XmlTorg12" 
				ИЛИ ВходящийДокумент.DocumentType = "XmlAcceptanceCertificate" Тогда
			
			ЭДОбъект=	Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ВходящийДокумент.BoxID).GetDocumentById(ВходящийДокумент.DocumentID);
			Для Индекс = 0 По ЭДОбъект.InitialDocumentIds.Count - 1 Цикл
				НоваяСтрока.СписокСсылок.Добавить(ЭДОбъект.InitialDocumentIds.GetItem(Индекс));
			КонецЦикла;
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	ТаблицаДокументов.Сортировать("Покупатель Возр, ДатаУчета Возр");
	
	Если ТаблицаДокументов.Количество() = 0 Тогда
		СообщениеПользователю=	Новый СообщениеПользователю;
		Если Режим = "Сохранить" Тогда
			СообщениеПользователю.Текст = "Нет документов на сохранение";
		ИначеЕсли ПолеВыбораДействия = "Подписать" Тогда
			СообщениеПользователю.Текст = "Нет документов на подпись";
		ИначеЕсли ПолеВыбораДействия = "Сопоставить" Тогда
			СообщениеПользователю.Текст = "Нет документов на сопоставление";
		ИначеЕсли ПолеВыбораДействия = "КомплекснаяОбработкаТорговыеСети" Тогда
			СообщениеПользователю.Текст = "Нет документов на анализ";
		Иначе
			// т.к. первый элемент Подписать, то по дефолту выводим эту надпись
			СообщениеПользователю.Текст = "Нет документов на подпись";
		КонецЕсли;
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура НайтиДокументыДляСопоставленияСервер(СтруктураДействийПоДокументу)
	
	ТабИсходныеДанные=	РеквизитФормыВЗначение("ТаблицаДокументов", Тип("ТаблицаЗначений"));
	ТабДанные=			ТабИсходныеДанные.СкопироватьКолонки();
	
	СписокНайденных=	Новый Массив();
	
	Для каждого СтрокаДокументаИсходная Из ТабИсходныеДанные Цикл
		
		НоваяСтрока= ТабДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокументаИсходная);
				
		Если ЗначениеЗаполнено(СтрокаДокументаИсходная.ПервичныйДокумент) Тогда
			НоваяСтрока.Вкл= Ложь;
			НоваяСтрока.СостояниеОбработки=		СтруктураДействийПоДокументу.БылСопоставленРанее;
			НоваяСтрока.КомментарийКДействию= 	"Документ уже сопоставлен"; 
			Продолжить;
		КонецЕсли;
		
		Организация=	МетодСервера(,"BoxID_2_Организация", НоваяСтрока.BoxID);
		Контрагент=		МетодСервера(,"CounteragentBoxID_2_Контрагент", НоваяСтрока.CounteragentID);

		НоваяСтрока.base64DocId= МетодСервера(,"КонвертироватьГуидВЧисло64", НоваяСтрока.DocumentId);
		
		ПараметрыПоиска= Новый Структура();
		ПараметрыПоиска.Вставить("base64DocId", НоваяСтрока.base64DocId);
		ПараметрыПоиска.Вставить("DocumentType", НоваяСтрока.DocumentType);
		ПараметрыПоиска.Вставить("BoxID", НоваяСтрока.BoxID);
		ПараметрыПоиска.Вставить("Организация", Организация);
		ПараметрыПоиска.Вставить("Контрагент", Контрагент);
		ПараметрыПоиска.Вставить("ДатаВходящегоДокумента", НоваяСтрока.Дата);
		ПараметрыПоиска.Вставить("НомерВходящегоДокумента", СокрЛП(НоваяСтрока.Номер));
		Попытка
			ПараметрыПоиска.Вставить("СуммаДокумента", Окр(НоваяСтрока.Сумма, 2));
		Исключение
			ПараметрыПоиска.Вставить("СуммаДокумента", 0);
		КонецПопытки;
		
		ПараметрыПоиска.Вставить("СписокСсылок", НоваяСтрока.СписокСсылок);
		
		ВыборкаРезультатаПоиска= НайтиДокумент1С(ПараметрыПоиска);
				
		Если (НЕ ВыборкаРезультатаПоиска=Неопределено) И ВыборкаРезультатаПоиска.Количество() > 0 Тогда
					
			ВыборкаРезультатаПоиска.Следующий();
			Если НЕ СписокНайденных.Найти(ВыборкаРезультатаПоиска.Ссылка) = Неопределено 
				ИЛИ ВыборкаРезультатаПоиска.УжеСопоставлен Тогда
				НоваяСтрока.Дубликат= Истина;
			Иначе
				НоваяСтрока.СопоставляемыйДокумент1С= ВыборкаРезультатаПоиска.Ссылка;
				СписокНайденных.Добавить(ВыборкаРезультатаПоиска.Ссылка);
			КонецЕсли;
			
			НоваяСтрока.СуммаДокумента1С= 		ВыборкаРезультатаПоиска.СуммаДокумента;
			НоваяСтрока.СостояниеОбработки= 	СтруктураДействийПоДокументу.ГотовКСопоставлению;
			НоваяСтрока.КомментарийКДействию= 	"Для сопосталения документов необходимо нажать кнопку ""Выполнить"".";
			
		Иначе
			
			НоваяСтрока.Вкл= Ложь;
			НоваяСтрока.СостояниеОбработки=		СтруктураДействийПоДокументу.ДокументВ1СНеНайден;
			НоваяСтрока.КомментарийКДействию= 	"При использовании текущего сценария сопоставления, документ в 1С не найден.";
			
		КонецЕсли;	
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТабДанные, "ТаблицаДокументов");
	
КонецПроцедуры

&НаСервере
Функция НайтиДокумент1С(ПараметрыПоиска)
	
	Если Найти(ПараметрыПоиска.DocumentType, "Invoice") > 0 Тогда
		
		ПодходящаяСФ=			Неопределено;
		МассивСсылокРНК=		ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер(ПараметрыПоиска.СписокСсылок, ПараметрыПоиска.BoxID);
		ВыборкаПодходящихСФ=	НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК);
		
		Если ВыборкаПодходящихСФ.Количество() > 0 Тогда
			Возврат ВыборкаПодходящихСФ;
		КонецЕсли;
		
	КонецЕсли;	

	Если НЕ ПараметрыПоиска.СуммаДокумента = 0 Тогда
		
		Запрос=	Новый Запрос;
		
		Если ПараметрыПоиска.DocumentType = "XmlTorg12" ИЛИ ПараметрыПоиска.DocumentType = "XmlAcceptanceCertificate" Тогда
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11"
				ИЛИ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				
				Запрос.Текст=	
					"ВЫБРАТЬ
					|	ПоступлениеТоваровУслуг.Ссылка,
					|	ЕСТЬNULL(ПоступлениеТоваровУслуг.СуммаДокумента, 0) КАК СуммаДокумента,
					|	ВЫБОР
					|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
					|				ИЛИ УжеСопоставленные.Значение = """"
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК УжеСопоставлен
					|ИЗ
					|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
					|		ПО ПоступлениеТоваровУслуг.Ссылка = УжеСопоставленные.Объект
					|ГДЕ
					|	ПоступлениеТоваровУслуг.Организация = &Организация
					|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
					|	И ПоступлениеТоваровУслуг.СуммаДокумента = &СуммаДокумента
					|	И ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента
					|	И НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента";
					
			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
					
				Если ПараметрыПоиска.DocumentType = "XmlAcceptanceCertificate" Тогда
					
					Запрос.Текст=	
					"ВЫБРАТЬ
					|	ПоступлениеУслугРабот.Ссылка,
					|	ПоступлениеУслугРабот.СуммаДокумента,
					|	ВЫБОР
					|		КОГДА Сопоставленные.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК УжеСопоставлен
					|ИЗ
					|	Документ.ПоступлениеУслугРабот КАК ПоступлениеУслугРабот
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК Сопоставленные
					|		ПО ПоступлениеУслугРабот.Ссылка = Сопоставленные.Объект
					|			И (Сопоставленные.Свойство = &Свойство)
					|			И (Сопоставленные.Значение <> """")
					|ГДЕ
					|	ПоступлениеУслугРабот.Организация = &Организация
					|	И ПоступлениеУслугРабот.Контрагент = &Контрагент
					|	И ПоступлениеУслугРабот.СуммаДокумента = &СуммаДокумента
					|	И ПоступлениеУслугРабот.НомерПервичногоДокумента = &НомерВходящегоДокумента
					|	И НАЧАЛОПЕРИОДА(ПоступлениеУслугРабот.ДатаПервичногоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента";
					
				Иначе
					
					Запрос.Текст=	
					"ВЫБРАТЬ
					|	ПоступлениеТоваровУслуг.Ссылка,
					|	ПоступлениеТоваровУслуг.СуммаДокумента,
					|	ВЫБОР
					|		КОГДА Сопоставленные.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК УжеСопоставлен
					|ИЗ
					|	Документ.ПоступлениеМЗ КАК ПоступлениеТоваровУслуг
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК Сопоставленные
					|		ПО ПоступлениеТоваровУслуг.Ссылка = Сопоставленные.Объект
					|			И (Сопоставленные.Свойство = &Свойство)
					|			И (Сопоставленные.Значение <> """")
					|ГДЕ
					|	ПоступлениеТоваровУслуг.Организация = &Организация
					|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
					|	И ПоступлениеТоваровУслуг.СуммаДокумента = &СуммаДокумента
					|	И ПоступлениеТоваровУслуг.НомерПервичногоДокумента = &НомерВходящегоДокумента
					|	И НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.ДатаПервичногоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ПоступлениеОС.Ссылка,
					|	ПоступлениеОС.СуммаДокумента,
					|	ВЫБОР
					|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ
					|ИЗ
					|	Документ.ПоступлениеОС КАК ПоступлениеОС
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК УжеСопоставленные
					|		ПО ПоступлениеОС.Ссылка = УжеСопоставленные.Объект
					|			И (УжеСопоставленные.Свойство = &Свойство)
					|			И (УжеСопоставленные.Значение <> """")
					|ГДЕ
					|	ПоступлениеОС.Организация = &Организация
					|	И ПоступлениеОС.Контрагент = &Контрагент
					|	И ПоступлениеОС.СуммаДокумента = &СуммаДокумента
					|	И ПоступлениеОС.НомерПервичногоДокумента = &НомерВходящегоДокумента
					|	И НАЧАЛОПЕРИОДА(ПоступлениеОС.ДатаПервичногоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента";
					
				КонецЕсли;
				
			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			
				Запрос.Текст=	
					"ВЫБРАТЬ
					|	ПриходнаяНакладная.Ссылка,
					|	ЕСТЬNULL(ПриходнаяНакладная.СуммаДокумента, 0) КАК СуммаДокумента,
					|	ВЫБОР
					|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
					|				ИЛИ УжеСопоставленные.Значение = """"
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК УжеСопоставлен
					|ИЗ
					|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
					|		ПО ПриходнаяНакладная.Ссылка = УжеСопоставленные.Объект
					|ГДЕ
					|	ПриходнаяНакладная.Организация = &Организация
					|	И ПриходнаяНакладная.Контрагент = &Контрагент
					|	И ПриходнаяНакладная.СуммаДокумента = &СуммаДокумента
					|	И ПриходнаяНакладная.НомерВходящегоДокумента = &НомерВходящегоДокумента
					|	И НАЧАЛОПЕРИОДА(ПриходнаяНакладная.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента";	
			КонецЕсли;
			
		ИначеЕсли Найти(ПараметрыПоиска.DocumentType, "Invoice") > 0 Тогда
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				
				Запрос.Текст=	
					"ВЫБРАТЬ
					|	СчетФактураПолученный.Ссылка,
					|	ЕСТЬNULL(ОснованияСФ.СуммаДокумента, 0) КАК СуммаДокумента,
					|	ВЫБОР
					|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
					|				ИЛИ УжеСопоставленные.Значение = """"
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК УжеСопоставлен
					|ИЗ
					|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка,
					|			СчетФактураПолученныйДокументыОснования.ДокументОснование.СуммаДокумента КАК СуммаДокумента
					|		ИЗ
					|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования) КАК ОснованияСФ
					|		ПО СчетФактураПолученный.Ссылка = ОснованияСФ.Ссылка
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &Свойство
					|			И НЕ ДополнительныеСведения.Значение = &base64DocId) КАК УжеСопоставленные
					|		ПО СчетФактураПолученный.Ссылка = УжеСопоставленные.Объект
					|ГДЕ
					|	СчетФактураПолученный.Организация = &Организация
					|	И СчетФактураПолученный.Контрагент = &Контрагент
					|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.Дата, ДЕНЬ) = &ДатаВходящегоДокумента
					|	И СчетФактураПолученный.Номер = &НомерВходящегоДокумента
					|	И ОснованияСФ.СуммаДокумента = &СуммаДокумента";
					
			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				
				Запрос.Текст=	
					"ВЫБРАТЬ
					|	СчетФактураПолученный.Ссылка,
					|	ЕСТЬNULL(СчетФактураПолученный.СуммаДокумента, 0) КАК СуммаДокумента,
					|	ВЫБОР
					|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
					|				ИЛИ УжеСопоставленные.Значение = """"
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК УжеСопоставлен
					|ИЗ
					|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &Свойство
					|			И НЕ ДополнительныеСведения.Значение = &base64DocId) КАК УжеСопоставленные
					|		ПО СчетФактураПолученный.Ссылка = УжеСопоставленные.Объект
					|ГДЕ
					|	СчетФактураПолученный.Организация = &Организация
					|	И СчетФактураПолученный.Контрагент = &Контрагент
					|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента
					|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерВходящегоДокумента
					|	И СчетФактураПолученный.СуммаДокумента = &СуммаДокумента
					|	И (УжеСопоставленные.Значение ЕСТЬ NULL 
					|			ИЛИ УжеСопоставленные.Значение = """")";
					
			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				
				Запрос.Текст=	
					"ВЫБРАТЬ
					|	СчетФактураПолученный.Ссылка,
					|	ЕСТЬNULL(СчетФактураПолученный.СуммаДокумента, 0) КАК СуммаДокумента,
					|	ВЫБОР
					|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
					|				ИЛИ УжеСопоставленные.Значение = """"
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК УжеСопоставлен
					|ИЗ
					|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &Свойство
					|			И НЕ ДополнительныеСведения.Значение = &base64DocId) КАК УжеСопоставленные
					|		ПО СчетФактураПолученный.Ссылка = УжеСопоставленные.Объект
					|ГДЕ
					|	СчетФактураПолученный.Организация = &Организация
					|	И СчетФактураПолученный.Контрагент = &Контрагент
					|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаПервичногоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента
					|	И СчетФактураПолученный.НомерПервичногоДокумента = &НомерВходящегоДокумента
					|	И СчетФактураПолученный.СуммаДокумента = &СуммаДокумента";
					
			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				
				Запрос.Текст=	
					"ВЫБРАТЬ
					|	СчетФактураПолученный.Ссылка,
					|	ЕСТЬNULL(СчетФактураПолученный.СуммаДокумента, 0) КАК СуммаДокумента,
					|	ВЫБОР
					|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
					|				ИЛИ УжеСопоставленные.Значение = """"
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК УжеСопоставлен
					|ИЗ
					|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &Свойство
					|			И НЕ ДополнительныеСведения.Значение = &base64DocId) КАК УжеСопоставленные
					|		ПО СчетФактураПолученный.Ссылка = УжеСопоставленные.Объект
					|ГДЕ
					|	СчетФактураПолученный.Организация = &Организация
					|	И СчетФактураПолученный.Контрагент = &Контрагент
					|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента
					|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерВходящегоДокумента
					|	И СчетФактураПолученный.СуммаДокумента = &СуммаДокумента
					|	И (УжеСопоставленные.Значение ЕСТЬ NULL 
					|			ИЛИ УжеСопоставленные.Значение = """")";
				
			КонецЕсли;
			
		Иначе	
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Организация", 				ПараметрыПоиска.Организация);
		Запрос.УстановитьПараметр("Контрагент", 				ПараметрыПоиска.Контрагент);
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", 	ПараметрыПоиска.ДатаВходящегоДокумента);
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", 	ПараметрыПоиска.НомерВходящегоДокумента);
		Запрос.УстановитьПараметр("СуммаДокумента", 			ПараметрыПоиска.СуммаДокумента);
		Запрос.УстановитьПараметр("Свойство", 					ИдентификаторДокументаВДиадок);
		Запрос.УстановитьПараметр("base64DocId", 				ПараметрыПоиска.base64DocId);
		
		РезультатЗапроса= Запрос.Выполнить();
		
		Возврат РезультатЗапроса.Выбрать();

	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	ИдентификаторДокументаВДиадок=	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(МетодСервера(,"ИдентификаторСвойстваИдентификаторДокументаВДиадок"));
	
	Режим=			  	Параметры.Режим;
	Организация=	  	Параметры.Организация;
	ТекущийПериод=	  	Параметры.ТекущийПериод;
	КонтрагентID=	  	Параметры.КонтрагентID;
	ПараметрыВыборки=	Параметры.ПараметрыВыборки;
	ПолеВыбораДействия=	Параметры.ПолеВыбораДействия;
	
КонецПроцедуры

&НаКлиенте
функция ПроверитьФорматДатыПрото(СтруктураДанных, Поле, ПредставлениеПоля)  
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанных.Получить(Поле))  Тогда
		Возврат "";
	КонецЕсли;	
	
	ЗначениеПоля = структураДанных.получить(Поле);
	Если ТипЗнч(ЗначениеПоля) = тип("Дата") тогда 
		Если (ЗначениеПоля < '18000101') или (ЗначениеПоля>='21000101') тогда 
			возврат "<p>"+ПредставлениеПоля+" ("+формат(ЗначениеПоля,"ДФ=dd.MM.yyyy")+") должна находиться в интервале 01.01.1800 - 31.12.2099</p>"
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеПоля) = тип("Строка") тогда 	
		ДатаГод = прав(ЗначениеПоля, 4);
		Если (ДатаГод <"1800") или (ДатаГод >"2099") тогда 
			возврат "<p>"+ПредставлениеПоля+" ("+ЗначениеПоля+") должна находиться в интервале 01.01.1800 - 31.12.2099</p>"
		КонецЕсли;
	КонецЕсли;
	
	возврат ""
КонецФункции

&НаКлиенте
функция ПроверитьТитулПолучателяТорг12(СтруктураДляТитула) экспорт 
	
	ТекстОшибки=	ПроверитьФорматДатыПрото(СтруктураДляТитула, "ShipmentReceiptDate", "дата получения груза");
	
	Если НЕ ТекстОшибки = "" Тогда
		Если Найти(ТекстОшибки, "<p>")>0 Тогда
			ТекстОшибки = Прав(ТекстОшибки, СтрДлина(ТекстОшибки) - Найти(ТекстОшибки, "<p>")-2);
		КонецЕсли;
		Если Найти(ТекстОшибки, "</p>")>0 Тогда
			ТекстОшибки = Лев(ТекстОшибки, Найти(ТекстОшибки, "</p>")-1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьContent(Источник, Приемник)

	МетодКлиента("Модуль_Клиент", "ЗаполнитьContent", Источник, Приемник);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьВДиадоке(ЭДОбъект, Подписать, BoxID, DocumentID, ТекстОтказа = "", СтруктураДляТитула = Неопределено)
	
	Если НЕ ЭДОбъект = Неопределено Тогда
		
		Если МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ЭДОбъект.Type) Тогда
			МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", BoxID);
		КонецЕсли;
		
		Если Подписать Тогда 
			
			Если СтруктураДляТитула = Неопределено Тогда
				ЭДОбъект.Accept();
			Иначе 
				
				Если ЭДОбъект.Type <> "UniversalTransferDocument" Тогда
					//Проверим титул
					ТекстОшибки = ПроверитьТитулПолучателяТорг12(СтруктураДляТитула);
					//чтобы при отображении ошибки процедура поняла, что это не runtime-ошибка 1с, ставим префикс, похожий на формат, в котором возвращается ошибка из длл
					Если ТекстОшибки <>"" Тогда
						ВызватьИсключение("##9[]" + ТекстОшибки);
					КонецЕсли;	
				КонецЕсли;
				
				Если ЭДОбъект.Type = "Nonformalized" ИЛИ ЭДОбъект.Type = "ReconciliationAct" Тогда	
					ЭДОбъект.Accept();
				Иначе
					ReplySendTask=	ЭДОбъект.CreateReplySendTask();
					ЗаполнитьContent(СтруктураДляТитула, ReplySendTask.Content);
					ReplySendTask.Send();
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Если ЭДОбъект.Type = "UniversalTransferDocument" Тогда
				
				Организация   =	МетодСервера(, "BoxID_2_Организация", BoxID);
				Organization  = МетодКлиента("Модуль_Клиент", "ПолучитьЯщикДиадокДляОрганизации", Организация); 
				
				ReplySendTask= ЭДОбъект.CreateReplySendTask("RejectDocument");
				ReplySendTask.Content.Comment= ТекстОтказа;
				МетодКлиента("Модуль_Клиент", "ЗаполнитьПодписанта", ReplySendTask.Content, Organization);
				ReplySendTask.Send();
				
			Иначе
				ЭДОбъект.Reject(ТекстОтказа);
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьВДиадокеАсинхронно(Document, Подписать, BoxID, DocumentID, ТекстОтказа = "", СтруктураДляТитула = Неопределено, СтрокаТаблицы)
	
	Если НЕ Document = Неопределено Тогда
		
		Если МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", Document.Type) Тогда
			МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", BoxID);
		КонецЕсли;
		
		Если Подписать Тогда 
			
			Если СтруктураДляТитула = Неопределено Тогда
				Document.Accept();
			Иначе 
				//Проверим титул
				ТекстОшибки = ПроверитьТитулПолучателяТорг12(СтруктураДляТитула);
				
				//чтобы при отображении ошибки процедура поняла, что это не runtime-ошибка 1с, ставим префикс, похожий на формат, в котором возвращается ошибка из длл
				Если ТекстОшибки <>"" Тогда
					ВызватьИсключение("##9[]" + ТекстОшибки);
				КонецЕсли;	
				
				Если Document.Type = "Nonformalized" Тогда
					Document.Accept();
				ИначЕ
					ReplySendTask =	Document.CreateReplySendTask();
					ЗаполнитьContent(СтруктураДляТитула, ReplySendTask.Content);
					МассивЗаданийОтправкаТитулаПокупателя.Добавить(Новый Структура("DocumentId, BoxId, ReplySendTask, СтрокаТаблицы", Document.DocumentId, Document.OrganizationId, ReplySendTask.SendAsync(), СтрокаТаблицы));
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе 	
			Document.Reject(ТекстОтказа);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьВыделенныеДокументыСервер()
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		Если СтрокаТаблицы.Вкл Тогда
			МетодСервера(,"УстановитьЗначениеСвойства", СтрокаТаблицы.СопоставляемыйДокумент1С, МетодСервера(,"ИдентификаторСвойстваИдентификаторДокументаВДиадок"), , СтрокаТаблицы.base64DocId); 
			МетодСервера(,"УстановитьЗначениеСвойства", СтрокаТаблицы.СопоставляемыйДокумент1С, МетодСервера(,"ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок"), , СтрокаТаблицы.BoxId);
			СтрокаТаблицы.ПервичныйДокумент=	СтрокаТаблицы.СопоставляемыйДокумент1С;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСопоставлениеДокументов()
	
	СопоставитьВыделенныеДокументыСервер();
	
	НайденныеСтроки=			ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
	ОбщееКоличествоДокументов=	НайденныеСтроки.Количество();
	НомерДокумента=				0;
	
	Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		ОбработкаПрерыванияПользователя();
		Если ЗначениеЗаполнено(СтрокаТаблицы.СопоставляемыйДокумент1С) Тогда
			
			ПараметрыОповещения=	Новый Структура;
			ПараметрыОповещения.Вставить("ТипСущности", "Документ");
			ПараметрыОповещения.Вставить("BoxID", СтрокаТаблицы.BoxId);
			ПараметрыОповещения.Вставить("DocumentID", СтрокаТаблицы.DocumentId);
			ПараметрыОповещения.Вставить("Документ1С", СтрокаТаблицы.СопоставляемыйДокумент1С);
			
			МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
			
			НомерДокумента=	НомерДокумента + 1;
			Состояние("Сопоставление документов", НомерДокумента*100/?(ОбщееКоличествоДокументов = 0, 1, ОбщееКоличествоДокументов) , "Сопоставлено " + НомерДокумента + " из " + ОбщееКоличествоДокументов);
			
		КонецЕсли;
	КонецЦикла;
	
	Состояние("Сопоставление документов завершено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыПодписанияДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		Если РезультатЗакрытия.ДокументПодписан = Истина Тогда
			
			НайденныеСтроки=			ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
			ОбщееКоличествоДокументов=	НайденныеСтроки.Количество();
			НомерДокумента=				0;
			КоличествоНеПодписанных=	0;
			КоличествоПодписанных=		0;
			
			Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				Если НЕ СтрокаТаблицы.Подписан И 
					(СтрокаТаблицы.Status = "OutboundWaitingForRecipientSignature" ИЛИ СтрокаТаблицы.Status = "InboundWaitingForRecipientSignature" ИЛИ СтрокаТаблицы.Status = "InboundInvalidRecipientSignature") Тогда
					
					НомерДокумента=	НомерДокумента + 1;
					
					ОбработкаПрерыванияПользователя();
					
					Попытка  
						
						Organization=		Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(СтрокаТаблицы.BoxID);
						ЭДОбъект=			Organization.GetDocumentById(СтрокаТаблицы.DocumentID);
						UserPermissions=	Organization.GetUserPermissions();
						
						Если (ЭДОбъект.IsTest ИЛИ ЭДОбъект.Organization.AuthenticateType = "Certificate") И UserPermissions.CanSignIncomingDocuments Тогда
							
							Если ЭДОбъект.Type = "UniversalTransferDocument" Тогда
								ПараметрыТитулаПолучателя=	РезультатЗакрытия.ТитулПокупателя;
								ПараметрыТитулаПолучателя.Вставить("CertificateThumbprint", ЭДОбъект.Organization.Certificate.Thumbprint);
							Иначе
								ПараметрыТитулаПолучателя=	Новый Структура();
								ПараметрыТитулаПолучателя.Вставить("ДатаПолученияГруза", 	РезультатЗакрытия.ДатаПолученияГруза);
								ПараметрыТитулаПолучателя.Вставить("ФИОПодписанта", 		Лев(РезультатЗакрытия.ФИОПодписанта,100));
								ПараметрыТитулаПолучателя.Вставить("ДолжностьПодписанта", 	Лев(РезультатЗакрытия.ДолжностьПодписанта,50));
								ПараметрыТитулаПолучателя.Вставить("ИНН", 					Organization.INN);
								ПараметрыТитулаПолучателя.Вставить("НаименованиеОрганизации", Organization.Name);
								ПараметрыТитулаПолучателя.Вставить("НаименованиеКонтрагента", ЭДОбъект.Counteragent.Name);
							КонецЕсли;
							ПараметрыТитулаПолучателя.Вставить("BoxID", СтрокаТаблицы.BoxID);

							BuyerTitleInfo=	МетодСервераБезКонтекста(,"СформироватьТитулПолучателя", ПараметрыТитулаПолучателя, ЭДОбъект.Type, ЭДОбъект.DocumentDate);
							ПодписатьВДиадоке(ЭДОбъект, Истина, ЭДОбъект.OrganizationID, ЭДОбъект.documentID,, BuyerTitleInfo);
							
							СтрокаТаблицы.Подписан=	Истина;
							СтрокаТаблицы.Вкл=		Ложь;
							
							СтрокаТаблицы.СостояниеОбработки=   СтруктураДействийПоДокументу.УспешноПодписан;
							СтрокаТаблицы.КомментарийКДействию= "Документ успешно подписан";
							
							ПараметрыОповещения=	Новый Структура;
							ПараметрыОповещения.Вставить("BoxID", СтрокаТаблицы.BoxID);
							ПараметрыОповещения.Вставить("DocumentID", СтрокаТаблицы.DocumentID);
							
							МетодКлиента(,"ОповеститьФормы", "ИзменениеСтатусаДокументаДиадок", ПараметрыОповещения, ЭтаФорма);
														
							КоличествоПодписанных=		КоличествоПодписанных + 1;
							
						Иначе
							
							ТекстОшибкиПодписания=	"Документ " + СтрокаТаблицы.ТипДокумента + " " + СтрокаТаблицы.Номер + " от " + СтрокаТаблицы.Дата
							+ " не подписан. Подписание юридически значимых документов возможно только с сертификатом";
							Сообщить(ТекстОшибкиПодписания);
							
							СтрокаТаблицы.Вкл = Ложь;
							СтрокаТаблицы.СостояниеОбработки=   СтруктураДействийПоДокументу.ОшибкаПриПодписании;
							СтрокаТаблицы.КомментарийКДействию= ТекстОшибкиПодписания;
							
							КоличествоНеПодписанных=	КоличествоНеПодписанных + 1;
							
						КонецЕсли;
						
					Исключение 
						
						Сообщить(МетодКлиента("Модуль_Клиент","СформироватьТекстОшибкиДиадок", ОписаниеОшибки()));
						
						КоличествоНеПодписанных=	КоличествоНеПодписанных + 1;
						
						СтрокаТаблицы.Вкл = Ложь;
						СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаПриПодписании;
						
					КонецПопытки;
					
				КонецЕсли;
				
				Состояние("Подписание документов", НомерДокумента*100/?(ОбщееКоличествоДокументов = 0, 1, ОбщееКоличествоДокументов), "Обработано " + ОбщееКоличествоДокументов + " документов, из них подписано " + КоличествоПодписанных + ", не удалось подписать " + КоличествоНеПодписанных);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодписаниеДокументов()
	
	НайденныеСтроки=			ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
	ОбщееКоличествоДокументов=	НайденныеСтроки.Количество();
	НомерДокумента=				0;
	
	ДокументыПодписаны=				Ложь;
	
	КоличествоНеПодписанных=					0;
	КоличествоПодписанных=						0;
	
	Если ОбщееКоличествоДокументов > 0 Тогда
		
		Certificate=	Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.Certificate;

		BoxId			= НайденныеСтроки[0].BoxID;
		Organization	= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(BoxId);
			
		ФИОПодписанта	= МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("ФИО", 						ФИОПодписанта);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	ФИОПодписанта);
		ПараметрыФормы.Вставить("Организация", 				ПолучитьСвязаннуюОрганизацию(Organization.ID));
		ПараметрыФормы.Вставить("ЭДОбъектType", 			НайденныеСтроки[0].DocumentType);
		
		Если НайденныеСтроки[0].DocumentType = "UniversalTransferDocument" Тогда
			ПараметрыФормы.Вставить("OrganizationName", 	Organization.Name);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаПодписанияДокументаУПД", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыПодписанияДокумента");
		Иначе
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаПодписанияДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыПодписанияДокумента");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДиск(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Каталог = РезультатЗакрытия.Каталог;
	СохранятьПротокол = РезультатЗакрытия.СохранятьПротокол;
	МассивЗадачСохраненияНаДиск = Новый Массив;
	
	КоличествоЗаданий = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина)).Количество();
	КоличествоОбработанныхДокументов = 0;
		
	ПодключитьОбработчикОжидания("ОбработчикСохраненияНаДиск", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСохраненияНаДиск()
	
	мСтрок = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
	Для Каждого стр Из мСтрок Цикл
		
		Если МассивЗадачСохраненияНаДиск.Количество() = МаксимальноеКоличествоЗаданий Тогда
			Прервать;
		КонецЕсли;
		
		Organization = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(стр.BoxID);
		Document = Organization.GetDocumentById(стр.DocumentId);
		
		Подкаталог 	= "INN_" + Organization.Inn + "\" + Document.type + "_" + Прав(Document.DocumentId, 36);
		КаталогПакета = Каталог + "\" + Подкаталог;
		
		Попытка
			
			СоздатьКаталог(КаталогПакета);
			СформироватьФайлСвязанныхДокументах(Document, КаталогПакета);
			стр.Вкл = Ложь;
			стр.СостояниеОбработки = СтруктураДействийПоДокументу.Сохранение;
			стр.КомментарийКДействию = СтруктураДействийПоДокументу.Сохранение;
			
			AsyncResult = Document.SaveAllContentAsync(КаталогПакета, СохранятьПротокол);
			
			сткЗадачи = Новый Структура("стр, AsyncResult", стр, AsyncResult);
			МассивЗадачСохраненияНаДиск.Вставить(0, сткЗадачи);
			
		Исключение
			
			стр.Вкл 					= Ложь;
			стр.СостояниеОбработки 	= СтруктураДействийПоДокументу.ОшибкаСохранения;
			
			ТекстОшибки = ОписаниеОшибки();
			Если Найти(ТекстОшибки, "Ошибка при вызове метода контекста (СоздатьКаталог)")>0 Тогда
				стр.КомментарийКДействию = "Не удалось получить доступ к указанному каталогу. Возможно у Вас недостаточно прав.";
			Иначе
				стр.КомментарийКДействию = ТекстОшибки;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("ОбновлениеСтатусаСохранения", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеСтатусаСохранения()
	
	сц = МассивЗадачСохраненияНаДиск.Количество() - 1;
	Если сц < 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачальноеКоличество = сц;
	Пока сц >= 0 Цикл
		сткЗадачи = МассивЗадачСохраненияНаДиск[сц];
		Если сткЗадачи.AsyncResult.IsCompleted Тогда
			сткЗадачи.стр.СостояниеОбработки = СтруктураДействийПоДокументу.УспешноСохранен;
			сткЗадачи.стр.КомментарийКДействию = СтруктураДействийПоДокументу.УспешноСохранен;
			МассивЗадачСохраненияНаДиск.Удалить(сц);
			КоличествоОбработанныхДокументов = КоличествоОбработанныхДокументов + 1;
			ПоказатьСостояниеСохранения();			
		КонецЕсли;
		сц = сц - 1;
	КонецЦикла;
	
	ИмяОбработчика = ?(сц = НачальноеКоличество, "ОбновлениеСтатусаСохранения", "ОбработчикСохраненияНаДиск");
	ПодключитьОбработчикОжидания(ИмяОбработчика, 0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСостояниеСохранения()
	
	Процент = КоличествоОбработанныхДокументов / ?(КоличествоЗаданий = 0, 1, КоличествоЗаданий) * 100;
	Состояние("Скачивание выделенных файлов", Процент);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлСвязанныхДокументах(Document, КаталогПакета, ПризнакОшибки = Неопределено)
	
	Файл = Новый ЗаписьXML;
	
	Файл.ОткрытьФайл(КаталогПакета + "\RelatedDocuments_" + Document.DocumentId + ".xml",  "UTF-8");
	
	Файл.ЗаписатьОбъявлениеXML();
	Файл.ЗаписатьКомментарий("Список связанных документов");
	
	Файл.ЗаписатьНачалоЭлемента("V8Data");
	Файл.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	
	Файл.ЗаписатьКомментарий("Данный документ");
	Файл.ЗаписатьНачалоЭлемента("Document");
	Файл.ЗаписатьАтрибут("OrganizationId",	Document.OrganizationId);
	Файл.ЗаписатьАтрибут("DocumentId",		Document.DocumentId);
	Файл.ЗаписатьКонецЭлемента(); //Document
	
	Файл.ЗаписатьКомментарий("Список идентификаторов документов, на которые ссылается данный");
	Файл.ЗаписатьНачалоЭлемента("ParentDocumentIds");
	InitialDocumentIds=	Document.InitialDocumentIds;
	Для ц = 0 по  InitialDocumentIds.Count-1 Цикл
		InitialDocument = InitialDocumentIds.GetItem(ц); 
		Файл.ЗаписатьНачалоЭлемента("ParentDocument");
		Файл.ЗаписатьАтрибут("DocumentId", InitialDocument);
		Файл.ЗаписатьКонецЭлемента(); //ParentDocument
	КонецЦикла;
	Файл.ЗаписатьКонецЭлемента(); //ParentDocumentIds
	
	Файл.ЗаписатьКомментарий("Список идентификаторов документов, которые ссылаются на данный");
	Файл.ЗаписатьНачалоЭлемента("SubordinateDocumentIds");
	SubordinateDocumentIds=	Document.SubordinateDocumentIds;
	Для ц = 0 по SubordinateDocumentIds.count-1 Цикл
		SubordinateDocument =  SubordinateDocumentIds.getItem(ц);
		Файл.ЗаписатьНачалоЭлемента("SubordinateDocument");
		Файл.ЗаписатьАтрибут("DocumentId", SubordinateDocument);
		Файл.ЗаписатьКонецЭлемента(); //SubordinateDocument
	КонецЦикла;
	Файл.ЗаписатьКонецЭлемента(); //SubordinateDocumentIds
	
	Файл.ЗаписатьКонецЭлемента();//V8Data
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработкуОтмеченныхДокументов(РежимОбработки)
	
	//уберем флаг для всех строк, которые не попали в отбор
	Для каждого стр из ТаблицаДокументов цикл 
		Если Элементы.ТаблицаДокументов.ПроверитьСтроку(стр.получитьИдентификатор())=ложь Тогда 
			Стр.вкл = ложь;
		КонецЕсли;
	КонецЦикла;	
	
	Если ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина)).Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Не выбраны документы!");
		Возврат;
	КонецЕсли;
	
	Если ПолеВыбораДействия = "Сопоставить" Тогда
		Если Режим = "АнализДокументов" Тогда
 			ПроверитьВозможностьСопоставления();	
		ИначеЕсли Режим = "ОбработкаДокументов" Тогда
			СопоставитьВыделенные();
		КонецЕсли;
	ИначеЕсли ПолеВыбораДействия = "Подписать" Тогда
		ВыполнитьПодписаниеДокументов();	
	ИначеЕсли ПолеВыбораДействия = "КомплекснаяОбработкаТорговыеСети" Тогда
		Если Режим = "АнализДокументов" Тогда
			ОтмеченныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
			Если НЕ ОтмеченныеСтроки.Количество()=0 Тогда
				МетодКлиента("Модуль_Клиент","ЗаполнитьМассивСтруктурКонтент");
				ПровестиАнализДокументов(ОтмеченныеСтроки);	
			КонецЕсли;
			
		ИначеЕсли Режим = "ОбработкаДокументов" Тогда
			Оповещение=	Новый ОписаниеОповещения("ВыполнитьОбработкуДокументов", ЭтаФорма);
			ПоказатьВопрос(Оповещение, "Обработать документы?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		КонецЕсли;		
	ИначеЕсли ПолеВыбораДействия = "СохранитьНаДиск" Тогда
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораКаталогаСохранения",, ЭтаФорма, "СохранитьНаДиск",, ЭтаФорма, Истина);	
	Иначе
		Сообщить("Неустаносленный вид действия");		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьСопоставления()
	
	Состояние("Обработка списка документов, операция может занять продолжительное время");
	НайтиДокументыДляСопоставленияСервер(СтруктураДействийПоДокументу);
	Состояние("Обработка завершена");
	
	Если НЕ ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина))=0 Тогда
		Элементы.ТаблицаДокументовОбработать.Заголовок = "Сопоставить выделенные";
		Режим = "ОбработкаДокументов";		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьВыделенные() // аналог процедуры ВыполнитьСопоставлениеДокументов() 
	
	СопоставитьВыделенныеДокументыСервер();
	
	НайденныеСтроки=			ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
	ОбщееКоличествоДокументов=	НайденныеСтроки.Количество();
	НомерДокумента=				0;
	
	Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		ОбработкаПрерыванияПользователя();
		Если ЗначениеЗаполнено(СтрокаТаблицы.СопоставляемыйДокумент1С) Тогда
			
			ПараметрыОповещения=	Новый Структура;
			ПараметрыОповещения.Вставить("ТипСущности", "Документ");
			ПараметрыОповещения.Вставить("BoxID", СтрокаТаблицы.BoxId);
			ПараметрыОповещения.Вставить("DocumentID", СтрокаТаблицы.DocumentId);
			ПараметрыОповещения.Вставить("Документ1С", СтрокаТаблицы.СопоставляемыйДокумент1С);
			
			МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
			
			НомерДокумента=	НомерДокумента + 1;
			Состояние("Сопоставление документов", НомерДокумента*100/?(ОбщееКоличествоДокументов = 0, 1, ОбщееКоличествоДокументов) , "Сопоставлено " + НомерДокумента + " из " + ОбщееКоличествоДокументов);
			
		КонецЕсли;
		
		СтрокаТаблицы.Вкл = Ложь;
		СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
		СтрокаТаблицы.КомментарийКДействию = "Документ успешно сопоставлен";
	КонецЦикла;
	
	Состояние("Сопоставление документов завершено");	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодписи()
	
	Для каждого СтрокаТаблицы из ТаблицаДокументов Цикл
		Если СтрокаТаблицы.DocumentType="XmlTorg12" 
			ИЛИ СтрокаТаблицы.DocumentType = "XmlAcceptanceCertificate" 
			ИЛИ СтрокаТаблицы.DocumentType = "ReconciliationAct"
			ИЛИ СтрокаТаблицы.СостояниеДокументооборота = "Требуется подпись" Тогда
			
				Если СтрокаТаблицы.Status = "InboundWaitingForRecipientSignature" Тогда
					СтрокаТаблицы.Вкл = Истина;
					СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ГотовКПодписанию;
					СтрокаТаблицы.КомментарийКДействию 	= "Документ готов к подписи. Нажмите кнопку ""Подписать выделенные""";
				ИначеЕсли СтрокаТаблицы.Status = "InboundWithRecipientSignature" Тогда
					СтрокаТаблицы.Вкл = Ложь;
					СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ПодписанРанее;
					СтрокаТаблицы.КомментарийкДействию 	= "Документ уже был подписан ранее";
				ИначеЕсли СтрокаТаблицы.Status = "InboundRecipientSignatureRequestRejected" Тогда
					СтрокаТаблицы.Вкл = Ложь;
					СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.НеТребуетПодписания;
					СтрокаТаблицы.КомментарийКДействию 	= "Документ не требует подписи";
				КонецЕсли;
			
		Иначе
			СтрокаТаблицы.Вкл = Ложь;
			СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.НеТребуетПодписания;
			СтрокаТаблицы.КомментарийКДействию 	= "Документ не требует подписи";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обработать(Команда)
		
	ЗапуститьОбработкуОтмеченныхДокументов(Режим);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРасширениеФайлаДиадок(ИмяФайла)
	КолСим = СтрДлина(ИмяФайла);
	Для ИндЦикла = 1 По КолСим Цикл
		Инд = КолСим + 1 - ИндЦикла;
		Если Сред(ИмяФайла, Инд, 1) = "." Тогда
			Возврат ?(КолСим = Инд, 0, Сред(ИмяФайла, Инд + 1, КолСим - Инд));
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура СформироватьПечатнуюФормуПоФайлуДиадок()
	
	ТекущиеДанные=	Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите документ.", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		Возврат;
	КонецЕсли;
	
	Document=	Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ТекущиеДанные.BoxID).GetDocumentById(ТекущиеДанные.DocumentID);
	
	ПараметрыФормы=	Новый Структура;
		
	Если Document.Department <> Неопределено Тогда
		ПараметрыФормы.Вставить("DepartmentKpp", 		Document.Department.Kpp);
		ПараметрыФормы.Вставить("DepartmentId", 		Document.Department.Id);
	КонецЕсли;
			
	ЭлементМассива= Новый Структура("Вкл, DocumentType, Документ1С, НомерДокумента, ДатаДокумента, ТипДокумента, ДопСведения, ВнешняяПечатнаяФорма, ЭтоТекущиеДанные");
		
	ЭлементМассива.Вставить("CounteragentBoxID", 		Document.Counteragent.ID);
	ЭлементМассива.Вставить("РасширениеФайлаДиадок", 	ПолучитьРасширениеФайлаДиадок(Document.FileName));
	ЭлементМассива.Вставить("DocumentType",				Document.Type);
	ЭлементМассива.Вставить("Документ1С", 				ТекущиеДанные.СопоставляемыйДокумент1С);
	ЭлементМассива.Вставить("ТипДокумента",				ТекущиеДанные.ТипДокумента);
	ЭлементМассива.Вставить("ДопСведения", 				"");
	ЭлементМассива.Вставить("DocumentID", 				"");
	ЭлементМассива.Вставить("Проведен",					Истина);
	ЭлементМассива.Вставить("IdСтроки",					"");
	ЭлементМассива.Вставить("ЭтоТекущиеДанные",			Истина);
	ЭлементМассива.Вставить("НомерЗаказа",				"");
	ЭлементМассива.Вставить("ОшибкаВалидации",			"");
	ЭлементМассива.Вставить("ВнешняяПечатнаяФорма",		Неопределено);
	ЭлементМассива.Вставить("ЭтоФайл",					Ложь);
		
	МассивДокументовПакета= Новый Массив;
	МассивДокументовПакета.Добавить(ЭлементМассива);
	
	ПараметрыФормы.Вставить("BoxID", 					Document.OrganizationID);
	ПараметрыФормы.Вставить("CounteragentBoxID", 		Document.Counteragent.ID);
	ПараметрыФормы.Вставить("МассивДокументовПакета", 	МассивДокументовПакета);
	ПараметрыФормы.Вставить("ТочкаВызова", 				"ГрупповаяОбработкаВходящих");
		
	ИмяФормыПросмотра= МетодКлиента("Модуль_Клиент","ПолучитьИмяФормыДокумента", Document);
	ФормаПросмотра=	   МетодКлиента(,"ПолучитьФормуОбработки", ИмяФормыПросмотра, ПараметрыФормы, ЭтаФорма, СокрЛП(Document.DocumentID) + "/" + СокрЛП(Document.OrganizationID));
	
	ФормаПросмотра.ЭДОбъект= Document;
	
	ОткрытьФорму(ФормаПросмотра);
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКонтрольныеСуммы()
	
	НайденныеСтроки=	ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
	КонтрольнаяСуммаДокументов1С=	0;
	КонтрольнаяСуммаДокументовДД=	0;
	Для каждого Строка Из НайденныеСтроки Цикл
		КонтрольнаяСуммаДокументовДД=	КонтрольнаяСуммаДокументовДД + Строка.Сумма;
		КонтрольнаяСуммаДокументов1С=	КонтрольнаяСуммаДокументов1С + Строка.СуммаДокумента1С;
	КонецЦикла;
	
	КонтрольнаяСуммаДокументовДельта=	КонтрольнаяСуммаДокументовДД - КонтрольнаяСуммаДокументов1С;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовВклПриИзменении(Элемент)
	
	Если Элементы.ТаблицаДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолеВыбораДействия = "Сопоставить" Тогда
		
		Если НЕ Режим = "АнализДокументов" Тогда
			Если НЕ ЗначениеЗаполнено(Элементы.ТаблицаДокументов.ТекущиеДанные.СопоставляемыйДокумент1С) Тогда
				Сообщить("Данную строку нельзя отметить для сопоставления: у документа " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + " не найдено соответствие документу в 1С");
				Элементы.ТаблицаДокументов.ТекущиеДанные.Вкл = Ложь;
			ИначеЕсли ЗначениеЗаполнено(Элементы.ТаблицаДокументов.ТекущиеДанные.ПервичныйДокумент) Тогда
				Сообщить("Данную строку нельзя отметить для сопоставления: документ " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + " уже сопоставлен документу в 1С");
				Элементы.ТаблицаДокументов.ТекущиеДанные.Вкл = Ложь;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Элементы.ТаблицаДокументов.ТекущиеДанные.ПервичныйДокумент) Тогда
				Сообщить("Данную строку нельзя отметить для сопоставления: документ " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + " уже сопоставлен документу в 1С");
				Элементы.ТаблицаДокументов.ТекущиеДанные.Вкл = Ложь;	
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПолеВыбораДействия = "Подписать" Тогда
		
		Если Элементы.ТаблицаДокументов.ТекущиеДанные.Подписан Тогда
			Сообщить("Данную строку нельзя отметить для подписания, т.к. документ уже был подписан ранее");
			Элементы.ТаблицаДокументов.ТекущиеДанные.Вкл = Ложь;
		ИначеЕсли Элементы.ТаблицаДокументов.ТекущиеДанные.СостояниеОбработки = СтруктураДействийПоДокументу.НеТребуетПодписания Тогда
			Сообщить("Данную строку нельзя отметить для подписания, т.к. документ не требует подписи");
			Элементы.ТаблицаДокументов.ТекущиеДанные.Вкл = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьВкл= ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина)).Количество() > 0;
	Если НЕ ЕстьВкл
		ИЛИ ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Ложь)).Количество() = 0 Тогда // НЕ ЕстьВыкл
		УстановитьКартинкуИЗаголовокКнопкиПометки(ЕстьВкл);
	КонецЕсли;
	
	Если ПолеВыбораДействия = "Сопоставить" Тогда
		ПересчитатьКонтрольныеСуммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, ПараметрыОповещения, Источник) Экспорт
	
	Если ИмяСобытия = "ИзменениеСтатусаДокументаДиадок"
		И Тип(Источник) = Тип("УправляемаяФорма") 
		И (Источник.ИмяФормы = Платформа.ПараметрыКлиент.ПутьКФормам+"ФормаДокумента" 
			ИЛИ Источник.ИмяФормы = Платформа.ПараметрыКлиент.ПутьКФормам+"ФормаГрупповаяОбработка")
		И ЗначениеЗаполнено(ПараметрыОповещения.BoxID)
		И ЗначениеЗаполнено(ПараметрыОповещения.DocumentID)
	Тогда
		
		Попытка
			Док = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ПараметрыОповещения.BoxID).GetDocumentById(ПараметрыОповещения.DocumentID);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Док = Неопределено;
		КонецПопытки;
		
		Если НЕ Док = Неопределено Тогда
			НовыйСтатус=	МетодКлиента("Модуль_Клиент","ПредставлениеСтатуса", Док);
		КонецЕсли;
				
		ОтборСтрок=	Новый Структура;
		ОтборСтрок.Вставить("BoxID", ПараметрыОповещения.BoxID);
		ОтборСтрок.Вставить("DocumentID", ПараметрыОповещения.DocumentID);
			
		НайденныеСтроки=	ТаблицаДокументов.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаДокумента=	НайденныеСтроки[0];
			
			Если НЕ Док = Неопределено Тогда
				СтрокаДокумента.СостояниеДокументооборота=	НовыйСтатус;
			Иначе
				СтрокаДокумента.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
				СтрокаДокумента.КомментарийКДействию = "Не удалось изменить статус документа по причине:" + ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли ИмяСобытия = "ИзменениеСвязиДД1С"
		И ЗначениеЗаполнено(ПараметрыОповещения.BoxID)
		И ЗначениеЗаполнено(ПараметрыОповещения.DocumentID) Тогда
		
		Если ПараметрыОповещения.ТипСущности = "Документ"
			И ПараметрыОповещения.Свойство("Документ1С") Тогда
			
			ОтборСтрок=	Новый Структура;
			ОтборСтрок.Вставить("BoxID", ПараметрыОповещения.BoxID);
			ОтборСтрок.Вставить("DocumentID", ПараметрыОповещения.DocumentID);
			
			НайденныеСтроки=	ТаблицаДокументов.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаДокумента=							НайденныеСтроки[0];
				СтрокаДокумента.ПервичныйДокумент=			ПараметрыОповещения.Документ1С;
				СтрокаДокумента.СопоставляемыйДокумент1С=	ПараметрыОповещения.Документ1С;
				
				Если ЗначениеЗаполнено(ПараметрыОповещения.Документ1С)
					И Режим = "Сопоставление" Тогда
					СтрокаДокумента.СуммаДокумента1С=	ПолучитьРеквизитСсылки(ПараметрыОповещения.Документ1С, "СуммаДокумента");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "УдалениеДокументов" Тогда
		
		Для каждого ПараметрыДокумента Из ПараметрыОповещения Цикл
			
			ОтборСтрок=	Новый Структура;
			ОтборСтрок.Вставить("BoxID", 		ПараметрыДокумента.BoxID);
			ОтборСтрок.Вставить("DocumentID", 	ПараметрыДокумента.DocumentID);
			
			НайденныеСтроки=	ТаблицаДокументов.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаДокумента=	НайденныеСтроки[0];
				ИндексСтроки=		ТаблицаДокументов.Индекс(СтрокаДокумента);
				ТаблицаДокументов.Удалить(ИндексСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьТаблицу();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаДокументовСостояниеОбработки" Тогда
		
		ПоказатьПредупреждение(,Элемент.ТекущиеДанные.КомментарийКДействию, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		
	ИначеЕсли Поле.Имя = "ТаблицаДокументовПервичныйДокумент" Тогда
		
		ДокументСсылка= Элемент.ДанныеСтроки(ВыбраннаяСтрока).ПервичныйДокумент;
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			МетодКлиента(,"ОткрытьФормуОбъектаИБ", ДокументСсылка);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ТаблицаДокументовСопоставляемыйДокумент1С" Тогда
		
		ДокументСсылка= Элемент.ДанныеСтроки(ВыбраннаяСтрока).СопоставляемыйДокумент1С;
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			МетодКлиента(,"ОткрытьФормуОбъектаИБ", ДокументСсылка);
		КонецЕсли;
		
	Иначе
		
		СформироватьПечатнуюФормуПоФайлуДиадок();
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
//{ КОМПЛЕКСНАЯ ОБРАБОТКА ТОРГОВЫЕ СЕТИ

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСчетФактура(ТипДокумента)
	Возврат ?(ЛЕВ(ТипДокумента, 7)="Invoice", Истина, Ложь);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФормализованныйТОРГ12(ТипДокумента)
	Возврат ?(ТипДокумента="XmlTorg12", Истина, Ложь);
КонецФункции

&НаКлиенте
Функция ЭтоНеформализованныйДокумент(ТипДокумента)
	Возврат ?(НЕ Найти(ТипДокумента,"Nonformalized")=0 ИЛИ ТипДокумента="Contract", Истина, Ложь);	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФормализованныйАктОВыполненииРабот(ТипДокумента)
	Возврат ?(ТипДокумента="XmlAcceptanceCertificate", Истина, Ложь);
КонецФункции

&НаСервереБезКонтекста
Функция ФорматироватьТекстОшибки(ТекстОшибки)
		
	Маркер ="Ошибка валидации:";
	Результат = ТекстОшибки;
	Если Найти(Врег(Результат), Врег(Маркер))>0 Тогда
		Результат = Прав(Результат, СтрДлина(Результат) - Найти(Врег(Результат), Врег(Маркер)) - СтрДлина(Маркер)+1);
	КонецЕсли;
	
	Возврат СокрЛП(результат);
	
КонецФункции

&НаКлиенте
Функция ЭтоВходящийДокумент(Направление)
	Возврат ?(Направление="Inbound", Истина, Ложь);	
КонецФункции

&НаКлиенте
Функция ЭтоИсходящийДокумент(Направление)
	Возврат ?(Направление="Outbound", Истина, Ложь);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//{ Сети анализ документов

&НаКлиенте
Процедура ПровестиАнализДокументов(ОтмеченныеСтроки)
	
	ПодготовитьДанныеДляАнализаНаСервере(ОтмеченныеСтроки);
	
	Состояние("Выполняется анализ документов.");
	ПровестиАнализДокументовНаСервере(СтруктураДействийПоДокументу, СтруктураРаботаСНомеромАкта);
	Состояние("Анализ документов завершен.");
	
	Режим = "ОбработкаДокументов";
	НастроитьФормуПодКомплекснуюОбработкуДляТорговыхСетей();
		
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеДляАнализаНаСервере(ОтмеченныеСтроки)
	
	ДокументовКОбработке = ОтмеченныеСтроки.Количество();
	ДокументовОбработано = 0;
	
	СтруктураРаботаСНомеромАкта = МетодКлиента("МодульСетиМестоХраненияНомераАктаПриемки","ЗаполнитьСтруктуруРаботаСНомеромАкта");
						
	Для каждого СтрокаТаблицы из ОтмеченныеСтроки Цикл
		
		Состояние("Получение данных документов. Обработано "+Строка(ДокументовОбработано)+" из "+Строка(ДокументовКОбработке));
		
		Если НЕ (СтрокаТаблицы.DocumentType = "XmlTorg12" ИЛИ СтрокаТаблицы.DocumentType = "XmlAcceptanceCertificate" ИЛИ СтрокаТаблицы.DocumentType = "Invoice") Тогда
			
			СтрокаТаблицы.Вкл = Ложь;
			СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Пропустить;
			
			Окончание = "";
			Если СтрокаТаблицы.DocumentType = "Nonformalized" Тогда
				Окончание = "неформализованных документов";
			ИначеЕсли СтрокаТаблицы.DocumentType = "NonformalizedProforma" Тогда
				Окончание = "документа ""Счет на оплату""";
			ИначеЕсли СтрокаТаблицы.DocumentType = "Contract" Тогда
				Окончание = "договоров";
			ИначеЕсли СтрокаТаблицы.DocumentType = "ReconciliationAct" Тогда
				Окончание = "актов сверки";
			ИначеЕсли СтрокаТаблицы.DocumentType = "TrustConnectionRequest" Тогда
				Окончание = "приглашений";
			ИначеЕсли СтрокаТаблицы.DocumentType = "ServiceDetails" Тогда
				Окончание = "детализаций";
			ИначеЕсли СтрокаТаблицы.DocumentType = "InvoiceCorrection" Тогда
				Окончание = "корректировочных счетов-фактур";
			ИначеЕсли СтрокаТаблицы.DocumentType = "InvoiceRevision" Тогда
				Окончание = "исправлений счетов-фактур";
			ИначеЕсли СтрокаТаблицы.DocumentType = "InvoiceCorrectionRevision" Тогда
				Окончание = "исправлений корректировочных счетов-фактур";
			ИначеЕсли СтрокаТаблицы.DocumentType = "PriceListAgreement" Тогда
				Окончание = "протоколов согласования цены";
			ИначеЕсли СтрокаТаблицы.DocumentType = "CertificateRegistry" Тогда
				Окончание = "реестров сертификатов";
			ИначеЕсли СтрокаТаблицы.DocumentType = "SupplementaryAgreement" Тогда
				Окончание= "дополнительного соглашения к договору";
			Иначе
				Окончание= "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Окончание) Тогда
				СтрокаТаблицы.КомментарийКДействию= "Текущая версия интеграционного модуля не поддерживает групповую обработку "+Окончание+".";
			Иначе
				СтрокаТаблицы.КомментарийКДействию= "Не определено тип документа";
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если  найти(СтрокаТаблицы.СостояниеДокументооборота, "Аннулирован")>0 Тогда
			СтрокаТаблицы.Вкл = Ложь;
			СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Пропустить;
		    СтрокаТаблицы.КомментарийКДействию = "Документ аннулирован";
		КонецЕсли;
		

		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КонтентДокумента)
			И НЕ (ЗначениеЗаполнено(СтрокаТаблицы.СвязанныйДокументId) ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.КонтентСвязанногоДокумента)) Тогда
		
			КонтентКэш 		= МетодКлиента("Модуль_Клиент","ПолучитьЗначениеКонтентаКэш", СтрокаТаблицы.BoxId, СтрокаТаблицы.DocumentId);
			Document 		= КонтентКэш.Document;
			DocumentContent	= КонтентКэш.Content;
			
			Попытка 
				
				Если ЭтоФормализованныйТОРГ12(СтрокаТаблицы.DocumentType) Тогда
					СтруктураКонтента = Новый_Torg12SellerContent();
					ЗаполнитьСтруктуруПоКонтенту(DocumentContent, СтруктураКонтента, "XmlTorg12Content");
				ИначеЕсли ЭтоФормализованныйАктОВыполненииРабот(СтрокаТаблицы.DocumentType) Тогда	
					СтруктураКонтента = Новый_AcceptanceCertificateSellerContent();
					ЗаполнитьСтруктуруПоКонтенту(DocumentContent, СтруктураКонтента, "XmlAcceptanceCertificate");
				ИначеЕсли ЭтоСчетФактура(СтрокаТаблицы.DocumentType) Тогда
					Если СтрокаТаблицы.DocumentType = "Invoice" ИЛИ СтрокаТаблицы.DocumentType = "InvoiceRevision" Тогда
						СтруктураКонтента = Новый_InvoiceContent();
						ЗаполнитьСтруктуруПоКонтенту(DocumentContent, СтруктураКонтента, "InvoiceContent");
					ИначеЕсли СтрокаТаблицы.DocumentType = "InvoiceCorrection" ИЛИ СтрокаТаблицы.DocumentType = "InvoiceCorrectionRevision" Тогда
						СтруктураКонтента = Новый_InvoiceCorrectionContent();
						ЗаполнитьСтруктуруПоКонтенту(DocumentContent, СтруктураКонтента, "InvoiceCorrectionContent");
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
				СтрокаТаблицы.КомментарийКДействию = ТекстОшибки;
				Продолжить;
			КонецПопытки; 
			
			СтруктураКонтента.Вставить("Type", СтрокаТаблицы.DocumentType);
			СтруктураКонтента.Вставить("DocumentId", Document.DocumentId);
			Если ЭтоФормализованныйАктОВыполненииРабот(СтрокаТаблицы.DocumentType) Тогда
				СтруктураКонтента.Вставить("OrganizationInn", Document.Organization.Inn);
				СтруктураКонтента.Вставить("OrganizationKpp", Document.Organization.Kpp);
			Иначе
				СтруктураКонтента.Вставить("OrganizationInn", DocumentContent.buyer.Inn);
				СтруктураКонтента.Вставить("OrganizationKpp", DocumentContent.buyer.KPP);
			КонецЕсли;
			Если ЭтоСчетФактура(СтрокаТаблицы.DocumentType) Тогда
				СтруктураКонтента.Вставить("ВыставленЗапросНаУточнение", Document.AmendmentRequested);
			КонецЕсли;
						
			СтрокаТаблицы.КонтентДокумента = СтруктураКонтента; 
									
			МассивДанныхПодчиненныхДокументов = ПолучитьДанныеСвязанныхDocument(Document);
			Если НЕ МассивДанныхПодчиненныхДокументов.Количество()=0 Тогда
				
				Если ЭтоФормализованныйТОРГ12(СтрокаТаблицы.DocumentType) 
					ИЛИ ЭтоФормализованныйАктОВыполненииРабот(СтрокаТаблицы.DocumentType) Тогда
					
					КонтентНайден = Ложь;
					
					Если ДокументБезНДС(СтрокаТаблицы.КонтентДокумента) Тогда	
						Попытка
							СтрокаТаблицы.НомерАкта = ПолучитьНомерАктаПоDocument(Document, СтрокаТаблицы.КонтентДокумента);
						Исключение
							Сообщить(ОписаниеОшибки());	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(СтрокаТаблицы.НомерАкта) Тогда
							КонтентНайден = Истина;
						КонецЕсли; 
					КонецЕсли;
					
					Если НЕ КонтентНайден Тогда 
						
						Для каждого ДанныеПодчиненныйДокумент из МассивДанныхПодчиненныхДокументов Цикл
							ТипСвязанногоДокумента = ДанныеПодчиненныйДокумент.Document.Type;
							Если ЭтоСчетФактура(ТипСвязанногоДокумента) Тогда
								
								Попытка
									СтрокаТаблицы.НомерАкта = ПолучитьНомерАктаПоDocument(ДанныеПодчиненныйДокумент.Document, ДанныеПодчиненныйДокумент.Content);
								Исключение
									Сообщить(ОписаниеОшибки());	
								КонецПопытки;
								
								Попытка
									
									Если ТипСвязанногоДокумента = "Invoice" ИЛИ ТипСвязанногоДокумента = "InvoiceRevision" Тогда
										СтруктураКонтентаСвязанного = Новый_InvoiceContent();
										ЗаполнитьСтруктуруПоКонтенту(ДанныеПодчиненныйДокумент.Content, СтруктураКонтентаСвязанного, "InvoiceContent");
									ИначеЕсли ТипСвязанногоДокумента = "InvoiceCorrection" ИЛИ ТипСвязанногоДокумента = "InvoiceCorrectionRevision" Тогда
										СтруктураКонтентаСвязанного = Новый_InvoiceCorrectionContent();
										ЗаполнитьСтруктуруПоКонтенту(ДанныеПодчиненныйДокумент.Content, СтруктураКонтентаСвязанного, "InvoiceCorrectionContent");
									КонецЕсли;
									КонтентНайден = истина;
									
								Исключение
									ТекстОшибки = ОписаниеОшибки();
									
									СтрокаТаблицы.Вкл = Ложь;
									СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
									СтрокаТаблицы.КомментарийКДействию = ТекстОшибки;
									Продолжить;
								КонецПопытки;
								
								ДополнитьСтруктуруКонтентаСвязанногоДокумента(Document, DocumentContent, СтруктураКонтентаСвязанного, ДанныеПодчиненныйДокумент);
								ЗакэшироватьСтруктуруСКонтентомСвязанногоДокумента(СтрокаТаблицы, СтруктураКонтентаСвязанного, ДанныеПодчиненныйДокумент);
								
							КонецЕсли;
							Если КонтентНайден Тогда
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					
				ИначеЕсли ЭтоСчетФактура(СтрокаТаблицы.DocumentType) Тогда
					
					Попытка
						СтрокаТаблицы.НомерАкта = ПолучитьНомерАктаПоDocument(Document, DocumentContent);
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
					 					
					КонтентНайден = Ложь;
					Для каждого ДанныеПодчиненныйДокумент из МассивДанныхПодчиненныхДокументов Цикл
						ТипСвязанногоДокумента = ДанныеПодчиненныйДокумент.Document.Type;
						Если ЭтоФормализованныйТОРГ12(ТипСвязанногоДокумента) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(ТипСвязанногоДокумента) Тогда
							
							Если ДокументБезНДС(СтрокаТаблицы.КонтентДокумента) Тогда
								Попытка
									НомерАкта = ПолучитьНомерАктаПоDocument(ДанныеПодчиненныйДокумент.Document, ДанныеПодчиненныйДокумент.Content);
									Если ЗначениеЗаполнено(НомерАкта) Тогда
										СтрокаТаблицы.НомерАкта = НомерАкта;
									КонецЕсли;
								Исключение
									Сообщить(ОписаниеОшибки());
								КонецПопытки;
							КонецЕсли;
							
							Попытка
								Если ЭтоФормализованныйАктОВыполненииРабот(ТипСвязанногоДокумента) Тогда
									СтруктураКонтентаСвязанного = Новый_AcceptanceCertificateSellerContent();
									ЗаполнитьСтруктуруПоКонтенту(ДанныеПодчиненныйДокумент.Content, СтруктураКонтентаСвязанного, "XmlAcceptanceCertificate");
									КонтентНайден = Истина;
								КонецЕсли;
								Если ЭтоФормализованныйТОРГ12(ТипСвязанногоДокумента) Тогда 
									СтруктураКонтентаСвязанного = Новый_Torg12SellerContent();
									ЗаполнитьСтруктуруПоКонтенту(ДанныеПодчиненныйДокумент.Content, СтруктураКонтентаСвязанного, "XmlTorg12Content");
									КонтентНайден = Истина;
								КонецЕсли;	
							Исключение
								ТекстОшибки = ОписаниеОшибки();
								
								СтрокаТаблицы.Вкл = Ложь;
								СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
								СтрокаТаблицы.КомментарийКДействию = ТекстОшибки;
								Продолжить;	
							КонецПопытки;

							
							ДополнитьСтруктуруКонтентаСвязанногоДокумента(Document, DocumentContent, СтруктураКонтентаСвязанного, ДанныеПодчиненныйДокумент);
							ЗакэшироватьСтруктуруСКонтентомСвязанногоДокумента(СтрокаТаблицы, СтруктураКонтентаСвязанного, ДанныеПодчиненныйДокумент);
														
						КонецЕсли;
												
						Если КонтентНайден Тогда
							Продолжить;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли ЭтоФормализованныйТОРГ12(СтрокаТаблицы.DocumentType) И ДокументБезНДС(СтрокаТаблицы.КонтентДокумента) Тогда
				
				Попытка
					СтрокаТаблицы.НомерАкта = ПолучитьНомерАктаПоDocument(Document, СтрокаТаблицы.КонтентДокумента);
				Исключение
					Сообщить(ОписаниеОшибки());	
				КонецПопытки;
				
			Иначе
				
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ОшибкаОбработки;
				СтрокаТаблицы.КомментарийКДействию	= "Не найден связанный документ";
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументовОбработано = ДокументовОбработано + 1;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументБезНДС(DocumentContent) Экспорт
	
	// Документ "Акт о выполнении работ в формате ФНС" не содержит поле "Ставка НДС" (TaxRate), поэтому ориентируемся на поле "Сумма НДС" (Vat).
	Если DocumentContent.Type = "XmlAcceptanceCertificate" Тогда
		ИмяПоля= "Vat";
	Иначе
		ИмяПоля= "TaxRate";
	КонецЕсли;
	
	ВГраница= DocumentContent.Items.ВГраница();
	
	Для Каждого Item ИЗ DocumentContent.Items Цикл
		
		ЗначениеПоля= Item[ИмяПоля];
		
		Если ЗначениеЗаполнено(ЗначениеПоля) 
			 И (ИмяПоля= "Vat" 							   // Для поля "Vat" достаточно того что значение заполнено.
				ИЛИ НРег(СокрЛП(ЗначениеПоля))<>"без ндс") // Для поля "TaxRate" нужно проверить, что ставка НДС не равна "без ндс".
		Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗакэшироватьСтруктуруСКонтентомСвязанногоДокумента(СтрокаТаблицы, СтруктураКонтентаСвязанного, ДанныеПодчиненныйДокумент)
	
	//ищем связанный документ в таблице документов
	НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId", ДанныеПодчиненныйДокумент.DocumentId, ДанныеПодчиненныйДокумент.BoxId));
	Если НайденныеСтроки.Количество()=0 Тогда
		//не нашли - записываем в текущюю строку
		СтрокаТаблицы.КонтентСвязанногоДокумента = СтруктураКонтентаСвязанного;
	Иначе
		//нашли - делаем ссылку на связанный док
		СтрокаТаблицы.СвязанныйДокументId = ДанныеПодчиненныйДокумент.DocumentId;
		
		//в строке связанного - делаем ссылку на связанный и запоминаем контент
		НайденнаяСтрока = НайденныеСтроки[0];
		Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.КонтентДокумента) Тогда
			НайденнаяСтрока.КонтентДокумента = СтруктураКонтентаСвязанного;
		КонецЕсли;
		НайденнаяСтрока.СвязанныйДокументId = СтрокаТаблицы.DocumentId;
		НайденнаяСтрока.НомерАкта = СтрокаТаблицы.НомерАкта;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСтруктуруКонтентаСвязанногоДокумента(Document, DocumentContent, СтруктураКонтентаСвязанного, ДанныеПодчиненныйДокумент)
	
	Если НЕ СтруктураКонтентаСвязанного = Неопределено Тогда
		СтруктураКонтентаСвязанного.Вставить("Type", ДанныеПодчиненныйДокумент.Document.Type);
		СтруктураКонтентаСвязанного.Вставить("DocumentId", ДанныеПодчиненныйДокумент.Document.DocumentId);
		Если ЭтоФормализованныйАктОВыполненииРабот(Document.Type) Тогда
			СтруктураКонтентаСвязанного.Вставить("OrganizationInn", Document.Organization.Inn);
			СтруктураКонтентаСвязанного.Вставить("OrganizationKpp", Document.Organization.Kpp);
		Иначе
			СтруктураКонтентаСвязанного.Вставить("OrganizationInn", DocumentContent.buyer.Inn);
			СтруктураКонтентаСвязанного.Вставить("OrganizationKpp", DocumentContent.buyer.KPP);
		КонецЕсли;
		
		Если ЭтоСчетФактура(ДанныеПодчиненныйДокумент.Document.Type) Тогда
			СтруктураКонтентаСвязанного.Вставить("ВыставленЗапросНаУточнение", ДанныеПодчиненныйДокумент.Document.AmendmentRequested);
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПровестиАнализДокументовНаСервере(СтруктураДействийПоДокументу, СтруктураРаботаСНомеромАкта)
	
	ОтмеченныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		
	Для каждого СтрокаТаблицы из ОтмеченныеСтроки Цикл
						
		Попытка
			НайтиСопоставяемыйДокументВ1С(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, СтруктураДействийПоДокументу);
			
			Если (СтрокаТаблицы.КомментарийКДействию = "") И (НЕ СтрокаТаблицы.СопоставляемыйДокумент1С = Неопределено) Тогда
				
				РезультатПроверкиПакета = ВыполнитьПроверкуПакета(СтрокаТаблицы, ОбработкаОбъект);
				
				ИнтерпритироватьРезультатПроверкиПакета(СтрокаТаблицы, РезультатПроверкиПакета, СтруктураДействийПоДокументу);
								
			КонецЕсли;
		Исключение
			СтрокаТаблицы.Вкл = Ложь;
			СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ОшибкаОбработки;
			СтрокаТаблицы.КомментарийКДействию 	= ОписаниеОшибки();
		КонецПопытки;
						
	КонецЦикла;
	
КонецПроцедуры


	////////////////////////////////////////////////////////////////////////////////
	//{ Поиск сопоставляемого документа
	
	&НаСервере
	Процедура НайтиСопоставяемыйДокументВ1С(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, СтруктураДействийПоДокументу)
		
		Если СтрокаТаблицы.DocumentType = "XmlTorg12"
			ИЛИ СтрокаТаблицы.DocumentType = "XmlAcceptanceCertificate" Тогда
			
			Если СтрокаТаблицы.Status = "InboundWaitingForRecipientSignature" Тогда //ЭтоВходящийДокЕщеБезПодписиИОтказа
				
				Попытка
					Если ЗначениеЗаполнено(СтрокаТаблицы.НомерАкта) = Истина Тогда
						ДанныеDocument = Новый Структура;
						ДанныеDocument.Вставить("DocumentDate", 	СтрокаТаблицы.КонтентДокумента.Date);
						ДанныеDocument.Вставить("DocumentNumber", 	СтрокаТаблицы.КонтентДокумента.Number);
						ДанныеDocument.Вставить("DocumentType", 	СтрокаТаблицы.КонтентДокумента.Type);
						СтрокаТаблицы.СопоставляемыйДокумент1С = НайтиДокументВ1С(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument);
					Иначе
						СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ОтказатьВПодписи;
						СтрокаТаблицы.КомментарийКДействию 	= "В электронном документе не указан номер акта приемки.";	
					КонецЕсли;
				Исключение 
					ТекстОшибки = ОписаниеОшибки();
					Если Найти(ТекстОшибки, "Ошибка валидации")=0 Тогда
						ВызватьИсключение(ТекстОшибки);
					Иначе

						Если НЕ Найти(ТекстОшибки, "не сопоставлен контрагенту в 1С")=0 Тогда
							СтрокаТаблицы.СостояниеОбработки =	СтруктураДействийПоДокументу.Пропустить;
						Иначе
							СтрокаТаблицы.СостояниеОбработки =	СтруктураДействийПоДокументу.ОтказатьВПодписи;
						КонецЕсли;
						
						ТекстКомментария = ФорматироватьТекстОшибки(ТекстОшибки);
											
						ПодстрокаПоиска = "В счете-фактуре не указан дополнительный параметр";
						Если НЕ Найти(ТекстКомментария, ПодстрокаПоиска)=0 Тогда
							ПодстрокаЗамены = "В связанном счете-фактуре не указан дополнительный параметр"; //! отследить замену
							ТекстКомментария = СтрЗаменить(ТекстКомментария, ПодстрокаПоиска, ПодстрокаЗамены);
						КонецЕсли;
						СтрокаТаблицы.КомментарийКДействию = ТекстКомментария;
						СтрокаТаблицы.ТекстОшибки = ТекстКомментария;
						
					КонецЕсли;
				КонецПопытки;
				
			Иначе
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.Пропустить;
			    СтрокаТаблицы.КомментарийКДействию 	= "Документ был обработан ранее.";
			КонецЕсли;		
			
		ИначеЕсли ЭтоСчетФактура(Лев(СтрокаТаблицы.DocumentType, 7)) Тогда
			
			ВыставленЗапросНаУточнение = ?(НЕ СтрокаТаблицы.КонтентДокумента.ВыставленЗапросНаУточнение=Неопределено, СтрокаТаблицы.КонтентДокумента.ВыставленЗапросНаУточнение, Ложь);
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПервичныйДокумент) И (НЕ ВыставленЗапросНаУточнение И СтрокаТаблицы.СостояниеДокументооборота<>"Документооборот завершен. Требует уточнения") Тогда
				Попытка
					Если ЗначениеЗаполнено(СтрокаТаблицы.НомерАкта)=Истина Тогда
						СтрокаТаблицы.СопоставляемыйДокумент1С = НайтиРасходнуюНакладнуюОснованиеДляСчетаФактуры(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект);
					Иначе
						СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ЗапроситьУточнение;
						СтрокаТаблицы.КомментарийКДействию 	= "В электронном документе не указан номер акта приемки.";
					КонецЕсли;
				Исключение 
					ТекстОшибки = ОписаниеОшибки();
					Если Найти(ТекстОшибки, "Ошибка валидации")=0 Тогда
						ВызватьИсключение(ТекстОшибки);
					Иначе 
						Если НЕ Найти(ТекстОшибки, "не сопоставлен контрагенту в 1С")=0 Тогда
							СтрокаТаблицы.СостояниеОбработки =	СтруктураДействийПоДокументу.Пропустить;
						Иначе
							СтрокаТаблицы.СостояниеОбработки =	СтруктураДействийПоДокументу.ЗапроситьУточнение;
						КонецЕсли;
						
						ТекстКомментария = ФорматироватьТекстОшибки(ТекстОшибки);
						СтрокаТаблицы.КомментарийКДействию = ТекстКомментария;
						СтрокаТаблицы.ТекстОшибки = ФорматироватьТекстОшибки(ТекстОшибки);
											
					КонецЕсли;
				КонецПопытки;
			Иначе
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Пропустить;
				Если ВыставленЗапросНаУточнение или СтрокаТаблицы.СостояниеДокументооборота = "Документооборот завершен. Требует уточнения" Тогда
					СтрокаТаблицы.КомментарийКДействию = "По документу выставлен запрос на уточнение";
				Иначе
					СтрокаТаблицы.КомментарийКДействию = "Документ уже сопоставлен";
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;	
		
	КонецПроцедуры

	&НаСервере
	Функция НайтиРасходнуюНакладнуюОснованиеДляСчетаФактуры(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект)
			
		Если ЗначениеЗаполнено(СтрокаТаблицы.СвязанныйДокументId) Тогда
			
			НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId", СтрокаТаблицы.СвязанныйДокументId, СтрокаТаблицы.BoxId));
			Если НЕ НайденныеСтроки.Количество()=0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				ДанныеDocument = Новый Структура;
				ДанныеDocument.Вставить("DocumentDate", 	НайденнаяСтрока.КонтентДокумента.Date);
				ДанныеDocument.Вставить("DocumentNumber", 	НайденнаяСтрока.КонтентДокумента.Number);
				ДанныеDocument.Вставить("DocumentType", 	НайденнаяСтрока.КонтентДокумента.Type);
				СсылкаРНК =	НайтиДокументВ1С(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument);
				Если НЕ СсылкаРНК = Неопределено Тогда
					Возврат СсылкаРНК;
				КонецЕсли;
			Иначе
				ВызватьИсключение("Ошибка валидации: Для счет-фактуры нет связанного Торг-12");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КонтентСвязанногоДокумента) Тогда
			
			ДанныеDocument = Новый Структура;
			ДанныеDocument.Вставить("DocumentDate", 	СтрокаТаблицы.КонтентСвязанногоДокумента.Date);
			ДанныеDocument.Вставить("DocumentNumber", 	СтрокаТаблицы.КонтентСвязанногоДокумента.Number);
			ДанныеDocument.Вставить("DocumentType", 	СтрокаТаблицы.КонтентСвязанногоДокумента.Type);
			СсылкаРНК =	НайтиДокументВ1С(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument);
			
			Если НЕ СсылкаРНК = Неопределено Тогда
				Возврат СсылкаРНК;
			КонецЕсли;
			
		КонецЕсли;
			
		ВызватьИсключение("Ошибка валидации: Для счет-фактуры нет связанного Торг-12");
		
	КонецФункции

	&НаСервере
	Функция НайтиДокументВ1С(СтрокаТаблицы, СтруктураРаботаСНомеромАкта=Неопределено, ОбработкаОбъект=Неопределено, ДанныеDocument)
		
		ТипДокументов =	?(Найти(ДанныеDocument.DocumentType, "Invoice") > 0, "СчетФактураПолученный", "ПоступлениеТоваровУслуг");
			
		СтруктураПервичныйДокумент = НайтиПервичныйДокументНаСервере(СтрокаТаблицы, ТипДокументов, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument);
						
		Если СтруктураПервичныйДокумент.ТекстОшибки="" Тогда
			Возврат СтруктураПервичныйДокумент.ПервичныйДокумент;
		Иначе
			ВызватьИсключение(СтруктураПервичныйДокумент.ТекстОшибки);
		КонецЕсли;
		
	КонецФункции

	&НаСервере
	Функция НайтиПервичныйДокументНаСервере(СтрокаТаблицы, ТипДокументов, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument)
		
		МассивФильтровДляЗапроса = СформироватьМассивФильтровДляЗапроса(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument);
		Если СтруктураРаботаСНомеромАкта.Свойство("МестоХраненияНомераАкта") Тогда
			Если СтруктураРаботаСНомеромАкта.МестоХраненияНомераАкта = "ДополнительнымРеквизитом" Тогда
				МассивФильтровПоДопСвойству = СформироватьМассивФильтровПоДопСвойству(СтрокаТаблицы, СтруктураРаботаСНомеромАкта);	
			КонецЕсли;
		КонецЕсли;
		
		Запрос = "";
		ТекстОшибки = "";
		ПервичныйДокумент = "";
		
		Если СтруктураРаботаСНомеромАкта.Свойство("МестоХраненияНомераАкта") Тогда
			
			Если СтруктураРаботаСНомеромАкта.МестоХраненияНомераАкта = "ДополнительнымРеквизитом" Тогда
				Запрос = ПолучитьЗапросДопРеквизит(ТипДокументов, МассивФильтровДляЗапроса, МассивФильтровПоДопСвойству);
			Иначе
				Запрос = ПолучитьСтандартныйЗапрос(ТипДокументов, МассивФильтровДляЗапроса);		
			КонецЕсли;
			
		Иначе
			Запрос = ПолучитьСтандартныйЗапрос(ТипДокументов, МассивФильтровДляЗапроса);		
		КонецЕсли;
		
		Если НЕ Запрос="" Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если НЕ Выборка.Количество()=0 Тогда
				Выборка.Следующий();
				
				ПервичныйДокумент =	Выборка.Док;
			Иначе
				ТекстОшибки = "Ошибка валидации: В нашей базе не найден документ по номеру акта приемки: " + СтрокаТаблицы.НомерАкта;	
			КонецЕсли;
		Иначе
			ТекстОшибки = "Не сформирован текст запроса";	
		КонецЕсли;
		
		Возврат Новый Структура("ПервичныйДокумент, ТекстОшибки", ПервичныйДокумент, ТекстОшибки);
		
	КонецФункции

	&НаСервере
	Функция СформироватьМассивФильтровДляЗапроса(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument)
				
		МассивФильтров = Новый Массив();
		
		ДобавитьОбщиеФильтры(МассивФильтров, СтрокаТаблицы, ОбработкаОбъект);
		ДобавитьКастомныеФильтры(МассивФильтров, ДанныеDocument, СтрокаТаблицы, СтруктураРаботаСНомеромАкта);
		
		Возврат МассивФильтров;
		
	КонецФункции

	&НаСервере
	Процедура ДобавитьОбщиеФильтры(МассивФильтров, СтрокаТаблицы, ОбработкаОбъект)
			
		ДобавитьФильтр(МассивФильтров, "Организация", 	МетодСервера(,"BoxID_2_Организация", СтрокаТаблицы.BoxID));
		ДобавитьФильтр(МассивФильтров, "Контрагент", 	МетодСервера(,"CounteragentBoxID_2_Контрагент", СтрокаТаблицы.CounteragentID));
		
	КонецПроцедуры

	&НаСервере
	Процедура ДобавитьКастомныеФильтры(МассивФильтров, ДанныеDocument, СтрокаТаблицы, СтруктураРаботаСНомеромАкта)
				
		Если СтруктураРаботаСНомеромАкта.Свойство("МестоХраненияНомераАкта") Тогда
			Если СтруктураРаботаСНомеромАкта.МестоХраненияНомераАкта="ДополнительнымРеквизитом" Тогда
				ДобавитьФильтрыДопРеквизит(МассивФильтров, ДанныеDocument);
			ИначеЕсли СтруктураРаботаСНомеромАкта.МестоХраненияНомераАкта="СпециальнымРеквизитом" Тогда
				ДобавитьФильтрыСпециальныйРеквизит(МассивФильтров, СтрокаТаблицы, ДанныеDocument, СтруктураРаботаСНомеромАкта);
			КонецЕсли;
		Иначе
			ДобавитьФильтрыНомерВходящегоДокумента(МассивФильтров, СтрокаТаблицы, ДанныеDocument);
		КонецЕсли;
		
	КонецПроцедуры

	&НаСервере
	Процедура ДобавитьФильтрыДопРеквизит(МассивФильтров, ДанныеDocument)
		
		Если ЭтоФормализованныйТОРГ12(ДанныеDocument.DocumentType) 
			ИЛИ ЭтоФормализованныйАктОВыполненииРабот(ДанныеDocument.DocumentType) Тогда 
			
			ДопУсловие = Новый Структура("Условие, ПараметрУсловия", "НАЧАЛОПЕРИОДА", "ГОД");
			ДобавитьФильтр(МассивФильтров, "Дата", НачалоГода(ДанныеDocument.DocumentDate), ДопУсловие);
			
		ИначеЕсли ЭтоСчетФактура(ЛЕВ(ДанныеDocument.DocumentType, 7)) Тогда	
			
			ДобавитьФильтр(МассивФильтров, "НомерВходящегоДокумента", ДанныеDocument.DocumentNumber);
			ДобавитьФильтр(МассивФильтров, "ДатаВходящегоДокумента", НачалоГода(ДанныеDocument.DocumentDate));
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ДобавитьФильтрыСпециальныйРеквизит(МассивФильтров, СтрокаТаблицы, ДанныеDocument, СтруктураРаботаСНомеромАкта)
		
		Если ЭтоФормализованныйТОРГ12(ДанныеDocument.DocumentType) 
			ИЛИ ЭтоФормализованныйАктОВыполненииРабот(ДанныеDocument.DocumentType) Тогда
			
			ПараметрыХраненияНомераАкта = СтруктураРаботаСНомеромАкта.ПараметрыХраненияНомераАкта;
			ИмяРеквизита = ПараметрыХраненияНомераАкта.ИмяРеквизита;
			
			ДопУсловие = Новый Структура("Условие, ПараметрУсловия", "ВЫРАЗИТЬ", "СТРОКА(255)");
			ДобавитьФильтр(МассивФильтров, ИмяРеквизита, СтрокаТаблицы.НомерАкта, ДопУсловие);
						
			ДопУсловие = Новый Структура("Условие, ПараметрУсловия", "НАЧАЛОПЕРИОДА", "ГОД");
			ДобавитьФильтр(МассивФильтров, "Дата", НачалоГода(ДанныеDocument.DocumentDate), ДопУсловие);
			
		ИначеЕсли ЭтоСчетФактура(Лев(ДанныеDocument.DocumentType, 7)) Тогда	
			
			ДобавитьФильтр(МассивФильтров, "НомерВходящегоДокумента", ДанныеDocument.DocumentNumber);
			ДобавитьФильтр(МассивФильтров, "ДатаВходящегоДокумента", НачалоГода(ДанныеDocument.DocumentDate));
			
			ДобавитьФильтр(МассивФильтров, ИмяРеквизита, СтрокаТаблицы.НомерАкта);
			
		КонецЕсли;	
	КонецПроцедуры

	&НаСервере
	Процедура ДобавитьФильтрыНомерВходящегоДокумента(МассивФильтров, СтрокаТаблицы, ДанныеDocument)
				
		Если ДанныеDocument.DocumentType = "XmlAcceptanceCertificate" 
			ИЛИ ДанныеDocument.DocumentType = "XmlTorg12" Тогда
							
			ДобавитьФильтр(МассивФильтров, "НомерВходящегоДокумента", СтрокаТаблицы.НомерАкта);
					
			ДопУсловие=	Новый Структура("Условие, ПараметрУсловия", "НАЧАЛОПЕРИОДА", "ГОД");
			ДобавитьФильтр(МассивФильтров, "Дата", НачалоГода(ДанныеDocument.DocumentDate), ДопУсловие);
			
		ИначеЕсли Лев(ДанныеDocument.DocumentType, 7) = "Invoice" Тогда	
			
			ДобавитьФильтр(МассивФильтров, "НомерВходящегоДокумента", ДанныеDocument.DocumentNumber);
			ДобавитьФильтр(МассивФильтров, "ДатаВходящегоДокумента", НачалоГода(ДанныеDocument.DocumentDate));
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаСервере
	Функция СформироватьМассивФильтровПоДопСвойству(СтрокаТаблицы, СтруктураРаботаСНомеромАкта)
		
		МассивФильтровПоДопСвойствам = Новый Массив();
		
		ПараметрыХраненияНомераАкта = СтруктураРаботаСНомеромАкта.ПараметрыХраненияНомераАкта;
		ЗначениеСвойства = ПараметрыХраненияНомераАкта.ИмяРеквизита;
		
		ДобавитьФильтр(МассивФильтровПоДопСвойствам, "Свойство", ЗначениеСвойства);
		
		НомерАктаПриемки = СтрокаТаблицы.НомерАкта;
				
		ДобавитьФильтр(МассивФильтровПоДопСвойствам, "Значение", НомерАктаПриемки);
		
		Возврат МассивФильтровПоДопСвойствам;
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Процедура ДобавитьФильтр(НаборФильтров, Поле, Значение, ДопУсловие =  Неопределено, ИспользоватьВхождение =  Ложь)
		
		Фильтр=	Новый Структура();
		Фильтр.Вставить("Поле", 		Поле);
		Фильтр.Вставить("Значение", 	Значение);
		Фильтр.Вставить("ДопУсловие", 	ДопУсловие);
		Фильтр.Вставить("ВидСравнения", ?(ИспользоватьВхождение, "В", "="));
		
		НаборФильтров.Добавить(Фильтр);
		
	КонецПроцедуры
	
	&НаСервереБезКонтекста
	Функция ПолучитьСтандартныйЗапрос(ТипДокументов, НаборФильтров)
				
		Запрос = Новый Запрос;
		
		Если ТипДокументов = "ПоступлениеТоваровУслуг" Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка Док
			|ИЗ
			|	Документ." + ТипДокументов + " КАК Док
			|ГДЕ
			|	Док.пометкаУдаления = Ложь";
			Для каждого Фильтр Из НаборФильтров Цикл
				
				Если НЕ Фильтр.ДопУсловие = Неопределено
					И Фильтр.ДопУсловие.Условие = "ВЫРАЗИТЬ" Тогда
					
					Запрос.Текст = Запрос.Текст + "
					| И " + Фильтр.ДопУсловие.Условие 
					+ "(Док." + Фильтр.Поле +  " КАК " + Фильтр.ДопУсловие.ПараметрУсловия
					+ ")" + Фильтр.ВидСравнения + "(&пар" + Фильтр.Поле + ")";
					Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
					
				Иначе
					Запрос.Текст = Запрос.Текст + "
					| И " + ?(Фильтр.ДопУсловие = Неопределено, "", Фильтр.ДопУсловие.Условие) 
					+ "(Док." + Фильтр.Поле +  ?(Фильтр.ДопУсловие = Неопределено, "", ", " + Фильтр.ДопУсловие.ПараметрУсловия)
					+ ")" + Фильтр.ВидСравнения + "(&пар" + Фильтр.Поле + ")";
					Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
									
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка Док
			|ИЗ
			|	Документ." + ТипДокументов + ".ДокументыОснования КАК Док
			|ГДЕ
			|   Док.Ссылка.пометкаУдаления  = Ложь";
			Для каждого Фильтр Из НаборФильтров Цикл
				Если Фильтр.Значение <> Неопределено Тогда
					Если Найти(Фильтр.Поле, "Склад") > 0 Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И Док.ДокументОснование." + Фильтр.Поле + " " + Фильтр.ВидСравнения + " " + "(&пар" + Фильтр.Поле + ")";
						Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
					Иначе	
						Запрос.Текст = Запрос.Текст + "
						|	И Док.Ссылка." + Фильтр.Поле + Фильтр.ВидСравнения + "(&пар" + Фильтр.Поле + ")";
						Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Возврат Запрос;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьЗапросДопРеквизит(ТипДокументов, МассивФильтровДляЗапроса, МассивФильтровПоДопСвойству)
		
		Запрос = Новый Запрос;
		
		Если ТипДокументов = "ПоступлениеТоваровУслуг" Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Док КАК Док,
			|	ЗначенияСвойствОбъектов.Значение КАК ВнешнийНомер
			|ИЗ
			|	(ВЫБРАТЬ
			|		Док.Ссылка Док
			|	ИЗ
			|		Документ." + ТипДокументов + " КАК Док
			|	ГДЕ
			|		Док.Проведен";
			Для каждого Фильтр Из МассивФильтровДляЗапроса Цикл
				Запрос.Текст = Запрос.Текст + "
				| И " + ?(Фильтр.ДопУсловие = Неопределено, "", Фильтр.ДопУсловие.Условие) 
				+ "(Док." + Фильтр.Поле +  ?(Фильтр.ДопУсловие = Неопределено, "", ", " + Фильтр.ДопУсловие.ПараметрУсловия)
				+ ")" + Фильтр.ВидСравнения + "(&пар" + Фильтр.Поле + ")";
				Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
			КонецЦикла;
			Запрос.Текст = Запрос.Текст + ") КАК ВложенныйЗапрос
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
			|	ПО ВложенныйЗапрос.Док = ЗначенияСвойствОбъектов.Объект";
			Если НЕ МассивФильтровПоДопСвойству=Неопределено И НЕ МассивФильтровПоДопСвойству.Количество()=0 Тогда
				Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|	1=1";
				Для каждого Фильтр из МассивФильтровПоДопСвойству Цикл
					Запрос.Текст = Запрос.Текст + "
					| И " + ?(Фильтр.ДопУсловие = Неопределено, "", Фильтр.ДопУсловие.Условие) 
					+ "(ЗначенияСвойствОбъектов." + Фильтр.Поле +  ?(Фильтр.ДопУсловие = Неопределено, "", ", " + Фильтр.ДопУсловие.ПараметрУсловия)
					+ ")" + Фильтр.ВидСравнения + "(&пар" + Фильтр.Поле + ")";
					Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
				КонецЦикла;
			КонецЕсли;
				
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка Док
			|ИЗ
			|	Документ." + ТипДокументов + ".ДокументыОснования КАК Док
			|ГДЕ
			|   Док.Ссылка.Проведен";
			
			Для каждого Фильтр Из МассивФильтровДляЗапроса Цикл
				Если Фильтр.Значение <> Неопределено Тогда
					Если Найти(Фильтр.Поле, "Склад") > 0 Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И Док.ДокументОснование." + Фильтр.Поле + " " + Фильтр.ВидСравнения + " " + "(&пар" + Фильтр.Поле + ")";
						Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
					Иначе	
						Запрос.Текст = Запрос.Текст + "
						|	И Док.Ссылка." + Фильтр.Поле + Фильтр.ВидСравнения + "(&пар" + Фильтр.Поле + ")";
						Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		Возврат Запрос;	
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////
	//} Поиск сопоставляемого документа
	
	
&НаСервере
Функция НайтиПервичныйДокумент(Знач ТипДокументов, Знач МассивФильтровДляЗапроса, Знач СтруктураРаботаСНомеромАкта, Знач МассивФильтровПоДопСвойству=Неопределено)
	
	Запрос = "";
	ТекстОшибки = "";
	ПервичныйДокумент = "";
	
	Если СтруктураРаботаСНомеромАкта.Свойство("МестоХраненияНомераАкта") Тогда
		
		Если СтруктураРаботаСНомеромАкта.МестоХраненияНомераАкта = "ДополнительнымРеквизитом" Тогда
			Запрос = ПолучитьЗапросДопРеквизит(ТипДокументов, МассивФильтровДляЗапроса, МассивФильтровПоДопСвойству);
		Иначе
			Запрос = ПолучитьСтандартныйЗапрос(ТипДокументов, МассивФильтровДляЗапроса);		
		КонецЕсли;
		
	Иначе
		Запрос = ПолучитьСтандартныйЗапрос(ТипДокументов, МассивФильтровДляЗапроса);		
	КонецЕсли;
	
	Если НЕ Запрос="" Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Количество()=0 Тогда
			Выборка.Следующий();
			
			ПервичныйДокумент =	Выборка.Док;
		Иначе
			ТекстОшибки = "Ошибка валидации: В нашей базе не найден документ по номеру акта приемки: ";// + СтрокаТаблицы.НомерАкта;	
		КонецЕсли;
	Иначе
		ТекстОшибки = "Не сформирован текст запроса";	
	КонецЕсли;
	
	Возврат Новый Структура("ПервичныйДокумент, ТекстОшибки", ПервичныйДокумент, ТекстОшибки);
	
КонецФункции


	////////////////////////////////////////////////////////////////////////////////
	//{ Проверка пакета

	&НаСервере
	Функция ВыполнитьПроверкуПакета(СтрокаТаблицы, ОбработкаОбъект)
		
		СписокОшибок = "";
		РезультатПроверкиПакета = Новый Структура("ПрошлаУспешно, СписокОшибок", Истина, СписокОшибок);
							
		ВыполнитьПроверку(РезультатПроверкиПакета, Ложь, "", СтрокаТаблицы, СтрокаТаблицы.КонтентДокумента, ОбработкаОбъект);                                                 
		
		Если ЭтоФормализованныйТОРГ12(СтрокаТаблицы.DocumentType) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(СтрокаТаблицы.DocumentType) Тогда
			
			Если ОрганизацияНаУСН(СтрокаТаблицы.BoxID) = Ложь Тогда
				
				КонтентСвязанногоДокумента = "";
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.СвязанныйДокументId) Тогда
					НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId", СтрокаТаблицы.СвязанныйДокументId, СтрокаТаблицы.BoxId));
					Если НЕ НайденныеСтроки.Количество()=0 Тогда
						НайденнаяСтрока = НайденныеСтроки[0];
						КонтентСвязанногоДокумента = НайденнаяСтрока.КонтентДокумента;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КонтентСвязанногоДокумента) Тогда
					
					КонтентСвязанногоДокумента = СтрокаТаблицы.КонтентСвязанногоДокумента;
					
				ИначеЕсли ДокументБезНДС(СтрокаТаблицы.КонтентДокумента) Тогда
					
					РезультатПроверкиПакета.Вставить("ПрошлаУспешно", Истина);
					РезультатПроверкиПакета.Вставить("СписокОшибок", "");
					
				Иначе
					
					РезультатПроверкиПакета.Вставить("ПрошлаУспешно", Ложь);
					СписокОшибок = РезультатПроверкиПакета.СписокОшибок + Символы.ПС + " Не найдена связанная СФ.";
					РезультатПроверкиПакета.Вставить("СписокОшибок", СписокОшибок);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КонтентСвязанногоДокумента) И ЭтоСчетФактура(КонтентСвязанногоДокумента.Type) Тогда
					ВыполнитьПроверку(РезультатПроверкиПакета, Истина, "Ошибка в связанной СФ:", СтрокаТаблицы, КонтентСвязанногоДокумента, ОбработкаОбъект);
				КонецЕсли;
										
			КонецЕсли;	
			
		ИначеЕсли ЭтоСчетФактура(Лев(СтрокаТаблицы.DocumentType, 7)) Тогда
			
			КонтентСвязанногоДокумента = "";
			СостояниеДокументооборотаСвязанногоДокумента = "";	
			Если ЗначениеЗаполнено(СтрокаТаблицы.СвязанныйДокументId) Тогда
				НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId", СтрокаТаблицы.СвязанныйДокументId, СтрокаТаблицы.BoxId));
				Если НЕ НайденныеСтроки.Количество()=0 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
					КонтентСвязанногоДокумента = НайденнаяСтрока.КонтентДокумента;
					СостояниеДокументооборотаСвязанногоДокумента = НайденнаяСтрока.СостояниеДокументооборота;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КонтентСвязанногоДокумента) Тогда
				
				КонтентСвязанногоДокумента = СтрокаТаблицы.КонтентСвязанногоДокумента;
				
			Иначе
				РезультатПроверкиПакета.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок = РезультатПроверкиПакета.СписокОшибок + Символы.ПС + " Не найден связанный торг-12.";
				РезультатПроверкиПакета.Вставить("СписокОшибок", СписокОшибок);
			КонецЕсли;
			
			Если Найти(СостояниеДокументооборотаСвязанногоДокумента, "Аннулирован")>0 Тогда
				РезультатПроверкиПакета.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок = РезультатПроверкиПакета.СписокОшибок + Символы.ПС + " Связанный торг-12 аннулирован";
				РезультатПроверкиПакета.Вставить("СписокОшибок", СписокОшибок);
				
			ИначеЕсли ЗначениеЗаполнено(КонтентСвязанногоДокумента) 
				И (ЭтоФормализованныйТОРГ12(КонтентСвязанногоДокумента.Type) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(КонтентСвязанногоДокумента.Type)) Тогда
				
				Если ДокументБезНДС(СтрокаТаблицы.КонтентДокумента) Тогда	
					
					Если РезультатПроверкиПакета.ПрошлаУспешно = Истина Тогда
						
						РезультатПроверкиПакета.Вставить("СчетФактураБезНДС", Истина);
						
					КонецЕсли;
					
				Иначе	
					ВыполнитьПроверку(РезультатПроверкиПакета, Истина, "Ошибка в связанной торг-12:", СтрокаТаблицы, КонтентСвязанногоДокумента, ОбработкаОбъект);
				КонецЕсли;	
					
			КонецЕсли;
						
		КонецЕсли;	
		
		РезультатПроверкиПакета.СписокОшибок = СокрЛП(РезультатПроверкиПакета.СписокОшибок);
		
		Возврат РезультатПроверкиПакета;
		
	КонецФункции

	&НаСервере
	Функция ВыполнитьПроверку(РезультатПроверкиПакета, ПроверкаСвязанногоДокумента, КонтекстПроверки, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
				
		СписокОшибок = "";
		РезультатПроверкиДокумента = Новый Структура("ПрошлаУспешно, СписокОшибок", Истина, СписокОшибок);
							
		Если НЕ СтруктураКонтент = Неопределено Тогда
			РезультатПроверкиДокумента = ПроверитьДокумент(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
		    РезультатПроверкиДокумента = ПроверитьОрганизацию(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
			РезультатПроверкиДокумента = ПроверитьКонтрагента(РезультатПроверкиДокумента,  СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
		Иначе
			РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверкиДокумента.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Не удалось получить данные из документа";
			РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);	
		КонецЕсли;
		
		РезультатПроверкиПакета.ПрошлаУспешно = РезультатПроверкиПакета.ПрошлаУспешно И РезультатПроверкиДокумента.ПрошлаУспешно;
		Если РезультатПроверкиДокумента.ПрошлаУспешно = Ложь Тогда 
			РезультатПроверкиПакета.СписокОшибок = РезультатПроверкиПакета.СписокОшибок+" "+?(ЗначениеЗаполнено(КонтекстПроверки), Символы.ПС+КонтекстПроверки, "")+" "+РезультатПроверкиДокумента.СписокОшибок;
		Иначе
			
			Если РезультатПроверкиДокумента.Свойство("ЕстьОтклоненияПоНДС") Тогда
				РезультатПроверкиПакета.Вставить("ЕстьОтклоненияПоНДС", РезультатПроверкиДокумента.ЕстьОтклоненияПоНДС);
			КонецЕсли;
			Если РезультатПроверкиДокумента.Свойство("ЕстьОтклонениеПоСуммеСНДС") Тогда
				РезультатПроверкиПакета.Вставить("ЕстьОтклонениеПоСуммеСНДС", РезультатПроверкиДокумента.ЕстьОтклонениеПоСуммеСНДС);
			КонецЕсли;
			Если РезультатПроверкиДокумента.Свойство("СчетФактураВБазе1СОтсутствует") Тогда
				РезультатПроверкиПакета.Вставить("СчетФактураВБазе1СОтсутствует", РезультатПроверкиДокумента.СчетФактураВБазе1СОтсутствует);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат РезультатПроверкиПакета;
		
	КонецФункции

	&НаСервере
	Функция ПроверитьДокумент(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
		
		Если ЭтоФормализованныйТОРГ12(СтруктураКонтент.Type) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(СтруктураКонтент.Type) Тогда
			
			ПроверитьУчетТорг12Акта(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
			ПроверитьСуммуНДСТорг12Акта(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
			ПроверитьДатуПолученияГруза(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент);
			
		ИначеЕсли ЭтоСчетФактура(Лев(СтруктураКонтент.Type, 7)) Тогда
			
			ПроверитьПериодУчетаСчетФактура(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
			ПроверитьУчетСчетФактура(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
			ПроверитьДатуПоставкиСчетФактура(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент);
			ПроверитьПолеКодВалюты(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент);
			ПроверитьСуммуНДССчетФактура(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
			ПроверитьГТД(РезультатПроверкиДокумента, СтруктураКонтент, ОбработкаОбъект);
			ПроверитьСвидетельство(РезультатПроверкиДокумента, СтруктураКонтент);
			
		КонецЕсли;
		
		Возврат РезультатПроверкиДокумента;
		
	КонецФункции

		&НаСервере
		Процедура ПроверитьУчетТорг12Акта(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
				
			DocID = ПолучитьIDСопоставленногоДокумента1С(ОбработкаОбъект, СтрокаТаблицы.СопоставляемыйДокумент1С);
			Если ЗначениеЗаполнено(DocID) И (НЕ СтруктураКонтент.Documentid = DocID) Тогда 
								
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок = РезультатПроверкиДокумента.СписокОшибок + "Данный документ уже был учтен в электронном виде";		
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
			КонецЕсли;
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьСуммуНДСТорг12Акта(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
				
			СуммаДокумента = СтрокаТаблицы.СопоставляемыйДокумент1С.СуммаДокумента;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				СуммаДокумента = СуммаДокумента + СтрокаТаблицы.СопоставляемыйДокумент1С.ВозвратнаяТара.Итог("Сумма");
			КонецЕсли;
			
			Если ЭтоФормализованныйАктОВыполненииРабот(СтруктураКонтент.Type) Тогда
				СуммаDocument = 0;
				Для каждого Item из СтруктураКонтент.Items Цикл
					СуммаDocument = СуммаDocument + Item.Total;
				КонецЦикла;
			Иначе
				СуммаDocument = СтруктураКонтент.Totals.Total;
			КонецЕсли;
			ОтклонениеПоСуммеСНДС = Окр(СуммаDocument, 2) - Окр(СуммаДокумента, 2);
			Если Макс(ОтклонениеПоСуммеСНДС, -ОтклонениеПоСуммеСНДС)> ПолучитьМаксимальноДопустимоеОтклонениеПоСуммеСНДС(ОбработкаОбъект, СтрокаТаблицы.СопоставляемыйДокумент1С.Организация) Тогда
				
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок = РезультатПроверкиДокумента.СписокОшибок +"
					|Ошибка в сумме с НДС. Ожидаемое значение: "+  СуммаДокумента;
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
				
			ИначеЕсли НЕ ОтклонениеПоСуммеСНДС=0 Тогда
				РезультатПроверкиДокумента.Вставить("ЕстьОтклонениеПоСуммеСНДС", Истина);
			КонецЕсли;	
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьДатуПолученияГруза(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент)
				
			Если НачалоДня(СтрокаТаблицы.СопоставляемыйДокумент1С.Дата) < НачалоДня(СтруктураКонтент.Date) Тогда 
				
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
					|Дата электронного документа ("+формат(СтруктураКонтент.Date, "ДФ=dd.MM.yyyy")+") больше даты фактического получения груза ("+формат(СтрокаТаблицы.СопоставляемыйДокумент1С.Дата, "ДФ=dd.MM.yyyy")+")";
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
				
			КонецЕсли;	
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьПериодУчетаСчетФактура(РезультатПроверкиДокумента,СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
			
			ПриходнаяНакладная 					= СтрокаТаблицы.СопоставляемыйДокумент1С;
			ЕстьБумажнаяСчетФактура 			= ЕстьБумажныйСФ(ПриходнаяНакладная);
			
			РазницаВМесяцах 					= ?(Месяц(ТекущаяДата())-Месяц(ПриходнаяНакладная.Дата), Месяц(ТекущаяДата())-Месяц(ПриходнаяНакладная.Дата), -1*(Месяц(ТекущаяДата())-Месяц(ПриходнаяНакладная.Дата)));
			ПервичныйДокументНеИзЭтогоМесяца 	= ?(ПриходнаяНакладная.Дата < НачалоМесяца(ТекущаяДата()), Истина, Ложь);
			ДатаЗапретаИзмененияБумажнойСчетФактурыНаступила = ?(НачалоДня(ТекущаяДата()) >= НачалоМесяца(ТекущаяДата()) + МетодСервера(,"ПолучитьКоличествоДнейОтсрочки", ПриходнаяНакладная.Организация)*24*60*60, Истина, Ложь);
			
			Если ЕстьБумажнаяСчетФактура И ПервичныйДокументНеИзЭтогоМесяца И (ДатаЗапретаИзмененияБумажнойСчетФактурыНаступила ИЛИ РазницаВМесяцах>1) Тогда
				
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
					|Бумажный экземпляр документа был учтен в прошлом периоде";
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
			КонецЕсли;	
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьУчетСчетФактура(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
				
			СчетФактура = НайтиПодходящийСчетФактуруИзПриходнойНакладной(СтрокаТаблицы.СопоставляемыйДокумент1С);
			Если НЕ СчетФактура=Неопределено Тогда 
				DocID = ПолучитьIDСопоставленногоДокумента1С(ОбработкаОбъект, СчетФактура);
				Если ЗначениеЗаполнено(DocID) И (НЕ СтруктураКонтент.Documentid = DocID) Тогда 
										
					РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
					СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"Данный документ уже был учтен в электронном виде";
					РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
				КонецЕсли;
				
			Иначе
				РезультатПроверкиДокумента.Вставить("СчетФактураВБазе1СОтсутствует", Истина);	
			КонецЕсли;
				
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьДатуПоставкиСчетФактура(РезультатПроверкиДокумента,СтрокаТаблицы, СтруктураКонтент)
			
			ПриходнаяНакладная = СтрокаТаблицы.СопоставляемыйДокумент1С;
			Если НачалоДня(СтруктураКонтент.Date)>НачалоДня(ПриходнаяНакладная.Дата)+5*24*60*60 Тогда
				
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
					|Дата счета-фактуры превышает дату поставки более чем на 5 дней. Дата поставки:"+  формат(ПриходнаяНакладная.Дата, "ДФ=dd.MM.yyyy");
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
			КонецЕсли;
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьПолеКодВалюты(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент)
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				КодВалютыДокумента = СтрокаТаблицы.СопоставляемыйДокумент1С.Валюта.Код;
			Иначе
				КодВалютыДокумента = СтрокаТаблицы.СопоставляемыйДокумент1С.ВалютаДокумента.Код;
			КонецЕсли;
			
			Если НЕ СтруктураКонтент.Currency = КодВалютыДокумента Тогда 
				
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
					|Неверно заполнено поле ""код валюты"". Ожидаемое значение:" + КодВалютыДокумента;
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
			КонецЕсли;
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьСуммуНДССчетФактура(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
				
			Если СтруктураКонтент.Type = "InvoiceCorrection" Тогда
				СуммаНДСПоDocument = 0;
				Для каждого Item из СтруктураКонтент.Items Цикл
					СуммаНДСПоDocument = СуммаНДСПоDocument + Item.CorrectedValues.Vat;
				КонецЦикла;
				СуммаНДСПоDocument = Окр(СуммаНДСПоDocument, 2);
			Иначе
				СуммаНДСПоDocument = Окр(СтруктураКонтент.Totals.Vat, 2);
			КонецЕсли;
			
			ПриходнаяНакладная		= СтрокаТаблицы.СопоставляемыйДокумент1С;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда 
				ТоварыИтогПоСуммеНДС 	= ПриходнаяНакладная.Товары.Итог("СуммаНДС");
				ИтогСуммаНДС 			= ТоварыИтогПоСуммеНДС;
			Иначе	
				ТоварыИтогПоСуммеНДС 	= ПриходнаяНакладная.Товары.Итог("СуммаНДС");
				УслугиИтогПоСуммеНДС 	= ПриходнаяНакладная.Услуги.Итог("СуммаНДС");
				ИтогСуммаНДС 			= ТоварыИтогПоСуммеНДС + УслугиИтогПоСуммеНДС;
			КонецЕсли;
			
			СуммаНДСПо1С = Окр(ИтогСуммаНДС,2);
			
			ОтклонениеНДС = СуммаНДСПоDocument - СуммаНДСПо1С; 
				
			Если Макс(ОтклонениеНДС, -ОтклонениеНДС) > ПолучитьМаксимальноДопустимоеОтклонениеПоСуммеНДС(ОбработкаОбъект, ПриходнаяНакладная.Организация) Тогда 
				
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок = РезультатПроверкиДокумента.СписокОшибок +"
					|Неверная сумма НДС. По данным сети сумма НДС - "+формат(СуммаНДСПо1С, "ЧДЦ=2")+", в электронном документе поставщика - "
					+?(ЗначениеЗаполнено(формат(СуммаНДСПоDocument, "ЧДЦ=2")), формат(СуммаНДСПоDocument, "ЧДЦ=2"), 0) ;
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
			ИначеЕсли ОтклонениеНДС <> 0 Тогда
				РезультатПроверкиДокумента.Вставить("ЕстьОтклоненияПоНДС", Истина);	
			КонецЕсли;
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьГТД(РезультатПроверкиДокумента, СтруктураКонтент, ОбработкаОбъект)
			
			Если НЕ СтруктураКонтент.Type = "InvoiceCorrection" Тогда
				
				НомерСтроки = 0;
				
				Для каждого Item из СтруктураКонтент.Items Цикл
					
					НомерСтроки = НомерСтроки + 1;
					Если СтранаПроисхожденияЗаполнена(Item.CountriesOfOrigin) 
						И НЕ МетодСервера(,"СтранаЧленТС", Item.CountriesOfOrigin) Тогда 
						
						Если НЕ ЗначениеЗаполнено(Item.CustomsDeclarationNumbers) Тогда 
							РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
							СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
								|Для товара "+item.Product +" в строке "+формат(НомерСтроки, "ЧЦ=10")+" указана страна происходения, но не указан номер ГТД";
							РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
						КонецЕсли;
						
					ИначеЕсли НЕ СтранаПроисхожденияЗаполнена(Item.CountriesOfOrigin)
							И ЗначениеЗаполнено(Item.CustomsDeclarationNumbers) Тогда 
						
						РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
						СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
							|Для товара "+item.Product +" в строке "+формат(НомерСтроки, "ЧЦ=10")+" указан номер ГТД, но не указана страна происходения";
						РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
					
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьСвидетельство(РезультатПроверкиДокумента, СтруктураКонтент)
				
			//Если СтруктураКонтент.Signer.IsSoleProprietor 
			//	И ЗначениеЗаполнено(СтруктураКонтент.Signer.SoleProprietorRegistrationCertificate)=Ложь Тогда 
			//	
			//	РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
			//	СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
			//		|Не заполнено поле ""свидетельство о регистрации Индивидуального Предпринимателя""" ;
			//	РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
			//КонецЕсли;
			
		КонецПроцедуры


	&НаСервере
	Функция ПроверитьОрганизацию(РезультатПроверки, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		СопоставленнаяОрганизация = МетодСервера(,"BoxID_2_Организация", СтрокаТаблицы.BoxId);
			
		Если НЕ СтрокаТаблицы.СопоставляемыйДокумент1С.Организация = СопоставленнаяОрганизация Тогда
			РезультатПроверки.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверки.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Разные организации документа 1С и " + СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
			РезультатПроверки.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
		
		ИННОрганизации = СтрокаТаблицы.СопоставляемыйДокумент1С.Организация.Инн;
		Если НЕ ИННОрганизации = СтруктураКонтент.OrganizationInn Тогда
			РезультатПроверки.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверки.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Неверный ИНН у покупателя. Ожидаемое значение: "+ИННОрганизации;
			РезультатПроверки.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
		
		КППОрганизации = СтрокаТаблицы.СопоставляемыйДокумент1С.Организация.Кпп;
		Если НЕ КППОрганизации = СтруктураКонтент.OrganizationKpp Тогда
			РезультатПроверки.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверки.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Неверный КПП у покупателя. Ожидаемое значение: "+КППОрганизации;
			РезультатПроверки.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
			
		Возврат РезультатПроверки;
		
	КонецФункции

	&НаСервере
	Функция ПроверитьКонтрагента(РезультатПроверки, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
				
		СопоставленныйКонтрагент = МетодСервера(,"CounteragentBoxID_2_Контрагент", СтрокаТаблицы.CounteragentId, СтрокаТаблицы.BoxId);
		
		Контрагент = СтрокаТаблицы.СопоставляемыйДокумент1С.Контрагент;
		Если НЕ Контрагент = СопоставленныйКонтрагент Тогда
			РезультатПроверки.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверки.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Разные контрагенты документа 1С и " + СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
			РезультатПроверки.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
		
		ИННКонтрагента = Контрагент.Инн;
		Если НЕ ИННКонтрагента = СтруктураКонтент.Seller.Inn Тогда
			РезультатПроверки.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверки.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Неверный ИНН поставщика. Ожидаемое значение: "+ИННКонтрагента;
			РезультатПроверки.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
		
		КППКонтрагента = Контрагент.Кпп;
		Если НЕ КППКонтрагента = СтруктураКонтент.Seller.Kpp Тогда
			РезультатПроверки.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверки.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Неверный КПП поставщика. Ожидаемое значение: "+КППКонтрагента;
			РезультатПроверки.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
			
		Возврат РезультатПроверки;
		
	КонецФункции

	&НаСервере
	Процедура ИнтерпритироватьРезультатПроверкиПакета(СтрокаТаблицы, РезультатПроверкиПакета, СтруктураДействийПоДокументу)
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		НаименованиеСистемы = СловарьWL.НаименованиеСистемы;
		
		Если РезультатПроверкиПакета.ПрошлаУспешно = Истина Тогда
			Если ЭтоСчетФактура(Лев(СтрокаТаблицы.DocumentType, 7)) Тогда
				
				Если РезультатПроверкиПакета.Свойство("СчетФактураБезНДС") 
					И РезультатПроверкиПакета.СчетФактураБезНДС = Истина Тогда
					
					СтрокаТаблицы.Вкл = Ложь;
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Пропустить;
					СтрокаТаблицы.КомментарийКДействию = "Счет-фактура не обработана, т.к. связанная накладная без НДС";
					
				ИначеЕсли РезультатПроверкиПакета.Свойство("СчетФактураВБазе1СОтсутствует") 
					И РезультатПроверкиПакета.СчетФактураВБазе1СОтсутствует = Истина Тогда
					
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СоздатьОтсутствующиеСФ;
					ДокументПоступления = СтрокаТаблицы.СопоставляемыйДокумент1С;
					ТекстКомментария = "По поступлению №"+ДокументПоступления.Номер+" от "+ДокументПоступления.Дата+" не найдено подчиненной счет фактуры, соответствующей текущему документу " + НаименованиеСистемы + ".
						|Для создания в базе 1С нового документа счет фактуры и его сопоставления документу " + НаименованиеСистемы + " нажмите кнопку ""Выполнить обработку"".";
					СтрокаТаблицы.КомментарийКДействию = ТекстКомментария;
					
				ИначеЕсли (РезультатПроверкиПакета.Свойство("ЕстьОтклоненияПоНДС") И РезультатПроверкиПакета.ЕстьОтклоненияПоНДС = Истина)
					ИЛИ (РезультатПроверкиПакета.Свойство("ЕстьОтклонениеПоСуммеСНДС") И РезультатПроверкиПакета.ЕстьОтклонениеПоСуммеСНДС = Истина) Тогда
					
					СтрокаТаблицы.ЕстьОтклонения = Истина;
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СопоставитьСФ;
					СтрокаТаблицы.КомментарийКДействию = "Расхождение между документом " + НаименованиеСистемы + " и Документом 1С.";
					
				Иначе
					
					СтрокаТаблицы.СостояниеОбработки =	СтруктураДействийПоДокументу.СопоставитьСФ;
					СтрокаТаблицы.КомментарийКДействию = "В документе ошибок не найдено. Для того, чтобы сопоставить его документу в 1С нажмите кнопку ""Выполнить обработку"".";;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаТаблицы.СостояниеОбработки =	СтруктураДействийПоДокументу.СопоставитьИПодписать;
				СтрокаТаблицы.КомментарийКДействию = "В документе ошибок не найдено. Для того, чтобы подписать документ " + НаименованиеСистемы + " и сопоставить его документу в 1С нажмите кнопку ""Выполнить обработку"".";
																
			КонецЕсли;
		Иначе
			Если ЭтоСчетФактура(Лев(СтрокаТаблицы.DocumentType, 7)) Тогда
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ЗапроситьУточнение;
			Иначе
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОтказатьВПодписи;
			КонецЕсли;
			СтрокаТаблицы.КомментарийКДействию = РезультатПроверкиПакета.СписокОшибок;
		КонецЕсли;
			
	КонецПроцедуры

	&НаСервере
	Функция ПолучитьМаксимальноДопустимоеОтклонениеПоСуммеСНДС(ОбработкаОбъект, Организация)
		
		МаскимальноеОтклонение = МетодСервера(,"ПолучитьЗначениеСвойства", Организация, "МаксимальноеОтклонениеСуммыСНДС");
		
		Если ЗначениеЗаполнено(МаскимальноеОтклонение) Тогда
			Возврат Число(МаскимальноеОтклонение)/100;
		Иначе 
			Возврат 0;
		КонецЕсли;
		
	КонецФункции

	&НаСервере
	Функция ПолучитьМаксимальноДопустимоеОтклонениеПоСуммеНДС(ОбработкаОбъект, Организация)
		
		МаскимальноеОтклонение = МетодСервера(,"ПолучитьЗначениеСвойства", Организация, "МаксимальноеОтклонениеСуммыНДС");
		
		Если ЗначениеЗаполнено(МаскимальноеОтклонение) Тогда
			Возврат Число(МаскимальноеОтклонение)/100;
		Иначе 
			Возврат 0;
		КонецЕсли;
		
	КонецФункции

	&НаСервере
	Функция ОрганизацияНаУСН(OrganizationID)
		
		Если Метаданные.РегистрыСведений.Найти("УчетнаяПолитикаОрганизаций")=Неопределено Тогда 
			Возврат Ложь;
		Иначе 		
			
			Организация = МетодСервера(,"BoxID_2_Организация", OrganizationID);
			
			Запрос = Новый Запрос;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				Запрос.Текст = "ВЫБРАТЬ
				               |	УчетнаяПолитикаОрганизацийСрезПоследних.УчетнаяПолитика.СистемаНалогообложения КАК СистемаНалогообложения
				               |ИЗ
				               |	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
				
			Иначе
				Запрос.Текст = "ВЫБРАТЬ
				               |	УчетнаяПолитикаОрганизацийСрезПоследних.СистемаНалогообложения
				               |ИЗ
				               |	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
			КонецЕсли;
						   
			Запрос.УстановитьПараметр("Организация", Организация);
			
			РезультатВыполненияЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатВыполненияЗапроса.Следующий() Тогда
				Возврат (РезультатВыполненияЗапроса.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
			Иначе 
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецФункции

	&НаСервере
	Функция ЕстьБумажныйСФ(ПриходнаяНакладная)
	
		Если ПриходнаяНакладная = Неопределено Тогда
			Возврат Ложь;
		ИначеЕсли (НЕ ПриходнаяНакладная.Метаданные().Реквизиты.Найти("ПредъявленСчетФактура") = Неопределено) 
			И (ПриходнаяНакладная.ПредъявленСчетФактура) Тогда
			
			Возврат Истина;
		КонецЕсли;

		СчетФактура = НайтиПодходящийСчетФактуруИзПриходнойНакладной(ПриходнаяНакладная);
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			Если (НЕ СчетФактура = Неопределено)
				И (НЕ СчетФактура.ПолученВЭлектронномВиде) Тогда
				
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если (НЕ СчетФактура = Неопределено) 
				И (СчетФактура.КодСпособаПолучения=1) Тогда 
			
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;

		Возврат Ложь;
	
	КонецФункции
	
	&НаСервере
	Функция НайтиПодходящийСчетФактуруИзПриходнойНакладной(ПриходнаяНакладная)
		
		Запрос = Новый Запрос;
		
		Если Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СчетФактура.Ссылка 
				|ИЗ
				|	Документ.СчетФактураПолученный КАК СчетФактура
				|ГДЕ
				|	СчетФактура.ДокументОснование = (&ПриходнаяНакладная)";
		Иначе 
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СчетФактура.ССылка 
				|ИЗ
				|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактура
				|ГДЕ
				|	СчетФактура.ДокументОснование = (&ПриходнаяНакладная)";
		КонецЕсли;    	
		
			
		Запрос.УстановитьПараметр("ПриходнаяНакладная", ПриходнаяНакладная);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
		
	КонецФункции
	
	&НаСервере
	Функция СтранаПроисхожденияЗаполнена(КодСтраныПроисхождения)
		Возврат (ЗначениеЗаполнено(КодСтраныПроисхождения));	
	КонецФункции
	
	&НаСервере
	Функция ПолучитьIDСопоставленногоДокумента1С(ОбработкаОбъект, ПервичныйДокумент)
					
		DocID = МетодСервера(,"Документ_2_DocumentID", ПервичныйДокумент);
		Если ЗначениеЗаполнено(DocID) Тогда
			Возврат DocID;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
					
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////
	//} Проверка пакета

	////////////////////////////////////////////////////////////////////////////////
	//{ Сети общие процедуры	
			
	&НаКлиенте
	Функция ПолучитьДанныеПодчиненныхDocument(Document)
		
		Результат = Новый Массив;
		
		SubordinateDocumentIds = Document.SubordinateDocumentIds;
		Для ц=0 по SubordinateDocumentIds.count-1 Цикл 
			id = SubordinateDocumentIds.GetItem(ц);
			
			КэшКонтент = МетодКлиента("Модуль_Клиент","ПолучитьЗначениеКонтентаКэш", Document.Organization.Id, id);
			Если НЕ КэшКонтент = Неопределено Тогда
				Результат.Добавить(КэшКонтент);
			Иначе
				Попытка
					SubordinateDocument = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(Document.Organization.Id).GetDocumentById(Id);
					Если ДокументСодержитКонтент(SubordinateDocument.Type) Тогда
						SubordinateDocumentContent = SubordinateDocument.GetContent();
						Результат.Добавить(Новый Структура("DocumentId, BoxId, Document, Content", id, Document.Organization.Id, SubordinateDocument, SubordinateDocumentContent));
					КонецЕсли;
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					Если Найти(ТекстОшибки, "code:403") > 0
						ИЛИ Найти(ТекстОшибки, "code:404") > 0 Тогда
						ПодчиненныйДокумент = Неопределено;
					Иначе
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
				КонецПопытки;
								
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
			
	&НаКлиенте
	Функция ПолучитьДанныеРодительскихDocument(Document)
		
		Результат = Новый Массив;
		
		InitialDocumentIds = Document.InitialDocumentIds;
		Для ц=0 по InitialDocumentIds.count-1 Цикл 
			id = InitialDocumentIds.GetItem(ц);
			
			КэшКонтент = МетодКлиента("Модуль_Клиент","ПолучитьЗначениеКонтентаКэш", Document.Organization.Id, id);
			Если НЕ КэшКонтент = Неопределено Тогда
				Результат.Добавить(КэшКонтент);
			Иначе
				Попытка
					InitialDocument = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(Document.Organization.Id).GetDocumentById(Id);
					
					Если InitialDocument.type <> "Nonformalized" И InitialDocument.type <> "NonformalizedProforma" Тогда
						InitialDocumentContent = InitialDocument.GetContent();
						Результат.Добавить(Новый Структура("DocumentId, BoxId, Document, Content", id, Document.Organization.Id, InitialDocument, InitialDocumentContent));
					КонецЕсли;
					
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					Если Найти(ТекстОшибки, "code:403") > 0
						ИЛИ Найти(ТекстОшибки, "code:404") > 0 Тогда
						ПодчиненныйДокумент = Неопределено;
					Иначе
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
				КонецПопытки;
								
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьДанныеСвязанныхDocument(Document)
		
		Результат = Новый Массив;
		
		Результат = ПолучитьДанныеПодчиненныхDocument(Document);
		
		Добавка = ПолучитьДанныеРодительскихDocument(Document);
		
		Для каждого СтрокаСтруктура из Добавка Цикл
			Результат.Добавить(СтрокаСтруктура);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ДокументСодержитКонтент(DocumentType)
		
		Если	DocumentType = "XmlAcceptanceCertificate"
			ИЛИ DocumentType = "XmlTorg12"
			ИЛИ DocumentType = "Invoice"
			ИЛИ DocumentType = "InvoiceRevision"
			ИЛИ DocumentType = "InvoiceCorrection"
			ИЛИ DocumentType = "InvoiceCorrectionRevision"
			
		Тогда
		
			Возврат Истина;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
		
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	////////// Процедуры и функции получения номера акта

	&НаКлиенте
	Функция ПолучитьНомерАктаИзСчетФактуры(Document)
		
		Organization = Document.Organization;
		
		SubordinateDocumentIds =  Document.SubordinateDocumentIds;
		Для ц = 0 по SubordinateDocumentIds.count-1 Цикл
			Попытка
				ПодчиненныйДок = Organization.GetDocumentByID(SubordinateDocumentIds.GetItem(ц));
				Если ЭтоСчетФактура(ПодчиненныйДок.Type) Тогда
					Возврат ПолучитьНомерАктаПоDocument(ПодчиненныйДок);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		InitialDocumentIds = Document.InitialDocumentIds;
		Для ц = 0 по InitialDocumentIds.count-1 Цикл
			Попытка
				ПодчиненныйДок = Organization.GetDocumentByID(InitialDocumentIds.GetItem(ц));
				Если ЭтоСчетФактура(ПодчиненныйДок.Type) Тогда
					Возврат ПолучитьНомерАктаПоDocument(ПодчиненныйДок);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;	

		ВызватьИсключение("Ошибка валидации: Для Торг-12 не нашли связанную счет-фактуру"); 
		
	КонецФункции

	&НаКлиенте
	Функция ПолучитьНомерАктаПоDocument(Document, DocumentContent=Неопределено) 
		Если НЕ DocumentContent=Неопределено Тогда
			Content = DocumentContent;
		Иначе
			Content = Document.GetContent();
		КонецЕсли;
		
		Попытка
			НомерАкта = ПолучитьДопСвойство_СтарыйФормат(Content.AdditionalInfo, "номер_акта");
		Исключение
			НомерАкта = ПолучитьДопСвойство(Content.StructedAdditionalInfos, "номер_акта");
		КонецПопытки;
		
		Возврат НомерАкта;
	КонецФункции

	&НаКлиенте
	Функция ПолучитьДопСвойство_СтарыйФормат(СтрокаДопИнфо, НаименованиеСвойства)
		Если Найти(Врег(СтрокаДопИнфо), Врег(НаименованиеСвойства))>0 Тогда
			Результат = Прав(СтрокаДопИнфо, СтрДлина(СтрокаДопИнфо)-Найти(Врег(СтрокаДопИнфо), Врег(НаименованиеСвойства))-СтрДлина(НаименованиеСвойства)+1);
			Если Лев(Результат, 1)=":" ИЛИ Лев(Результат, 1)="=" Тогда
				Результат = Прав(Результат, СтрДлина(Результат)-1);
			КонецЕсли;	
			Если Найти(Результат, ";")>0 Тогда
				Результат = Лев(Результат, Найти(Результат, ";")-1);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;	
	КонецФункции
	
	
	&НаКлиенте
	Функция ПолучитьДопСвойство(StructedAdditionalInfos, НаименованиеСвойства)
		
		Результат = "";
		
		Для Сч = 0 По StructedAdditionalInfos.Count-1 Цикл
			AdditionalInfo = StructedAdditionalInfos.GetItem(Сч);
			Если AdditionalInfo.Key = НаименованиеСвойства Тогда
				Результат = AdditionalInfo.Value;
			КонецЕсли;	
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции

	
	////////////////////////////////////////////////////////////////////////////////
	//} Сети общие процедуры	

	
////////////////////////////////////////////////////////////////////////////////
//} Сети анализ документов	
	
////////////////////////////////////////////////////////////////////////////////
//{ Сети обработка документов	
	
&НаКлиенте	
Процедура ВыполнитьОбработкуДокументов(РезультатВопроса, ДополнительныеПараметры)  экспорт 
	
	Если  РезультатВопроса = КодВозвратаДиалога.Да тогда 
		
		НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		
		Если НЕ НайденныеСтроки.Количество()=0 Тогда
			
			ЛогироватьНачалоПроцесса();
			
			Если ПолеВыбораСценарий = "ОбработатьВсеАвтоматически" Тогда
				
				ДокументыНаПодпись = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл, СостояниеОбработки", Истина, СтруктураДействийПоДокументу.СопоставитьИПодписать));
				Если ДокументыНаПодпись.Количество()>0 Тогда
					ОткрытьФормуПодписанияДокумента(ДокументыНаПодпись);
				Иначе
					ОбработатьВсеДокументыАвтоматически();	
				КонецЕсли;			
				
			ИначеЕсли ПолеВыбораСценарий = "ОбработатьКорректныеДокументы" Тогда
				
				ДокументыНаПодпись = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл, СостояниеОбработки", Истина, СтруктураДействийПоДокументу.СопоставитьИПодписать));
				
				Если ДокументыНаПодпись.Количество()>0 Тогда
					ОткрытьФормуПодписанияДокумента(ДокументыНаПодпись);
				Иначе
					ОбработатьКорректныеДокументы(НайденныеСтроки);
				КонецЕсли;
				
			ИначеЕсли ПолеВыбораСценарий = "ОбработатьДокументыСОшибками" Тогда
				
				ДокументовКОбработке = НайденныеСтроки.Количество();
				ДокументовОбработано = 0;
				
				Для каждого СтрокаТаблицы из НайденныеСтроки Цикл
					
					СтруктураКонтент = МетодКлиента("Модуль_Клиент","ПолучитьЗначениеКонтентаКэш", СтрокаТаблицы.BoxId, СтрокаТаблицы.DocumentId);
					
					Если СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СоздатьОтсутствующиеСФ Тогда
						СоздатьОтсутствующуюСФиСопоставить(СтрокаТаблицы, СтруктураКонтент);
					ИначеЕсли СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОтказатьВПодписи 
						ИЛИ СтрокаТаблицы.СостояниеОбработки = СтруктурадействийПоДокументу.ЗапроситьУточнение Тогда
						
						ОтказВПодписи(СтрокаТаблицы, СтруктураКонтент);
					КонецЕсли;
					
					ДокументовКОбработке = ДокументовКОбработке + 1;
					Состояние("Обработка документов с ошибками. Обработано "+ДокументовОбработано+" из "+ДокументовКОбработке);
					
				КонецЦикла;
				
				Если НЕ МассивЗадачНаОтказ = Неопределено Тогда
					Пока НЕ МассивЗадачНаОтказ.Количество()=0 Цикл
						ОбработатьМассивЗадачНаОтказ();	
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ЛогироватьКонецПроцесса();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодписанияДокумента(НайденныеСтроки)
	
	Certificate = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.Certificate;

	BoxId			= НайденныеСтроки[0].BoxID;
	Organization 	= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(BoxId);

	ФИОПодписанта 	= МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
					
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФИО", 						ФИОПодписанта);
	ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
	ПараметрыФормы.Вставить("ПредставлениеПодписи", 	ФИОПодписанта);
	ПараметрыФормы.Вставить("Организация", 				ПолучитьСвязаннуюОрганизацию(Organization.ID));
	
	МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаПодписанияДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыПодписанияДокументаСети");	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыПодписанияДокументаСети(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		Если РезультатЗакрытия.ДокументПодписан = Истина Тогда
			
			ПараметрыТитулаПолучателя =	Новый Структура();
			ПараметрыТитулаПолучателя.Вставить("ДатаПолученияГруза", 	РезультатЗакрытия.ДатаПолученияГруза);
			ПараметрыТитулаПолучателя.Вставить("ФИОПодписанта", 		Лев(РезультатЗакрытия.ФИОПодписанта,100));
			ПараметрыТитулаПолучателя.Вставить("ДолжностьПодписанта", 	Лев(РезультатЗакрытия.ДолжностьПодписанта,50));
			ПараметрыТитулаПолучателя.Вставить("ИНН", 					"");
						
			Если ПолеВыбораСценарий = "ОбработатьВсеАвтоматически" Тогда
				ОбработатьВсеДокументыАвтоматически(ПараметрыТитулаПолучателя);
			ИначеЕсли ПолеВыбораСценарий = "ОбработатьКорректныеДокументы" Тогда
				ОбработатьКорректныеДокументы(ПараметрыТитулаПолучателя);	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВсеДокументыАвтоматически(СтруктураПараметрыТитулаПолучателя=Неопределено)
	
	НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
	
	ДокументовКОбработке = НайденныеСтроки.Количество();
	ДокументовОбработано = 0;
	
	Для каждого СтрокаТаблицы из НайденныеСтроки Цикл
		
		СтруктураКонтент = МетодКлиента("Модуль_Клиент","ПолучитьЗначениеКонтентаКэш", СтрокаТаблицы.BoxId, СтрокаТаблицы.DocumentId);
		
		Если СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СопоставитьИПодписать
			ИЛИ СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СопоставитьСФ Тогда
					
			СопоставитьИПодписать(СтрокаТаблицы, СтруктураКонтент, СтруктураПараметрыТитулаПолучателя);
			
		ИначеЕсли СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СоздатьОтсутствующиеСФ Тогда 
			
			СоздатьОтсутствующуюСФиСопоставить(СтрокаТаблицы, СтруктураКонтент);
			
		ИначеЕсли СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОтказатьВПодписи 
			ИЛИ СтрокаТаблицы.СостояниеОбработки = СтруктурадействийПоДокументу.ЗапроситьУточнение Тогда
						
			ОтказВПодписи(СтрокаТаблицы, СтруктураКонтент);
			
		КонецЕсли;
		
		ДокументовОбработано = ДокументовОбработано + 1;
		Состояние("Автоматическая обработка документов. Обработано "+ДокументовОбработано+" из "+ДокументовКОбработке);
		
	КонецЦикла;
	
	Если НЕ МассивЗаданийОтправкаТитулаПокупателя = Неопределено Тогда
		Пока НЕ МассивЗаданийОтправкаТитулаПокупателя.Количество()=0 Цикл
			ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателяСети();	
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ МассивЗадачНаОтказ = Неопределено Тогда
		Пока НЕ МассивЗадачНаОтказ.Количество()=0 Цикл
			ОбработатьМассивЗадачНаОтказ();	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

	//////////////////////////////////////////////////
	//{ Документы с ошибками
	
	&НаКлиенте
	Процедура СоздатьОтсутствующуюСФиСопоставить(СтрокаТаблицы, СтруктураКонтент)
			
		Если ЭтоСчетФактура(ЛЕВ(СтрокаТаблицы.DocumentType, 7)) Тогда	
			
			ЛогироватьНачалоОбработкиДокумента(СтрокаТаблицы.СопоставляемыйДокумент1С);
			
			Document = СтруктураКонтент.Document;
			
			Если Document.Type = "InvoiceCorrection" Тогда
				
				Content = СтруктураКонтент.Content;
				
				Vat = 0;
				Для Ц=0 по Content.Items.Count-1 Цикл
					Item = Content.Items.GetItem(ц);
					Vat = Vat + Item.CorrectedValues.Vat;
				КонецЦикла;
				
			Иначе
				Vat = Document.Vat;
			КонецЕсли;
			
 			Если НЕ Vat = 0 Тогда
				
				ЛогироватьНачалоОперации("Подготовить исходные данные");
				
				ИсходныеДанные = Новый Структура();
				МассивСсылокДокументовОснований = Новый Массив;
				МассивСсылокДокументовОснований.Добавить(СтрокаТаблицы.СопоставляемыйДокумент1С);
								
				ИсходныеДанные.Вставить("Type",			СтрокаТаблицы.DocumentType);
				ИсходныеДанные.Вставить("ДатаУчета",	СтрокаТаблицы.ДатаУчета);
				
				ИсходныеДанные.Вставить("МассивСсылокДокументовОснований", МассивСсылокДокументовОснований);
				ИсходныеДанные.Вставить("ConfirmationDate", Document.ConfirmationDate);
				Если ЭтоВходящийДокумент(Document.Direction) Тогда       
					ИсходныеДанные.Вставить("Направление", "Входящий");
				ИначеЕсли ЭтоИсходящийДокумент(Document.Direction) Тогда
					ИсходныеДанные.Вставить("Направление", "Исходящий");
				КонецЕсли;
				
				ИсходныеДанные.Вставить("DocumentNumber", Document.DocumentNumber);
				ИсходныеДанные.Вставить("DocumentDate", Document.DocumentDate);
				
				Если СтрокаТаблицы.DocumentType = "InvoiceRevision" Тогда
					
					ИсходныеДанные.Вставить("OriginalDocumentNumber",	Document.OriginalDocumentNumber);
					ИсходныеДанные.Вставить("OriginalDocumentDate",		Document.OriginalDocumentDate);

				КонецЕсли;	
				
				ИсходныеДанные.Вставить("ВероятныйКонтрагент", МетодСервераБезКонтекста(,"CounteragentBoxID_2_Контрагент", Document.CounterAgent.Id, Document.Organization.Id));
				ИсходныеДанные.Вставить("ВероятнаяОрганизация", МетодСервераБезКонтекста(,"BoxID_2_Организация", Document.Organization.Id));
				
				ЛогироватьКонецОперации();
				
				ЛогироватьНачалоОперации("Редактирование_проведение ПНК");
				
				МетодКлиента("Модуль_ГрупповаяОбработка", "ПровестиПриходнуюНакладную", ИсходныеДанные.МассивСсылокДокументовОснований[0]);
				
				ЛогироватьКонецОперации();
				
				ЛогироватьНачалоОперации("Создание новой счет фактуры");
				СтруктураРезультатОперации= МетодКлиента("Модуль_ГрупповаяОбработка","СоздатьНовыйСчетФактуру", ИсходныеДанные);
				ЛогироватьКонецОперации();
				
				Если СтруктураРезультатОперации.ПрошлоУспешно = Истина Тогда
					СтрокаТаблицы.СопоставляемыйДокумент1С = СтруктураРезультатОперации.СчетФактураПолученный;
					ЛогироватьНачалоОперации("Сопоставить документ");
					СопоставитьДокумент(СтрокаТаблицы);
					ЛогироватьКонецОперации();
				Иначе
					СтрокаТаблицы.Вкл = Ложь;
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
					СтрокаТаблицы.КомментарийКДействию = "На основании поступления не удалось создать новую счет фактуру "+СтруктураРезультатОперации.ОписаниеОшибки();
				КонецЕсли;
			Иначе
				// сф без ндс не обрабатываем
			КонецЕсли;
			
			ЛогироватьКонецОбработкиДокумента();
			
		КонецЕсли;
									
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтказВПодписи(СтрокаТаблицы, СтруктураКонтент)
		
		ЛогироватьНачалоОбработкиДокумента(СтрокаТаблицы.СопоставляемыйДокумент1С);
		
		ЗаголовокОперации = "";
		Если ЭтоФормализованныйТОРГ12(СтрокаТаблицы.DocumentType) 
			ИЛИ ЭтоФормализованныйАктОВыполненииРабот(СтрокаТаблицы.DocumentType) Тогда
			
			ЗаголовокОперации = "Отказать в подписи в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		ИначеЕсли ЭтоСчетФактура(СтрокаТаблицы.DocumentType) Тогда
			ЗаголовокОперации = "Запросить уточнение в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаголовокОперации)=Истина Тогда
			ОбработатьЗадачуОтказа(СтрокаТаблицы, СтруктураКонтент);
		КонецЕсли;
		
		ЛогироватьКонецОбработкиДокумента();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьЗадачуОтказа(СтрокаТаблицы, СтруктураКонтент)
		
		Если МассивЗадачНаОтказ = Неопределено Тогда
			МассивЗадачНаОтказ = Новый Массив;
		КонецЕсли;
		
		Пока МассивЗадачНаОтказ.Количество() = МаксимальноеКоличествоЗаданий Цикл
			ОбработатьМассивЗадачНаОтказ();
		КонецЦикла;
		
		Document = СтруктураКонтент.Document;
		
		Попытка
			
			Если МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", Document.Type) Тогда
				МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", СтрокаТаблицы.BoxID);
			КонецЕсли;
			
			Если ЭтоСчетФактура(Лев(СтрокаТаблицы.DocumentType, 7)) Тогда
				ЛогироватьНачалоОперации("Запросить уточнение в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				RejectTask=	Document.SendCorrectionRequestAsync(СтрокаТаблицы.КомментарийКДействию);
			Иначе
				ЛогироватьНачалоОперации("Отказать в подписи в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				RejectTask=	Document.RejectAsync(СтрокаТаблицы.КомментарийКДействию);
			КонецЕсли;
			СтруктураЗадачи=	Новый Структура("СтрокаТаблицы, Task", СтрокаТаблицы, RejectTask);
			МассивЗадачНаОтказ.Добавить(СтруктураЗадачи);
		Исключение
			СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
			СтрокаТаблицы.КомментарийКДействию = ОписаниеОшибки();
			Сообщить(ОписаниеОшибки());
		КонецПопытки;

		ЛогироватьКонецОперации();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьМассивЗадачНаОтказ()
		
		ЛогироватьНачалоОперации("Обработка задач отказа " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		
		МассивУдаляемых=	Новый Массив();
		
		Индекс=	0;
		Для каждого ЭлементМассива Из МассивЗадачНаОтказ Цикл
			
			Task=	ЭлементМассива.Task;
			
			Если Task.IsCompleted = Истина Тогда
				
				СтрокаТаблицы=	ЭлементМассива.СтрокаТаблицы;
				Попытка
					Result=	Task.Result;
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
					Если ЭтоСчетФактура(Лев(СтрокаТаблицы.DocumentType, 7)) Тогда
						СтрокаТаблицы.КомментарийКДействию = "Сформирован запрос на уточнение";
					Иначе
						СтрокаТаблицы.КомментарийКДействию = "Сформирован отказ в подписи";
					КонецЕсли;
				Исключение
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
					СтрокаТаблицы.КомментарийКДействию = ОписаниеОшибки()+символы.ПС+"BoxId: "+СтрокаТаблицы.BoxId+символы.ПС+"DocumentId: "+СтрокаТаблицы.DocumentId;
				КонецПопытки;
				
				СтрокаТаблицы.Вкл = Ложь;
				
				МассивУдаляемых.Добавить(ЭлементМассива);
												
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("BoxID", СтрокаТаблицы.BoxID);
				ПараметрыОповещения.Вставить("DocumentID", СтрокаТаблицы.DocumentID);
				
				МетодКлиента(,"ОповеститьФормы", "ИзменениеСтатусаДокументаДиадок", ПараметрыОповещения, ЭтаФорма);
							
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого УдаляемыйЭлемент Из МассивУдаляемых Цикл
			Индекс=	МассивЗадачНаОтказ.Найти(УдаляемыйЭлемент);
			Если НЕ Индекс = Неопределено Тогда
				МассивЗадачНаОтказ.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
		
		ЛогироватьКонецОперации();
		
	КонецПроцедуры
	
	//} Документы с ошибками
	//////////////////////////////////////////////////
	
	//////////////////////////////////////////////////
	//{ Корректные документы
	
	&НаКлиенте
	Процедура ОбработатьКорректныедокументы(СтруктураПараметрыТитулаПолучателя=Неопределено)
		
		НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина)); 
		
		ДокументовКОбработке = НайденныеСтроки.Количество();
		ДокументовОбработано = 0;
		
		Для каждого СтрокаТаблицы из НайденныеСтроки Цикл
			
			СтруктураКонтент = МетодКлиента("Модуль_Клиент","ПолучитьЗначениеКонтентаКэш", СтрокаТаблицы.BoxId, СтрокаТаблицы.DocumentId);
			СопоставитьИПодписать(СтрокаТаблицы, СтруктураКонтент, СтруктураПараметрыТитулаПолучателя);
			
			ДокументовОбработано = ДокументовОбработано + 1;
			Состояние("Обработка корректных документов. Обработано "+ДокументовОбработано+" из "+ДокументовКОбработке);
			
		КонецЦикла;
		
		Если НЕ МассивЗаданийОтправкаТитулаПокупателя = Неопределено Тогда
			Пока НЕ МассивЗаданийОтправкаТитулаПокупателя.Количество()=0 Цикл
				ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателяСети();	
			КонецЦикла;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СопоставитьИПодписать(СтрокаТаблицы, СтруктураКонтент, СтруктураПараметрыТитулаПолучателя=Неопределено)
			
		ЛогироватьНачалоОбработкиДокумента(СтрокаТаблицы.СопоставляемыйДокумент1С);
		
		Если МассивЗаданийОтправкаТитулаПокупателя = Неопределено Тогда
			МассивЗаданийОтправкаТитулаПокупателя = Новый Массив;
		КонецЕсли;
		
		Если ЭтоФормализованныйТОРГ12(СтрокаТаблицы.DocumentType) 
			ИЛИ ЭтоФормализованныйАктОВыполненииРабот(СтрокаТаблицы.DocumentType) Тогда
			
			Пока МассивЗаданийОтправкаТитулаПокупателя.Количество()=МаксимальноеКоличествоЗаданий Цикл
				ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателяСети();	
			КонецЦикла;
			
			Попытка
				ПодписатьДокумент(СтрокаТаблицы, СтруктураКонтент, СтруктураПараметрыТитулаПолучателя);
				СтрокаТаблицы.Вкл = Ложь;
			Исключение
				
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
				СтрокаТаблицы.КомментарийКДействию = ОписаниеОшибки();
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
														
		ИначеЕсли ЭтоСчетФактура(ЛЕВ(СтрокаТаблицы.DocumentType, 7)) Тогда
			
			ПриходнаяНакладнаяСсылка 	= СтрокаТаблицы.СопоставляемыйДокумент1С;
			СчетФактураДляСопоставления = НайтиПодходящийСчетФактуруИзСуществующихПоступлений(ПриходнаяНакладнаяСсылка);
			СтрокаТаблицы.СопоставляемыйДокумент1С = СчетФактураДляСопоставления;
			
			Если НЕ СтрокаТаблицы.СопоставляемыйДокумент1С=Неопределено Тогда
				СопоставитьДокумент(СтрокаТаблицы);
			Иначе
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
				СтрокаТаблицы.КомментарийКДействию = "Для документа поступления не найдено подчиненной счет-фактуры";
			КонецЕсли;
						
		КонецЕсли;
		
		ЛогироватьКонецОбработкиДокумента();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПодписатьДокумент(СтрокаТаблицы, СтруктураКонтент, СтруктураПараметрыТитулаПолучателя)
		
		ЛогироватьНачалоОперации("Подписание документа в ДД");	
		
		Попытка
			
			Если НЕ СтруктураКонтент.Document = Неопределено Тогда
				Document 		= СтруктураКонтент.Document;
				Organization 	= Document.Organization;
			Иначе
				Document 		= Organization.GetDocumentById(СтрокаТаблицы.DocumentID);	
				Organization 	= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(СтрокаТаблицы.BoxID);
			КонецЕсли;
									
			UserPermissions		= Organization.GetUserPermissions();
			
			Если (Document.IsTest ИЛИ Document.Organization.AuthenticateType = "Certificate") И UserPermissions.CanSignIncomingDocuments Тогда
							
				СтруктураПараметрыТитулаПолучателя.Вставить("ИНН", Organization.INN);
				СтруктураПараметрыТитулаПолучателя.Вставить("НаименованиеОрганизации", Organization.Name);
				СтруктураПараметрыТитулаПолучателя.Вставить("НаименованиеКонтрагента", Document.Counteragent.Name);
				СтруктураПараметрыТитулаПолучателя.Вставить("BoxID", 				   СтрокаТаблицы.BoxID);

				BuyerTitleInfo= МетодСервераБезКонтекста(,"СформироватьТитулПолучателя", СтруктураПараметрыТитулаПолучателя, Document.Type, Document.DocumentDate);
				
				ПодписатьВДиадокеАсинхронно(Document, Истина, Document.OrganizationID, Document.documentID,, BuyerTitleInfo, СтрокаТаблицы);
				
				СтрокаТаблицы.Подписан 	= Истина;
				СтрокаТаблицы.Вкл		= Ложь;
				
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
				СтрокаТаблицы.КомментарийКДействию = "Документ успешно подписан";
				
				ПараметрыОповещения=	Новый Структура;
				ПараметрыОповещения.Вставить("BoxID", СтрокаТаблицы.BoxID);
				ПараметрыОповещения.Вставить("DocumentID", СтрокаТаблицы.DocumentID);
				
				МетодКлиента(,"ОповеститьФормы", "ИзменениеСтатусаДокументаДиадок", ПараметрыОповещения, ЭтаФорма);
							
			Иначе
				
				ТекстОшибкиПодписания=	"Документ " + СтрокаТаблицы.ТипДокумента + " " + СтрокаТаблицы.Номер + " от " + СтрокаТаблицы.Дата
				+ " не подписан. Подписание юридически значимых документов возможно только с сертификатом";
				Сообщить(ТекстОшибкиПодписания);
				
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаПриПодписании;
							
			КонецЕсли;
			
		Исключение
			
			Сообщить(МетодКлиента("Модуль_Клиент","СформироватьТекстОшибкиДиадок", ОписаниеОшибки()));
						
			СтрокаТаблицы.Вкл = Ложь;
			СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаПриПодписании;
			
		КонецПопытки;
			
		ЛогироватьКонецОперации();	
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателяСети()
				
		ц = 0;
		Пока ц < МассивЗаданийОтправкаТитулаПокупателя.Количество() Цикл 
			СтрокаМассиваЗаданий = МассивЗаданийОтправкаТитулаПокупателя[ц];
			Если СтрокаМассиваЗаданий.ReplySendTask.isCompleted Тогда 
							
				Попытка
					Result = СтрокаМассиваЗаданий.ReplySendTask.Result;
					
					Если Result Тогда 
						СтрокаТаблицы = СтрокаМассиваЗаданий.СтрокаТаблицы; 
					
						СопоставитьДокумент(СтрокаТаблицы);
					
						СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
						СтрокаТаблицы.КомментарийКДействию = "Документ успешно подписан и сопоставлен";
											
						МассивЗаданийОтправкаТитулаПокупателя.Удалить(ц);
					    						
					Иначе
						ц = ц+1;
					КонецЕсли;
						
				Исключение
					
					СтрокаТаблицы = СтрокаМассиваЗаданий.СтрокаТаблицы;
					
					ТекстОшибкиПодписания= ОписаниеОшибки();
					
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Заголовок", 		"Ошибка при подписании документа");
					ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось подписать документ");
					ПараметрыФормы.Вставить("Подробности", 		ТекстОшибкиПодписания+символы.ПС+"BoxId: "+СтрокаТаблицы.BoxId+символы.ПС+"DocumentId: "+СтрокаТаблицы.DocumentId);
					МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
					
					СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ОшибкаОбработки;
					СтрокаТаблицы.КомментарийКДействию 	= ТекстОшибкиПодписания;						
					
					МассивЗаданийОтправкаТитулаПокупателя.Удалить(ц);
					
				КонецПопытки;
				
			Иначе 
				ц = ц+1;
			КонецЕсли;
		КонецЦикла;	
		
	КонецПроцедуры
	
	&НаСервере
	Функция НайтиПодходящийСчетФактуруИзСуществующихПоступлений(ПриходнаяНакладнаяСсылка)
			
		Запрос = Новый Запрос;
		Если Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактура.Ссылка 
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактура
			|ГДЕ
			|	СчетФактура.ДокументОснование = (&ПриходнаяНакладная)";
		Иначе 
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактура.ССылка 
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактура
			|ГДЕ
			|	СчетФактура.ДокументОснование = (&ПриходнаяНакладная)";
		КонецЕсли;    	
				
		Запрос.УстановитьПараметр("ПриходнаяНакладная", ПриходнаяНакладнаяСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
			
	КонецФункции
	
	//////////////////////////////////////////////////
	//} Корректные документы
	
	
	&НаКлиенте
	Процедура СопоставитьДокумент(СтрокаТаблицы)
			
		Если ЗначениеЗаполнено(СтрокаТаблицы.СопоставляемыйДокумент1С) Тогда
			
			МетодСервераБезКонтекста(,"Установить_DocumentID_Для_Документ", СтрокаТаблицы.СопоставляемыйДокумент1С, СтрокаТаблицы.DocumentId, СтрокаТаблицы.BoxId);
			
			МетодКлиента("Модуль_ГрупповаяОбработка","ОбновитьКодСпособаПолучения", СтрокаТаблицы.СопоставляемыйДокумент1С, СтрокаТаблицы.DocumentType);
						
			СтрокаТаблицы.Вкл = Ложь;
			СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
			
			СтрокаТаблицы.КомментарийКДействию = "Документ успешно сопоставлен";
						
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ТипСущности", "Документ");
			ПараметрыОповещения.Вставить("BoxID", СтрокаТаблицы.BoxId);
			ПараметрыОповещения.Вставить("DocumentID", СтрокаТаблицы.DocumentId);
			ПараметрыОповещения.Вставить("Документ1С", СтрокаТаблицы.СопоставляемыйДокумент1С);
			
			МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
					
		КонецЕсли;
			
	КонецПроцедуры
	
	//////////////////////////////////////////////////
	//{ Логирование
	
	&НаКлиенте
	Процедура ОбновитьСтатистикуСобытия(ТекущаяОперация, ДлительностьОбработки)
		
		Перем МассивИтераций;
		
		КлючСобытия= СтрЗаменить(ТекущаяОперация, " ", "");
		
		СтатистикаСобытий.Свойство(КлючСобытия, МассивИтераций);
		
		Если МассивИтераций = Неопределено Тогда
			МассивИтераций= Новый Массив;
			СтатистикаСобытий.Вставить(КлючСобытия, МассивИтераций);
		КонецЕсли;
		
		МассивИтераций.Добавить(ДлительностьОбработки);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЛогироватьНачалоПроцесса()
		
		ДатаСтартаПроцесса= ТекущаяДата();
		
		КоличествоОбработанныхДокументов= 0;
		
		СтатистикаСобытий= Новый Структура;
		
		МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "Начало массовой обработки документов");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЛогироватьКонецПроцесса()
		
		Если ДатаСтартаПроцесса <> Неопределено Тогда
			
			ДлительностьОбработки= ТекущаяДата() - ДатаСтартаПроцесса;
			
			МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "КонецМассовойобработкиДокументов", "Обработано документов - "+КоличествоОбработанныхДокументов+", Длительность обработки - "+ДлительностьСтрока(ДлительностьОбработки));
			
			ВывестиДанныеСтатистики();	
			
			ДатаСтартаПроцесса= Неопределено;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЛогироватьНачалоОбработкиДокумента(ДокументСсылка)
		
		ОбрабатываемыйДокументСсылка = ДокументСсылка;
		ДатаСтартаОбработкиДокумента = ТекущаяДата();
		
		МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "КонецМассовойобработкиДокументов", "Начало обработки документа", ДокументСсылка);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЛогироватьКонецОбработкиДокумента()
		
		КоличествоОбработанныхДокументов = КоличествоОбработанныхДокументов + 1;
		ДлительностьОбработки = ТекущаяДата() - ДатаСтартаОбработкиДокумента;
		
		МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "Конец обработки документа", "Длительность обработки - "+ДлительностьСтрока(ДлительностьОбработки), ОбрабатываемыйДокументСсылка);
		
		Если КоличествоОбработанныхДокументов % 10 = 0 Тогда 
			ВывестиДанныеСтатистики();
		КонецЕсли;	
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЛогироватьНачалоОперации(ИдентификаторОперации)
		
		ДатаСтартаОперации = ТекущаяДата();
		
		МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "Начало операции", ИдентификаторОперации, ОбрабатываемыйДокументСсылка);
		
		ТекущаяОперация = ИдентификаторОперации;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЛогироватьКонецОперации()
		
		ДлительностьОбработки = ТекущаяДата() - ДатаСтартаОперации;
		
		МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "Конец операции", ТекущаяОперация+", Длительность обработки - "+ДлительностьСтрока(ДлительностьОбработки), ОбрабатываемыйДокументСсылка);
		
		ОбновитьСтатистикуСобытия(ТекущаяОперация, ДлительностьОбработки);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВывестиДанныеСтатистики()
		
		РезультатыСтатистики= "";
		Разделитель= "";
		
		Для Каждого КлючИЗначение ИЗ СтатистикаСобытий Цикл
			
			МассивИтераций= КлючИЗначение.Значение;
			
			ОбщаяДлительностьСобытия=  0;
			КоличествоИтерацийСобытия= 0;
			
			Для Каждого ДлительностьСобытия ИЗ МассивИтераций Цикл
				ОбщаяДлительностьСобытия=  ОбщаяДлительностьСобытия + ДлительностьСобытия;
				КоличествоИтерацийСобытия= КоличествоИтерацийСобытия + 1;
			КонецЦикла;
			
			РезультатыСтатистики = РезультатыСтатистики + Разделитель +
			" Событие " + КлючИЗначение.Ключ + " обработано " + КоличествоИтерацийСобытия + " раз,
			|общая длительность "+ ДлительностьСтрока(ОбщаяДлительностьСобытия) + ", средняя длительность " + ДлительностьСтрока(?(КоличествоИтерацийСобытия = 0, 0, ОбщаяДлительностьСобытия / КоличествоИтерацийСобытия));
			
			Разделитель= Символы.ПС;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(РезультатыСтатистики) Тогда
			МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "Данные статистики", РезультатыСтатистики);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ДлительностьСтрока(Длительность)
		
		Возврат Формат('00010101' + Длительность, "ДФ=HH:mm:ss");
		
	КонецФункции

	//////////////////////////////////////////////////
	//} Логирование
	
&НаКлиенте
Процедура ПолеВыбораСценарийПриИзменении(Элемент)
	
	Если ПолеВыбораДействия = "КомплекснаяОбработкаТорговыеСети" Тогда
		
		Для каждого СтрокаТаблицы из ТаблицаДокументов Цикл
			
			Если ПолеВыбораСценарий = "ОбработатьКорректныеДокументы" Тогда
				
				Если ЭтоУсловноКорректныйДокумент(СтрокаТаблицы) Тогда
					СтрокаТаблицы.Вкл = Истина;	
				Иначе
					СтрокаТаблицы.Вкл = Ложь;
				КонецЕсли;
				
			ИначеЕсли ПолеВыбораСценарий = "ОбработатьДокументыСОшибками" Тогда
				
				Если ЭтоУсловноНеКорректныйДокумент(СтрокаТаблицы) Тогда
					СтрокаТаблицы.Вкл = Истина;	
				Иначе
					СтрокаТаблицы.Вкл = Ложь;
				КонецЕсли;
				
			ИначеЕсли ПолеВыбораСценарий = "ОбработатьВсеАвтоматически" Тогда
				
				Если ЭтоУсловноНеКорректныйДокумент(СтрокаТаблицы)
					ИЛИ ЭтоУсловноКорректныйДокумент(СтрокаТаблицы) Тогда
					
					СтрокаТаблицы.Вкл = Истина;
				Иначе
					СтрокаТаблицы.Вкл = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоУсловноКорректныйДокумент(СтрокаТаблицыДокументов)
		
	ВозвращаемоеЗначение = Ложь;
	
	Если СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.СопоставитьИПодписать
		ИЛИ СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.СопоставитьСФ Тогда
		
		ВозвращаемоеЗначение = Истина;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Функция ЭтоУсловноНеКорректныйДокумент(СтрокаТаблицыДокументов)
		
	ВозвращаемоеЗначение = Ложь;
	
	Если СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.СоздатьОтсутствующиеСФ
		ИЛИ СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.ОтказатьВПодписи 
		ИЛИ СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.ЗапроситьУточнение Тогда
		
		ВозвращаемоеЗначение = Истина;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
	
	
	
////////////////////////////////////////////////////////////////////////////////
//} Сети обработка документов

&НаКлиенте
функция Новый_InvoiceContent()
	
	Возврат МетодКлиента("Модуль_Клиент", "Новый_InvoiceContent");

КонецФункции

&НаКлиенте
функция Новый_InvoiceCorrectionContent()
	
	Возврат МетодКлиента("Модуль_Клиент", "Новый_InvoiceCorrectionContent");

КонецФункции

&НаКлиенте
Функция Новый_Torg12SellerContent()
	
	Возврат МетодКлиента("Модуль_Клиент", "Новый_Torg12SellerContent");

КонецФункции

&НаКлиенте
Функция Новый_AcceptanceCertificateSellerContent()
	
	Возврат МетодКлиента("Модуль_Клиент", "Новый_AcceptanceCertificateSellerContent");

КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтруктуруПоКонтенту(Content, СтруктураДанных, описаниеСтруктурыДанных = "") 
			
	МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", Content, СтруктураДанных, описаниеСтруктурыДанных);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//} КОМПЛЕКСНАЯ ОБРАБОТКА ТОРГОВЫЕ СЕТИ


СписокНайденных=	Новый Массив();
МаксимальноеКоличествоЗаданий = 100;