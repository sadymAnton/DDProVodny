////////////////////////////////////////////////////////////////////////////////
//{ ПЕРЕМЕННЫЕ МОДУЛЯ
	
	&НаКлиенте
	Перем ОбщееКоличествоДокументов;
	&НаКлиенте
	Перем НомерДокумента;
	&НаКлиенте
	Перем ResolutionRequestType;
	
	&НаКлиенте
	Перем СтруктураПараметрыДокументаРасширение Экспорт;
	
	&НаКлиенте
	Перем СоответствиеCustomIdСсылке1С;
	&НаКлиенте
	Перем МассивЗаданийОтправкиПакета; 
	&НаКлиенте
	Перем МаксимальноеКоличествоОдновременныхЗаданий;
			
//} ПЕРЕМЕННЫЕ МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//{ ТЕЛО МОДУЛЯ
	
	&НаКлиенте
	Функция SendNonformalizedDocument(Organization, ПутьКФайлу, ИмяФайла, Комментарий, CounteragentId, ДатаДокумента, НомерДокумента, ТребуетсяПодпись, InitialDocumentId, SubordinateDocumentId="", ToDepartmentId="", DelaySend, IsTest)
		
		SendTask = Organization.CreateSendTaskFromFile(ПутьКФайлу, "NonformilizedDocumentContent");
		SendTask.CounterAgentId = CounteragentId;
		SendTask.Comment = Комментарий;
		SendTask.ToDepartmentId = ToDepartmentId;
		SendTask.DelaySend = DelaySend;
		SendTask.FileName = ИмяФайла;
		
		Если ЗначениеЗаполнено(InitialDocumentId) тогда 
			SendTask.AddInitialDocument(InitialDocumentId)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(SubordinateDocumentId) тогда 
			SendTask.AddSubordinateDocument(SubordinateDocumentId)
		КонецЕсли;
		
		SendTask.Content.date =  ДатаДокумента;
		SendTask.Content.Number  =  номерДокумента;
		SendTask.Content.NeedRecipientSignature  =  ТребуетсяПодпись;
		
		Doc = SendTask.Send();
		
		Возврат Doc.DocumentId;
		
	КонецФункции
	
	&НаКлиенте
	Функция ОтправитьНеформализованныеДокументы(CounteragentId, ПодразделениеКонтрагента =  Неопределено, МассивФайлов, ОтправкаДокументаНаСогласование = Ложь) Экспорт
		
		InitialDocumentID = ?(ЗначениеЗаполнено(параметры.InitialDocumentID), параметры.InitialDocumentID, "");
		
		МассивИД=	Новый Массив();
		
		OrganizationId=	Организация_2_BoxID_Форма(ОрганизацияОтправитель);
		Если OrganizationId = "" Тогда
			СообщениеПользователю=	Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	"Организация " + ОрганизацияОтправитель + " не сопоставлена с организацией в " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж;
			СообщениеПользователю.Сообщить();
			Возврат МассивИД;
		КонецЕсли;
		
		Organization=	МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", ОрганизацияОтправитель,,OrganizationId);
		
		Counteragent=	Organization.GetCounteragentById(CounteragentId);
		
		isTest = ?(Organization.isTest ИЛИ Organization.isPilot ИЛИ Counteragent.IsTest ИЛИ Counteragent.IsPilot, Истина, Ложь);
		
		Если НЕ isTest И Organization.AuthenticateType <> "Certificate" Тогда
			ВызватьИсключение "Пользователь под логином может отправлять только тестовые документы";
		КонецЕсли;
		
		НомерДокумента=	0;
		ОбщееКоличествоДокументов=	МассивФайлов.Количество();
		
		НомерДокумента=				НомерДокумента + 1;
		Состояние("Отправка документов", НомерДокумента*100/?(ОбщееКоличествоДокументов = 0, 1, ОбщееКоличествоДокументов), "Отправлено " + НомерДокумента + " из " + ОбщееКоличествоДокументов);
		
		Попытка
			InitialDocumentID = SendNonformalizedDocument(Organization, МассивФайлов[0].ПутьКФайлу, МассивФайлов[0].ИмяФайла, МассивФайлов[0].Комментарий, CounteragentId, Строка(ТекущаяДата()), " ",МассивФайлов[0].ЗапрашиватьОтветнуюПодпись, InitialDocumentID,,,,isTest);
			МассивИД.Добавить(InitialDocumentID);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если Найти(ТекстОшибки, "MessageToPost.FromBoxId and MessageToPost.ToBoxId properties should differ")>0 Тогда 
				ВызватьИсключение "ОтправительПолучательСовпадают";
			Иначе 
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецПопытки;
		
		Если МассивФайлов.Количество() > 1 Тогда
			Для К = 1 по МассивФайлов.Количество()-1 Цикл
				
				НомерДокумента=				НомерДокумента + 1;
				Состояние("Отправка документов", НомерДокумента*100/?(ОбщееКоличествоДокументов = 0, 1, ОбщееКоличествоДокументов) , "Отправлено " + НомерДокумента + " из " + ОбщееКоличествоДокументов);
				
				Попытка
					
					Если ПодразделениеКонтрагента = Неопределено Тогда
						ID = SendNonformalizedDocument(Organization, МассивФайлов[К].ПутьКФайлу, МассивФайлов[К].ИмяФайла,МассивФайлов[К].Комментарий, CounteragentId, Строка(ТекущаяДата()), " ", МассивФайлов[К].ЗапрашиватьОтветнуюПодпись, InitialDocumentID,,, ОтправкаДокументаНаСогласование, isTest);
					Иначе
						ID = SendNonformalizedDocument(Organization, МассивФайлов[К].ПутьКФайлу, МассивФайлов[К].ИмяФайла,МассивФайлов[К].Комментарий, CounteragentId, Строка(ТекущаяДата()), " ", МассивФайлов[К].ЗапрашиватьОтветнуюПодпись, InitialDocumentID,, ПодразделениеКонтрагента, ОтправкаДокументаНаСогласование, isTest);
					КонецЕсли;
					
					МассивИД.Добавить(ID);
					
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					Если Найти(ТекстОшибки, "MessageToPost.FromBoxId and MessageToPost.ToBoxId properties should differ")>0 Тогда 
						ВызватьИсключение "ОтправительПолучательСовпадают";
					Иначе 
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
		
		Возврат МассивИД;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ВвестиКомментарийВСтроку(СтрокаСпискаФайлов)
		
		Если НЕ СтрокаСпискаФайлов = Неопределено Тогда
			
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("Заголовок",	"Комментарий к файлу");
			ПараметрыФормы.Вставить("Комментарий", 	СтрокаСпискаФайлов.Комментарий);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаКомментария", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаКомментарияКФайлу", СтрокаСпискаФайлов);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Функция ИдентификаторСвойстваНомерВПФ()
		Возврат "ДиадокНомерВПФ";
	КонецФункции
	
	&НаСервере
	Функция УстановитьDocumentIDДляДокумента1С(ДокументСсылка)
		Возврат МетодСервера(,"Документ_2_DocumentID", ДокументСсылка);
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьЯщикДиадокОрганизации(ТекущаяОрганизация)
		
		Для Каждого Стр Из Платформа.ПараметрыКлиент.КонтекстДиадока Цикл
			Если Стр.Организация = ТекущаяОрганизация Тогда
				Возврат Стр.Box;
			КонецЕсли;
		КонецЦикла;
		
		ВызватьИсключение("Организация не сопоставлена с ящиком в " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж);
		
	КонецФункции
	
	&НаКлиенте
	Процедура ОбновитьСписокСтраницыОтправкиВДиадок() Экспорт
		
		Состояние("Обновление списка документов для отправки в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		
		ТаблицаОтношенийОрганизацийКонтрагентов= МетодКлиента("Модуль_Выгрузка","ВернутьТаблицуОтношенийОрганизацииКонтрагентов", Организация);
		
		КонтекстыЯщиков= Новый Соответствие;
		Для Каждого КонтекстЯщика ИЗ Платформа.ПараметрыКлиент.КонтекстДиадока Цикл
			КонтекстыЯщиков.Вставить(КонтекстЯщика.Организация, Новый Структура("Box, ЭтоТестоваяОрганизация, Контрагенты", КонтекстЯщика.Box, КонтекстЯщика.Box.isTest ИЛИ КонтекстЯщика.Box.isPilot));
		КонецЦикла;
		
		ОбратныйИндекс= ТаблицаОтношенийОрганизацийКонтрагентов.ВГраница();
		Пока ОбратныйИндекс > -1 Цикл
			
			СтруктураОтношений= ТаблицаОтношенийОрганизацийКонтрагентов[ОбратныйИндекс];
			
			КонтекстЯщика= КонтекстыЯщиков[СтруктураОтношений.Организация];
			
			Если КонтекстЯщика = Неопределено Тогда // Ящик недоступен
				ТаблицаОтношенийОрганизацийКонтрагентов.Удалить(ОбратныйИндекс);
			Иначе
				
				Если КонтекстЯщика.Контрагенты = Неопределено Тогда // Первое обращение к ящику
					
					КонтекстЯщика.Контрагенты= Новый Соответствие;
					
					CounteragentList= КонтекстЯщика.Box.GetCounteragentListByStatus("IsMyCounteragent");
					
					CounteragentListВГраница= CounteragentList.Count - 1;
					
					Для ИндексЦикла= 0 ПО CounteragentListВГраница Цикл
						Counteragent= CounteragentList.GetItem(ИндексЦикла);
						КонтекстЯщика.Контрагенты.Вставить(Counteragent.id, Counteragent.isTest ИЛИ Counteragent.isPilot); // В качестве значения передан признак ЭтоТестовыйКонтрагент
					КонецЦикла;
					
					// Сброс локальных переменных
					ИндексЦикла= 			  Неопределено;
					Counteragent= 			  Неопределено;
					CounteragentList= 		  Неопределено;
					CounteragentListВГраница= Неопределено;
					
				КонецЕсли;
				
				ЭтоТестовыйКонтрагент= КонтекстЯщика.Контрагенты[СтруктураОтношений.ИдКонтрагента];
				
				Если ЭтоТестовыйКонтрагент = Неопределено Тогда // Контрагента нет в списке значит изменился статус связи
					ТаблицаОтношенийОрганизацийКонтрагентов.Удалить(ОбратныйИндекс);
				Иначе
					СтруктураОтношений.ЭтоТестоваяОрганизация= КонтекстЯщика.ЭтоТестоваяОрганизация;
					СтруктураОтношений.ЭтоТестовыйКонтрагент=  ЭтоТестовыйКонтрагент;
					СтруктураОтношений.Статус=       		   "IsMyCounteragent";
				КонецЕсли;
				
			КонецЕсли;
			
			ОбратныйИндекс= ОбратныйИндекс - 1;
			
		КонецЦикла;
		
		// Сброс локальных переменных
		ОбратныйИндекс=		   Неопределено;
		СтруктураОтношений=    Неопределено;
		КонтекстЯщика= 		   Неопределено;
		КонтекстыЯщиков= 	   Неопределено;
		ЭтоТестовыйКонтрагент= Неопределено;

		Если ЗначениеЗаполнено(Организация) Тогда 
			СписокОрганизаций = Новый СписокЗначений;
			СписокОрганизаций.Добавить(Организация);
		Иначе 
			СписокОрганизаций = ПолучитьСписокАктивныхОрганизаций();
		КонецЕсли;	
						
		ТекстОшибкиОрганизацииКонтрагенты = "";
		Если СписокОрганизаций.Количество() = 0 Тогда
			ТекстОшибкиОрганизацииКонтрагенты = "- Не добавлена ни одна организация (закладка ""Настройка"" => ""Список ящиков Диадока"")";
		КонецЕсли;
		Если ТаблицаОтношенийОрганизацийКонтрагентов.Количество() = 0 Тогда
			ТекстОшибкиОрганизацииКонтрагенты = ТекстОшибкиОрганизацииКонтрагенты
												+ ?(ПустаяСтрока(ТекстОшибкиОрганизацииКонтрагенты), "", Символы.ПС)
												+ "ошибка работы со списком контрагентов (закладка ""Контрагенты""), возможные причины:"
												+ Символы.ПС + "- Не сопоставлено ни одного контрагента;"
												+ Символы.ПС + "- Отсутствуют контрагенты в статусе ""Партнерские отношения"".";
		КонецЕсли;
			
		Если ПустаяСтрока(ТекстОшибкиОрганизацииКонтрагенты) Тогда
			СформироватьТаблицуЗначенийДокументовДляОтправкиДиадок(	ДатаНачала, 
																	ДатаОкончания, 
																	СписокОрганизаций,
																	ТаблицаОтношенийОрганизацийКонтрагентов,
																	Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.AuthenticateType = "Certificate");
		Иначе
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Заголовок", 	  "Ошибка получения списка документов");
			ПараметрыФормы.Вставить("ОписаниеОшибки", "Невозможно получить список документов для отправки по причине:");
			ПараметрыФормы.Вставить("Подробности", 	  ТекстОшибкиОрганизацииКонтрагенты);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
		
		УстановитьКартинкуИЗаголовокКнопкиПометки(Ложь);
		
		Состояние("Обновление списка документов завершено");
		
	КонецПроцедуры 	
		
	&НаКлиенте
	Функция ПолучитьСписокАктивныхОрганизаций()
		результат = новый СписокЗначений;
		Для каждого стр из Платформа.ПараметрыКлиент.КонтекстДиадока цикл 
			результат.Добавить(стр.Организация);
		КонецЦикла;
		
		возврат результат;
	КонецФункции
	
	&НаСервере
	Процедура СформироватьТаблицуЗначенийДокументовДляОтправкиДиадок(ДатаНачала, ДатаОкончания, СписокОрганизаций, ТаблицаОтношенийОрганизацийКонтрагентов, ПользовательАвторизованПоСертификату = Ложь)

		МассивОрганизаций= Новый Массив;
		
		Для Каждого Элем Из СписокОрганизаций Цикл
			
			Стр=							Новый Структура("Организация, ОтпрНеПроведенные, ФормироватьСчетНаОсновании, ФормироватьУПД");
			Стр.Организация=				Элем.Значение;
			
			ДиадокОтправкаНепроведенных=	МетодСервера(,"ПолучитьЗначениеСвойства", Элем.Значение, "ДиадокОтправкаНепроведенных");
			Стр.ОтпрНеПроведенные=			?(ЗначениеЗаполнено(ДиадокОтправкаНепроведенных), ДиадокОтправкаНепроведенных, Ложь);
			
			ФормироватьСчетНаОсновании=		МетодСервера(,"ПолучитьЗначениеСвойства", Элем.Значение, "ДиадокФормироватьСчетНаОсновании");
			Стр.ФормироватьСчетНаОсновании=	?(ЗначениеЗаполнено(ФормироватьСчетНаОсновании), ФормироватьСчетНаОсновании, 0);
			
			ФормироватьУПД=					МетодСервера(,"ПолучитьЗначениеСвойства", Элем.Значение, "ДиадокФормироватьУПД");
			Стр.ФормироватьУПД=				?(ЗначениеЗаполнено(ФормироватьУПД), ФормироватьУПД, "НЕТ");

			МассивОрганизаций.Добавить(Стр);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			МассивКонтрагентов= Новый Массив;
			МассивКонтрагентов.Добавить(Контрагент);
		Иначе
			МассивКонтрагентов= ВыгрузитьКолонкуМассиваСтруктур(ТаблицаОтношенийОрганизацийКонтрагентов, "Контрагент");
		КонецЕсли;

		ТЗВыгрузкиВДиадок= МетодСервера("Модуль_ИнтеграцияУниверсальный", "СформироватьТЗВыгрузкиВДиадок", ДатаНачала, ?(ЗначениеЗаполнено(ДатаОкончания), КонецДня(ДатаОкончания), КонецДня(ТекущаяДата())), ТипыДокументов, МассивОрганизаций, МассивКонтрагентов, ТаблицаОтношенийОрганизацийКонтрагентов,,, ПользовательАвторизованПоСертификату);

		СписокДокументов.Загрузить(МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","ДополнитьТаблицуВнешнимиПФ", ТаблицаОтношенийОрганизацийКонтрагентов, ТЗВыгрузкиВДиадок));
		
	КонецПроцедуры	
	
	&НаКлиенте
	Процедура НачатьВыгрузку(ПараметрыВыгрузки) Экспорт
		
		Организация=			ПараметрыВыгрузки.Организация;
		ОрганизацияОтправитель= ПараметрыВыгрузки.Организация;
		
		Если ПараметрыВыгрузки.свойство("ОписаниеКонтрагента") Тогда 
			Контрагент= 			ПараметрыВыгрузки.ОписаниеКонтрагента.Контрагент;
			КонтрагентПолучатель= 	ПараметрыВыгрузки.ОписаниеКонтрагента.CounteragentName;
			КонтрагентПолучательID= ПараметрыВыгрузки.ОписаниеКонтрагента.CounteragentID;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(параметры.InitialDocumentID) Тогда 
			Элементы.Организация.Доступность= 			 Ложь;
			Элементы.Контрагент.Доступность= 			 Ложь;
			Элементы.ОрганизацияОтправитель.Доступность= Ложь;
			Элементы.КонтрагентПолучатель.Доступность= 	 Ложь;
		КонецЕсли;
		
		Открыть();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьОшибку(МассивСтрок, ОписаниеОшибки, Organization = Неопределено, Документ1С = Неопределено)
		
		Если Найти(ОписаниеОшибки, "FNS reg message was not sent for box") > 0 Тогда
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("OrganizationId",	Organization.Id);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаСообщенияОбОтсутствииРегистрацииФНС", ПараметрыФормы, ЭтаФорма);
		ИначеЕсли Найти(ОписаниеОшибки, "<head>") = 0 Тогда
								
			Если МассивСтрок.Количество()>1 Тогда
				
				ТекстОшибки= "Ошибка отправки пакета документов";
				
				Подробности= "Пакет документов: ";
				Для Каждого СтрокВыгрузки Из МассивСтрок Цикл
					Подробности= Подробности + Символы.ПС + " - " + ?(ЗначениеЗаполнено(СтрокВыгрузки.ВнешняяПечатнаяФорма), СтрокВыгрузки.ВнешняяПечатнаяФорма, СтрокВыгрузки.Документ) + ",";
				КонецЦикла;
				Подробности= Подробности + " 
							|Описание ошибки:" + Символы.ПС + МетодКлиента("Модуль_Клиент","СформироватьТекстОшибкиДиадок", ОписаниеОшибки);
				
			Иначе
				
				ТекстОшибки= "Ошибка отправки документа " + Документ1С;
				Подробности= "Документ: " + Документ1С + " 
							|Описание ошибки:"+ Символы.ПС + МетодКлиента("Модуль_Клиент","СформироватьТекстОшибкиДиадок", ОписаниеОшибки);
			КонецЕсли;
			
			Результат= Новый Структура();
			Результат.Вставить("ОписаниеОшибки", 	ТекстОшибки);
			Результат.Вставить("Подробности",		Подробности);
			
			ОткрытьФормуВыводаОшибки(Результат);
			
		Иначе

			Если МассивСтрок.Количество()>1 Тогда
				
				ТекстОшибки= "Ошибка отправки пакета документов";
				
				Подробности= "Пакет документов: ";
				Для Каждого СтрокВыгрузки Из МассивСтрок Цикл
					Подробности= Подробности + Символы.ПС + " - " + ?(ЗначениеЗаполнено(СтрокВыгрузки.ВнешняяПечатнаяФорма), СтрокВыгрузки.ВнешняяПечатнаяФорма, СтрокВыгрузки.Документ) + ",";
				КонецЦикла;
				Подробности= Подробности + Символы.ПС + "
							|Перейдите в карточку просмотра пакета документов для получения подробной информации." 
				
			Иначе
							
				ТекстОшибки= "Ошибка отправки документа " + Документ1С;
				Подробности= "При формировании файла для " + Документ1С + " обнаружены ошибки. Перейдите в карточку просмотра документа для получения подробной информации.";
				
			КонецЕсли;
			
			Результат= Новый Структура();
			Результат.Вставить("ОписаниеОшибки", 	ТекстОшибки);
			Результат.Вставить("Подробности",		Подробности);
			
			ОткрытьФормуВыводаОшибки(Результат);
		
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаписатьИнформациюОСпискеДополнительныхВПФ(Документ)
		
		МассивДополинтельныхВПФ = Новый Массив;
		ВыборкаСтрок = СписокДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
		Для каждого СтрокаВыбоки из ВыборкаСтрок цикл 
			Если ЗначениеЗаполнено(СтрокаВыбоки.ВнешняяПечатнаяФорма) Тогда
				МассивДополинтельныхВПФ.Добавить(СтрокаВыбоки.ВнешняяПечатнаяФорма);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивДополинтельныхВПФ.Количество()>0 Тогда
			МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","ЗафиксироватьСписокДополинтельныхВПФПоДокументу", Документ, МассивДополинтельныхВПФ);
		КонецЕсли;
		
	КонецПроцедуры
			
	&НаКлиенте
	Процедура ПодписатьИОтправитьДокументыПакетами(НаборДанных, ResolutionRequestType)
		
		ПараметрыОтправкиНаСогласование= Неопределено;
		Если НЕ ResolutionRequestType = Неопределено Тогда
			Организация= НаборДанных[0].Организация; 
			ПараметрыОтправкиНаСогласование= ПолучитьПараметрыОтправки(Организация, ResolutionRequestType);
			Если ПараметрыОтправкиНаСогласование = Неопределено Тогда
				МетодКлиента("Модуль_Клиент", "ВыбратьПараметрыПолучателяПриОтправкеНаСогласование", ЭтаФорма, Организация, НаборДанных, ResolutionRequestType, "ГрупповаяПередачаНаОбработку");
			Иначе
				ВыполнитьОтправку(НаборДанных, ПараметрыОтправкиНаСогласование);
			КонецЕсли;
		Иначе
			ВыполнитьОтправку(НаборДанных);
		КонецЕсли;
				
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьПараметрыОтправки(Организация, ResolutionRequestType)
		
		ПараметрыОтправки=	Неопределено;
		
		НайденныеПараметрыОтправки=	ТаблицаКэшПараметровОтправки.НайтиСтроки(Новый Структура("Организация", Организация));
		Если НайденныеПараметрыОтправки.Количество() = 0 Тогда
			
			Organization=		МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
			UserPermissions= 	Organization.GetUserPermissions();
			
			Если UserPermissions.CanRequestResolutions Тогда
				Если Organization.GetUsers().Count = 0 Тогда
					ТекстОшибки=	"Отсутствуют пользователи с необходимым правом";
					Подробности=	"В организации " + Организация.Наименование + " нет пользователей с правом " + ?(ResolutionRequestType = "ApprovementRequest", "согласования", "подписи");
					
					Результат=	Новый Структура();
					Результат.Вставить("ОписаниеОшибки", 	ТекстОшибки);
					Результат.Вставить("Подробности",		Подробности);
					ОткрытьФормуВыводаОшибки(Результат);
				КонецЕсли;
			Иначе
				ТекстОшибки=	"Недостаточно прав";
				Подробности=	"У пользователя в организации " + Организация + " отсутствует право передачи на подпись или согласование.";
				
				Результат=	Новый Структура();
				Результат.Вставить("ОписаниеОшибки", 	ТекстОшибки);
				Результат.Вставить("Подробности",		Подробности);
				ОткрытьФормуВыводаОшибки(Результат);
			КонецЕсли;
			
		Иначе
			
			КэшированныеПараметрыОтправки=	НайденныеПараметрыОтправки.Получить(0);
			
			ПараметрыОтправкиНаСогласование=	Новый Структура();
			
			ПараметрыОтправкиНаСогласование.Вставить("Организация", 			КэшированныеПараметрыОтправки.Организация);
			ПараметрыОтправкиНаСогласование.Вставить("ФИОПолучателя",			КэшированныеПараметрыОтправки.ФИОПолучателя);
			ПараметрыОтправкиНаСогласование.Вставить("ДолжностьПолучателя",		КэшированныеПараметрыОтправки.ДолжностьПолучателя);
			ПараметрыОтправкиНаСогласование.Вставить("TargetUserID",			КэшированныеПараметрыОтправки.TargetUserID);
			ПараметрыОтправкиНаСогласование.Вставить("TargetDepartmentID",		КэшированныеПараметрыОтправки.TargetDepartmentID);
			ПараметрыОтправкиНаСогласование.Вставить("ResolutionRequestType",	КэшированныеПараметрыОтправки.ResolutionRequestType);
			ПараметрыОтправкиНаСогласование.Вставить("Комментарий",				КэшированныеПараметрыОтправки.Комментарий);
			ПараметрыОтправкиНаСогласование.Вставить("ЭтоТекущийПользователь",	КэшированныеПараметрыОтправки.ЭтоТекущийПользователь);
			
			
			ПараметрыОтправкиНаСогласование.Вставить("ФИОПодписанта",			КэшированныеПараметрыОтправки.ФИОПодписанта);
			ПараметрыОтправкиНаСогласование.Вставить("ДолжностьПодписанта",		КэшированныеПараметрыОтправки.ДолжностьПодписанта);
			
			ПараметрыОтправки=	ПараметрыОтправкиНаСогласование;
			
		КонецЕсли;
		
		Возврат ПараметрыОтправки;
		
	КонецФункции
	
	&НаСервере
	Процедура ДобавитьФайлыВТаблицуДокументовНаСервере(МассивНеформализованныхДокументов)
						
		ВыделенныеСтрокиТаблицыДокументов= СписокДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		МассивИдентификаторовПакета= Новый Массив;
		
		Для каждого ВыделеннаяСтрока из ВыделенныеСтрокиТаблицыДокументов Цикл
			
			ИдентификаторПакета= ВыделеннаяСтрока.ВременныйИдентификаторПакета;
			
			Если МассивИдентификаторовПакета.Найти(ИдентификаторПакета) = Неопределено Тогда
				
				МассивИдентификаторовПакета.Добавить(ИдентификаторПакета);
				
				МассивДокументовПакета= СписокДокументов.НайтиСтроки(Новый Структура("ВременныйИдентификаторПакета", ИдентификаторПакета));
				
				КрайняяСтрокаВПакете= МассивДокументовПакета[МассивДокументовПакета.Количество()-1];
										
				ИндексКрайнейСтроки= СписокДокументов.Индекс(КрайняяСтрокаВПакете);
				
				// модифицируем крайнюю строку
				Если МассивНеформализованныхДокументов.Количество() > 0 Тогда
					Если МассивДокументовПакета.Количество() > 1 Тогда
						КрайняяСтрокаВПакете.ИндексИконкиПакета=	2;
					Иначе
						КрайняяСтрокаВПакете.ИндексИконкиПакета=	1;
						КрайняяСтрокаВПакете.ЭтоПакет=				Истина;
					КонецЕсли;
				КонецЕсли;
								
				// добавляем новые строки
				СчетчикФайлов= 	0;
				ВсегоФайлов= 	МассивНеформализованныхДокументов.Количество(); 
				
				Для каждого ЭлементМассива из МассивНеформализованныхДокументов Цикл 
					
					СчетчикФайлов= СчетчикФайлов + 1;
										
					ДанныеФайла= 	ЭлементМассива.ДанныеФайла;
					СвойстваФайла= 	ЭлементМассива.СвойстваФайла;
					
					НоваяСтрока= СписокДокументов.Вставить(ИндексКрайнейСтроки + 1);
				
					НоваяСтрока.Вкл= 				Истина;
					НоваяСтрока.СостояниеДокумента=	1;
					НоваяСтрока.ТипДокумента= 		ТипПолуформализованного(ЭлементМассива.DocumentType);
					НоваяСтрока.Организация= 		КрайняяСтрокаВПакете.Организация;
					НоваяСтрока.Контрагент= 		КрайняяСтрокаВПакете.Контрагент;
					НоваяСтрока.CounteragentID=		КрайняяСтрокаВПакете.CounteragentID;
					НоваяСтрока.ВПодразделение= 	КрайняяСтрокаВПакете.ВПодразделение;
					НоваяСтрока.DocumentType= 		ЭлементМассива.DocumentType;
					НоваяСтрока.Дата=				ДанныеФайла.DocumentDate;
					НоваяСтрока.Номер=				ДанныеФайла.DocumentNumber;
					Если ЭлементМассива.DocumentType = "NonformalizedProforma" ИЛИ ЭлементМассива.DocumentType = "AcceptanceCertificate" Тогда
						НоваяСтрока.СуммаДокумента=	ДанныеФайла.Total;
						НоваяСтрока.СуммаНДС=		ДанныеФайла.Vat;
					КонецЕсли;
					НоваяСтрока.НаименованиеПодразделения= КрайняяСтрокаВПакете.НаименованиеПодразделения;
					НоваяСтрока.ЭтоПакет= 			Истина;
					НоваяСтрока.ПозицияСортировки= 	5;
					НоваяСтрока.ИндексИконкиПакета= ?(СчетчикФайлов < ВсегоФайлов, 2, 3);
														
					НоваяСтрока.ВременныйИдентификаторПакета= ИдентификаторПакета;
					НоваяСтрока.СвязующийИдентификаторСтроки= Новый УникальныйИдентификатор;
					НоваяСтрока.ЭтоФайл= 		Истина;
					НоваяСтрока.СвойстваФайла= 	СвойстваФайла;
					НоваяСтрока.ДанныеФайла= 	ДанныеФайла;
																			
					ИндексКрайнейСтроки= СписокДокументов.Индекс(НоваяСтрока);
					
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
		
	////////////////////////////////////////////////////////////////////////////////
	//{ ВЫГРУЗКА ДОКУМЕНТОВ ОДНИМ СООБЩЕНИЕМ
	
		&НаКлиенте
		Процедура ЗапуститьВыгрузку()
			
			Если ПроверитьВозможностьЗапускаВыгрузки() Тогда
				Если МассивЗаданийОтправкиПакета = Неопределено Тогда 
					МассивЗаданийОтправкиПакета= Новый Массив;
				КонецЕсли;
				СоответствиеCustomIdСсылке1С= Новый Соответствие;
							
				СнятьПометкиСоСкрытыхСтрок();
							
				НомерДокумента=				0;
				ОбщийМассив=				СписокДокументов.НайтиСтроки(Новый Структура("Вкл, ДокВыгружен", Истина, Ложь));
				ОбщееКоличествоДокументов=	ОбщийМассив.Количество();
				
				ПодключитьОбработчикОжидания("ВыполнитьВыгрузкуДокумента", 0.1, Истина);
			КонецЕсли;

		КонецПроцедуры

		&НаКлиенте
		Функция ПроверитьВозможностьЗапускаВыгрузки()
			
			Если ResolutionRequestType = Неопределено Тогда
			
				Для Каждого стр из СписокДокументов Цикл 
				
					стр.ПропускатьПриВыгрузке = Ложь;
					
					Если Стр.вкл и НЕ ПустаяСтрока(стр.ОшибкаОтправки) Тогда
						
						ТекстОНевозможностиОтправки = "Отправка данного документа невозможна " + Стр.ТипДокумента + " №" + Стр.Номер + " от " + Стр.Дата
														+ Символы.ПС + Стр.ОшибкаОтправки;
						ПараметрыФормы=	Новый Структура();
						ПараметрыФормы.Вставить("Заголовок", 		"Ошибка отправки документа");
						ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось отправить документ");
						ПараметрыФормы.Вставить("Подробности", 		ТекстОНевозможностиОтправки);
						
						МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы,);
						
						Стр.вкл = Ложь;
						
						Возврат Ложь;
						
					КонецЕсли;
					
				КонецЦикла;	
				
			КонецЕсли;
	
			Возврат Истина;

		КонецФункции
		
		&НаКлиенте
		Процедура СнятьПометкиСоСкрытыхСтрок()
			
			Для Каждого СтрокаСпискаДокументов Из СписокДокументов Цикл
				Если Элементы.СписокДокументов.ПроверитьСтроку(СтрокаСпискаДокументов.ПолучитьИдентификатор()) = Ложь Тогда 
					СтрокаСпискаДокументов.Вкл=	Ложь;
				КонецЕсли;
			КонецЦикла;	
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ВыполнитьВыгрузкуДокумента() Экспорт
			
			ОтключитьОбработчикОжидания("ВыполнитьВыгрузкуДокумента");

			ОбработатьВыполненныеЗадания();
			
			Если МассивЗаданийОтправкиПакета.Количество() >= МаксимальноеКоличествоОдновременныхЗаданий Тогда
				ПодключитьОбработчикОжидания("ВыполнитьВыгрузкуДокумента", 0.1, Истина);
				Возврат;	
			КонецЕсли;

			ТекДанные= Элементы.СписокДокументов.ТекущиеДанные;
			Если ТекДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
							
			ОставшиесяКВыгрузке= СписокДокументов.НайтиСтроки(Новый Структура("Вкл, ДокВыгружен, ПропускатьПриВыгрузке", Истина, Ложь, Ложь));
			Если ОставшиесяКВыгрузке.Количество() > 0 Тогда
				
				//На основании первого документа к выгрузке, выбираем его пакет
				ПерваяСтрокаКВыгрузке=	ОставшиесяКВыгрузке[0];
				МассивСтрокПакета=		СписокДокументов.НайтиСтроки(Новый Структура("Вкл, ДокВыгружен, ВременныйИдентификаторПакета", Истина, Ложь, ПерваяСтрокаКВыгрузке.ВременныйИдентификаторПакета));
				НомерДокумента=			НомерДокумента + 1;
				Состояние("Производится отправка документов в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, НомерДокумента*100/?(ОбщееКоличествоДокументов = 0, 1, ОбщееКоличествоДокументов) , "Отправлено документов " + НомерДокумента + " из " + ОбщееКоличествоДокументов);
				
				ПодписатьИОтправитьДокументыПакетами(МассивСтрокПакета, ResolutionRequestType);
				
			Иначе
				
				// Дожидаемся ответа от сервера по осатвшимся задачам
				Если МассивЗаданийОтправкиПакета.Количество() > 0 Тогда
					ПодключитьОбработчикОжидания("ВыполнитьВыгрузкуДокумента", 0.1, Истина);
					Состояние("Ожидание ответа от сервера");
					Возврат;	
				КонецЕсли;
				
				СписокДокументовПослеОтправки();
					            
				ОбработатьПометки(Истина);
				
				Если Объект.ПараметрыКлиентСервер.ВызовИзРасширения Тогда
					Оповестить("РасширениеДиадокОтправкаДокумента");
					СтруктураПараметрыДокументаРасширение= Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ПодписатьИОтправитьДокумент(ТекущиеДанные, ResolutionRequestType = Неопределено)
			
			ПараметрыОтправкиНаСогласование= Неопределено;
			Если НЕ ResolutionRequestType = Неопределено Тогда
				ПараметрыОтправкиНаСогласование= ПолучитьПараметрыОтправки(ТекущиеДанные.Организация, ResolutionRequestType);
				Если ПараметрыОтправкиНаСогласование = Неопределено Тогда
					МетодКлиента("Модуль_Клиент","ВыбратьПараметрыПолучателяПриОтправкеНаСогласование", ЭтаФорма, ТекущиеДанные, ResolutionRequestType, "ГрупповаяПередачаНаОбработку");
				Иначе
					ВыполнитьОтправку(ТекущиеДанные, ПараметрыОтправкиНаСогласование);
				КонецЕсли;
			Иначе
				ВыполнитьОтправку(ТекущиеДанные);
			КонецЕсли;
					
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ВыполнитьОтправку(НаборДанных, ПараметрыОтправкиНаСогласование = Неопределено)
			
			ПервыйДокументВНаборе= 	НаборДанных[0];
			IdОтправленого= 		ПервыйДокументВНаборе.Id;
					
			Organization= ПолучитьЯщикДиадокОрганизации(ПервыйДокументВНаборе.Организация);
			
			Если ПустаяСтрока(IdОтправленого) Тогда 
			
				Попытка
					ПараметрыPackageSendTask= Новый Структура();
								
					//Заполняем параметры одинаковые для всего пакета
					ПараметрыPackageSendTask.Вставить("Получатель", 						ПервыйДокументВНаборе.Контрагент);
					ПараметрыPackageSendTask.Вставить("ПараметрыОтправкиНаСогласование", 	ПараметрыОтправкиНаСогласование);
					ПараметрыPackageSendTask.Вставить("ФИОПодписанта",                    	МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization));
								
					ПараметрыPackageSendTask.Вставить("IdОтправленого", 					"");
					ПараметрыPackageSendTask.Вставить("Организация", 						ПервыйДокументВНаборе.Организация);
					
					ПараметрыPackageSendTask.Вставить("Organization", 						Organization);
					ПараметрыPackageSendTask.Вставить("CounteragentID",						ПервыйДокументВНаборе.CounteragentID);
					ПараметрыPackageSendTask.Вставить("ReceiverDepartmentId",				ПервыйДокументВНаборе.ToDepartmentID);
																				
					ПараметрыPackageSendTask.Вставить("МассивДокументовПакета", 			НаборДанных);
					ПараметрыPackageSendTask.Вставить("ЭтоПеревыставление", 				Ложь);
					
					ЗаполненныйPackageSendTask= МетодКлиента("Модуль_Выгрузка", "ПолучитьЗаполненныйPackageSendTask", ПараметрыPackageSendTask, СоответствиеCustomIdСсылке1С);
																	
					AsyncTask= МетодКлиента("Модуль_Выгрузка", "ВыполнитьАсинхроннуюОтправкуПакета", ЗаполненныйPackageSendTask, СоответствиеCustomIdСсылке1С);  
					
					МассивЗаданийОтправкиПакета.Добавить(Новый Структура("AsyncTask, OrganizationId, МассивСтрок, ПараметрыОтправкиНаСогласование", AsyncTask, ЗаполненныйPackageSendTask.Organization.id, НаборДанных, ПараметрыОтправкиНаСогласование));
					
					Для каждого СтрокаНаОтправку из НаборДанных Цикл
						СтрокаНаОтправку.ПропускатьПриВыгрузке= Истина;
					КонецЦикла;
											
				Исключение
					
					ДанныеОшибки= ОписаниеОшибки();
					
					Если Найти(ДанныеОшибки, "<head>") = 0 Тогда
						ДанныеОшибки= МетодКлиента("Модуль_Клиент","СформироватьТекстОшибкиДиадок", ДанныеОшибки); 
					КонецЕсли;
																		
					Для каждого СтрокаТекущегоПакета из НаборДанных Цикл
						СтрокаТекущегоПакета.Вкл= Ложь;
					
						Если Найти(ДанныеОшибки, "ОшибкаВалидации") = 0 Тогда
							СтрокаТекущегоПакета.ОшибкаОтправки= ДанныеОшибки;
						КонецЕсли;
					КонецЦикла;
																		
				КонецПопытки;
				
			КонецЕсли;
											
			ВыполнитьВыгрузкуДокумента();
			
		КонецПроцедуры
		
	////////////////////////////////////////////////////////////////////////////////
	//} ВЫГРУЗКА ДОКУМЕНТОВ ОДНИМ СООБЩЕНИЕМ
	
	////////////////////////////////////////////////////////////////////////////////
	//{ ОБРАБОТКА РЕЗУЛЬТАТОВ ВЫГРУЗКИ ДОКУМЕНТОВ
	    				
		&НаКлиенте
		Процедура ОбработатьВыполненныеЗадания()
			
			ц = 0;
			Пока ц < МассивЗаданийОтправкиПакета.Количество() Цикл 
				
				Если МассивЗаданийОтправкиПакета[ц].AsyncTask.isCompleted Тогда
					
					ОбработатьРезультатОтправкиПакетаДокументов(МассивЗаданийОтправкиПакета[ц]);
					МассивЗаданийОтправкиПакета.Удалить(ц);
					
				Иначе
					ц= ц + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецПроцедуры
				
		&НаКлиенте
		Процедура ОбработатьРезультатОтправкиПакетаДокументов(ЗаданиеНаОтправку)
			
			Попытка
				
				МассивСтрокСпискаВыгрузки= ЗаданиеНаОтправку.МассивСтрок;
						
				РезультатОтправки= 	ЗаданиеНаОтправку.AsyncTask.Result;
				PackageDocuments= 	РезультатОтправки.Documents;
								
				МетодКлиента("Модуль_Выгрузка", "ОбработатьОтправленныйПакетДокументов", РезультатОтправки, СоответствиеCustomIdСсылке1С, ЗаданиеНаОтправку.ПараметрыОтправкиНаСогласование); 
				
				Для Каждого СтрокаСпискаВыгрузки Из МассивСтрокСпискаВыгрузки Цикл
					СтрокаСпискаВыгрузки.Вкл= Ложь;
					
					DocumentId= МетодСервера(, "Документ_2_DocumentID", СтрокаСпискаВыгрузки.Документ); 
					СтрокаСпискаВыгрузки.Id= DocumentId;
					
					СтрокаСпискаВыгрузки.ДокВыгружен= Истина;
				КонецЦикла;

			Исключение
				
				МассивСтрокСпискаВыгрузки= ЗаданиеНаОтправку.МассивСтрок;
								
				ТекстОшибки= МетодКлиента("Модуль_Клиент", "СформироватьТекстОшибкиДиадок", ОписаниеОшибки());
				
				Для каждого СтрокаСпискаВыгрузки из МассивСтрокСпискаВыгрузки Цикл
					СтрокаСпискаВыгрузки.Вкл= Ложь;
					СтрокаСпискаВыгрузки.ОшибкаОтправки= ТекстОшибки;
				КонецЦикла;
								
			КонецПопытки;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура СписокДокументовПослеОтправки()
			
			Ц= 0;
			
			КоллекцияСтрокСпискаДокументовКУдалению= Новый Соответствие;
						
			Пока Ц <= СписокДокументов.Количество() - 1 Цикл
				
				СтрокаСпискаДокументов= СписокДокументов[Ц];
				
				Если СтрокаСпискаДокументов.ДокВыгружен Тогда
					
					Если СтрокаСпискаДокументов.ЭтоПакет Тогда
						
						ВременныйИдентификаторПакета= 	СтрокаСпискаДокументов.ВременныйИдентификаторПакета;
						СтрокиДокиПакета= 				СписокДокументов.НайтиСтроки(Новый Структура("ВременныйИдентификаторПакета", ВременныйИдентификаторПакета));
																		
						//1. Отделяем отправленные документы от пакета
						Для каждого СтрокаДокПакета из СтрокиДокиПакета Цикл
							
							Если СтрокаДокПакета.ДокВыгружен Тогда
								
								СтрокаДокПакета.ЭтоПакет= Ложь;
								СтрокаДокПакета.ВременныйИдентификаторПакета= Новый УникальныйИдентификатор;
								
								КоллекцияСтрокСпискаДокументовКУдалению.Вставить(СтрокаДокПакета.СвязующийИдентификаторСтроки, СтрокаДокПакета);
								
							ИначеЕсли ЗначениеЗаполнено(СтрокаДокПакета.ВнешняяПечатнаяФорма) Тогда
								
								МассивСтрокВозможныеДокументыОснования= СписокДокументов.НайтиСтроки(Новый Структура("Документ, ВнешняяПечатнаяФорма", СтрокаДокПакета.Документ, Неопределено));
								
								Для каждого СтрокаВозможныйДокОснование из МассивСтрокВозможныеДокументыОснования Цикл
									
									Если ТипОснованияПодходит(СтрокаВозможныйДокОснование) И СтрокаВозможныйДокОснование.ДокВыгружен Тогда
										
										СтрокаДокПакета.ЭтоПакет= Ложь;
										СтрокаДокПакета.ВременныйИдентификаторПакета= Новый УникальныйИдентификатор;
								
										КоллекцияСтрокСпискаДокументовКУдалению.Вставить(СтрокаДокПакета.СвязующийИдентификаторСтроки, СтрокаДокПакета);											
										
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЦикла;
						
						//2. Переформатируем оставшиеся документы пакета
						СтрокиДокиПакета= СписокДокументов.НайтиСтроки(Новый Структура("ВременныйИдентификаторПакета", ВременныйИдентификаторПакета));
						ПереформатироватьПакетВСпискеДокументовНаОтправку(СтрокиДокиПакета);
						
					Иначе	
						КоллекцияСтрокСпискаДокументовКУдалению.Вставить(СтрокаСпискаДокументов.СвязующийИдентификаторСтроки, СтрокаСпискаДокументов);	
					КонецЕсли;
															
				Иначе
					Если    ЗначениеЗаполнено(СтрокаСпискаДокументов.ОшибкаОтправки)
						ИЛИ ЗначениеЗаполнено(СтрокаСпискаДокументов.ОшибкаВалидации) Тогда
						
						СтрокаСпискаДокументов.СостояниеДокумента= 4;
					КонецЕсли;
				КонецЕсли;
				
				Ц= Ц + 1;
								
			КонецЦикла;
			
			Для каждого ЭлементКоллекции из КоллекцияСтрокСпискаДокументовКУдалению Цикл
				СписокДокументов.Удалить(ЭлементКоллекции.Значение);	
			КонецЦикла;
			
			КоллекцияСтрокСпискаДокументовКУдалению.Очистить();
						
		КонецПроцедуры
						
		&НаКлиенте
		Функция ТипОснованияПодходит(СтрокаСпискаДокументовНаОтправку)
			
			Если    СтрокаСпискаДокументовНаОтправку.DocumentType = "XmlTorg12"
				ИЛИ СтрокаСпискаДокументовНаОтправку.DocumentType = "XmlAcceptanceCertificate"
				ИЛИ (СтрокаСпискаДокументовНаОтправку.DocumentType = "UniversalTransferDocument" 
						И (МетодКлиента("Модуль_Клиент", "ФункцияУПД", СтрокаСпискаДокументовНаОтправку.ТипДокумента) = "ДОП"
							ИЛИ МетодКлиента("Модуль_Клиент", "ФункцияУПД", СтрокаСпискаДокументовНаОтправку.ТипДокумента) = "СЧФДОП")) Тогда
								
				Возврат Истина;
				
			Иначе
				Возврат Ложь;
			КонецЕсли;	
			
		КонецФункции
						
	////////////////////////////////////////////////////////////////////////////////
	//} ОБРАБОТКА РЕЗУЛЬТАТОВ ВЫГРУЗКИ ДОКУМЕНТОВ
	
//} ТЕЛО МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	&НаКлиенте
	Процедура ОткрытьФормуВыводаОшибки(Результат, ЗакрытьФорму = Ложь)
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("Заголовок", 		"Ошибка работы с модулем " +Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		ПараметрыФормы.Вставить("ОписаниеОшибки", 	Результат.ОписаниеОшибки);
		ПараметрыФормы.Вставить("Подробности", 		Результат.Подробности);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытияФормыОшибки", ЗакрытьФорму);
		
	КонецПроцедуры
	
	&НаСервере
	Функция Организация_2_BoxID_Форма(Организация)
		Возврат МетодСервера(,"Организация_2_BoxID", Организация);
	КонецФункции
	
	&НаСервере
	Функция  ВыгрузитьКолонкуМассиваСтруктур(МассивСтруктур, ИмяКолонки)
		результат = новый массив;
		Для Каждого стр из МассивСтруктур цикл
			Если стр.Свойство(ИмяКолонки) Тогда
				Результат.Добавить(стр[ИмяКолонки]);
			КонецЕсли;
		КонецЦикла;
		Возврат Результат;	
	КонецФункции
	
	&НаСервере
	Функция ПолучитьЗначениеСвойства(Знач ОбъектВладелецСвойства, Знач НаименованиеСвойства)
		
		Возврат МетодСервера(,"ПолучитьЗначениеСвойства", ОбъектВладелецСвойства, НаименованиеСвойства);
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ТаблицаЗначений_2_МассивСтруктур(ТаблЗнач)
		Результат = Новый Массив;
		СтрокаКлючей = "";
		Для Каждого Колонка из ТаблЗнач.Колонки Цикл
			СтрокаКлючей = СтрокаКлючей +?(ПустаяСтрока(СтрокаКлючей),"",",")+ Колонка.Имя;
		КонецЦикла;                                                        
		Если ТипЗнч(ТаблЗнач) = Тип("ТаблицаЗначений") тогда
			
			Для Каждого Стр Из ТаблЗнач Цикл
				ЭлементСписка = Новый  Структура(СтрокаКлючей);
				ЗаполнитьЗначенияСвойств(ЭлементСписка,Стр);
				Результат.Добавить(ЭлементСписка);             
			КонецЦикла;
		КонецЕсли;
		Возврат Результат;
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ПолучитьОписаниеТиповСтрокой(ЗначениеЭл)
		СтрЗаменТипов = Новый Структура("Справочник,Документ,Перечисление","СправочникСсылка","ДокументСсылка","ПеречислениеСсылка");
		
		ТипКолонки = ТипЗнч(ЗначениеЭл);
		МассивТ= Новый массив;
		МД = метаданные.найтипотипу(типзнч(ЗначениеЭл));
		Если МД = Неопределено Тогда
			ПолноеИмяТипа = Строка(ТипЗнч(ЗначениеЭл));
		Иначе
			ПолноеИмяТипа = МД.ПолноеИмя();
			Для Каждого стрхх из СтрЗаменТипов цикл
				Если Найти(ПолноеИмяТипа,стрхх.Ключ) <> 0 Тогда
					ПолноеИмяТипа = СтрЗаменить(ПолноеИмяТипа, стрхх.Ключ, стрхх.Значение);
					прервать;
				КонецЕсли;
			конеццикла;
		КонецЕсли;
		Если ПолноеИмяТипа = "Не определено" Тогда
			ПолноеИмяТипа = "Строка"; //проверить - заглушка пока!!!
		КонецЕсли;
		
		возврат  ПолноеИмяТипа
	КонецФункции	
	
	&НаКлиенте
	Процедура ЗаполнитьСписокВыбораТипыДокументов(Элемент)
		
		Если Элемент.СписокВыбора.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		
		Элемент.СписокВыбора.Очистить();
		
		Элемент.СписокВыбора.Добавить("1", "Накладные"	    );
		Элемент.СписокВыбора.Добавить("2", "Счета-фактуры"  );
		Элемент.СписокВыбора.Добавить("5", МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФДОП"));
		Элемент.СписокВыбора.Добавить("3", "Счета на оплату");
		Элемент.СписокВыбора.Добавить("4", "Акты сверки"	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПереформатироватьПакетВСпискеДокументовНаОтправку(КоллекцияДокиПакетаСпискаНаВыгрузку)
		
		СчетчикДокументовВПакете= 0;
		НовыйВременныйИдентификаторПакета= Новый УникальныйИдентификатор;
		
		Если КоллекцияДокиПакетаСпискаНаВыгрузку.Количество() = 1 Тогда
			КоллекцияДокиПакетаСпискаНаВыгрузку[0].ЭтоПакет= Ложь;
			КоллекцияДокиПакетаСпискаНаВыгрузку[0].ИндексИконкиПакета= 0;
			КоллекцияДокиПакетаСпискаНаВыгрузку[0].ВременныйИдентификаторПакета= НовыйВременныйИдентификаторПакета;
			
		Иначе
			
			Для каждого СтрокаТЗДокументПакета из КоллекцияДокиПакетаСпискаНаВыгрузку Цикл
						
				Если СчетчикДокументовВПакете = 0 Тогда
					СтрокаТЗДокументПакета.ИндексИконкиПакета= 1;
				ИначеЕсли СчетчикДокументовВПакете = КоллекцияДокиПакетаСпискаНаВыгрузку.Количество()-1 Тогда
					СтрокаТЗДокументПакета.ИндексИконкиПакета= 3;	
				Иначе
					СтрокаТЗДокументПакета.ИндексИконкиПакета= 2;
				КонецЕсли;
				
				СтрокаТЗДокументПакета.ВременныйИдентификаторПакета= НовыйВременныйИдентификаторПакета;
				
				СчетчикДокументовВПакете= СчетчикДокументовВПакете + 1;
				
			КонецЦикла;
			
		КонецЕсли;		
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыбратьФайлыНаДиске(Операция)
		
		Каталог= ?(КаталогВыбораФайлов = "", "C:\", КаталогВыбораФайлов);
		
		ДиалогВыбора= МетодКлиента("Модуль_Клиент", "ЗаполненныйДиалогВыбораФайла", Истина, Каталог);
		
		ДополнительныеПараметры= Новый Структура("ДиалогВыбораФайла", ДиалогВыбора);
		
		Если Операция = "СамостоятельныйПакет" Тогда
			ДиалогВыбора.Показать(Новый ОписаниеОповещения("ПослеВыбораФайлаВСамостоятельныйПакет", ЭтотОбъект, ДополнительныеПараметры));
		ИначеЕсли Операция = "ДобавитьВВыделенныеПакеты" Тогда
			ДиалогВыбора.Показать(Новый ОписаниеОповещения("ПослеВыбораФайлаВВыделенныеПакеты", ЭтотОбъект, ДополнительныеПараметры));
		КонецЕсли;
		
	КонецПроцедуры	
	
	&НаСервере
	Функция ТипПолуформализованного(DocumentType)
		
		Тип= "Неформализованный"; 
		
		Если DocumentType = "PriceListAgreement" Тогда
			Возврат "Протокол согласования цены";
		ИначеЕсли DocumentType = "CertificateRegistry" Тогда	
			Возврат "Реестр сертификатов";
		ИначеЕсли DocumentType = "ServiceDetails" Тогда	
			Возврат "Детализация";
		ИначеЕсли DocumentType = "ReconciliationAct" Тогда	
			Возврат "Акт сверки";
		ИначеЕсли DocumentType = "NonformalizedProforma" Тогда	
			Возврат "Счет на оплату";
		ИначеЕсли DocumentType = "AcceptanceCertificate" Тогда	
			Возврат "Акт вып. работ";
		ИначеЕсли DocumentType = "Contract" Тогда	
			Возврат "Договор";
		КонецЕсли;
		
		Возврат Тип; 
		
	КонецФункции
		
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ОБРАБОТКА СОБЫТИЙ

	&НаКлиенте
	Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
		
		ТекущиеДанные= Элементы.СписокДокументов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.СписокДокументовОткрытьДокумент1С.Доступность= ЗначениеЗаполнено(ТекущиеДанные.Документ);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПолучателя(ПараметрыОтправкиНаСогласование, НаборДанных) Экспорт
		
		Если НЕ ПараметрыОтправкиНаСогласование = Неопределено Тогда
			
			НовыеКэшированныеПараметрыОтправки=							ТаблицаКэшПараметровОтправки.Добавить();
			НовыеКэшированныеПараметрыОтправки.Организация=				ПараметрыОтправкиНаСогласование.Организация;
			НовыеКэшированныеПараметрыОтправки.ФИОПолучателя=			ПараметрыОтправкиНаСогласование.ФИОПолучателя;
			НовыеКэшированныеПараметрыОтправки.ДолжностьПолучателя=		ПараметрыОтправкиНаСогласование.ДолжностьПолучателя;
			НовыеКэшированныеПараметрыОтправки.TargetUserID=			ПараметрыОтправкиНаСогласование.TargetUserID;
			НовыеКэшированныеПараметрыОтправки.TargetDepartmentID=		ПараметрыОтправкиНаСогласование.TargetDepartmentID;
			НовыеКэшированныеПараметрыОтправки.ResolutionRequestType=	ПараметрыОтправкиНаСогласование.ResolutionRequestType;
			НовыеКэшированныеПараметрыОтправки.Комментарий=				ПараметрыОтправкиНаСогласование.Комментарий;
			НовыеКэшированныеПараметрыОтправки.ЭтоТекущийПользователь=	ПараметрыОтправкиНаСогласование.ЭтоТекущийПользователь;
						
			НовыеКэшированныеПараметрыОтправки.ДолжностьПодписанта=		ПараметрыОтправкиНаСогласование.ДолжностьПодписанта;
			НовыеКэшированныеПараметрыОтправки.ФИОПодписанта=			ПараметрыОтправкиНаСогласование.ФИОПодписанта;
			
			ВыполнитьОтправку(НаборДанных, ПараметрыОтправкиНаСогласование);
			
		Иначе
			ОтключитьОбработчикОжидания("ВыполнитьВыгрузкуДокумента");
			Возврат;
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыФормаВводаТаблицыЗначений(РезультатЗакрытия, ТекущиеДанные) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			ТекущиеДанные.ДопПоле=	РезультатЗакрытия;
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации(РезультатЗакрытия, ТекущиеДанные) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Если НЕ РезультатЗакрытия.DepartmentID = ТекущиеДанные.ToDepartmentID ИЛИ РезультатЗакрытия.УстановитьДляВсех Тогда
				УстановитьПараметрыПодразделения(ТекущиеДанные, РезультатЗакрытия.DepartmentName, РезультатЗакрытия.DepartmentID, РезультатЗакрытия.УстановитьДляВсех);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикВыборОрганизацииОтправителя(РезультатВыбора, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатВыбора = Неопределено тогда 
			ОрганизацияОтправитель= РезультатВыбора.Значение;
			ТаблицаОтношенийОрганизацийКонтрагентов=	Неопределено;
			УправлениеФормой();
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораИнтервала(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено
			 И (ДатаНачала <> РезультатЗакрытия.ДатаНачала
				ИЛИ ДатаОкончания <> РезультатЗакрытия.ДатаОкончания)
		Тогда
		
			СписокДокументов.Очистить();
			
			ДатаНачала=		РезультатЗакрытия.ДатаНачала;
			ДатаОкончания=	РезультатЗакрытия.ДатаОкончания;
			
			Элементы.СписокДокументовУстановитьИнтервал.Заголовок= МетодКлиента("Модуль_Клиент","ПредставлениеПериодаДД", ДатаНачала, ДатаОкончания);
			
			ОбновитьСписокСтраницыОтправкиВДиадок();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытияФормыОшибки(РезультатВыбора, ЗакрытьФорму) Экспорт
		
		Если ЗакрытьФорму = Истина Тогда
			Закрыть();
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораКонтрагента(ВыбранныйКонтрагент, ДополнительныеПараметры) Экспорт
		
		Если НЕ ВыбранныйКонтрагент = Неопределено Тогда
			КонтрагентПолучатель=	ВыбранныйКонтрагент.Представление;
			КонтрагентПолучательID=	ВыбранныйКонтрагент.ID;
			УправлениеФормой();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаКомментарияДопПоля(РезультатЗакрытия, ТекущиеДанные) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			ТекущиеДанные.ДопПоле=	РезультатЗакрытия.Комментарий;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаКомментарияКФайлу(РезультатЗакрытия, СтрокаСпискаФайлов) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			СтрокаСпискаФайлов.Комментарий=	РезультатЗакрытия.Комментарий;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПослеВыбораФайлаВСамостоятельныйПакет(МассивАдресовФайлов, ДополнительныеПараметры) Экспорт
		
		Если МассивАдресовФайлов = Неопределено Тогда
			Возврат;
		Иначе
			Если МассивАдресовФайлов.Количество() > 0 Тогда 
				
				МассивБольшиеФайлы= Новый Массив;
				МетодКлиента("Модуль_Клиент", "ПроверитьРазмерВыбранныхФайлов", МассивАдресовФайлов, МассивБольшиеФайлы);
				
				Если МассивБольшиеФайлы.Количество() > 0 Тогда
					МетодКлиента("Модуль_Клиент", "ОбработатьМассивБольшихФайлов", МассивБольшиеФайлы, ЭтаФорма);
					МассивБольшиеФайлы= Неопределено;
				КонецЕсли;
							
				КаталогВыбораФайлов= ДополнительныеПараметры.ДиалогВыбораФайла.Каталог;
							
				ПараметрыФормы= Новый Структура;
			
				ПараметрыФормы.Вставить("ТочкаВызова", 	"ТаблицаДокументовНаОтправку");
				ПараметрыФормы.Вставить("Операция", 	"СоздатьНовыйПакет");
				ПараметрыФормы.Вставить("МассивАдресовФайлов",	МассивАдресовФайлов);
				ПараметрыФормы.Вставить("КаталогВыбораФайлов",	КаталогВыбораФайлов);
			
				МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаДокумента", ПараметрыФормы, ЭтаФорма);
			КонецЕсли;
				
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПослеВыбораФайлаВВыделенныеПакеты(МассивАдресовФайлов, ДополнительныеПараметры) Экспорт
		
		Если МассивАдресовФайлов = Неопределено Тогда
			Возврат;
		Иначе
			Если МассивАдресовФайлов.Количество() > 0 Тогда
				
				МассивБольшиеФайлы= Новый Массив;
				МетодКлиента("Модуль_Клиент", "ПроверитьРазмерВыбранныхФайлов", МассивАдресовФайлов, МассивБольшиеФайлы);
				
				Если МассивБольшиеФайлы.Количество() > 0 Тогда
					МетодКлиента("Модуль_Клиент", "ОбработатьМассивБольшихФайлов", МассивБольшиеФайлы, ЭтаФорма);
					МассивБольшиеФайлы= Неопределено;
				КонецЕсли;
								
				КаталогВыбораФайлов= ДополнительныеПараметры.ДиалогВыбораФайла.Каталог;
						
				ПараметрыФормы= Новый Структура;
		
				ПараметрыФормы.Вставить("ТочкаВызова", 	"ТаблицаДокументовНаОтправку");
				ПараметрыФормы.Вставить("Операция", 	"ДобавитьВВыделенныеПакеты");
				ПараметрыФормы.Вставить("МассивАдресовФайлов",	МассивАдресовФайлов);
				ПараметрыФормы.Вставить("КаталогВыбораФайлов",	КаталогВыбораФайлов);
		
				МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикЗакрытияФормыДокумента_МодификацияПакета", , ЭтаФорма);
			КонецЕсли;
				
		КонецЕсли;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура ОбработчикЗакрытияФормыДокумента_МодификацияПакета(РезультатЗакрытия, ПараметрыОбработчика) Экспорт
		
		Если РезультатЗакрытия = Неопределено Тогда
			
			Возврат;
			
		Иначе
						
			МассивНеформализованныхДокументов= РезультатЗакрытия.МассивНеформализованныхДокументов;
			ДобавитьФайлыВТаблицуДокументовНаСервере(МассивНеформализованныхДокументов);
									
		КонецЕсли;
		
	КонецПроцедуры
		
//} ОБРАБОТКА СОБЫТИЙ
////////////////////////////////////////////////////////////////////////////////
	
////////////////////////////////////////////////////////////////////////////////
//{ УПРАВЛЕНИЕ ФОРМОЙ
	
	&НаСервере
	Функция ПроверитьПометкиДокументов()
		
		СтруктураИзменений=	Новый Структура;
		СтруктураИзменений.Вставить("НужноМенять", Ложь);
		СтруктураИзменений.Вставить("Вкл", Ложь);
		
		ТабДанные=	СписокДокументов.Выгрузить(, "Вкл");
		ТабДанные.Свернуть("Вкл");
		
		Если ТабДанные.Количество() = 1 Тогда
			СтруктураИзменений.Вставить("НужноМенять", Истина);
			СтрокаТаблицы=	ТабДанные.Получить(0);
			СтруктураИзменений.Вставить("Вкл", СтрокаТаблицы.Вкл);
		КонецЕсли;
		
		Возврат СтруктураИзменений;
		
	КонецФункции
	
	&НаКлиенте
	Процедура СписокДокументовВклПриИзменении(Элемент)
		
		ТекущаяСтрока = Элементы.СписокДокументов.ТекущиеДанные;
		Документ = ТекущаяСтрока.Документ;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ID)=Ложь Тогда
		
			Если ЗначениеЗаполнено(ТекущаяСтрока.ВнешняяПечатнаяФорма)=Истина И ТекущаяСтрока.Вкл=Истина Тогда
							
				НаборСтрок = СписокДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
				
				Для каждого Строка из НаборСтрок Цикл
					
					Если МетодКлиента("Модуль_Клиент", "НеобходимоОграничениеНаОтправку", Документ, ТекущаяСтрока.ВнешняяПечатнаяФорма, ТекущаяСтрока.Проведен) Тогда
						ОтработатьОграничениеПоВалютномуДокументу(Строка);
					Иначе
						Строка.Вкл = ?(ЗначениеЗаполнено(Строка.ID)=Истина, Строка.Вкл, Истина);	
					КонецЕсли;
										
				КонецЦикла;
										
			ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВнешняяПечатнаяФорма)=Ложь И ТекущаяСтрока.Вкл=Ложь Тогда
									
				НаборСтрок = СписокДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
									
				Для каждого Строка из НаборСтрок Цикл
					Если ЗначениеЗаполнено(Строка.ВнешняяПечатнаяФорма) = Истина Тогда
						Строка.Вкл = Ложь;
					КонецЕсли;
				КонецЦикла;
								
			КонецЕсли;
					
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВнешняяПечатнаяФорма)=Ложь И ТекущаяСтрока.Вкл=Истина Тогда
			Если МетодКлиента("Модуль_Клиент", "НеобходимоОграничениеНаОтправку", Документ, ТекущаяСтрока.ВнешняяПечатнаяФорма, ТекущаяСтрока.Проведен) Тогда
				ОтработатьОграничениеПоВалютномуДокументу(ТекущаяСтрока);	
			КонецЕсли;
		КонецЕсли;
								
		СтруктураИзменений=	ПроверитьПометкиДокументов();
		
		Если СтруктураИзменений.НужноМенять Тогда
			УстановитьКартинкуИЗаголовокКнопкиПометки(СтруктураИзменений.Вкл);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтработатьОграничениеПоВалютномуДокументу(ТекущаяСтрока)
		ТекущаяСтрока.Вкл = Ложь;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВнешняяПечатнаяФорма)=Истина Тогда
			Сообщить("Документ "+ТекущаяСтрока.Документ+" валютный и не проведен.");
		Иначе
			Сообщить("Документ "+ТекущаяСтрока.ТипДокумента+" № "+СокрЛП(ТекущаяСтрока.Номер)+" от "+Формат(ТекущаяСтрока.Дата, "ДЛФ=Д")+" валютный и не проведен.");
		КонецЕсли;
		
		Сообщить("Для отправки валютного документа, необходимо выполнить его проведение.");	
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		УстановитьНаименованиеСистемыНаСервере();
		
		Элементы.Контрагент.ОграничениеТипа= Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		
		Параметры.Свойство("Организация", Организация);
		Параметры.Свойство("Организация", ОрганизацияОтправитель);
		
		Если Параметры.свойство("ОписаниеКонтрагента") Тогда 
			Контрагент= 			Параметры.ОписаниеКонтрагента.Контрагент;
			КонтрагентПолучатель= 	Параметры.ОписаниеКонтрагента.CounteragentName;
			КонтрагентПолучательID= Параметры.ОписаниеКонтрагента.CounteragentID;
		КонецЕсли;
		
		Если Параметры.Свойство("ИспользоватьСтарыйИнтерфейсОтправкиФайлов") Тогда
			Элементы.ОтправкаСДиска.Видимость= Параметры.ИспользоватьСтарыйИнтерфейсОтправкиФайлов; 
		КонецЕсли;
						
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		ПлатформаПриОткрытии(Отказ);
		
		ДатаНачала=    НачалоДня(ТекущаяДата());
		ДатаОкончания= КонецДня(ТекущаяДата());
		
		Если СтруктураПараметрыДокументаРасширение <> Неопределено Тогда
			Элементы.ГруппаОтбор.Видимость 			= Ложь;
			Элементы.ОтправкаСДиска.Видимость 	= Ложь;
			Элементы.СписокДокументовУстановитьИнтервал.Видимость = Ложь;
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			ОбновитьСписокСтраницыОтправкиВДиадокРасширение();
		Иначе
			ПодключитьОбработчикОжидания("ОбновитьСписокСтраницыОтправкиВДиадок", 0.1, Истина);
		КонецЕсли;
		
		Элементы.СписокДокументовУстановитьИнтервал.Заголовок= МетодКлиента("Модуль_Клиент","ПредставлениеПериодаДД", ДатаНачала, ДатаОкончания);
		
		Элементы.Организация.СписокВыбора.Очистить();
		Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком);
		
		УправлениеФормой();
							
	КонецПроцедуры

	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.ЗагрузитьЗначения(Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, Организация);
		
		ТаблицаОтношенийОрганизацийКонтрагентов= Неопределено;
		
		ПодключитьОбработчикОжидания("ОбновитьСписокСтраницыОтправкиВДиадок", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентПриИзменении(Элемент)
		
		ПодключитьОбработчикОжидания("ОбновитьСписокСтраницыОтправкиВДиадок", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТипыДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораТипыДокументов(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТипыДокументовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораТипыДокументов(Элемент);
		
	КонецПроцедуры
	
	
	&НаКлиенте
	Процедура ТипыДокументовПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, ТипыДокументов);
		
		ПодключитьОбработчикОжидания("ОбновитьСписокСтраницыОтправкиВДиадок", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокДокументовПередУдалением(Элемент, Отказ)
		отказ = истина;
	КонецПроцедуры
	
	&НаКлиенте
	Функция УстановитьПараметрыПодразделения(ТекущиеДанные, DepartmentName, DepartmentID, УстановитьДляВсех = Ложь)
		
		Если УстановитьДляВсех Тогда
			
			ОтборСтрок=	Новый Структура("Контрагент", ТекущиеДанные.Контрагент);
			НайденныеСтроки= СписокДокументов.НайтиСтроки(ОтборСтрок);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.НаименованиеПодразделения=	DepartmentName;
				НайденнаяСтрока.ToDepartmentID=				DepartmentID;
			КонецЦикла;
			
		Иначе
			
			Если ТекущиеДанные.ЭтоПакет Тогда
				
				ОтборСтрок=	Новый Структура("ВременныйИдентификаторПакета", ТекущиеДанные.ВременныйИдентификаторПакета);
				НайденныеСтроки= СписокДокументов.НайтиСтроки(ОтборСтрок);
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.НаименованиеПодразделения=	DepartmentName;
					НайденнаяСтрока.ToDepartmentID=				DepartmentID;
				КонецЦикла;
				
			Иначе
				
				ТекущиеДанные.НаименованиеПодразделения=	DepartmentName;
				ТекущиеДанные.ToDepartmentID=				DepartmentID;
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Процедура СписокДокументовПередНачаломИзменения(Элемент, Отказ)
		
		ТекущиеДанные=	Элементы.СписокДокументов.ТекущиеДанные;
		
		Если Элемент.ТекущийЭлемент.имя = "СписокДокументовДопПоле" Тогда
			
			Отказ=	Истина;
			
			Если ТекущиеДанные.ТребуетсяКлючЗначение = Истина Тогда
				ПараметрыФормы=	Новый Структура();
				ПараметрыФормы.Вставить("СтрокаКлючЗначение", 	ТекущиеДанные.ДопПоле);
				ПараметрыФормы.Вставить("DocumentType", 		ТекущиеДанные.DocumentType);
				ПараметрыФормы.Вставить("Организация", 			ТекущиеДанные.Организация);
				ПараметрыФормы.Вставить("IDОрганизации", 		ТекущиеДанные.CounteragentID);
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаТаблицыЗначений", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыФормаВводаТаблицыЗначений", ТекущиеДанные);
			Иначе
				ПараметрыФормы=	Новый Структура();
				ПараметрыФормы.Вставить("Заголовок",	"Дополнительное поле");
				ПараметрыФормы.Вставить("Комментарий", 	Элементы.СписокДокументов.ТекущиеДанные.ДопПоле);
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаКомментария", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаКомментарияДопПоля", ТекущиеДанные);
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "СписокДокументовНаименованиеПодразделения" Тогда
			
			Отказ=	Истина;
			
			Organization= МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", ТекущиеДанные.Организация);
			Если Organization = Неопределено Тогда 
				Отказ=	Истина;
				ПоказатьПредупреждение(, "Не удалось получить Организацию " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы , 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				Возврат;
			КонецЕсли;
			
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("DepartmentId", 	ТекущиеДанные.ToDepartmentID);
			ПараметрыФормы.Вставить("OrganizationId", 	Organization.Id);
			ПараметрыФормы.Вставить("CounteragentID", 	ТекущиеДанные.CounteragentID);

			ПараметрыФормы.Вставить("Режим", 			"УстановитьДляВсех");
			
			МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ВыборПодразделенияОрганизации", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации", ТекущиеДанные);
			
		ИначеЕсли Элемент.ТекущийЭлемент.Имя <> "СписокДокументовВкл" Тогда
			Отказ= Истина;
			ПросмотрФормы("");
		ИначеЕсли Элементы.СписокДокументов.ТекущиеДанные.ДокВыгружен Тогда 
			Отказ= Истина;
			ПоказатьПредупреждение(, "Этот документ уже выгружен", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		ИначеЕсли Найти(Элементы.СписокДокументов.ТекущиеДанные.ТипДокумента, "тестовый") = 0 
				И ПолучитьЯщикДиадокОрганизации(Элементы.СписокДокументов.ТекущиеДанные.Организация).certificate = "" Тогда
				
			//пытаемся отправить нетестовый документ, используя логин-парольного пользователя
			Отказ= Истина;
			ПоказатьПредупреждение(, "Отправка данного документа невозможна.
									 |Отправка юридически значимого документа возможна только по сертификату.", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		КонецЕсли;	
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СнятьУстановитьПометки(Пометка)
		
		Для Каждого СтрокаСпискаДокументов Из СписокДокументов Цикл
			Если Пометка Тогда
				Если НЕ СтрокаСпискаДокументов.ДокВыгружен Тогда
					
					Если МетодКлиента("Модуль_Клиент", "НеобходимоОграничениеНаОтправку", СтрокаСпискаДокументов.Документ, СтрокаСпискаДокументов.ВнешняяПечатнаяФорма, СтрокаСпискаДокументов.Проведен) Тогда
						ОтработатьОграничениеПоВалютномуДокументу(СтрокаСпискаДокументов);
					Иначе
						СтрокаСпискаДокументов.Вкл=	Пометка;	
					КонецЕсли;
									
				КонецЕсли;
			Иначе
				СтрокаСпискаДокументов.Вкл=	Пометка;
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьКартинкуИЗаголовокКнопкиПометки(Пометка)
		
		Если Пометка Тогда
			Элементы.СписокДокументов.КоманднаяПанель.ПодчиненныеЭлементы.СписокДокументовПометитьСнятьПометку.Картинка= 	БиблиотекаКартинок.УстановитьФлажки;
			Элементы.СписокДокументов.КоманднаяПанель.ПодчиненныеЭлементы.СписокДокументовПометитьСнятьПометку.Заголовок=	"Снять пометку со всех документов";
		Иначе
			Элементы.СписокДокументов.КоманднаяПанель.ПодчиненныеЭлементы.СписокДокументовПометитьСнятьПометку.Картинка= 	БиблиотекаКартинок.СнятьФлажки;
			Элементы.СписокДокументов.КоманднаяПанель.ПодчиненныеЭлементы.СписокДокументовПометитьСнятьПометку.Заголовок=	"Пометить все документы";
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьПометки(СбросПометок = Ложь)
		
		Если Элементы.СписокДокументов.КоманднаяПанель.ПодчиненныеЭлементы.СписокДокументовПометитьСнятьПометку.Картинка= 	БиблиотекаКартинок.СнятьФлажки 
			И НЕ СбросПометок Тогда
			УстановитьКартинкуИЗаголовокКнопкиПометки(Истина);
			СнятьУстановитьПометки(Истина);
		Иначе
			УстановитьКартинкуИЗаголовокКнопкиПометки(Ложь);
			СнятьУстановитьПометки(Ложь);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЗначениеЗаполнено(ОрганизацияОтправитель) Тогда
			ПоказатьПредупреждение(, "Выберите отправителя", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("ОрганизацияОтправитель", ОрганизацияОтправитель);
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораКонтрагента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораКонтрагента");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		СтандартнаяОбработка = ложь;
		
		СписокОрг = новый СписокЗначений;
		Для каждого ЭлементКонтекста из Платформа.ПараметрыКлиент.КонтекстДиадока цикл 
			СписокОрг.Добавить(ЭлементКонтекста.Организация);
		КонецЦикла;
		
		ОбработчикВыборОрганизацииОтправителя=	Новый ОписаниеОповещения("ОбработчикВыборОрганизацииОтправителя", ЭтаФорма);
		СписокОрг.СортироватьПоЗначению();
		ПоказатьВыборИзСписка(ОбработчикВыборОрганизацииОтправителя, СписокОрг);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура УправлениеФормой()
		
		Если ЗначениеЗаполнено(ОрганизацияОтправитель) И НЕ ПустаяСтрока(КонтрагентПолучательID) Тогда
			
			Organization=	МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", ОрганизацияОтправитель);
			Counteragent=	Organization.GetCounteragentById(КонтрагентПолучательID);
			
			ЭтоТестовый = ?(Organization.isTest ИЛИ Organization.isPilot ИЛИ Counteragent.isTest ИЛИ Counteragent.isPilot, Истина, Ложь);
			
			Если НЕ ЭтоТестовый И Organization.AuthenticateType <> "Certificate" Тогда
				Элементы.ДекорацияПредупреждение.Заголовок=		"Отправка юридически значимого документа возможна только по сертификату.";
				Элементы.ДекорацияПредупреждение.Видимость=		Истина;
				Элементы.ВыгрузитьСДиска.Доступность=			Ложь;
			ИначеЕсли ЭтоТестовый Тогда
				Элементы.ДекорацияПредупреждение.Заголовок=		"Отправляемые файлы будут тестовыми.";
				Элементы.ДекорацияПредупреждение.Видимость=		Истина;
				Элементы.ВыгрузитьСДиска.Доступность=			Истина;
			Иначе
				Элементы.ДекорацияПредупреждение.Видимость=		Ложь;
				Элементы.ВыгрузитьСДиска.Доступность=			Истина;
			КонецЕсли;
			
		Иначе
			Элементы.ДекорацияПредупреждение.Видимость=		Ложь;
			Элементы.ВыгрузитьСДиска.Доступность=			Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.InitialDocumentID) Тогда 
			Элементы.Организация.Доступность= 			 Ложь;
			Элементы.Контрагент.Доступность= 			 Ложь;
			Элементы.ОрганизацияОтправитель.Доступность= Ложь;
			Элементы.КонтрагентПолучатель.Доступность= 	 Ложь;
		КонецЕсли;
				
		УстановитьНаименованиеСистемы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьНаименованиеСистемы()
		
		Заголовок = "Отправка документов через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		
		//Элементы.НадписьОтправленныеСчетаФактуры.Заголовок = "Список Документов для отправки через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		//Элементы.НадписьОтправленныеФайлы.Заголовок = "Список файлов для отправки через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		
	КонецПроцедуры // ЗаполнитьЗаголовкиФормы()

	&НаСервере
	Процедура УстановитьНаименованиеСистемыНаСервере()
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		Этаформа.Команды.Выгрузить.Подсказка = "Подписать и отправить помеченные документы через " + СловарьWL.НаименованиеСистемы;	
		Этаформа.Команды.УстановитьИнтервал.Подсказка = "Установить интервал даты учета документов, предназначенных для отправки через " + СловарьWL.НаименованиеСистемы;	
		Этаформа.Команды.Обновить.Подсказка = "Обновить список документов, предназначенных для отправки через " + СловарьWL.НаименованиеСистемы;	
		
	КонецПроцедуры // УстановитьНаименованиеСистемыНаСервере()
	
	&НаКлиенте
	Процедура КонтрагентПолучательОчистка(Элемент, СтандартнаяОбработка)
		
		КонтрагентПолучательID=	"";
		УправлениеФормой();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокФайловНаОтправкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		Если Элементы.СписокФайловНаОтправку.ТекущийЭлемент.Имя = "СписокФайловНаОтправкуФайл" Тогда
			ЗапуститьПриложение(Элементы.СписокФайловНаОтправку.ТекущиеДанные.ПутьКФайлу);
		ИначеЕсли Элементы.СписокФайловНаОтправку.ТекущийЭлемент.Имя = "СписокФайловНаОтправкуКомментарий" Тогда
			ВвестиКомментарийВСтроку(Элементы.СписокФайловНаОтправку.ТекущиеДанные);	
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокФайловНаОтправкуПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияОтправительОчистка(Элемент, СтандартнаяОбработка)
		УправлениеФормой();
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ ФОРМОЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ КОМАНДЫ
	
	&НаКлиенте
	Процедура ПросмотрФормы(Команда)
		
		ТекДанные=	Элементы.СписокДокументов.ТекущиеДанные;
		
		Если ТекДанные = Неопределено Тогда
			ПоказатьПредупреждение(,"Не выбран документ!", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		МассивНайденныеСтроки= СписокДокументов.НайтиСтроки(Новый Структура("ВременныйИдентификаторПакета", ТекДанные.ВременныйИдентификаторПакета));
		
		МассивДокументовПакета= Новый Массив;
		ТекстОбшибкиОтправки= "";
		
		Для каждого ДокументПакета из МассивНайденныеСтроки Цикл
			
			ЭлементМассива= ЗаполненныйЭлементМассиваДокументовПакета(ДокументПакета, ТекДанные.ПолучитьИдентификатор());
			
			Если ЗначениеЗаполнено(ДокументПакета.ОшибкаОтправки) И НЕ ЗначениеЗаполнено(ТекстОбшибкиОтправки) Тогда
				ТекстОбшибкиОтправки= ДокументПакета.ОшибкаОтправки; 
			КонецЕсли;
																		
			МассивДокументовПакета.Добавить(ЭлементМассива);
			
		КонецЦикла;
		
		ПараметрыФормы= Новый Структура;
		ПараметрыФормы.Вставить("BoxID",					Организация_2_BoxID_Форма(ТекДанные.Организация));
		ПараметрыФормы.Вставить("CounteragentBoxID", 		ТекДанные.CounteragentID);
		ПараметрыФормы.Вставить("МассивДокументовПакета",	МассивДокументовПакета);
		ПараметрыФормы.Вставить("ТочкаВызова",				"ТаблицаДокументовНаОтправку");
		ПараметрыФормы.Вставить("Операция",					"ОткрытьПакет");
		ПараметрыФормы.Вставить("КаталогВыбораФайлов",		КаталогВыбораФайлов);
		
		ПараметрыФормы.Вставить("ОшибкаОтправкиПакета",		ТекстОбшибкиОтправки);
				
		ПараметрыОбработчика= Новый Структура;
		ПараметрыОбработчика.Вставить("ВременныйIdПакета", МассивНайденныеСтроки[0].ВременныйИдентификаторПакета);
		
		МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикЗакрытияФормыДокумента", ПараметрыОбработчика, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ЗаполненныйЭлементМассиваДокументовПакета(ДокументПакета, ИдентификаторТекущихДанных)
		
		ЭлементМассива= Новый Структура;
			
		ЭлементМассива.Вставить("Вкл",					ДокументПакета.Вкл);
		ЭлементМассива.Вставить("DocumentType",			ДокументПакета.DocumentType);
		ЭлементМассива.Вставить("Документ1С", 			ДокументПакета.Документ);
		ЭлементМассива.Вставить("Проведен", 			ДокументПакета.Проведен);
		ЭлементМассива.Вставить("НомерДокумента", 		СокрЛП(ДокументПакета.Номер));
		ЭлементМассива.Вставить("ДатаДокумента",		ДокументПакета.Дата);
		ЭлементМассива.Вставить("ТипДокумента", 		ДокументПакета.ТипДокумента);
		ЭлементМассива.Вставить("ДопСведения", 			ДокументПакета.ДопПоле);
		ЭлементМассива.Вставить("CounteragentBoxID", 	ДокументПакета.CounteragentID);
		ЭлементМассива.Вставить("ВнешняяПечатнаяФорма", ДокументПакета.ВнешняяПечатнаяФорма);
		ЭлементМассива.Вставить("DocumentID", 			"");
		ЭлементМассива.Вставить("НомерЗаказа", 			"");
		
		Если ИдентификаторТекущихДанных = ДокументПакета.ПолучитьИдентификатор() Тогда
			ЭлементМассива.Вставить("ЭтоТекущиеДанные", Истина);
		Иначе
			ЭлементМассива.Вставить("ЭтоТекущиеДанные", Ложь);
		КонецЕсли;
		
		ЭлементМассива.Вставить("IdСтроки",			ДокументПакета.СвязующийИдентификаторСтроки);
			
		ЭлементМассива.Вставить("ЭтоФайл", 			ДокументПакета.ЭтоФайл);
		ЭлементМассива.Вставить("СвойстваФайла",	ДокументПакета.СвойстваФайла);
		ЭлементМассива.Вставить("ДанныеФайла",		ДокументПакета.ДанныеФайла);
				
		ЭлементМассива.Вставить("ОшибкаВалидации",	ДокументПакета.ОшибкаВалидации);
		
		Возврат ЭлементМассива; 
		
	КонецФункции
		
	&НаКлиенте
	//
	// РезультатЗакрытия    - Таблица значений 	- содержит описание документов пакета, переданных на отправку
	// ПараметрыОбработчика - Структура 		- содержит ключи: ВременныйIdПакета
	//                                      
	Процедура ОбработчикЗакрытияФормыДокумента(РезультатЗакрытия, ПараметрыОбработчика) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			ВременныйИдентификаторПакета= ПараметрыОбработчика.ВременныйIdПакета;
			
			МассивСтрокДляУдаления= Новый Массив;
			Для каждого ДокументНаОтправку из РезультатЗакрытия Цикл
				
				Если ДокументНаОтправку.Действие = "удалить" Тогда
					НайденныеСтроки= СписокДокументов.НайтиСтроки(Новый Структура("СвязующийИдентификаторСтроки", ДокументНаОтправку.IdСтроки));
					Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
						МассивСтрокДляУдаления.Добавить(НайденнаяСтрока);
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			Для каждого УдаляемаяСтрока из МассивСтрокДляУдаления Цикл
				СписокДокументов.Удалить(УдаляемаяСтрока);		
			КонецЦикла;
			
			// переформатируем пакет документов
			ОставшиесяДокументыПакета= СписокДокументов.НайтиСтроки(Новый Структура("ВременныйИдентификаторПакета", ВременныйИдентификаторПакета));
			ПереформатироватьПакетВСпискеДокументовНаОтправку(ОставшиесяДокументыПакета);
			
		КонецЕсли;
						
	КонецПроцедуры //ОбработчикЗакрытияФормыДокумента()
	
	&НаКлиенте
	Процедура СнятьУстановитьПометкиКоманда(Команда)
		
		ОбработатьПометки();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОткрытьДокумент1С(Команда)
		
		ТекущиеДанные= Элементы.СписокДокументов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
			МетодКлиента(,"ОткрытьФормуОбъектаИБ", ТекущиеДанные.Документ);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Обновить(Команда)
		
		Если СтруктураПараметрыДокументаРасширение <> Неопределено Тогда
			ОбновитьСписокСтраницыОтправкиВДиадокРасширение();
		Иначе
			ОбновитьСписокСтраницыОтправкиВДиадок();
		КонецЕсли;
		
		ОбработатьПометки(Истина);
						
	КонецПроцедуры
		
	&НаКлиенте
	Процедура Выгрузить(Команда)
		
		КоличествоОтмеченныхДокументов = СписокДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		Если КоличествоОтмеченныхДокументов.Количество() = 0 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Заголовок", 		"Ошибка при отправке документов");
			ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось отправить документы");
			ПараметрыФормы.Вставить("Подробности", 		"Не отмечены документы для отправки");
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
			Возврат;
		КонецЕсли;
		
		ResolutionRequestType= Неопределено;
		ЗапуститьВыгрузку();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьИнтервал(Команда)
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("ДатаНачала"   , ДатаНачала);
		ПараметрыФормы.Вставить("Датаокончания", Датаокончания);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораИнтервала", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораИнтервала");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыгрузитьСДиска(Команда)
		
		Если НЕ ЗначениеЗаполнено(ОрганизацияОтправитель) Тогда
			СообщениеПользователю=			Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	"Выберите отправителя";
			СообщениеПользователю.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если ПустаяСтрока(КонтрагентПолучательID) Тогда
			СообщениеПользователю=			Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	"Выберите получателя";
			СообщениеПользователю.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если СписокФайловНаОтправку.Количество() = 0 Тогда
			СообщениеПользователю=			Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	"Нет файлов, предназначенных для отправки";
			СообщениеПользователю.Сообщить();
			Возврат;
		КонецЕсли;
		
		ДанныеФайловДляОтправки = Новый Массив;
		Для Каждого СтрокаТаблицы Из СписокФайловНаОтправку Цикл
			ДанныеФайловДляОтправки.Добавить(Новый Структура("ИмяФайла, ПутьКФайлу, Комментарий, ЗапрашиватьОтветнуюПодпись", СтрокаТаблицы.Файл, СтрокаТаблицы.ПутьКФайлу, СтрокаТаблицы.Комментарий, СтрокаТаблицы.ЗапрашиватьответнуюПодпись));
		КонецЦикла;
		
		Попытка 
			Результат=	ОтправитьНеформализованныеДокументы(КонтрагентПолучательID, , ДанныеФайловДляОтправки);
		Исключение 
							
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("Заголовок", 		"Ошибка отправки");
			ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Ошибка отправки неформализованного документа");
			ПараметрыФормы.Вставить("Подробности", 		ОписаниеОшибки());
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);

			Возврат;
		КонецПопытки;
		
		КоличествоОтправлено=	Результат.Количество();
		Если КоличествоОтправлено > 0 Тогда
			СообщениеПользователю=			Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	"Успешно отправлено " + КоличествоОтправлено + ?(КоличествоОтправлено >= 2 И КоличествоОтправлено <= 4, " файла", " файлов") + " из " + СписокФайловНаОтправку.Количество();
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		СписокФайловНаОтправку.Очистить();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьФайл(Команда)
		
		МассивВыбранныхФайлов=	МетодКлиента("Модуль_Клиент","ВернутьМассивВыбранныхФайлов", Истина);
		Если МассивВыбранныхФайлов.Количество() > 0 Тогда		
			
			МасБольшиеФайлы = Новый Массив;
			Для Каждого ЭлементМассива Из МассивВыбранныхФайлов Цикл
				
				ФайлДанных = Новый Файл(ЭлементМассива);
				Если ФайлДанных.Размер() > (5*1024*1024) Тогда
					МасБольшиеФайлы.Добавить(ФайлДанных);
					Продолжить;
				КонецЕсли;
				
				ТекДанные=				СписокФайловНаОтправку.Добавить();
				ТекДанные.Файл=			ФайлДанных.Имя;  
				ТекДанные.ПутьКФайлу=	ФайлДанных.ПолноеИмя;
				ТекДанные.ЗапрашиватьОтветнуюПодпись=Истина;
			КонецЦикла;
			
			Если МасБольшиеФайлы.Количество() > 0 Тогда
				
				СтрПредупреждения = "Размер отправляемого файла не должен превышать 5Мб.
				|Невозможно добавить следующие файлы:";
				Для каждого большойФайл Из масБольшиеФайлы Цикл
					СтрПредупреждения = СтрПредупреждения + "
					|- " + большойФайл.Имя;
				КонецЦикла;
				
				СообщениеПользователю=			Новый СообщениеПользователю;
				СообщениеПользователю.Текст=	СтрПредупреждения;
				СообщениеПользователю.Сообщить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаСогласование(Команда)
		
		ТаблицаКэшПараметровОтправки.Очистить();
		ResolutionRequestType=	"ApprovementRequest";
		ЗапуститьВыгрузку();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаПодписание(Команда)
		
		ТаблицаКэшПараметровОтправки.Очистить();
		ResolutionRequestType=	"SignatureRequest";
		ЗапуститьВыгрузку();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПросмотрФайла(Команда)
		
		Если НЕ Элементы.СписокФайловНаОтправку.ТекущиеДанные = Неопределено Тогда
			ЗапуститьПриложение(Элементы.СписокФайловНаОтправку.ТекущиеДанные.ПутьКФайлу);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьКомментарий(Команда)
		
		ВвестиКомментарийВСтроку(Элементы.СписокФайловНаОтправку.ТекущиеДанные);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьФайлыОтдельныйПакет(Команда)
		
		ВыбратьФайлыНаДиске("СамостоятельныйПакет");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьФайлыВыделенныеПакеты(Команда)
		
		ВыделенныеПакеты= СписокДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		
		Если ВыделенныеПакеты.Количество()=0 Тогда
			ПоказатьПредупреждение( ,"Укажите флажками пакеты, к которым необходимо добавить файлы", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		Иначе
			ВыбратьФайлыНаДиске("ДобавитьВВыделенныеПакеты");
		КонецЕсли;
		
	КонецПроцедуры
		
//} КОМАНДЫ
////////////////////////////////////////////////////////////////////////////////

//{ РАСШИРЕНИЕ КОНФИГУРАЦИИ

	&НаКлиенте
	Процедура ОбновитьСписокСтраницыОтправкиВДиадокРасширение()
		
		Состояние("Обновление списка документов для отправки в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		
		МассивОтношенийОрганизацийКонтрагентов = МетодКлиента("Модуль_Выгрузка","ВернутьТаблицуОтношенийОрганизацииКонтрагентов", СтруктураПараметрыДокументаРасширение.Организация);
		
		Для каждого КонтекстЯщика из Платформа.ПараметрыКлиент.КонтекстДиадока Цикл
			
			Если КонтекстЯщика.Организация = СтруктураПараметрыДокументаРасширение.Организация Тогда
				ИндексЭлементаМассива = 0;
				Пока ИндексЭлементаМассива<МассивОтношенийОрганизацийКонтрагентов.Количество() Цикл
					
					ЭлементМассива = МассивОтношенийОрганизацийКонтрагентов[ИндексЭлементаМассива]; 
					
					Если ЭлементМассива.Контрагент = СтруктураПараметрыДокументаРасширение.КонтрагентСсылка Тогда
						ЭлементМассива.ЭтоТестоваяОрганизация = (КонтекстЯщика.Box.isTest ИЛИ КонтекстЯщика.Box.isPilot);
						
						Counteragent = КонтекстЯщика.Box.GetCounteragentById(ЭлементМассива.ИдКонтрагента);
						Если НЕ Counteragent = Неопределено Тогда
							ЭлементМассива.Статус = Counteragent.GetStatus();
							ЭлементМассива.ЭтоТестовыйКонтрагент = (Counteragent.isTest или Counteragent.isPilot);
						КонецЕсли;
						
						ИндексЭлементаМассива = ИндексЭлементаМассива + 1;
						
					Иначе
						МассивОтношенийОрганизацийКонтрагентов.Удалить(ИндексЭлементаМассива);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
					
		КонецЦикла;
		
		СформироватьТаблицуЗначенийДокументовДляОтправкиДиадокРасширение(?(ЗначениеЗаполнено(Организация), Организация, Неопределено),
																		 ?(ЗначениеЗаполнено(Контрагент), Контрагент, Неопределено), 
																		 МассивОтношенийОрганизацийКонтрагентов,
																		 СтруктураПараметрыДокументаРасширение,
																		 Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.AuthenticateType = "Certificate");
			
		УстановитьКартинкуИЗаголовокКнопкиПометки(Ложь);
		
		//Состояние("Обновление списка документов завершено");
		
	КонецПроцедуры
	
	&НаСервере
	Процедура СформироватьТаблицуЗначенийДокументовДляОтправкиДиадокРасширение(СписокОрганизаций, СписокКонтрагентов, МассивОтношенийОрганизацийКонтрагентов, СтруктураПараметрыДокументаРасширение, ПользовательАвторизованПоСертификату = Ложь)

		МассивОрганизаций =	Новый Массив;
		 			
		Стр= Новый Структура("Организация, ОтпрНеПроведенные, ФормироватьСчетНаОсновании, ФормироватьУПД");
				
		Стр.Организация = СтруктураПараметрыДокументаРасширение.Организация;
		
		ДиадокОтправкаНепроведенных = ПолучитьЗначениеСвойства(СтруктураПараметрыДокументаРасширение.Организация, "ДиадокОтправкаНепроведенных");
		Стр.ОтпрНеПроведенные 		= ?(ЗначениеЗаполнено(ДиадокОтправкаНепроведенных), ДиадокОтправкаНепроведенных, Ложь);
			
		ФормироватьСчетНаОсновании 		= ПолучитьЗначениеСвойства(СтруктураПараметрыДокументаРасширение.Организация, "ДиадокФормироватьСчетНаОсновании");
		Стр.ФормироватьСчетНаОсновании 	= ?(ЗначениеЗаполнено(ФормироватьСчетНаОсновании), ФормироватьСчетНаОсновании, 0);
			
		МассивОрганизаций.Добавить(Стр);
		
		СтруктураПараметровЗапроса = Новый Структура;
		СтруктураПараметровЗапроса.Вставить("РТУСсылка", СтруктураПараметрыДокументаРасширение.РеализацияСсылка);
		СтруктураПараметровЗапроса.Вставить("СчетСсылка", СтруктураПараметрыДокументаРасширение.СчетНаОплатуСсылка);
		СтруктураПараметровЗапроса.Вставить("СФСсылка", СтруктураПараметрыДокументаРасширение.СФСсылка);

		ТЗВыгрузкиВДиадок= МетодСервера("Модуль_ИнтеграцияУниверсальный","СформироватьТЗВыгрузкиВДиадок",,,,МассивОрганизаций,,МассивОтношенийОрганизацийКонтрагентов, СтруктураПараметровЗапроса, Истина, ПользовательАвторизованПоСертификату);

		СписокДокументов.Загрузить(МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","ДополнитьТаблицуВнешнимиПФ", МассивОтношенийОрганизацийКонтрагентов, ТЗВыгрузкиВДиадок));
		
	КонецПроцедуры

МаксимальноеКоличествоОдновременныхЗаданий= 10;