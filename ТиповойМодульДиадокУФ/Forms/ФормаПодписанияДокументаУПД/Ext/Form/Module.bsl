
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

&НаКлиенте
Перем ЗаполнитьРаботникаОрганизации;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	ДокументПодписан=	Ложь;

	Организация=			Параметры.Организация;
	ПредставлениеДокумента=	Параметры.ПредставлениеДокумента;
	ПредставлениеПодписи=	Параметры.ПредставлениеПодписи;
	OrganizationName=		Параметры.OrganizationName;
	ФИОПодписанта=			Параметры.ФИО;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПлатформаПриОткрытии(Отказ);
	
	Если ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
		Элементы.ПредставлениеДокумента.Заголовок=	ПредставлениеДокумента;
	Иначе
		Элементы.ПредставлениеДокумента.Видимость=	Ложь;
		Заголовок=	"Групповое подписание документов";
	КонецЕсли;
	
	ПрочитатьНастройкиПоУмолчанию();
	ЗаполнитьРаботникаОрганизации();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить(Команда)
	
	РезультатЗакрытия = Новый Структура();
	РезультатЗакрытия.Вставить("ДокументПодписан", Истина);
	РезультатЗакрытия.Вставить("ТитулПокупателя", СформироватьТитулПокупателя());
	
	Закрыть(РезультатЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиПоУмолчанию()
	
	ДатаПолученияГруза= ТекущаяДата();
	
	Если НЕ ЗначениеЗаполнено(СодержаниеОперации) Тогда
		СодержаниеОперации= "Товары и услуги получены, работы приняты";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РаботникОрганизацииОснованиеПолномочий) Тогда
		РаботникОрганизацииОснованиеПолномочий= "Должностные обязанности";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаботникаОрганизации()
	
	Если РаботникСовпадаетСПодписантом Тогда
		
		СтруктураФИОПодписанта= МетодСервера(, "СформироватьПараметрыПодписанта", ФИОПодписанта);
		
		РаботникОрганизацииИмя=  	  СтруктураФИОПодписанта.ПодписантИмя;
		РаботникОрганизацииФамилия=   СтруктураФИОПодписанта.ПодписантФамилия;
		РаботникОрганизацииОтчество=  СтруктураФИОПодписанта.ПодписантОтчество;
		
		ExtendedSignerDetails= МетодКлиента("Модуль_Клиент", "ПрочитатьДанныеПодписанта", Организация, Ложь, ?(ЭДОбъектType = "UniversalCorrectionDocument", Истина, Ложь));
		РаботникОрганизацииДолжность= ExtendedSignerDetails.JobTitle;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	УправлениеФормой_СвернутьРазвернутьПанели();
	УправлениеФормой_РаботникОрганизации_УстановитьДоступность();
	УправлениеФормой_КнопкаВыполнить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой_СвернутьРазвернутьПанели()
	
	Если ЗаполнитьРаботникаОрганизации Тогда
		Элементы.ГруппаРаботникОрганизации.Видимость = Истина;
		Элементы.КнопкаЗаполнитьРаботникОрганизации.Заголовок = "Отменить заполнение";
	Иначе
		Элементы.ГруппаРаботникОрганизации.Видимость = Ложь;
		Элементы.КнопкаЗаполнитьРаботникОрганизации.Заголовок = "Заполнить";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой_РаботникОрганизации_УстановитьДоступность()
	
	Элементы.РаботникОрганизацииДолжность.Доступность= НЕ РаботникСовпадаетСПодписантом;
	Элементы.РаботникОрганизацииФамилия.Доступность=   НЕ РаботникСовпадаетСПодписантом;
	Элементы.РаботникОрганизацииИмя.Доступность= 	   НЕ РаботникСовпадаетСПодписантом;
	Элементы.РаботникОрганизацииОтчество.Доступность=  НЕ РаботникСовпадаетСПодписантом;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой_КнопкаВыполнить_УстановитьДоступность()
	
	Элементы.ФормаПодписатьИОтправить.Доступность=
	
	ЗначениеЗаполнено(ДатаПолученияГруза) И ЗначениеЗаполнено(СодержаниеОперации)
	И (НЕ ЗаполнитьРаботникаОрганизации
		ИЛИ  (ЗначениеЗаполнено(РаботникОрганизацииДолжность) 
			И ЗначениеЗаполнено(РаботникОрганизацииФамилия)
			И ЗначениеЗаполнено(РаботникОрганизацииИмя)  
			И ЗначениеЗаполнено(РаботникОрганизацииОснованиеПолномочий)))
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнитьРаботникОрганизацииНажатие(Команда)
	
	ЗаполнитьРаботникаОрганизации = НЕ ЗаполнитьРаботникаОрганизации;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастроитьПараметрыПодписанияНажатие(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Исходящие", Ложь);
	
	МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПодписиУПД", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникСовпадаетСПодписантомПриИзменении(Элемент)
	
	ЗаполнитьРаботникаОрганизации();
	УправлениеФормой_РаботникОрганизации_УстановитьДоступность();
	УправлениеФормой_КнопкаВыполнить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПолученияГрузаПриИзменении(Элемент)
	
	УправлениеФормой_КнопкаВыполнить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеОперацииПриИзменении(Элемент)
	
	УправлениеФормой_КнопкаВыполнить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	УправлениеФормой_КнопкаВыполнить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникОрганизацииФамилияПриИзменении(Элемент)
	
	УправлениеФормой_КнопкаВыполнить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникОрганизацииИмяПриИзменении(Элемент)
	
	УправлениеФормой_КнопкаВыполнить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникОрганизацииОснованиеПолномочийПриИзменении(Элемент)
	
	УправлениеФормой_КнопкаВыполнить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьТитулПокупателя()
	
	ТитулПокупателя= МетодКлиента("Модуль_Клиент", "Новый_UTDBuyerContent");
	
	ТитулПокупателя.Удалить("OtherIssuer");
	
	ТитулПокупателя.Creator= OrganizationName;
	
	ТитулПокупателя.AcceptanceDate=	  ?(ЗначениеЗаполнено(ДатаПолученияГруза), ДатаПолученияГруза, ТекущаяДата());
	ТитулПокупателя.OperationCode= 	  ВидОперации;
	ТитулПокупателя.OperationContent= СодержаниеОперации;
	
	Если ЗаполнитьРаботникаОрганизации Тогда
		ТитулПокупателя.Employee.FirstName=  РаботникОрганизацииИмя;
		ТитулПокупателя.Employee.Surname= 	 РаботникОрганизацииФамилия;
		ТитулПокупателя.Employee.Patronymic= РаботникОрганизацииОтчество;
		ТитулПокупателя.Employee.EmployeePosition= РаботникОрганизацииДолжность;
		ТитулПокупателя.Employee.EmployeeBase= 	   РаботникОрганизацииОснованиеПолномочий;
	Иначе
		ТитулПокупателя.Удалить("Employee");
	КонецЕсли;
	
	Возврат ТитулПокупателя;
	
КонецФункции

ЗаполнитьРаботникаОрганизации = Ложь;