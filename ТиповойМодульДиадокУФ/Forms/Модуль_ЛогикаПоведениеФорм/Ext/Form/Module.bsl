
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт, Манифест Экспорт;

&НаКлиенте
Перем НомерИтерацииВызоваМодуля;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура Инициализировать(ИмяМодуля) Экспорт
	
	Если НомерИтерацииВызоваМодуля = Неопределено Тогда
		НомерИтерацииВызоваМодуля= 0;
	КонецЕсли;
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля + 1;
	
	Если Манифест = Неопределено Тогда
		Платформа.ЗаполнитьМанифест(ЭтаФорма, ИмяМодуля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПеременные() Экспорт
	
	// Разрывается циклическая ссылка, для того чтобы исключить утечку памяти.
	// Модуль может быть вызван повторно во вложенных методах,
	// поэтому очищаем переменные, ТОЛЬКО если это начальная итерация вызова модуля.
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля - 1;
	
	Если НомерИтерацииВызоваМодуля = 0 Тогда
		Платформа= 					  Неопределено;
		Объект.ПараметрыКлиентСервер= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МАНИФЕСТ

// Все функции и процедуры тела модуля должны быть экспортными и добавлены в соответствующую структуру!

&НаКлиенте
Функция ФункцииМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, <Имя функции>, <Параметры строкой>, <Вариант кэширования>, <Переопределение>);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НеИспользовать", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяВыполнения", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяСеанса", Истина);
	//...
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ТаблицаЗначений_2_МассивСтруктур", "ТаблЗнач", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "БухгалтерскийУчетПереопределяемыйУстановитьДоговорКонтрагента", "ДоговорКонтрагента,Контрагент, Организация, МассивВидовДоговоров", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "РаботаСДоговорамиКонтрагентовБПУстановитьДоговорКонтрагента", "ДоговорКонтрагента, Контрагент, Организация, МассивВидовДоговоров", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "УстановитьДоговорВСчетеФактуреДляДиадок", "ДоговорКонтрагента, Контрагент, Организация", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВалютуОснованияСчетаФактуры", "ДокументОснование", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПараметрыСчетаФактурыДиадок", "СчетФактура", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПредставлениеКППКонтрагента", "Контрагент", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьДоговорКонтрагентаБГУ", "Организация, Контрагент", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМассивДанныхСтрок", "ДокументОснование", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПредставлениеСФ", "Ссылка, ВидСчетаФактуры", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМассивРасшифровкиПлатежа", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредупреждатьОСтаромФормате", "ConfirmationDate, InvoiceVersion", "НеИспользовать", Истина);
	
	Возврат СтруктураМетодов;
	
КонецФункции

&НаКлиенте
Функция ПроцедурыМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, <Имя процедуры>, <Параметры строкой>, <Переопределение>);
	//Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПримерПроцедуры", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", Истина);
	//...
	
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "СоздатьНовыйСчетФактуру", "МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК", Истина);
	
	Возврат СтруктураМетодов;
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ТаблицаЗначений_2_МассивСтруктур(ТаблЗнач)
	Результат = Новый Массив;
	СтрокаКлючей = "";
	Для Каждого Колонка из ТаблЗнач.Колонки Цикл
		СтрокаКлючей = СтрокаКлючей +?(ПустаяСтрока(СтрокаКлючей),"",",")+ Колонка.Имя;
	КонецЦикла;                                                        
	Если ТипЗнч(ТаблЗнач) = Тип("ТаблицаЗначений") тогда
		
		Для Каждого Стр Из ТаблЗнач Цикл
			ЭлементСписка = Новый  Структура(СтрокаКлючей);
			ЗаполнитьЗначенияСвойств(ЭлементСписка,Стр);
			Результат.Добавить(ЭлементСписка);             
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Функция БухгалтерскийУчетПереопределяемыйУстановитьДоговорКонтрагента(ДоговорКонтрагента,
			Контрагент, Организация, МассивВидовДоговоров)
	Возврат Вычислить("БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ДоговорКонтрагента,
			|Контрагент, Организация, МассивВидовДоговоров)");
КонецФункции

&НаСервере
Функция РаботаСДоговорамиКонтрагентовБПУстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, МассивВидовДоговоров)
	Возврат Вычислить("РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, МассивВидовДоговоров)");
КонецФункции


&НаКлиенте
Функция УстановитьДоговорВСчетеФактуреДляДиадок(ДоговорКонтрагента, Контрагент, Организация)
	
	МассивВидовДоговоров=	Новый Массив;
	
	МассивВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	МассивВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	
	Попытка
		БухгалтерскийУчетПереопределяемыйУстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, МассивВидовДоговоров);
	Исключение
		РаботаСДоговорамиКонтрагентовБПУстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, МассивВидовДоговоров);	
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьВалютуОснованияСчетаФактуры(ДокументОснование)
	
	Возврат ДокументОснование.Валюта;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыСчетаФактурыДиадок(СчетФактура)
	
	ТабДокументыОснования=	СчетФактура.ДокументыОснования.Выгрузить();;
	
	НоваяСтруктура=	Новый Структура;
	НоваяСтруктура.Вставить("Ссылка", СчетФактура.Ссылка);
	НоваяСтруктура.Вставить("ВидСчетаФактуры", СчетФактура.ВидСчетаФактуры);
	НоваяСтруктура.Вставить("ДокументыОснования", ТабДокументыОснования);
	
	Попытка
		СтруктураПараметров= Вычислить("УчетНДСПереопределяемый.ПолучитьПараметрыСчетаФактуры(НоваяСтруктура)");
	Исключение
		СтруктураПараметров= Вычислить("УчетНДСПереопределяемый.ПараметрыСчетаФактуры(НоваяСтруктура)");
	КонецПопытки;

	Если НЕ СтруктураПараметров = Неопределено Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			Если ТипЗнч(Параметр.Значение) = Тип("ТаблицаЗначений") Тогда
				СтруктураПараметров.Удалить(Параметр.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеКППКонтрагента(Контрагент)

	ЗначениеКППКонтрагента=	Вычислить("ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, ""КПП"")");
	
	Возврат Вычислить("СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru = 'КПП %1'""), ?(ПустаяСтрока(ЗначениеКППКонтрагента), ""<не задан>"", ЗначениеКППКонтрагента))");
	
КонецФункции

&НаСервере
Функция ПолучитьДоговорКонтрагентаБГУ(Организация, Контрагент)
	
	СписокВидовДоговоров=	МетодСервера(,"ПолучитьСписокВидовДоговоров");
	
	ВыборкаДоговоров=		МетодСервера(,"ВыбратьОсновнойДоговорКонтрагента", Контрагент, Организация, СписокВидовДоговоров);
	Если ВыборкаДоговоров.Следующий() Тогда
		Если ВыборкаДоговоров.ПриоритетДоговора = 1 Тогда
			Возврат ВыборкаДоговоров.Договор;
		КонецЕсли;
	Иначе
		Возврат Вычислить("Справочники.Договоры.ПустаяСсылка()");
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьМассивДанныхСтрок(ДокументОснование)
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.НакладнаяНаРеализациюТорг12") Тогда
		ТабДанные= ДокументОснование.Номенклатура.Выгрузить();
	Иначе
		ТабДанные= ДокументОснование.Материалы.Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаЗначений_2_МассивСтруктур(ТабДанные);
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеСФ(Ссылка, ВидСчетаФактуры)
	
	Возврат Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Ссылка, ВидСчетаФактуры);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивРасшифровкиПлатежа(ДокументСсылка)
	
	МассивРасшифровки=	Новый Массив();
	
	Для каждого СтрокаРасшифровки Из ДокументСсылка.РасшифровкаПлатежа Цикл
		
		СтруктураПлатежа=	Новый Структура();
		
		СтруктураПлатежа.Вставить("Сумма", СтрокаРасшифровки.СуммаПлатежа);
		СтруктураПлатежа.Вставить("СуммаНДС", СтрокаРасшифровки.СуммаНДС);
		СтруктураПлатежа.Вставить("СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);

		МассивРасшифровки.Добавить(СтруктураПлатежа);
		
	КонецЦикла;
	
	Возврат МассивРасшифровки;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНовыйСчетФактуру(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК) Экспорт
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		Если Document.Direction = "Inbound" Тогда
			СоздатьНовыйСчетФактуруПолученныйУТ11(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК);
		Иначе
			//...
		КонецЕсли;
		
	ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
		
		Если Document.Direction = "Inbound" Тогда
			СоздатьНовыйСчетФактуруПолученныйБП30(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК);
		Иначе
			СоздатьНовыйСчетФактуруВыданныйБП30(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК);
		КонецЕсли;
		
	ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
		
		Если Document.Direction = "Inbound" Тогда
			СоздатьНовыйСчетФактуруПолученныйБГУ20(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК);
		Иначе
			СоздатьНовыйСчетФактуруВыданныйБГУ20(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК);
		КонецЕсли;
		
	ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
		
		Если Document.Direction = "Inbound" Тогда
			СоздатьНовыйСчетФактуруПолученныйУНФ16(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК);	
		Иначе
			СоздатьНовыйСчетФактуруВыданныйУНФ16(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйСчетФактуруПолученныйУТ11(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК)
	
	Основание= Новый Структура;
	Основание.Вставить("ДокументОснование", МассивСсылокРНК[0]);
	Основание.Вставить("Контрагент"		  , Контрагент);
	Основание.Вставить("Организация"	  , Организация);
	
	НоваяФорма= ПолучитьФорму("Документ.СчетФактураПолученный.ФормаОбъекта", Новый Структура("Основание", Основание), ЭтаФорма);
	
	КоличествоОснований= МассивСсылокРНК.Количество();
	Если КоличествоОснований > 1 Тогда
		
		Для ИндексЦикла= 1 ПО КоличествоОснований - 1 Цикл // Начинаем со второго документа, т.к. первый уже добавлен.
			НоваяФорма.Объект.ДокументыОснования.Добавить().ДокументОснование= МассивСсылокРНК[ИндексЦикла];
		КонецЦикла;
		
		Если МетодКлиента("Модуль_Клиент","СравнитьВерсии", Объект.ПараметрыКлиентСервер.ВерсияКонфигурации, "11.2") = "ПерваяВерсияМладше" Тогда
			
			НоваяФорма.Элементы.СтраницыДокументыОснования.ТекущаяСтраница = НоваяФорма.Элементы.СтраницаДокументыОснования;
			
			НоваяФорма.ТекстДокументыОснования = "";
			Разделитель= "";
			
			Для Каждого СтрокаТаблицы Из НоваяФорма.Объект.ДокументыОснования Цикл
				НоваяФорма.ТекстДокументыОснования = НоваяФорма.ТекстДокументыОснования + Разделитель + СтрокаТаблицы.ДокументОснование;
				Разделитель= ", ";
			КонецЦикла;
			
		Иначе
			
			ПредставлениеДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Всего документов: %1'"),
			КоличествоОснований);
		
			НоваяФорма.ДокументыОснованияПредставление= Новый ФорматированнаяСтрока(
			ПредставлениеДокументов, , ЦветаСтиляЦветГиперссылкиУТ11(), , "ИзменитьДокументыОснования");
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяФорма.Объект.Номер= Document.DocumentNumber; 
	НоваяФорма.Объект.Дата=  Document.DocumentDate;
	НоваяФорма.Объект.ПолученВЭлектронномВиде= Истина;
	
	НоваяФорма.РежимОткрытияОкна= РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	НоваяФорма.ОписаниеОповещенияОЗакрытии= Новый ОписаниеОповещения("ОбработчикЗакрытиеФормыСФ", МодульВызова, НоваяФорма.Объект);
	
	НоваяФорма.Открыть(); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦветаСтиляЦветГиперссылкиУТ11()
	
	Возврат Вычислить("ЦветаСтиля.ЦветГиперссылки");
	
КонецФункции

&НаКлиенте
Процедура СоздатьНовыйСчетФактуруПолученныйБП30(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК)
	
	НоваяФорма= ПолучитьФорму("Документ.СчетФактураПолученный.ФормаОбъекта", Новый Структура("Основание", МассивСсылокРНК[0]), ЭтаФорма);
	
	КоличествоОснований= МассивСсылокРНК.Количество();
	Если КоличествоОснований > 1 Тогда
		
		Для ИндексЦикла= 1 ПО КоличествоОснований - 1 Цикл // Начинаем со второго документа, т.к. первый уже добавлен.
			НоваяФорма.Объект.ДокументыОснования.Добавить().ДокументОснование= МассивСсылокРНК[ИндексЦикла];
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(Объект, ПолучитьПараметрыСчетаФактурыПолученныйБП30(НоваяФорма.Объект));
		
		Если НоваяФорма.Элементы.Найти("ГруппаДокументОснования") <> Неопределено Тогда
			НоваяФорма.Элементы.ГруппаДокументОснования.Видимость= 	 Ложь;
			НоваяФорма.Элементы.НадписьДокументыОснования.Видимость= Истина;
		Иначе
			НоваяФорма.Элементы.СтраницыОснования.ТекущаяСтраница= НоваяФорма.Элементы.СтраницаОснований;
		КонецЕсли;
		
		ФормСтрока      = "Л = ru_RU; ЧДЦ=0";
		ПарПредмета     = "документ,документа,документов,м,,,,0";
		ПрописьЧисла    = ЧислоПрописью(КоличествоОснований, ФормСтрока, ПарПредмета);
		ИндексПредмета  = Найти(ПрописьЧисла, "док");
		ТекстДокументы  = Строка(КоличествоОснований) + " " + Сред(ПрописьЧисла, ИндексПредмета, СтрДлина(ПрописьЧисла)- ИндексПредмета - 3);
		ТекстНадписи    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (%2 и еще %3)'"), 
			ТекстДокументы, 
			Строка(НоваяФорма.Объект.ДокументыОснования[0].ДокументОснование), 
			КоличествоОснований - 1);
		
		НоваяФорма.НадписьДокументыОснования = ТекстНадписи;
		
	КонецЕсли;
	
	НоваяФорма.Объект.НомерВходящегоДокумента= Document.DocumentNumber; 
	НоваяФорма.Объект.ДатаВходящегоДокумента=  Document.DocumentDate;
	НоваяФорма.Объект.КодСпособаПолучения= 	   2;
	
	НоваяФорма.РежимОткрытияОкна= РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	НоваяФорма.ОписаниеОповещенияОЗакрытии= Новый ОписаниеОповещения("ОбработчикЗакрытиеФормыСФ", МодульВызова, НоваяФорма.Объект);
	
	НоваяФорма.Открыть(); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыСчетаФактурыПолученныйБП30(Знач НоваяФормаОбъект)
	
	ДокументОбъект = ДанныеФормыВЗначение(НоваяФормаОбъект, Тип("ДокументОбъект.СчетФактураПолученный"));
	
	ПараметрыСчетаФактуры= Новый Структура("СуммаДокумента, СуммаДокументаКомиссия, СуммаНДСДокумента, СуммаНДСДокументаКомиссия");
	
	ЗаполнитьЗначенияСвойств(ПараметрыСчетаФактуры, Вычислить("УчетНДСПереопределяемый.ПараметрыСчетаФактуры(ДокументОбъект)"));
	
	Возврат ПараметрыСчетаФактуры;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНовыйСчетФактуруВыданныйБП30(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК)
	
	НоваяФорма= ПолучитьФорму("Документ.СчетФактураВыданный.ФормаОбъекта", Новый Структура("Основание", МассивСсылокРНК[0]), ЭтаФорма);
	
	КоличествоОснований= МассивСсылокРНК.Количество();
	Если КоличествоОснований > 1 Тогда
		
		Для ИндексЦикла= 1 ПО КоличествоОснований - 1 Цикл // Начинаем со второго документа, т.к. первый уже добавлен.
			НоваяФорма.Объект.ДокументыОснования.Добавить().ДокументОснование= МассивСсылокРНК[ИндексЦикла];
		КонецЦикла;
		
		НовыеДанныеФормыОбъект= ОпределениеПараметровСчетаФактурыНаРеализациюБП30(НоваяФорма.Объект);
		
		НоваяФорма.Объект.СуммаДокумента 		= НовыеДанныеФормыОбъект.СуммаДокумента;
		НоваяФорма.Объект.СуммаНДСДокумента 	= НовыеДанныеФормыОбъект.СуммаНДСДокумента;
		
		НоваяФорма.Элементы.СтраницыОснования.ТекущаяСтраница 	= НоваяФорма.Элементы.СтраницаОснований;
		
		ФормСтрока 		= "Л = ru_RU; ЧДЦ=0";
		ПарПредмета		= "документ,документа,документов,м,,,,0";
		ПрописьЧисла 	= ЧислоПрописью(КоличествоОснований, ФормСтрока, ПарПредмета);
		ИндексПредмета 	= Найти(ПрописьЧисла, "док");
		ТекстДокументы 	= Строка(КоличествоОснований) + " " + Сред(ПрописьЧисла, ИндексПредмета, СтрДлина(ПрописьЧисла)- ИндексПредмета - 3);
		ТекстНадписи 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2 и еще %3)'"), ТекстДокументы, Строка(НоваяФорма.Объект.ДокументыОснования[0].ДокументОснование), КоличествоОснований-1);	
		
		НоваяФорма.НадписьДокументыОснования	= ТекстНадписи;
		
	КонецЕсли;
	
	НоваяФорма.Объект.Номер= Document.DocumentNumber;
	НоваяФорма.Объект.Дата=  Document.DocumentDate;
	
	НоваяФорма.Объект.Выставлен= Истина;
	НоваяФорма.Объект.КодСпособаВыставления= 2;
	НоваяФорма.Объект.ДатаВыставления= Document.DocumentDate;
	
	НоваяФорма.РежимОткрытияОкна= РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	НоваяФорма.ОписаниеОповещенияОЗакрытии= Новый ОписаниеОповещения("ОбработчикЗакрытиеФормыСФ", МодульВызова, НоваяФорма.Объект);
	
	НоваяФорма.Открыть(); 
	
КонецПроцедуры

&НаСервере
Функция ОпределениеПараметровСчетаФактурыНаРеализациюБП30(Знач НоваяФормаОбъект)
	
	ДокументОбъект = ДанныеФормыВЗначение(НоваяФормаОбъект, Тип("ДокументОбъект.СчетФактураВыданный"));
	ДокументОбъект.ОпределениеПараметровСчетаФактурыНаРеализацию();
	ЗначениеВДанныеФормы(ДокументОбъект, НоваяФормаОбъект);
	
	Возврат НоваяФормаОбъект;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНовыйСчетФактуруВыданныйБГУ20(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК)
	
	НоваяФорма= ПолучитьФорму("Документ.СчетФактураВыданный.ФормаОбъекта", Новый Структура("Основание", МассивСсылокРНК[0]), ЭтаФорма);
	
	НоваяФорма.Объект.Номер= 			Document.DocumentNumber; 
	НоваяФорма.Объект.Дата=  			Document.DocumentDate;
	
	НоваяФорма.ВыставленНеВыставлен=	1;
	НоваяФорма.Объект.Выставлен= 		Истина;
	НоваяФорма.Объект.ДатаВыставления=  Document.DocumentDate;
	
	НоваяФорма.Объект.КодСпособаВыставления= 2;
	
	НоваяФорма.РежимОткрытияОкна= РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	НоваяФорма.ОписаниеОповещенияОЗакрытии= Новый ОписаниеОповещения("ОбработчикЗакрытиеФормыСФ", МодульВызова, НоваяФорма.Объект);
	
	НоваяФорма.Открыть(); 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйСчетФактуруПолученныйБГУ20(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК)
	
	НоваяФорма= ПолучитьФорму("Документ.СчетФактураПолученный.ФормаОбъекта", Новый Структура("Основание", МассивСсылокРНК[0]), ЭтаФорма);
	
	ВГраница= МассивСсылокРНК.ВГраница();
	Если ВГраница > 0 Тогда
		
		Для ИндексЦикла= 1 ПО ВГраница Цикл // Начинаем со второго документа, т.к. первый уже добавлен.
			НоваяФорма.Объект.ДокументыОснования.Добавить().ДокументОснование= МассивСсылокРНК[ВГраница];
		КонецЦикла;
		
		НоваяФорма.ОбновитьСоставНФАКлиент_Выбор(КодВозвратаДиалога.Да, НоваяФорма.Объект);
		
	КонецЕсли;
	
	НоваяФорма.Объект.НомерПервичногоДокумента= Document.DocumentNumber;
	НоваяФорма.Объект.ДатаПервичногоДокумента= 	Document.DocumentDate;
	
	НоваяФорма.Объект.КодСпособаВыставления= 2;
	НоваяФорма.Объект.КодВидаОперации= "01";
	
	НоваяФорма.РежимОткрытияОкна= РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	НоваяФорма.ОписаниеОповещенияОЗакрытии= Новый ОписаниеОповещения("ОбработчикЗакрытиеФормыСФ", МодульВызова, НоваяФорма.Объект);
	
	НоваяФорма.Открыть(); 
	
КонецПроцедуры

&НаКлиенте
Функция ПредупреждатьОСтаромФормате(ConfirmationDate, InvoiceVersion) Экспорт
	
	//если нет подтверждения оператора  - то анализируем по текущей дате
	ДатаПрименения = ?(ConfirmationDate<'20010101', ТекущаяДата(), ConfirmationDate);
		
	НормативныйФормат = ?(ДатаПрименения<'20150414', "5.01", "5.02");
		
	Возврат (НормативныйФормат = "5.02") И (InvoiceVersion<>"5.02");
	
КонецФункции

&НаКлиенте
Процедура СоздатьНовыйСчетФактуруВыданныйУНФ16(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК)
	
	НоваяФорма= ПолучитьФорму("Документ.СчетФактура.ФормаОбъекта", Новый Структура("Основание", МассивСсылокРНК[0]), ЭтаФорма);
	
	КоличествоОснований= МассивСсылокРНК.Количество();
	Если КоличествоОснований > 1 Тогда
			
		Для ИндексЦикла= 1 ПО КоличествоОснований - 1 Цикл // Начинаем со второго документа, т.к. первый уже добавлен.
						
			СсылкаРНК= МассивСсылокРНК[ИндексЦикла];
			
			НоваяСтрокаТЧ= НоваяФорма.Объект.ДокументыОснования.Добавить();
			НоваяСтрокаТЧ.ДокументОснование= СсылкаРНК;
			
			Если ТипЗнч(СсылкаРНК) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				Попытка
					РеквизитыКорректировочногоСчетФактуры= ПолучитьПараметрыЗаполненияКорректировочногоСчетаФактурыУНФ16(СсылкаРНК);
				Исключение
					РеквизитыКорректировочногоСчетФактуры= Неопределено;
				КонецПопытки;
				
				Если НЕ РеквизитыКорректировочногоСчетФактуры = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, РеквизитыКорректировочногоСчетФактуры, "НомерИсходногоДокумента, ДатаИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
				КонецЕсли;
							
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
	НоваяФорма.Объект.Номер= Document.DocumentNumber;
	НоваяФорма.Объект.Дата=  Document.DocumentDate;
	
	НоваяФорма.Объект.ДатаВыставления= Document.DocumentDate;
	
	НоваяФорма.РежимОткрытияОкна= РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	НоваяФорма.ОписаниеОповещенияОЗакрытии= Новый ОписаниеОповещения("ОбработчикЗакрытиеФормыСФ", МодульВызова, НоваяФорма.Объект);
	
	НоваяФорма.Открыть();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыЗаполненияКорректировочногоСчетаФактурыУНФ16(СсылкаРНК)
	Возврат Документы.СчетФактура.ПолучитьПараметрыЗаполненияКорректировочногоСчетаФактуры(СсылкаРНК);	
КонецФункции

&НаКлиенте
Процедура СоздатьНовыйСчетФактуруПолученныйУНФ16(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК)
	
	НоваяФорма= ПолучитьФорму("Документ.СчетФактураПолученный.ФормаОбъекта", Новый Структура("Основание", МассивСсылокРНК[0]), ЭтаФорма);
	
	НоваяФорма.Объект.НомерВходящегоДокумента= Document.DocumentNumber; 
	НоваяФорма.Объект.ДатаВходящегоДокумента=  Document.DocumentDate;
		
	НоваяФорма.РежимОткрытияОкна= РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	НоваяФорма.ОписаниеОповещенияОЗакрытии= Новый ОписаниеОповещения("ОбработчикЗакрытиеФормыСФ", МодульВызова, НоваяФорма.Объект);
	
	НоваяФорма.Открыть(); 
	
КонецПроцедуры
