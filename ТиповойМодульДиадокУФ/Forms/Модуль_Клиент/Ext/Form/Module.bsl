//{ ПЕРЕМЕННЫЕ МОДУЛЯ
&НаКлиенте
Перем МассивСтруктурКонтент;
&НаКлиенте
Перем МаксимальноеКоличествоЗаданий;
	
//} ПЕРЕМЕННЫЕ МОДУЛЯ

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт, Манифест Экспорт;

&НаКлиенте
Перем НомерИтерацииВызоваМодуля;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура Инициализировать(ИмяМодуля) Экспорт
	
	Если НомерИтерацииВызоваМодуля = Неопределено Тогда
		НомерИтерацииВызоваМодуля= 0;
	КонецЕсли;
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля + 1;
	
	Если Манифест = Неопределено Тогда
		Платформа.ЗаполнитьМанифест(ЭтаФорма, ИмяМодуля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПеременные() Экспорт
	
	// Разрывается циклическая ссылка, для того чтобы исключить утечку памяти.
	// Модуль может быть вызван повторно во вложенных методах,
	// поэтому очищаем переменные, ТОЛЬКО если это начальная итерация вызова модуля.
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля - 1;
	
	Если НомерИтерацииВызоваМодуля = 0 Тогда
		Платформа= 					  Неопределено;
		Объект.ПараметрыКлиентСервер= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МАНИФЕСТ

// Все функции и процедуры тела модуля должны быть экспортными и добавлены в соответствующую структуру!

&НаКлиенте
Функция ФункцииМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, <Имя функции>, <Параметры строкой>, <Вариант кэширования>, <Переопределение>);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НеИспользовать", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяВыполнения", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяСеанса", Истина);
	//...
	
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПредставлениеКнопкиСоздатьДокументВ1С", "Документ1С, ЭДОбъект, МассивСсылокРНК, ПодходящаяСФ",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеПродавца", "ЭДОбъект, НаименованиеЯщика=неопределено",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеПокупателя", "ЭДОбъект, НаименованиеЯщика=неопределено",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеПодразделения", "ЭДОбъект",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеЭД", "ЭДОбъект",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПредставленияЭД", "док",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеТипаЭД", "ЭДОбъект",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредсталениеНомераЭД", "ЭДОбъект",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "РасшифровкаСтатуса", "СтатусСтрокой, СтатусАннулированияСтрокой = """"");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеСтатуса", "ЭДОбъект",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеСтатусаРоуминг", "ЭДОбъект",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеСуммы", "ЭДОбъект",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеСуммыНДС", "ЭДОбъект",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеПериодаДД", "ДатаНачала, Знач ДатаОкончания",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеТипаРезолюции", "ResolutionType",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьHTMLПредставлениеОшибок", "Document, Организация, МассивОшибок",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьHTMLПредставлениеРезолюций", "Document, Организация",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеAuthor", "ResolutionStatus");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеTargetUser", "ResolutionStatus");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеСтатусаСогласования", "Document",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьФИОСИнициалами", "ФИО",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиСтрокиВМассивеСтруктур", "МассивСтруктур, ПараметрыОтбора");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "BoxID_2_Организация_Форма", "BoxID, DepartmentKpp = """"",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "CounteragentBoxID_2_Контрагент_Форма", "CounteragentID, BoxID = Неопределено",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьТекстОшибкиДиадок", "ТекстОшибки",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьОсновнуюФормуОбъекта", "Объект1С");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьОписаниеФормы", "Документ1С",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ВернутьМассивВыбранныхФайлов", "МножественныйВыбор =  Ложь",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьИмяФормыДокумента", "Document",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьDocumentID_2_Документ", "DocumentID, BoxID");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЭтоНеформализованныйДокументБезМетаданных", "Document",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЭтоФормализованныйДокумент", "DocumentType");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиОрганизациюВИерархииОрганизацийDiadoc", "BoxID, DepartmentId", "НаВремяСеанса", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиОрганизациюВИерархииОрганизацийDiadocРекурсия", "BoxID, СтруктураПодразделения");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ТекстИнформацииОНовомФормате",,"НаВремяСеанса", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СписокОбработокДереваКонфигурации",,"НаВремяСеанса", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ДатаГоризонта",,"НаВремяСеанса", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойства", "ИмяСвойства", "НаВремяСеанса", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьФорматДатыПрото", "ЗначениеПоля, ПредставлениеПоля, ОбязательноеЗаполнение= Ложь",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьТитулПолучателяТорг12", "СтруктураДляТитула",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСписокФильтровДляДокументовДиадок", "Направление, ФильтрПоСостояниюДокументооборота, ФильтрПотипамДокументов");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьФилиаловDepartmentId");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьDepartmentByKpp", "Organization, DepartmentKpp");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ВернутьМассивDepartmentId", "стрЯщик, Box, ПодразделениеID, ВключатьПодчиненныеПодазделения");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруЗадачи", "НаименованиеЯщика, Организация, AsyncTask");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМассивАсинхронныхЗадач", "СписокФильтров, ДатаНачала, ДатаОкончания, СписокЯщиков, counterAgentBoxId, ПараметрыВыборки");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьРезультатВыполненияЗадач", "МассивЗадач, ПараметрыВыборки");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ВернутьВыборкуРНКИСчетовФактурДиадок", "ДатаНачала, ДатаОкончания, Организация = Неопределено, counterAgentBoxId = """", ПараметрыВыборки",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЗначениеКонтентаКэш", "BoxID, DocumentId",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЯщикДиадокДляОрганизации", "Организация, ОтпечатокСертификата=неопределено, BoxID=неопределено, Connection = неопределено",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиСтрокиКонтекстДиадокаПоОтбору", "СтруктураОтбор");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "РазвернутьGUID", "СтрНач");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьURLНаДокументДиадока", "BoxId, DocumentId");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПутьКWEBСерверу");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбновитьДанныеДокумента", "ДокументСсылка, DocumentDate, DocumentNumber");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ОтправитьНаОбработку", "ЭДОбъект, ПараметрыОтправкиНаСогласование",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьКраткоеИмяФайла", "ПолноеИмяФайла");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ОтправитьПринятьПриглашениеКонтрагенту", "Organization, CounteragentId, ИНН, Комментарий, ИмяФайла = """", КонтрагентСсылка = Неопределено",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер", "МассивСсылок, OrganizationId");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок", "ОбъектДиадок",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиПодходящийСчетФактуруИзРНК", "Знач МассивСсылокРНК, Знач ИдентификаторДокументаВДиадок, Direction");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПодходящуюСФ", "МассивСсылокРНК, Direction = ""Inbound""");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМассивТиповДокументов", "ФильтрПоТипамДокументов, ВидТипаДокумента");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ВариантыИспользованияПроксиСервера");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗначениеРеквизитаОбъекта", "Ссылка, ИмяРеквизита");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНастройкиОрганизации", "Организация");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СравнитьВерсии", "Знач ПерваяВерсия, Знач ВтораяВерсия");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "НеобходимоОграничениеНаОтправку", "Документ1С, ВнешняяПечатнаяФорма, ПризнакПроведен", "НаВремяСеанса", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ТипДокументаУПД", "ФункцияУПД",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ФункцияУПД", "ТипДокументаУПД",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЭтоУПД_ТипаСЧФДОП", "Document",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЭтоУПД_ТипаДОП", "Document",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбластьПолномочийУПД_ОтветственныйЗаПодписаниеСЧФ", "Powers",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбластьПолномочийУПД_ЛицоСовершившееСделку", "Powers",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбластьПолномочийУПД_ОтветственныйЗаОформление", "Powers",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ДанныеСертифкатаАвторизации", "Организация",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПрочитатьДанныеПодписанта", "Организация, IsSeller, forCorrection",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "УдалитьЛидирующиеНули", "Строка",,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_Torg12SellerContent",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_Torg12BuyerContent",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_AcceptanceCertificateSellerContent",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_AcceptanceCertificateBuyerContent",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_InvoiceContent",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_InvoiceCorrectionContent",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_UtdSellerContent",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_UtdBuyerContent",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_StructedAdditionalInfo",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_Torg12Item",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_AcceptanceCertificateItem",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_InvoiceItem",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_InvoiceCorrectionItem",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_ExtendedInvoiceItem",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_OriginalInvoice",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_PaymentDocument",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_CustomDeclaration",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_TransferBase",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_Waybill",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_Signer",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_ExtendedSigners",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_ExtendedSignerDetails",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_Signature",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_PersonalCertificate",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_ExtendedSignerDetailsToPost",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_AmountsDiff",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Новый_InvoiceItemFields",,,Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ВыделитьСлово", "ИсходнаяСтрока, Разделитель = "" """);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЭДО_БиблиотекаКартинок",,"НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЗначениеРеквизитаОбъекта", "Объект, Реквизит");
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаполненныйДиалогВыбораФайла", "МножественныйВыбор, Каталог", , Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ДокументНеСогласованРанее", "Document");
		
	Возврат СтруктураМетодов;
	
КонецФункции

&НаКлиенте
Функция ПроцедурыМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, <Имя процедуры>, <Параметры строкой>, <Переопределение>);
	//Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПримерПроцедуры", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", Истина);
	//...
	
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "Инициализировать", "ИмяМодуля", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОчиститьПеременные",,Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьМассивСтруктурКонтент",,Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьСтрокуТаблицыДокумента", "док, строкаДок, НаименованиеЯщика=неопределено, заполнятьПервичныйДокумент = истина, ПолучатьРезолюции =  Ложь", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПоказатьДокументВДиадоке", "OrganizationId, DocumentId", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОбработчикСозданиеДокумента", "ДокументССылка, ЭДОбъект", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПодписатьВДиадоке", "Document, Подписать, BoxID, DocumentID, ТекстОтказа = """", СтруктураДляТитула = Неопределено", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ВыбратьПараметрыПолучателяПриОтправкеНаСогласование", "ОбъектВладелецОбработчика, ТекущиеДанные, ResolutionRequestType, Режим", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОтправитьЭДОбъектНаСогласование", "ОбъектВладелецОбработчика, Организация, ResolutionRequestType, Режим", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПодтверждениеВыполненияОперации", "ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика= Неопределено", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "СократитьСписокВыбораДоВыбранногоЗначения", "Элемент, ВыбранноеЗначение");
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЭлементВРежимеВыбораИзСпискаПриИзменении", "Форма, Элемент, ВыбранноеЗначение");
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьЗначениеПараметровСвойствОтправки", "Организация, ПараметрыСвойствОтправки", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаписатьВЛог", "ИдентификаторСобытия, Комментарий = """", ДокументСсылка = Неопределено");
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьСтруктуруПоКонтенту", "Content, СтруктураДанных, описаниеСтруктурыДанных = """"", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаписатьДанныеПодписанта", "Организация, ExtendedSignerDetailsToPost_1С, IsSeller", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьПодписанта", "Content, Organization", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьПодписанта", "Content, Organization, ПараметрыОтправкиНаСогласование= Неопределено", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьContent", "Источник, Приемник", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПроверитьРазмерВыбранныхФайлов", "МассивАдресовФайлов, МассивБольшиеФайлы");
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОбработатьМассивБольшихФайлов", "МассивБольшиеФайлы, ФормаИнициатор");
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПроверитьСертификат", "BoxId");
	
	Возврат СтруктураМетодов;
	
КонецФункции

#КонецОбласти

//{ УПРАВЛЕНИЕ ФОРМОЙ

	&НаКлиенте
	Функция СформироватьПредставлениеКнопкиСоздатьДокументВ1С(Документ1С, ЭДОбъект, МассивСсылокРНК, ПодходящаяСФ) Экспорт 
		
		ПредставлениеКнопки=	"";
		
		Если НЕ ЗначениеЗаполнено(Документ1С) Тогда
			
			Если ЭДОбъект.Direction = "Inbound" Тогда
				Если ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" ИЛИ ЭДОбъект.Type = "UniversalTransferDocument" И ТипДокументаУПД(ЭДОбъект.Function) = ТипДокументаУПД("СЧФ") Тогда
					Если ЭДОбъект.Type = "InvoiceRevision" Тогда
						СокращенноеИмяДокумента= "ИСФ";
					ИначеЕсли ЭДОбъект.Type = "InvoiceCorrection" Тогда
						СокращенноеИмяДокумента= "КСФ";
					ИначеЕсли ЭДОбъект.Type = "InvoiceCorrectionRevision" Тогда
						СокращенноеИмяДокумента= "ИКСФ";
					Иначе
						СокращенноеИмяДокумента= "СФ";
					КонецЕсли;
						
					Если ЗначениеЗаполнено(ПодходящаяСФ) Тогда
						ПредставлениеКнопки= "Сопоставить с "+СокращенноеИмяДокумента+" в 1С";
					ИначеЕсли МассивСсылокРНК.Количество() > 0 И (ЭДОбъект.Type = "Invoice") Тогда
						ПредставлениеКнопки= "Создать на основании накладной";
					Иначе
						ПредставлениеКнопки= "Создать "+СокращенноеИмяДокумента+" в 1С";
					КонецЕсли;
					
				Иначе
					ПредставлениеКнопки= "Создать документ в 1С";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ПредставлениеКнопки;
		
	КонецФункции
	
//} УПРАВЛЕНИЕ ФОРМОЙ

//{ ПРЕДСТАВЛЕНИЯ
	
	&НаКлиенте
	Функция ПредставлениеПродавца(ЭДОбъект, НаименованиеЯщика=неопределено) Экспорт
		Если ЭДОбъект.Direction = "Outbound"  тогда 
			Возврат ?(НаименованиеЯщика=неопределено, ЭДОбъект.Organization.name, НаименованиеЯщика);
		Иначе 
			Возврат ЭДОбъект.CounterAgent.name;
		КонецЕсли;
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеПокупателя(ЭДОбъект, НаименованиеЯщика=неопределено) Экспорт
		Если ЭДОбъект.Direction = "Outbound"  тогда
			Возврат ЭДОбъект.CounterAgent.name;
		Иначе 
			Возврат ?(НаименованиеЯщика=неопределено, ЭДОбъект.Organization.name, НаименованиеЯщика);
		КонецЕсли;
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеПодразделения(ЭДОбъект) Экспорт
		
		Если ЭДОбъект.Department = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат  ЭДОбъект.Department.Name;
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеЭД(Document) Экспорт
		
		Если Document.Type = "Invoice" Тогда
			ПредставлениеЭД= "Счет-фактура №" + Document.DocumentNumber + " от " + Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Document.Type = "InvoiceRevision" Тогда
			ПредставлениеЭД= "Исправление №" + Document.DocumentNumber + " от " + Document.DocumentDate + " счета-фактуры №" + Document.OriginalDocumentNumber + " от " + Формат(Document.OriginalDocumentDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Document.Type = "InvoiceCorrection" Тогда
			ПредставлениеЭД= "Корректировочный счет-фактура №" + Document.DocumentNumber + " от " + Document.DocumentDate;
		ИначеЕсли Document.Type = "InvoiceCorrectionRevision" Тогда
			ПредставлениеЭД= "Исправление №" + Document.DocumentNumber + " от " + Document.DocumentDate 
			+ " корректировочного счета-фактуры №" + + Document.OriginalInvoiceCorrectionNumber + " от " + Формат(Document.OriginalInvoiceCorrectionDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Найти(Document.Type, "Torg12") > 0 Тогда
			ПредставлениеЭД= "Торг-12 №" + Document.DocumentNumber + " от " + Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Найти(Document.Type, "AcceptanceCertificate") > 0 Тогда
			ПредставлениеЭД= "Акт №" + Document.DocumentNumber + " от " + Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Document.Type = "NonformalizedProforma" Тогда
			ПредставлениеЭД= "Счет на оплату №" + Document.DocumentNumber + " от " + Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Document.Type = "Nonformalized" Тогда
			ПредставлениеЭД= "Неформализованный № " + Document.DocumentNumber + " от " + Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Document.Type = "ReconciliationAct" Тогда
			ПредставлениеЭД= "Акт сверки № " + Document.DocumentNumber + " от " + Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Document.Type = "CertificateRegistry" Тогда
			ПредставлениеЭД= "Реестр сертификатов № " + Document.DocumentNumber + " от " + Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Document.Type = "ServiceDetails" Тогда
			ПредставлениеЭД= "Детализация № " + Document.DocumentNumber + " от " + Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Document.Type = "Contract" Тогда
			ПредставлениеЭД= "Договор № " + Document.DocumentNumber + " от " + Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Document.Type = "PriceListAgreement" Тогда
			ПредставлениеЭД= "Протокол согласования цены № " + Document.DocumentNumber + " от " + Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Document.Type = "PriceList" Тогда
			ПредставлениеЭД= "Ценовой лист № " + Document.DocumentNumber + " от " + Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");
		ИначеЕсли Document.Type = "TrustConnectionRequest" ИЛИ Document.Type = "SupplementaryAgreement" Тогда
			ПредставлениеЭД= Document.FileName;
		
		ИначеЕсли Document.Type = "UniversalTransferDocument" Тогда
			ПредставлениеЭД=	"Универсальный передаточный документ №" + Document.DocumentNumber + " от " + Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");

		Иначе
			Возврат "Тип документа не определен";
		КонецЕсли;
		
		Если Document.IsTest Тогда
			ПредставлениеЭД= ПредставлениеЭД + " (тестовый)";
		КонецЕсли;
		
		Возврат ПредставлениеЭД;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьСтруктуруПредставленияЭД(док) Экспорт
		
		Box = Док.Organization;
		
		СтруктураЭД = Новый Структура;
		
		СтруктураЭД.Вставить("ЭДОбъект", док);
		СтруктураЭД.Вставить("ТипДокумента", ПредставлениеТипаЭД(док));
		СтруктураЭД.Вставить("BoxID", док.OrganizationID);
		СтруктураЭД.Вставить("DocumentId", док.DocumentId);
		СтруктураЭД.Вставить("Организация", BoxID_2_Организация_Форма(док.OrganizationID));
		СтруктураЭД.Вставить("Контрагент", CounteragentBoxID_2_Контрагент_Форма(док.CounterAgent.Id, док.OrganizationID));
		СтруктураЭД.Вставить("Дата", док.DocumentDate);
		СтруктураЭД.Вставить("Номер", док.DocumentNumber);

		Если док.Direction = "Outbound"  тогда 
			СтруктураЭД.Вставить("Получатель", док.CounterAgent.name);
			СтруктураЭД.Вставить("Отправитель", Box.name);
		Иначе 
			СтруктураЭД.Вставить("Отправитель", док.CounterAgent.name);
			СтруктураЭД.Вставить("Получатель", Box.name);
		КонецЕсли;	
		СтруктураЭД.Вставить("Сумма", ПредставлениеСуммы(док));
		
		Если док.Type = "Invoice" Тогда
			СтруктураЭД.Вставить("ДатаУчета", док.ConfirmationDate);
		Иначе
			СтруктураЭД.Вставить("ДатаУчета", док.Timestamp);
		КонецЕсли;
		
		Возврат СтруктураЭД;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеТипаЭД(Document) Экспорт
		тип = "";
		Если Document.Type = "Invoice" Тогда
			тип = "Счет-фактура";
		ИначеЕсли Document.Type = "InvoiceRevision" Тогда
			тип = "Исправление СФ";
		ИначеЕсли Document.Type = "InvoiceCorrection" Тогда
			тип = "Корректировочный СФ";
		ИначеЕсли Document.Type = "InvoiceCorrectionRevision" Тогда
			тип = "Исправление КСФ";
		ИначеЕсли Найти(Document.Type , "AcceptanceCertificate")>0 тогда 
			тип = "Акт";
		ИначеЕсли Найти(Document.Type , "NonformalizedProforma")>0 тогда 
			тип = "Счет на оплату";
		ИначеЕсли Document.Type = "Nonformalized" Тогда
			тип = Document.fileName;	
		ИначеЕсли Document.Type = "ReconciliationAct" Тогда
			тип = "Акт сверки";
		ИначеЕсли Document.Type = "CertificateRegistry" Тогда
			тип = "Реестр сертификатов";
		ИначеЕсли Document.Type = "ServiceDetails" Тогда
			тип = "Детализация";
		ИначеЕсли Document.Type = "Contract" Тогда
			тип = "Договор";
		ИначеЕсли Document.Type = "PriceListAgreement" Тогда
			тип = "Протокол согласования цены";
		ИначеЕсли Document.Type = "TrustConnectionRequest" Тогда
			тип = "Приглашение к ЭДО";
		ИначеЕсли Document.Type = "SupplementaryAgreement" Тогда
			тип = "Доп соглашение";
		ИначеЕсли Document.Type = "PriceList" Тогда
			тип = "Ценовой лист";
		ИначеЕсли Document.Type = "UniversalTransferDocument"  Тогда 
			тип = ТипДокументаУПД(Document.Function);
		ИначеЕсли Document.Type = "UniversalCorrectionDocument"  Тогда 
			тип = "УКД (???)";
		Иначе 	
			тип = "Торг-12";
		КонецЕсли;
		
		Если Document.IsTest Тогда
			тип = тип + " (тестовый)";
		КонецЕсли;
		
		Возврат тип;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредсталениеНомераЭД(ЭДОбъект) Экспорт
		Возврат ЭДОбъект.DocumentNumber;
		
		//Если ЭДОбъект.Type = "InvoiceRevision" Тогда
		//	Возврат ЭДОбъект.DocumentNumber + " на СФ №" + ЭДОбъект.OriginalDocumentNumber + " от " + Формат(ЭДОбъект.OriginalDocumentDate, "ДЛФ=Д");
		//ИначеЕсли ЭДОбъект.Type = "InvoiceCorrection" Тогда
		//	Возврат ЭДОбъект.DocumentNumber;
		//ИначеЕсли ЭДОбъект.Type = "InvoiceCorrectionRevision" Тогда
		//	Возврат ЭДОбъект.DocumentNumber + " на КСФ №" + ЭДОбъект.OriginalInvoiceCorrectionNumber + " от " + Формат(ЭДОбъект.OriginalInvoiceCorrectionDate, "ДЛФ=Д");
		//Иначе
		//	Возврат ЭДОбъект.DocumentNumber;
		//КонецЕсли;
	КонецФункции
	
	&НаКлиенте
	функция РасшифровкаСтатуса(СтатусСтрокой, СтатусАннулированияСтрокой = "")
		
		Если СтатусАннулированияСтрокой = "RevocationAccepted" Тогда
			РасшифровкаСтатуса=	"Аннулирован";
		Иначе
			Если СтатусСтрокой = "OutboundWaitingForInvoiceReceipt" Тогда
				РасшифровкаСтатуса=	"Ожидается извещение от покупателя"
			ИначеЕсли СтатусСтрокой = "OutboundNotFinished" или статусСтрокой = "InboundNotFinished" Тогда
				РасшифровкаСтатуса=	"Документооборот не завершен"
			ИначеЕсли СтатусСтрокой = "OutboundFinished" или статусСтрокой = "InboundFinished" 
				ИЛИ СтатусСтрокой = "Outbound" ИЛИ СтатусСтрокой = "Inbound" Тогда
				РасшифровкаСтатуса=	"Документооборот завершен"
			ИначеЕсли СтатусСтрокой = "OutboundWaitingForRecipientSignature" ИЛИ СтатусСтрокой = "InboundWaitingForRecipientSignature" Тогда
				РасшифровкаСтатуса=	"Требуется подпись";
			ИначеЕсли СтатусСтрокой = "OutboundWithRecipientSignature" ИЛИ СтатусСтрокой = "InboundWithRecipientSignature " ИЛИ СтатусСтрокой = "InboundWithRecipientSignature" Тогда   
				РасшифровкаСтатуса=	"Подписан";                                                                                                 
			ИначеЕсли СтатусСтрокой = "OutboundRecipientSignatureRequestRejected" ИЛИ СтатусСтрокой = "InboundRecipientSignatureRequestRejected" Тогда
				РасшифровкаСтатуса=	"Отказано в подписи";
			ИначеЕсли СтатусСтрокой = "OutboundWaitingForSenderSignature" Тогда
				РасшифровкаСтатуса=	"Требуется подписать и отправить";
			ИначеЕсли СтатусСтрокой = "InboundInvalidRecipientSignature" ИЛИ СтатусСтрокой = "OutboundInvalidSenderSignature" Тогда
				РасшифровкаСтатуса=	"Ошибка подписи";
			ИначеЕсли СтатусСтрокой = "InboundNoRecipientSignatureRequest" Тогда
				РасшифровкаСтатуса=	"Получен";
			ИначеЕсли СтатусСтрокой = "OutboundNoRecipientSignatureRequest" Тогда
				РасшифровкаСтатуса=	"Доставлен";
			ИначеЕсли СтатусСтрокой = "OutboundWaitingForInvoiceReceiptAndRecipientSignature" Тогда
				РасшифровкаСтатуса=	"Ожидается извещение и подпись от покупателя";
			Иначе
				РасшифровкаСтатуса=	"";
			КонецЕсли;
		КонецЕсли;
		
		Если СтатусАннулированияСтрокой = "RevocationIsRequestedByMe" Тогда
			РасшифровкаСтатусаАннулирования=	"Ожидается аннулирование";
		ИначеЕсли СтатусАннулированияСтрокой = "RequestsMyRevocation" Тогда
			РасшифровкаСтатусаАннулирования=	"Требуется аннулирование";
		ИначеЕсли СтатусАннулированияСтрокой = "RevocationRejected" Тогда
			РасшифровкаСтатусаАннулирования=	"Отказано в аннулировании";
		Иначе
			РасшифровкаСтатусаАннулирования=	"";
		КонецЕсли;
		
		Возврат РасшифровкаСтатуса + ?(ПустаяСтрока(РасшифровкаСтатусаАннулирования), "", ". " + РасшифровкаСтатусаАннулирования);
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСтатуса(ЭДОбъект) Экспорт
		
		Статус = РасшифровкаСтатуса(ЭДОбъект.Status, ЭДОбъект.RevocationStatus);
		
		Если Лев(ЭДОбъект.Type, 7) = "Invoice" Тогда
			Если ЭДОбъект.Corrected Тогда
				Статус=	Статус + ". Откорректирован";
			ИначеЕсли ЭДОбъект.Revised Тогда
				Статус=	Статус + ". Исправлен";
			ИначеЕсли ЭДОбъект.AmendmentRequested Тогда
				Статус=	Статус + ". Требует уточнения";
			КонецЕсли;
		КонецЕсли;
		
		Возврат Статус;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСтатусаРоуминг(ЭДОбъект) Экспорт
		
		RoamingNotificationStatus= ЭДОбъект.RoamingNotificationStatus;
		
		Если RoamingNotificationStatus= "RoamingNotificationStatusNone" Тогда
			Статус= "";
		ИначеЕсли RoamingNotificationStatus = "RoamingNotificationStatusError" Тогда
			Статус = Новый ФорматированнаяСтрока("Ошибка доставки документа через роуминг!",,WebЦвета.Красный,,RoamingNotificationStatus);
		ИначеЕсли RoamingNotificationStatus = "RoamingNotificationStatusSuccess" Тогда
			Статус = "Доставлен через роуминг.";
		ИначеЕсли RoamingNotificationStatus = "UnknownRoamingNotificationStatus" Тогда
			Статус = "Идет доставка через роуминг.";
		КонецЕсли;
		
		Возврат Статус;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСуммы(Document) Экспорт
		
		Если Document.Type = "InvoiceCorrection"
			ИЛИ Document.Type = "InvoiceCorrectionRevision"
			Или Document.Type = "UniversalCorrectionDocument" Тогда
			
			
			стрУв = ?(Окр(Document.TotalInc, 2) <> 0, "+" + Формат(Окр(Document.TotalInc, 2), "ЧДЦ=2"), "");
			стрУм = ?(Окр(Document.TotalDec, 2) <> 0, "-" + Формат(Окр(Document.TotalDec, 2), "ЧДЦ=2"), "");
			Если НЕ ПустаяСтрока(стрУв) И НЕ ПустаяСтрока(стрУм) Тогда
				Возврат стрУв + " " + СтрУм;
			ИначеЕсли НЕ ПустаяСтрока(стрУв) Тогда
				Возврат стрУв;
			Иначе
				Возврат стрУм;
			КонецЕсли;

		ИначеЕсли 
				Document.Type = "Nonformalized"
			ИЛИ Document.Type = "ReconciliationAct"
			ИЛИ Document.Type = "CertificateRegistry"
			ИЛИ Document.Type = "ServiceDetails" 
			ИЛИ Document.Type = "Contract"
			ИЛИ Document.Type = "PriceListAgreement"
			ИЛИ Document.Type = "TrustConnectionRequest"
			ИЛИ Document.Type = "PriceList"
			ИЛИ Document.Type = "SupplementaryAgreement"

		Тогда
			Возврат "";
		Иначе
			
			Попытка
				Возврат Формат(Окр(Document.Total, 2), "ЧДЦ=2");
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСуммыНДС(Document)
		
		Если Document.Type = "InvoiceCorrection"
			ИЛИ Document.Type = "InvoiceCorrectionRevision"
			Или Document.Type = "UniversalCorrectionDocument" Тогда
			
			стрУв = ?(Окр(Document.VatInc, 2) <> 0, "+" + Формат(Окр(Document.VatInc, 2), "ЧДЦ=2"), "");
			стрУм = ?(Окр(Document.VatDec, 2) <> 0, "-" + Формат(Окр(Document.VatDec, 2), "ЧДЦ=2"), "");
			Если НЕ ПустаяСтрока(стрУв) И НЕ ПустаяСтрока(стрУм) Тогда
				Возврат стрУв + " " + СтрУм;
			ИначеЕсли НЕ ПустаяСтрока(стрУв) Тогда
				Возврат стрУв;
			Иначе
				Возврат стрУм;
			КонецЕсли;
			
		Иначе
			
			Попытка
				Возврат Формат(Окр(Document.Vat, 2), "ЧДЦ=2");
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте 
	Функция ПредставлениеПериодаДД(ДатаНачала, Знач ДатаОкончания) Экспорт
		
		ДатаОкончания= ?(ДатаОкончания = МетодКлиента("Модуль_Клиент","ДатаГоризонта"), '00010101', ДатаОкончания);
		ПредставлениеПериодаДД= "";
		
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			Если ЗначениеЗаполнено(ДатаНачала) Тогда
				ПредставлениеПериодаДД= ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания), "ФП = Истина");
			Иначе
				ПредставлениеПериодаДД= "по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
			ПредставлениеПериодаДД= "с " + Формат(Датаначала, "ДФ=dd.MM.yyyy");
		Иначе
			ПредставлениеПериодаДД= "Без ограничения";
		КонецЕсли;
		
		Возврат ПредставлениеПериодаДД;	
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеТипаРезолюции(ResolutionType) Экспорт
		
		Если ResolutionType = "ResolutionApprove" Тогда
			Действие=	"Согласовано";
		ИначеЕсли ResolutionType = "ResolutionDisapprove" Тогда
			Действие=	"Отказано в согласовании";
		ИначеЕсли ResolutionType = "ResolutionRequest" Тогда
			Действие=	"Отправлен запрос на согласование";
		ИначеЕсли ResolutionType = "SignatureApprove" Тогда
			Действие=	"Подписан";
		ИначеЕсли ResolutionType = "SignatureDisapprove" Тогда
			Действие=	"Отказано в подписи";
		ИначеЕсли ResolutionType = "SignatureRequest" Тогда
			Действие=	"Отправлен запрос на подпись";
		ИначеЕсли ResolutionType = "RevocationRequest" Тогда
			Действие=	"Отправлен запрос на аннулирование";
		ИначеЕсли ResolutionType = "RevocationApprove" Тогда
			Действие=	"Аннулирован";
		ИначеЕсли ResolutionType = "RevocationDisapprove" Тогда
			Действие=	"Отказано в аннулировании";
		ИначеЕсли ResolutionType = "InvoiceCorrectionRequest" Тогда
			Действие = "Отправлен запрос на уточнение";
		Иначе
			Действие=	"Тип согласования не определен";
		КонецЕсли;
		
		Возврат Действие;
		
	КонецФункции
	
	&НаКлиенте 
	Функция СформироватьHTMLПредставлениеОшибок(Document, Организация, МассивОшибок) Экспорт
		
		HTMLДокумент=	"";
		
		HTMLДокумент= 	"<style>
		|
		|p1 {font-family: 'Times New Roman', Times, serif; font-size: 11pt; }
		|p2 {font-family: 'Times New Roman', Times, serif; font-size: 10pt; }
		|p {font-family: 'Times New Roman', Times, serif; font-size: 9pt;}
		|
		|.left_block {
		|display: block;
		|float: left; 
		|}
		|
		|.right_block {
		|display: block;
		|float: right;
		|}
		|
		|.bottom_brd {
		|border-bottom-width: 1px;
		|border-bottom-style: solid;
		|border-bottom-color: black;
		|}
		|
		|.block_comment {
		|width: 98%;
		|float: right;
		|}
		|
		|</style>";
		
		
		HTMLДокумент=	HTMLДокумент + "<body>" +
		"<div>" +
		"<div>" +
		
		"<div>" + 
		
		"<div>" +
		"<div class=""bottom_brd"">" +
		"<h3>" + ПредставлениеЭД(Document) + "</h3>" +
		"<h4 style=""margin-bottom: -15px;"">" + ?(Document.Type = "Inbound", "Отправитель: ", "Получатель: ") + Document.Organization.Name + "</h4>" +
		"<h4>" + ?(Document.Type = "Inbound", "Получатель: ", "Отправитель: ") + Document.Counteragent.Name + "</h4>" +
		"</div>" +
		"</div>";
		
		НомерОшибки=				0;
		ПредыдущаяКатегорияОшибки=	"";
		
		Для каждого Ошибка Из МассивОшибок Цикл
			
			Если НЕ ПредыдущаяКатегорияОшибки = Ошибка.КатегорияОшибки Тогда
				
				НомерОшибки=				0;
				ПредыдущаяКатегорияОшибки=	Ошибка.КатегорияОшибки;
				
				HTMLДокумент=	HTMLДокумент +
				"<div>" +
				
				"<div>" +
				
				"<div style= ""color = red"">" +
				"<p2 align=""left"">" + Ошибка.КатегорияОшибки + "</p2>" + 
				"</div>"
				
				"</div>" +
				
				"</div>";
				
			КонецЕсли;
			
			НомерОшибки=	НомерОшибки + 1;
			
			HTMLДокумент=	HTMLДокумент +
			"<div>" + 
			"<div class=""block_comment"" style= ""white-space: normal; word-wrap: break-word"">" +
			"<p>" + НомерОшибки + ". " + Ошибка.ТекстОшибки + "</p>" +
			"</div>" + 
			"</div>";
			
		КонецЦикла;
		
		HTMLДокумент=	HTMLДокумент + "</div></div></div></<body>";
		
		Возврат HTMLДокумент;
		
	КонецФункции
	
	&НаКлиенте 
	Функция СформироватьHTMLПредставлениеРезолюций(Document, Организация) Экспорт
		
		//Верстальщик бы меня на рее повесил...
		
		HTMLДокумент=	"";
		
		HTMLДокумент= 	"<!DOCTYPE html PUBLIC """"-//W3C//DTD XHTML 1.0 Transitional//EN
		|http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"""">
		|
		|<html xmlns=""""http://www.w3.org/1999/xhtml"""">
		|
		|<head>
		|<meta http-equiv=""""Content-Type"""" content=""""text/html; charset=utf-8""""/>
		|
		|<style>	
		|p1 {font-family: 'Times New Roman', Times, serif; font-size: 11pt; }
		|p2 {font-family: 'Times New Roman', Times, serif; font-size: 10pt; }
		|p {font-family: 'Times New Roman', Times, serif; font-size: 9pt; color = #828282; 
		|}
		|
		|.background.block_creationdate {
		|height: auto !important;
		|padding-bottom: 0;
		|right: 0;
		|width: 50%;
		|}
		|
		|.block_creationdate {
		|width: 30%;
		|padding-bottom: 0px;
		|text-align: right; 
		|}
		|
		|.block_resolutiontype {
		|width: 70%;
		|display: block;
		|float: left;
		|}
		|
		|.block_author {
		|width: 98%;
		|display: block;
		|float: left;
		|}
		|
		|.left_block {
		|display: block;
		|float: left; 
		|}
		|
		|.right_block {
		|display: block;
		|float: right;
		|}
		|
		|.bottom_brd {
		|border-bottom-width: 1px;
		|border-bottom-style: solid;
		|border-bottom-color: black;
		|}
		|
		|.block_comment {
		|width: 96%;
		|float: right; 
		|}
		|
		|</style>
		|
		|</head>";
		
		
		HTMLДокумент=	HTMLДокумент + "<body>" +
		"<div>" +
		"<div>" +
		
		"<div>" + 
		
		"<div>" +
		"<div class=""bottom_brd"">" +
		"<h3>" + ПредставлениеЭД(Document) + "</h3>" +
		"<h4 style=""margin-bottom: -15px;"">" + ?(Document.Type = "Inbound", "Отправитель: ", "Получатель: ") + Document.Organization.Name + "</h4>" +
		"<h4>" + ?(Document.Type = "Inbound", "Получатель: ", "Отправитель: ") + Document.Counteragent.Name + "</h4>" +
		"</div>" +
		"</div>";
		
		МассивРезолюций=	Document.Resolutions;
		
		Для Индекс = 0 По МассивРезолюций.Count - 1 Цикл
			
			Резолюция=	МассивРезолюций.GetItem(Индекс);
			
			Color=	"#0000FF";
			Если Резолюция.ResolutionType = "ResolutionApprove"
				ИЛИ Резолюция.ResolutionType = "SignatureApprove" Тогда
				Color=	"#00D403";
			ИначеЕсли  Резолюция.ResolutionType = "ResolutionDisapprove"
				ИЛИ Резолюция.ResolutionType = "SignatureDisapprove" Тогда
				Color=	"#FF0000";
			КонецЕсли;
			
			ResolutionType=	ПредставлениеТипаРезолюции(Резолюция.ResolutionType);
			
			Если Резолюция.ResolutionType = "ResolutionApprove" Тогда
				Пояснение=		"Согласовал: " + Резолюция.Author;
			ИначеЕсли Резолюция.ResolutionType = "ResolutionDisapprove" Тогда
				Пояснение=		"Отклонил: " + Резолюция.Author;
			ИначеЕсли Резолюция.ResolutionType = "SignatureApprove" Тогда
				Пояснение=		"Подписал: " + Резолюция.Author;
			ИначеЕсли Резолюция.ResolutionType = "SignatureDisapprove" Тогда
				Пояснение=		"Отказал: " + Резолюция.Author;
			ИначеЕсли Резолюция.ResolutionType = "ResolutionRequest" ИЛИ 
				Резолюция.ResolutionType = "SignatureRequest" ИЛИ
				Резолюция.ResolutionType = "RevocationRequest" Тогда
				ПолучательРезолюции=	?(Резолюция.TargetDepartment = Неопределено, "", " " + Резолюция.TargetDepartment.Name) + 
				?(Резолюция.TargetUser = Неопределено, "", ?(Резолюция.TargetDepartment = Неопределено, " ",", ") + ПолучитьФИОСИнициалами(Резолюция.TargetUser.Name));
				
				Пояснение=				"" + ПолучитьФИОСИнициалами(Резолюция.Author) + ?(НЕ ПустаяСтрока(ПолучательРезолюции), " &rarr; " + ПолучательРезолюции, "");
			Иначе
				Пояснение=		"";
			КонецЕсли;
			
			HTMLДокумент=	HTMLДокумент +
			"<div class=""block_left"">" +
			
			"<div>" +
			
			"<div class= ""right_block"">" +
			
			"<div class=""block_resolutiontype"" style= ""color: " + Color + """>" +
			"<p2 align=""left"">" + ResolutionType + "</p2>" + 
			"</div>"
			
			"<div class=""right_block block_creationdate"" >" + 
			"<div>" +
			"<p2 align=""right""  style=""vertical-align: baseline"" > &nbsp; " + Формат(Резолюция.CreationDate, "ДФ='dd.MM.yy HH:mm'") + "</p2>" +
			"</div>" +
			"</div>" +
			
			"</div>" +
			
			"</div>" +
			
			"<div>" +
			"<div class=""block_author"">" +
			"<p1>" + Пояснение + "</p1>" +
			"</div>" +
			"</div>" +
			
			"<div>" + 
			"<div class=""block_comment"" style= ""background-color: #FFFBF0; white-space: normal; word-wrap: break-word"">" +
			"<p><pre>" + Резолюция.Comment + "</pre></p>" +
			"</div>" + 
			
			"<div class=""block_comment"">" + 
			"<p>&nbsp</p>" +
			"</div>" + 
			
			"</div>"+
			
			"</div>";
			
		КонецЦикла;
		
		HTMLДокумент=	HTMLДокумент + "</div></div></div></div></<body>";
		
		Возврат HTMLДокумент;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеAuthor(ResolutionStatus)
		
		Возврат ?(ResolutionStatus.Author = Неопределено, "", ": " + ПолучитьФИОСИнициалами(ResolutionStatus.Author.Name));
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеTargetUser(ResolutionStatus)
		
		Возврат ?(ResolutionStatus.TargetDepartment = Неопределено, ": ", ResolutionStatus.TargetDepartment.Name)
		+ ?(ResolutionStatus.TargetUser = Неопределено, "", ?(ResolutionStatus.TargetDepartment = Неопределено, "", ", ") + ПолучитьФИОСИнициалами(ResolutionStatus.TargetUser.Name));
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСтатусаСогласования(Document) Экспорт
		
		СтатусСогласования=	"";
		ResolutionStatus=	Document.ResolutionStatus;
		
		Если НЕ ResolutionStatus = Неопределено Тогда
			
			Если ResolutionStatus.Type = "Approved" Тогда
				СтатусСогласования=	"Согласовано" + ПредставлениеAuthor(ResolutionStatus);
			ИначеЕсли ResolutionStatus.Type = "Disapproved" Тогда
				СтатусСогласования=	"Отказано в согласовании" + ПредставлениеAuthor(ResolutionStatus);
			ИначеЕсли ResolutionStatus.Type = "ApprovementRequested" Тогда
				СтатусСогласования=	"На согласовании" + ПредставлениеTargetUser(ResolutionStatus);
			ИначеЕсли ResolutionStatus.Type = "SignatureRequested" Тогда
				СтатусСогласования=	"На подписании" + ПредставлениеTargetUser(ResolutionStatus);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат СтатусСогласования;			
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьФИОСИнициалами(ФИО) Экспорт
		
		СтрокаФИОСИнициалами=	"";
		
		ИсходнаяСтрока=			ФИО;
		ПозицияПослПробела=		Найти(ИсходнаяСтрока, " ");
		Фамилия=				Лев(ИсходнаяСтрока, ПозицияПослПробела);
		
		ИсходнаяСтрока=			Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		ПозицияПослПробела=		Найти(ИсходнаяСтрока, " ");
		Имя=					Лев(ИсходнаяСтрока, ПозицияПослПробела);
		
		ИсходнаяСтрока=			Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		Отчество=				ИсходнаяСтрока;
		ИсходнаяСтрока=			Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		
		Если НЕ ПустаяСтрока(Фамилия) Тогда
			СтрокаФИОСИнициалами=	Фамилия + 
			?(НЕ ПустаяСтрока(Имя), Лев(Имя, 1) + ".", "") +
			?(НЕ ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", "");
		КонецЕсли;
		
		Возврат СтрокаФИОСИнициалами;
		
	КонецФункции
	
//} ПРЕДСТАВЛЕНИЯ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

	&НаКлиентеНаСервереБезКонтекста
	Функция НайтиСтрокиВМассивеСтруктур(МассивСтруктур, ПараметрыОтбора) //вместо НайтиСтроки таблицы значений
		Результат = Новый Массив;
		Для Каждого Стр из МассивСтруктур Цикл
			БылоНесоответствие = Ложь;
			Для Каждого Стр1 из ПараметрыОтбора Цикл
				Если СокрЛП(ПараметрыОтбора[Стр1.Ключ]) <>  СокрЛП(Стр[Стр1.Ключ]) Тогда
					БылоНесоответствие = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если БылоНесоответствие = Ложь Тогда
				Результат.Добавить(Стр);
			КонецЕсли;
			
		КонецЦикла;
		Возврат Результат;
	КонецФункции
	
	&НаСервере
	Функция BoxID_2_Организация_Форма(BoxID, DepartmentKpp = "") Экспорт 
		Возврат МетодСервера(,"BoxID_2_Организация", BoxID, DepartmentKpp);
	КонецФункции
	
	&НаСервере
	Функция CounteragentBoxID_2_Контрагент_Форма(CounteragentID, BoxID = Неопределено) экспорт 
		Возврат МетодСервера(,"CounteragentBoxID_2_Контрагент", CounteragentID, BoxID);
	КонецФункции
	
	&НаКлиенте
	Функция СформироватьТекстОшибкиДиадок(Знач ТекстОшибки) Экспорт
		
		КраткоеСообщение= ТекстОшибки;
		КраткоеСообщение= Сред(КраткоеСообщение, Найти(КраткоеСообщение, "##") + 1);
		КраткоеСообщение= Сред(КраткоеСообщение, Найти(КраткоеСообщение, "[" ) + 1);
		КраткоеСообщение= Сред(КраткоеСообщение, Найти(КраткоеСообщение, "]" ) + 1);
		
		Если Найти(КраткоеСообщение, "is not registered in FNS for box") > 0 Тогда
			
			BoxID= Сред(КраткоеСообщение, Найти(КраткоеСообщение, "is not registered in FNS for box") + 32);
			BoxID= Лев(BoxID, Найти(BoxID, ".") - 1);
			
			ОтпечатокСертификата= Лев(КраткоеСообщение, Найти(КраткоеСообщение, "is not registered in FNS for box") - 1);
			ОтпечатокСертификата= СокрЛП(Сред(ОтпечатокСертификата, Найти(ОтпечатокСертификата, "Signer certificate") + 18));
			
			ТекстОшибки=
			"Сертификат, которым подписано сообщение, не зарегистрирован в ФНС.
			|Для решения данной проблемы обратитесь в техподдержку.
			|Отладочная информация: 
			|Отпечаток сертификата: " + ОтпечатокСертификата + "
			|Идентификатор ящика организации: " + BoxID;
			
		ИначеЕсли Найти(ТекстОшибки, "Signer details not found") > 0 ИЛИ Найти(ТекстОшибки, "SignerDetails not found") > 0 Тогда
			
			BoxID= Сред(КраткоеСообщение, Найти(КраткоеСообщение, "boxid=") + 6, 36);
			ОтпечатокСертификата= Сред(КраткоеСообщение, Найти(КраткоеСообщение, "thumbprint=") + 11, 40);
			
			ТекстОшибки=
			"Для сертифката, которым подписано сообщение, не настроены параметры подписи.
			|Отладочная информация:
			|Отпечаток сертификата: " + ОтпечатокСертификата + "
			|Идентификатор ящика организации: " + BoxID;
			
		ИначеЕсли Найти(ТекстОшибки, "##3") > 0 Тогда
			
			ТекстОшибки= "Произошла ошибка при работе с КриптоПро:
						 |" + КраткоеСообщение;
			
		ИначеЕсли Найти(ТекстОшибки, "##1") > 0 Тогда
							
			Если Найти(ТекстОшибки, "Код ошибки: 500") > 0 И Найти(ТекстОшибки, "GetTokenByCertificate") > 0 Тогда 
				
				ТекстОшибки= "При работе программы произошла ошибка:
							 |Выбранный сертификат не имеет доступа в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
				
			ИначеЕсли Найти(КраткоеСообщение, "407") > 0 ИЛИ Найти(КраткоеСообщение, "401") > 0 Тогда
							   
				ТекстОшибки= "Настройки прокси-сервера не позволяют установить соединение с сервером " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж + "
							 |("+КраткоеСообщение+")";
				
			ИначеЕсли Найти(ТекстОшибки, "for entity that already signed") > 0 ИЛИ Найти(ТекстОшибки, "Receipt for document which already has one") > 0 Тогда 
				
				ТекстОшибки= "При работе программы произошла ошибка:
							 |данный документ уже подписан";
				
			ИначеЕсли 	  Найти(ТекстОшибки, "for entity that has requested signature rejection") > 0 
				 	  ИЛИ Найти(ТекстОшибки, "RequestedSignatureRejection for document that already has one") > 0
				 	  ИЛИ Найти(ТекстОшибки, "for entity that already have requested signature rejection") > 0 Тогда
				
				ТекстОшибки= "При работе программы произошла ошибка:
							 |по данному документу уже сформирован отказ в подписи";
				
			ИначеЕсли Найти(ТекстОшибки, "Access to Box") > 0 И Найти(ТекстОшибки, "is denied") > 0 Тогда 
				
				ТекстОшибки= "При работе программы произошла ошибка:
							 |у пользователя отсутствует доступ к ящику " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
				
			Иначе                                                             
				
				ТекстОшибки= "Произошла ошибка при работе с сервером " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж + ":
							 |" + КраткоеСообщение;
				
			КонецЕсли;
						   
		ИначеЕсли Найти(ТекстОшибки, "##2") > 0 Тогда
			
			Если Найти(КраткоеСообщение, "407") > 0 ИЛИ Найти(КраткоеСообщение, "401") > 0 Тогда
				
				ТекстОшибки= "Настройки прокси-сервера не позволяют установить соединение с сервером " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж + "
							 |(" + КраткоеСообщение + ")";
				
			Иначе 	
				
				ТекстОшибки= "Невозможно установить соединение с сервером " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж + " по причине:
							 |" + КраткоеСообщение;
				
			КонецЕсли;	
			
		ИначеЕсли Найти(ТекстОшибки, "##9") > 0 Тогда
			
			ТекстОшибки= КраткоеСообщение;
			
		КонецЕсли;	
		
		Возврат ТекстОшибки;
		
	КонецФункции	
	
	&НаСервере
	Функция ПолучитьОсновнуюФормуОбъекта(Объект1С)
		
		МетаданныеОбъекта=	Объект1С.ПолучитьОбъект().Метаданные();
		ИмяОбъекта1С=		МетаданныеОбъекта.Имя;
		
		Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
			КореньОбъекта=	"Документ";
		ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
			КореньОбъекта=	"Справочник";
		КонецЕсли;
		
		Попытка
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				Если ТипЗнч(Объект1С) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					ФормыСчетаФактуры=			Новый ФиксированноеСоответствие(Документы.СчетФактураПолученный.ПолучитьСоответствиеВидовСчетаФактурыФормам());
					ИмяФормыОбъекта=			ФормыСчетаФактуры[Объект1С.ВидСчетаФактуры];
				ИначеЕсли ТипЗнч(Объект1С) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
					ФормыСчетаФактуры= 			Новый ФиксированноеСоответствие(Документы.СчетФактураВыданный.ПолучитьСоответствиеВидовСчетаФактурыФормам());
					ИмяФормыОбъекта=			ФормыСчетаФактуры[Объект1С.ВидСчетаФактуры];
				ИначеЕсли ТипЗнч(Объект1С) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ФормыДокументаНакладной=	Новый ФиксированноеСоответствие(Документы.РеализацияТоваровУслуг.ПолучитьСоответствиеВидовОперацийФормам());
					ИмяФормыОбъекта=			ФормыДокументаНакладной[Объект1С.ВидОперации];
				ИначеЕсли ТипЗнч(Объект1С) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					ФормыДокументаНакладной=	Новый ФиксированноеСоответствие(Документы.ПоступлениеТоваровУслуг.ПолучитьСоответствиеВидовОперацийФормам());
					ИмяФормыОбъекта=			ФормыДокументаНакладной[Объект1С.ВидОперации];
				ИначеЕсли ТипЗнч(Объект1С) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") тогда 
					ИмяФормыОбъекта= 			"ФормаДокументаОбщая";
				ИначеЕсли ТипЗнч(Объект1С) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
					ФормыОтчетовКомитенту= 		Новый ФиксированноеСоответствие(Документы.ОтчетКомитентуОПродажах.ПолучитьСоответствиеВидовОтчетаКомитентуФормам());
					ИмяФормыОбъекта=			ФормыОтчетовКомитенту[Объект1С.ВидОперации];
				Иначе
					ИмяФормыОбъекта=			МетаданныеОбъекта.ОсновнаяФормаОбъекта.Имя;
				КонецЕсли;
			Иначе
				ИмяФормыОбъекта=			МетаданныеОбъекта.ОсновнаяФормаОбъекта.Имя;
			КонецЕсли;
		Исключение
			ИмяФормыОбъекта=			МетаданныеОбъекта.ОсновнаяФормаОбъекта.Имя;
		КонецПопытки;
		
		Возврат КореньОбъекта + "." + ИмяОбъекта1С + ".Форма." + ИмяФормыОбъекта;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьОписаниеФормы(Документ1С) Экспорт
		
		Возврат ПолучитьОсновнуюФормуОбъекта(Документ1С);
		
	КонецФункции
	
	&НаКлиенте
	Функция ВернутьМассивВыбранныхФайлов(МножественныйВыбор =  Ложь) Экспорт
		
		Попытка
			WshShell= 			Новый COMОбъект("WScript.Shell");
			КаталогФайлов=	WshShell.CurrentDirectory;
		Исключение
			КаталогФайлов=	"";
		КонецПопытки;
		
		ДиалогВыбора=						Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбора.Заголовок=				?(МножественныйВыбор, "Выберите файлы", "Выберите файл");
		ДиалогВыбора.Каталог=				КаталогФайлов;
		ДиалогВыбора.Фильтр=				НСтр("ru = 'Все файлы(*.*)|*.*'"); 
		ДиалогВыбора.МножественныйВыбор=	МножественныйВыбор;
		
		Если ДиалогВыбора.Выбрать() Тогда
			Возврат ДиалогВыбора.ВыбранныеФайлы;
		Иначе
			Возврат Новый Массив();
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	Процедура УстановитьРеквизитКонтрагента(ВыбКонтрагент, CounteragentId)
		
		МетодСервера(,"Установить_CounteragentBoxID_для_Контрагент", ВыбКонтрагент, CounteragentId);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьИмяФормыДокумента(Document) Экспорт
		
		Если ЭтоФормализованныйДокумент(Document.Type) И Document.HasCustomPrintForm = Ложь Тогда
			ИмяФормыПросмотра=	"ФормаДокумента";
		Иначе
			ИмяФормыПросмотра=	"ФормаДокументаБезВизуализации";
		КонецЕсли;
		
		Возврат ИмяФормыПросмотра;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьDocumentID_2_Документ(DocumentID, BoxID)
		
		Возврат МетодСервера(,"DocumentID_2_Документ", DocumentID, BoxID);
		
	КонецФункции

	&НаКлиенте
	Функция ЭтоНеформализованныйДокументБезМетаданных(Document) Экспорт 
		
		Если 	Document.Type = "Nonformalized"
			ИЛИ Document.Type = "NonformalizedProforma"
			ИЛИ Document.Type = "NonformalizedAcceptanceCertificate"
			ИЛИ Document.Type = "NonformalizedTorg12"
			ИЛИ Document.Type = "PriceList"
			ИЛИ Document.Type = "Contract"
			ИЛИ Document.Type = "ReconciliationAct"
			ИЛИ Document.Type = "ServiceDetails"
			ИЛИ Document.Type = "PriceListAgreement"
			ИЛИ Document.Type = "TrustConnectionRequest"
			ИЛИ Document.Type = "CertificateRegistry"
			ИЛИ Document.Type = "SupplementaryAgreement" Тогда
			
			Возврат Истина;
		Иначе
			
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции

	&НаКлиенте
	Функция ЭтоФормализованныйДокумент(DocumentType) Экспорт
		
		Возврат
		
		ЛЕВ(DocumentType, 7) = "Invoice"
		ИЛИ DocumentType = "XmlTorg12"
		ИЛИ DocumentType = "XmlAcceptanceCertificate"
		ИЛИ DocumentType = "UniversalTransferDocument"
		
	КонецФункции
	
	&НаКлиенте
	Функция НайтиОрганизациюВИерархииОрганизацийDiadoc(BoxID, DepartmentId) Экспорт
		
		Возврат НайтиОрганизациюВИерархииОрганизацийDiadocРекурсия(BoxID, Платформа.ПараметрыКлиент.ИерархияОрганизацийDiadoc[DepartmentId]);
		
	КонецФункции
	
	&НаКлиенте
	Функция НайтиОрганизациюВИерархииОрганизацийDiadocРекурсия(BoxID, СтруктураПодразделения)
		
		Если СтруктураПодразделения = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Организация= МетодСервера(,"BoxID_2_Организация", BoxID, СтруктураПодразделения.DepartmentKpp);
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Возврат Организация;
		КонецЕсли;
		
		Возврат НайтиОрганизациюВИерархииОрганизацийDiadocРекурсия(BoxID, Платформа.ПараметрыКлиент.ИерархияОрганизацийDiadoc[СтруктураПодразделения.ParentId]);
		
	КонецФункции
	
	&НаКлиенте
	Функция ТекстИнформацииОНовомФормате() Экспорт
		
		Возврат
		
		"<HTML><HEAD>
		|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
		|<META name=GENERATOR content=""MSHTML 11.00.10240.17202"">
		|<STYLE type=""text/css"">h3{margin-top:0.5em; margin-bottom:1em;} p{margin-top:0.2em; margin-bottom:0em;}</STYLE></HEAD>
		|<BODY>
		|<H3>14 апреля 2015 года изменился формат электронных счетов-фактур</H3>
		|<P>Согласно <A href=""http://publication.pravo.gov.ru/Document/View/0001201504030034"">приказу ФНС от 04.03.2015 № ММВ-7-6/93@</A> с 14 апреля 2015 года электронные счета-фактуры необходимо передавать в новом формате.</P>
		|<P>Как принимать к учету счета-фактуры в старом формате, переданные после 14 апреля, вы можете узнать в вашей ИФНС</P>
		|<P>На данный момент "+Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы+" поддерживает счета-фактуры как старого, так и нового форматов. Чтобы быть в курсе изменений в законодательстве, <A href=""http://www.diadoc.ru/blog"">подпишитесь на новости на нашем сайте</A></P></BODY></HTML>";

	КонецФункции
	
	&НаСервере
	Функция СписокОбработокДереваКонфигурации() Экспорт
		
		СписокОбработок= 	 Новый СписокЗначений;
		МетаданныеОбработки= Метаданные.Обработки;
		
		Для Каждого МетаданныеОбработка ИЗ МетаданныеОбработки Цикл
			СписокОбработок.Добавить(МетаданныеОбработка.Имя, МетаданныеОбработка.Представление());
		КонецЦикла;
		
		Возврат СписокОбработок;
		
	КонецФункции
	
	&НаКлиенте
	Функция ДатаГоризонта() Экспорт
		
		Возврат ДобавитьМесяц(ТекущаяДата(), 12);
		
	КонецФункции
	
	&НаКлиенте
	Функция ИдентификаторСвойства(ИмяСвойства) Экспорт
		
		Возврат МетодСервера(,"ИдентификаторСвойства"+ИмяСвойства);
		
	КонецФункции
	
	&НаКлиенте
	Функция ВариантыИспользованияПроксиСервера() Экспорт
		
		ВариантыИспользованияПроксиСервера= Новый СписокЗначений;
		
		ВариантыИспользованияПроксиСервера.Добавить("НеИспользовать"		  , "Не использовать");
		ВариантыИспользованияПроксиСервера.Добавить("ИспользоватьПроксиСервер", "Использовать прокси-сервер");
		ВариантыИспользованияПроксиСервера.Добавить("ИспользоватьНастройкиIE" , "Использовать настройки Internet Explorer");
		
		Возврат ВариантыИспользованияПроксиСервера;
		
	КонецФункции
	
	&НаСервере
	Процедура УстановитьЗначениеПараметровСвойствОтправки(Организация, ПараметрыСвойствОтправки) Экспорт
		
		МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваПечатнаяФормаДляТоваров"), , ПараметрыСвойствОтправки.НакладныеСТоварами);
		МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваПечатнаяФормаДляУслуг"), , ПараметрыСвойствОтправки.НакладныеСУслугамиБезТоваров);
		МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваОтправлятьНеПроведенные"), , ПараметрыСвойствОтправки.ОтправлятьНеПроведенные);
		МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваФормироватьУПД"), , ПараметрыСвойствОтправки.ФормироватьУПД);

		Если ЗначениеЗаполнено(ПараметрыСвойствОтправки.ВнешняяПечатнаяФормаСчета) Тогда
			МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваВнешняяПечатнаяФормаСчета"), , ПараметрыСвойствОтправки.ВнешняяПечатнаяФормаСчета.УникальныйИдентификатор());
		Иначе
			МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваВнешняяПечатнаяФормаСчета"), , "");
		КонецЕсли;
		МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваФормироватьСчетНаОсновании"), , ПараметрыСвойствОтправки.ФормироватьСчетНаОсновании);
		
		Если ЗначениеЗаполнено(ПараметрыСвойствОтправки.ВнешняяПечатнаяФормаАкта) Тогда
			МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваВнешняяПечатнаяФормаАкта"), , ПараметрыСвойствОтправки.ВнешняяПечатнаяФормаАкта.УникальныйИдентификатор());
		Иначе
			МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваВнешняяПечатнаяФормаАкта"), , "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыСвойствОтправки.ВнешняяПечатнаяФормаАктаСверки) Тогда
			МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки"), , ПараметрыСвойствОтправки.ВнешняяПечатнаяФормаАктаСверки.УникальныйИдентификатор());
		Иначе
			МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки"), , "");
		КонецЕсли;
		
		МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваСпособФормированияАкта"), , ПараметрыСвойствОтправки.СпособФормированияАкта);
		МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваСпособФормированияАктаСверки"), , ПараметрыСвойствОтправки.СпособФормированияАктаСверки);
		
		МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваПодставлятьКППГрузоотправителя"), , ПараметрыСвойствОтправки.ПодставлятьКППГрузоотправителя);
		МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификатрСвойстваТекстКомментарияДиадок"), , ПараметрыСвойствОтправки.ТекстКомментарияДиадок);
		
		
		// дополнительные внешние печатные формы
		МассивВнешнихПФСервер = ПолучитьМассивДополнительныхВнешнихПечатныхФорм(Организация);
		
		МассивВнешнихПФНастройка = ПараметрыСвойствОтправки.МассивДополнительныхВПФ;
		
		Для каждого ВнешняяПФ из МассивВнешнихПФНастройка Цикл
			Если МассивВнешнихПФСервер.Найти(ВнешняяПФ) = Неопределено Тогда
				ВключитьВнешнююПечатнуюФормуВСписок(Организация, ВнешняяПФ);	
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ВнешняяПФ из МассивВнешнихПФСервер Цикл
			Если МассивВнешнихПФНастройка.Найти(ВнешняяПФ) = Неопределено Тогда
				ИсключитьВнешнююПечатнуюФормуИзСписка(Организация, ВнешняяПФ);	
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ВключитьВнешнююПечатнуюФормуВСписок(Организация, ВнешняяПечатнаяФорма)
		НомерВПФ = ПолучитьПорядковыйНомерВнешнейПечатнойФормы(ВнешняяПечатнаяФорма);
		УстановитьПризнакВнешнейПечатнойФормы(Организация, НомерВПФ, "1");	
	КонецПроцедуры
	
	&НаСервере
	Процедура ИсключитьВнешнююПечатнуюФормуИзСписка(Организация, ВнешняяПечатнаяФорма)
		НомерВПФ = ПолучитьПорядковыйНомерВнешнейПечатнойФормы(ВнешняяПечатнаяФорма) ;
		УстановитьПризнакВнешнейПечатнойФормы(Организация, номерВПФ, "0");
	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьПорядковыйНомерВнешнейПечатнойФормы(ВнешняяПечатнаяФорма)
		
		//получим список всех внешних печатных форм, которые исп в модуле 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	ДополнительныеСведения.Объект 	КАК Объект,
			|	ДополнительныеСведения.Значение КАК Значение
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|ГДЕ
			|	ДополнительныеСведения.Свойство.Наименование = &Наименование
			|	И НЕ ДополнительныеСведения.Значение = """"";
			
		Запрос.УстановитьПараметр("Наименование", МетодСервера(,"ИдентификаторСвойстваНомерВПФ"));
		Выборка = Запрос.Выполнить().Выбрать();
		МаксЗначение = 0 ;
		Пока Выборка.Следующий() Цикл 
			ТекЗначение = Число(Выборка.Значение);
			Если Выборка.Объект = ВнешняяПечатнаяФорма Тогда 
				Возврат ТекЗначение;
			Иначе 
				МаксЗначение = Макс(ТекЗначение, МаксЗначение);
			КонецЕсли;
		КонецЦикла;
		
		Результат = МаксЗначение+1;
		МетодСервера(,"УстановитьЗначениеСвойства", ВнешняяПечатнаяФорма, МетодСервера(,"ИдентификаторСвойстваНомерВПФ"), , формат(результат, "ЧГ=0"));
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Процедура УстановитьПризнакВнешнейПечатнойФормы(Организация, НомерВПФ, Симв)
		
		Если НЕ СтрДлина(симв) = 1 Тогда
			ВызватьИсключение("неверно задан параметр при вызове функции ""УстановитьПризнакВнешнейПечатнойФормы""");
		КонецЕсли;	
		
		ТекущийСписокФорм = МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваСписокДопВПФ"));
		Если ЗначениеЗаполнено(ТекущийСписокФорм) = Ложь Тогда
			ТекущийСписокФорм = "";
		КонецЕсли;		  
		
		Если СтрДлина(ТекущийСписокФорм) < НомерВПФ Тогда 
			
			Пока СтрДлина(ТекущийСписокФорм) < НомерВПФ-1 Цикл 
				ТекущийСписокФорм = ТекущийСписокФорм +" ";
			КонецЦикла;	  
			ИтоговыйСписокФорм = ТекущийСписокФорм + Симв;
		Иначе
			
			ИтоговыйСписокФорм = Лев(ТекущийСписокФорм, НомерВПФ-1) + Симв + Прав(ТекущийСписокФорм, СтрДлина(ТекущийСписокФорм) - НомерВПФ);
		КонецЕсли;	  
		
		МетодСервера(,"УстановитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваСписокДопВПФ"), , ИтоговыйСписокФорм);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЭлементВРежимеВыбораИзСпискаПриИзменении(Форма, Элемент, ВыбранноеЗначение) Экспорт
		
		СократитьСписокВыбораДоВыбранногоЗначения(Элемент, ВыбранноеЗначение);
		
		СброситьКартинкуСпискаВыбора(Элемент);
		
		СинхронизироватьСпискиВыбораЭлементовПовторителей(Форма, Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СократитьСписокВыбораДоВыбранногоЗначения(Элемент, ВыбранноеЗначение) Экспорт
		
		ОбратныйИндекс= Элемент.СписокВыбора.Количество() - 1;
		
		Пока ОбратныйИндекс > -1 Цикл
			Если Элемент.СписокВыбора[ОбратныйИндекс].Значение <> ВыбранноеЗначение Тогда
				Элемент.СписокВыбора.Удалить(ОбратныйИндекс);
			КонецЕсли;
			ОбратныйИндекс= ОбратныйИндекс - 1;
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СброситьКартинкуСпискаВыбора(Элемент)
		
		Если Элемент.СписокВыбора.Количество() = 1 Тогда
			Элемент.СписокВыбора[0].Картинка= Новый Картинка;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СинхронизироватьСпискиВыбораЭлементовПовторителей(Форма, Элемент)
		
		МаскаИмени= Лев(Элемент.Имя, Найти(Элемент.Имя, "_") - 1);
		
		Для НомерЭлемента=1 ПО 10 Цикл
			
			ЭлементПовторитель= Форма.Элементы.Найти(МаскаИмени + "_" + Формат(НомерЭлемента, "ЧГ="));
			
			Если ЭлементПовторитель = Неопределено Тогда
				
				Прервать;
				
			ИначеЕсли ЭлементПовторитель <> Элемент Тогда
				
				ЭлементПовторитель.СписокВыбора.Очистить();
				
				Для Каждого ЭлементСписка ИЗ Элемент.СписокВыбора Цикл
					ЭлементПовторитель.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаписатьВЛог(ИдентификаторСобытия, Комментарий = "", ДокументСсылка = Неопределено) Экспорт
		
		ЗаписьЖурналаРегистрации(МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы + "."+СтрЗаменить(ИдентификаторСобытия, " ", "_"),,,ДокументСсылка, Комментарий);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция СравнитьВерсии(Знач ПерваяВерсия, Знач ВтораяВерсия) Экспорт
		
		Пока НЕ ПустаяСтрока(ПерваяВерсия) ИЛИ НЕ ПустаяСтрока(ВтораяВерсия) Цикл
			
			ПозицияРазделителя= Найти(ПерваяВерсия, ".");
			Если ПозицияРазделителя > 0 Тогда
				НомерПервойВерсии= Число(Лев(ПерваяВерсия, ПозицияРазделителя-1));
				ПерваяВерсия= Сред(ПерваяВерсия, ПозицияРазделителя+1);
			Иначе
				НомерПервойВерсии= ?(ПустаяСтрока(ПерваяВерсия), 0, Число(ПерваяВерсия));
				ПерваяВерсия= "";
			КонецЕсли;
			
			ПозицияРазделителя= Найти(ВтораяВерсия, ".");
			Если ПозицияРазделителя > 0 Тогда
				НомерВторойВерсии=	Число(Лев(ВтораяВерсия, ПозицияРазделителя-1));
				ВтораяВерсия= Сред(ВтораяВерсия, ПозицияРазделителя+1);
			Иначе
				НомерВторойВерсии= ?(ПустаяСтрока(ВтораяВерсия), 0, Число(ВтораяВерсия));
				ВтораяВерсия= "";
			КонецЕсли;
			
			Если НомерПервойВерсии > НомерВторойВерсии Тогда
				Возврат "ПерваяВерсияСтарше";
			ИначеЕсли НомерПервойВерсии < НомерВторойВерсии Тогда
				Возврат "ПерваяВерсияМладше";
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат "ВерсииРавны";
		
	КонецФункции
	
	&НаКлиенте
	Функция НеобходимоОграничениеНаОтправку(Документ1С, ВнешняяПечатнаяФорма, ПризнакПроведен) Экспорт
		
		ВозвращаемоеЗначение= Ложь;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) = Истина Тогда //внешняя печатная форма всегда не проведена
				
				ДокументВалютный= МетодСервера("Модуль_ИнтеграцияБП30", "ЭтоВалютныйДокумент", Документ1С);
				Если ДокументВалютный И НЕ ДокументПроведен(Документ1С) Тогда
					ВозвращаемоеЗначение= Истина;	
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ПризнакПроведен) = Истина И ПризнакПроведен = Ложь Тогда
				
				ДокументВалютный= МетодСервера("Модуль_ИнтеграцияБП30", "ЭтоВалютныйДокумент", Документ1С);
				Если ДокументВалютный = Истина Тогда
					ВозвращаемоеЗначение= Истина;	
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ВозвращаемоеЗначение= Ложь;
		КонецЕсли;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ДокументПроведен(ДокументНаПроверку)
		Возврат ДокументНаПроверку.Проведен; 	
	КонецФункции

	&НаКлиенте
	Функция ВыделитьСлово(ИсходнаяСтрока, Разделитель = " ") Экспорт
		
		Буфер = СокрЛ(ИсходнаяСтрока);
		ПозицияПослПробела = Найти(Буфер, Разделитель);
		
		Если ПозицияПослПробела = 0 Тогда
			ИсходнаяСтрока = "";
			Возврат Буфер;
		КонецЕсли;
		
		ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		
		Возврат ВыделенноеСлово;	
		
	КонецФункции
	
	&НаКлиенте
	Функция ЭДО_БиблиотекаКартинок() Экспорт
		
		Возврат МетодСервера(,"ЭДО_БиблиотекаКартинок");
		
	КонецФункции
	
	&НаКлиенте
	Функция ЗаполненныйДиалогВыбораФайла(МножественныйВыбор, Каталог) Экспорт
		
		ДиалогВыбора=						Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбора.Заголовок=				НСтр("ru = 'Выбор " + ?(МножественныйВыбор, "файлов", "файла") + "'");
		ДиалогВыбора.Каталог=				Каталог;
		ДиалогВыбора.Фильтр=				НСтр("ru = 'Все файлы (*.*)|*.*'"); 
		ДиалогВыбора.МножественныйВыбор=	МножественныйВыбор;
		
		Возврат ДиалогВыбора;
		
	КонецФункции
		
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ИНТЕГРАЦИЯ

	&НаКлиенте
	Функция ПроверитьФорматДатыПрото(ЗначениеПоля, ПредставлениеПоля, ОбязательноеЗаполнение= Ложь) Экспорт  
		
		если ОбязательноеЗаполнение и (ЗначениеЗаполнено(ЗначениеПоля)=Ложь) тогда 
			возврат  "<p>не указана "+ПредставлениеПоля+"</p>
			|"
		конецЕсли;
		
		Если ТипЗнч(ЗначениеПоля) = тип("Дата") тогда 
			Если (ЗначениеПоля < '18000101') или (ЗначениеПоля>='21000101') тогда 
				возврат "<p>"+ПредставлениеПоля+" ("+формат(ЗначениеПоля,"ДФ=dd.MM.yyyy")+") должна находиться в интервале 01.01.1800 - 31.12.2099</p>"
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗначениеПоля) = тип("Строка") тогда 	
			ДатаГод = прав(ЗначениеПоля, 4);
			Если (ДатаГод <"1800") или (ДатаГод >"2099") тогда 
				возврат "<p>"+ПредставлениеПоля+" ("+ЗначениеПоля+") должна находиться в интервале 01.01.1800 - 31.12.2099</p>"
			КонецЕсли;
		КонецЕсли;
		
		возврат ""
		
	КонецФункции

	&НаКлиенте
	Функция ПроверитьТитулПолучателяТорг12(СтруктураДляТитула) экспорт 
		
		ТекстОшибки=	ПроверитьФорматДатыПрото(СтруктураДляТитула.Получить("ShipmentReceiptDate"), "дата получения груза");
		
		Если НЕ ТекстОшибки = "" Тогда
			Если Найти(ТекстОшибки, "<p>")>0 Тогда
				ТекстОшибки = Прав(ТекстОшибки, СтрДлина(ТекстОшибки) - Найти(ТекстОшибки, "<p>")-2);
			КонецЕсли;
			Если Найти(ТекстОшибки, "</p>")>0 Тогда
				ТекстОшибки = Лев(ТекстОшибки, Найти(ТекстОшибки, "</p>")-1);
			КонецЕсли;
		КонецЕсли;
		
		Возврат ТекстОшибки;
		
	КонецФункции	

	&НаКлиенте
	Процедура ДобавитьВСписокФильтр(СписокФильтров, МассивТиповФильтруемыхДокументов, СтрокаФильтра)
		
		Для каждого ТипДокумента Из МассивТиповФильтруемыхДокументов Цикл
			
			СтруктураФильтра=	Новый Структура();
			СтруктураФильтра.Вставить("ТипДокумента", 	ТипДокумента);
			СтруктураФильтра.Вставить("Фильтр", 		СтрокаФильтра);
			
			СписокФильтров.Добавить(СтруктураФильтра);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьСписокФильтровДляДокументовДиадок(Направление, ФильтрПоСостояниюДокументооборота, ФильтрПотипамДокументов) 
		
		//ФильтрПотипамДокументов =1 выводим РНК
		//ФильтрПотипамДокументов =2 выводим СФ
		//ФильтрПотипамДокументов =3 выводим Счета на оплату
		//ФильтрПотипамДокументов =4 выводим неформализованные 
		//ФильтрПотипамДокументов =5 выводим Акты сверки
		//ФильтрПотипамДокументов =0 выводим все 
		
		// ФильтрПоСостояниюДокументооборота = 0 все состояния
		// ФильтрПоСостояниюДокументооборота = 1 завершен
		// ФильтрПоСостояниюДокументооборота = 2 не завершен
		// ФильтрПоСостояниюДокументооборота = 3 прекращен
		
		фильтрDirection = направление;
		СписокФильтров = Новый Массив;
		
		Если Направление = "OutboundWaitingForSenderSignature" Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), ФильтрDirection);
			
			Возврат СписокФильтров;
		КонецЕсли;
		
		Если ФильтрПоСостояниюДокументооборота = 0  Тогда // все состояния
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), ФильтрDirection);
		ИначеЕсли  ФильтрПоСостояниюДокументооборота = 1 Тогда // завершен
			
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 1), ФильтрDirection+"Finished"); //сф
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 3), фильтрDirection+""); //строго односторонние
	 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 2), фильтрDirection+"WithRecipientSignature"); //строго двусторонние
	 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 4), фильтрDirection+"WithRecipientSignature"); //односторонние или двусторонние
	 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 4), фильтрDirection+"NoRecipientSignatureRequest"); //односторонние или двусторонние
			
		ИначеЕсли  ФильтрПоСостояниюДокументооборота = 2 Тогда // не завершен
			
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 1), фильтрDirection+"NotFinished"); //сф
 	   		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 2), фильтрDirection+"WaitingForRecipientSignature"); //строго двусторонние
 	   		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 4), фильтрDirection+"WaitingForRecipientSignature"); //односторонние или двусторонние

		ИначеЕсли  ФильтрПоСостояниюДокументооборота = 3 Тогда // прекращен                                                
						
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RevocationAccepted");
			Если фильтрDirection = "Outbound" Тогда
				ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"InvalidSenderSignature");
	  		КонецЕсли;
	 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 2), фильтрDirection+"RecipientSignatureRequestRejected"); //строго двусторонние
	 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 4), фильтрDirection+"RecipientSignatureRequestRejected"); //односторонние или двусторонние
			
		ИначеЕсли ФильтрПоСостояниюДокументооборота = 21 Тогда 
	    	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RevocationIsRequestedByMe");  //ожидается Аннулирование
		ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 22 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RequestsMyRevocation");  //запрошено Аннулирование
		ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 23 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RevocationAccepted");  //Документ аннулирован
		ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 24 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RevocationRejected");  //отказано в аннулировании
		ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 11 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"WaitingForResolution");  //передано на согласование
		ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 12 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"Approved");  //согласовано		
	   	ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 13 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"Disapproved");  //отказано в согласованияя		
	    ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 14 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"SignatureRequestRejected");  //отказано в подписании		
		КонецЕсли;
				
		Возврат СписокФильтров;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьФилиаловDepartmentId()
		
		ФилиаловDepartmentId = Новый Массив;
		
		Возврат ФилиаловDepartmentId;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьDepartmentByKpp(Organization, DepartmentKpp)
		
		Для Индекс = 0 По Organization.Departments.Count - 1 Цикл
			dep=	Organization.Departments.GetItem(Индекс);
			Если dep.Kpp = DepartmentKpp Тогда
				Возврат dep.Id;
			КонецЕсли;
		КонецЦикла;
		
		Возврат "";
		
	Конецфункции
	
	&НаКлиенте
	Функция ВернутьМассивDepartmentId(стрЯщик, Box, ПодразделениеID, ВключатьПодчиненныеПодазделения)
		
		ПодразделениеID_текущее = ПодразделениеID;
		Если ПустаяСтрока(ПодразделениеID) Тогда
			Если НЕ ПустаяСтрока(стрЯщик.КПППодразделения) Тогда
				ПодразделениеID_текущее = ПолучитьDepartmentByKpp(Box, стрЯщик.КПППодразделения);   
			КонецЕсли;
		КонецЕсли;
		
		массивDepartmentId = Новый Массив;
		Если ПодразделениеID_текущее = "" Тогда
			ФилиаловDepartmentId = ПолучитьФилиаловDepartmentId();
			ЕстьПодразделенеКоторыеНужноОбходить = Ложь;
			массивDepartmentId.Добавить(Новый Структура("DepartmentID, вклДочерниеПодразделения", "", Ложь));
			Если ВключатьПодчиненныеПодазделения Тогда
				Для Индекс = 0 По Box.Departments.Count - 1 Цикл
					
					department=	Box.Departments.GetItem(Индекс);
					
					Если ФилиаловDepartmentId.Найти(department.Id) = Неопределено Тогда
						массивDepartmentId.Добавить(Новый Структура("DepartmentID, вклДочерниеПодразделения", department.Id, Истина));
					Иначе
						ЕстьПодразделенеКоторыеНужноОбходить = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЕстьПодразделенеКоторыеНужноОбходить = Ложь Тогда
				массивDepartmentId.Очистить();
			КонецЕсли;
		Иначе
			массивDepartmentId.Добавить(Новый Структура("DepartmentID, вклДочерниеПодразделения", ПодразделениеID_текущее, ВключатьПодчиненныеПодазделения));
		КонецЕсли;
		
		Если массивDepartmentId.Количество()=0 Тогда 
			//добавим пустой фильтр 
			массивDepartmentId.Добавить(Новый Структура("DepartmentID, вклДочерниеПодразделения", "", ВключатьПодчиненныеПодазделения));
		КонецЕсли;	
		
		Возврат  массивDepartmentId;
		
	КонецФункции	
	
	&НаКлиенте
	Функция ПолучитьСтруктуруЗадачи(НаименованиеЯщика, Организация, AsyncTask)
		
		Задача=	Новый Структура();
		Задача.Вставить("НаименованиеЯщика", 	НаименованиеЯщика);
		Задача.Вставить("Организация", 			Организация);
		Задача.Вставить("Task", 				AsyncTask);
		
		Возврат Задача;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ОтобразитьСтрокуСостояния(КратноеКолВоЗадач, НомерЗадачи, СчетчикСостояний, Организация)
		
		КратныйНомерЗадачи=	Цел(НомерЗадачи/20);
		Если КратныйНомерЗадачи > СчетчикСостояний Тогда
			СчетчикСостояний=	СчетчикСостояний + 1;
			Состояние("Загрузка документов организации " + Организация, СчетчикСостояний*100/?(КратноеКолВоЗадач = 0, 1, КратноеКолВоЗадач));
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьМассивАсинхронныхЗадач(СписокФильтров, ДатаНачала, ДатаОкончания, СписокЯщиков, counterAgentBoxId, ПараметрыВыборки)
		
		ПодразделениеID=					?(ПараметрыВыборки.Свойство("ПодразделениеID"), ПараметрыВыборки.ПодразделениеID, "");
		ВключатьПодчиненныеПодазделения=	?(ПараметрыВыборки.Свойство("ВключатьПодчиненныеПодазделения"), ПараметрыВыборки.ВключатьПодчиненныеПодазделения, Истина);
		ОтбиратьПоДатеДокумента=			?(ПараметрыВыборки.Свойство("ОтбиратьПоДатеДокумента"), ПараметрыВыборки.ОтбиратьПоДатеДокумента, Ложь);
		
		МассивЗадач=	Новый Массив;
		
		Для Каждого стрЯщик Из СписокЯщиков Цикл
			
			ОбработкаПрерыванияПользователя();
			
			Box=	 			ПолучитьЯщикДиадокДляОрганизации(стрЯщик.Объект, стрЯщик.ОтпечатокСертификата, стрЯщик.Значение);
			НаименованиеЯщика=	Box.name;
			массивDepartmentId=	ВернутьМассивDepartmentId(стрЯщик, Box, ПодразделениеID, ВключатьПодчиненныеПодазделения);
			
			Для каждого ФильтрАпи Из СписокФильтров Цикл
				Для каждого depId Из массивDepartmentId Цикл
					
					ОбработкаПрерыванияПользователя();
					
					Состояние("Получение документов по организации " + стрЯщик.Объект);
					
					DocumentsTask=	Box.getDocumentsTask();
					
					Если ОтбиратьПоДатеДокумента Тогда
						DocumentsTask.FromDocumentDate=			ДатаНачала;
						Если НЕ ПараметрыВыборки.Направление = "OutboundWaitingForSenderSignature" Тогда
							DocumentsTask.ToDocumentDate=		КонецДня(Датаокончания);
						КонецЕсли;
					Иначе
						DocumentsTask.FromSendDate=			ДатаНачала;
						Если НЕ ПараметрыВыборки.Направление = "OutboundWaitingForSenderSignature" Тогда
							DocumentsTask.ToSendDate=		КонецДня(Датаокончания);
						КонецЕсли;
					КонецЕсли;
					DocumentsTask.Category=					ФильтрАпи.ТипДокумента + "." + ФильтрАпи.Фильтр;
					DocumentsTask.counterAgentId=			counterAgentBoxId;
					DocumentsTask.DepartmentId=				depId.DepartmentId;
					DocumentsTask.ExcludeSubdepartments=	НЕ depId.вклДочерниеПодразделения;
					
					AsyncTask=	DocumentsTask.GetDocumentsAsync();
					Задача=		ПолучитьСтруктуруЗадачи(НаименованиеЯщика, СтрЯщик.Объект, AsyncTask);
					МассивЗадач.Добавить(Задача);
					
				КонецЦикла;
			КонецЦикла;
		Конеццикла;  
		
		Возврат МассивЗадач;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьРезультатВыполненияЗадач(МассивЗадач, ПараметрыВыборки)
		
		ПолучатьРезолюции=	?(ПараметрыВыборки.Свойство("ПолучатьРезолюции"), ПараметрыВыборки.ПолучатьРезолюции, Ложь);
		
		Результат=	Новый Массив;
		
		Пока МассивЗадач.Количество() > 0 Цикл
			
			ИндексЗадач=	0;
			Пока ИндексЗадач < МассивЗадач.Количество() Цикл
				Задача = МассивЗадач[ИндексЗадач];
				Если МассивЗадач[ИндексЗадач].Task.IsCompleted Тогда
					
					DocumentsTask=	Задача.Task.Result;
					
					КратноеКолВоЗадач=	Цел((DocumentsTask.Count-1)/10);
					СчетчикСостояний=	0;
					
					Для ИндексДокументов = 0 По DocumentsTask.Count-1 Цикл
						
						ОбработкаПрерыванияПользователя();
						
						ОтобразитьСтрокуСостояния(КратноеКолВоЗадач, ИндексДокументов, СчетчикСостояний, Задача.НаименованиеЯщика);
						
						Document = DocumentsTask.GetItem(ИндексДокументов);

						// Сурогатные фильтры УПД, пока в API нет фильтров по Function.
						ФильтрПотипамДокументов = ПараметрыВыборки.ТипыДокументов;
						Если Не ПустаяСтрока(ФильтрПотипамДокументов) И Document.Type = "UniversalTransferDocument" Тогда
							
							ТипДокумента= ТипДокументаУПД(Document.Function);
							
							Если 	ТипДокумента = ТипДокументаУПД("СЧФДОП")
									И ФильтрПотипамДокументов <> "5"
								ИЛИ ТипДокумента = ТипДокументаУПД("СЧФ")
									И ФильтрПотипамДокументов <> "2"
									И ФильтрПотипамДокументов <> "24"
								ИЛИ ТипДокумента = ТипДокументаУПД("ДОП")
									И ФильтрПотипамДокументов <> "1"
									И ФильтрПотипамДокументов <> "13"
							Тогда
								Продолжить;
							КонецЕсли;
							
						КонецЕсли;
						
						СтруктураДокумента= Новый Структура;
						ЗаполнитьСтрокуТаблицыДокумента(Document, СтруктураДокумента, Задача.НаименованиеЯщика, Ложь, ПолучатьРезолюции);
						Результат.Добавить(СтруктураДокумента);
						
					КонецЦикла;
					МассивЗадач.Удалить(ИндексЗадач);
					
				Иначе 
					ИндексЗадач=	ИндексЗадач + 1;
				КонецЕсли;
			КонецЦикла
		конецЦикла;
		
		СвернутьТаблицуДокументовДиадок(Результат);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура СвернутьТаблицуДокументовДиадок(ТаблицаДокументовДиадок)
		
		// УПД - документ с квантовой запутанностью, может существовать сразу в двух статусах (InboundFinished и InboundWithRecipientSignature)
		// Поэтому в ТаблицаДокументовДиадок он может попадать дважды (DDSUPPORT-10335).
		// Вот здесь и будем искать дубли.
		// Алгоритм будет общий для ОФ и УФ, поэтому предполагаем, что в ТаблицаДокументовДиадок может быть как ТаблицаЗначений, так и Массив из Структур (&НаКлиенте).
		
		СоответствиеУПД = Новый Соответствие;
		
		ОбратныйИндекс = ТаблицаДокументовДиадок.Количество()-1;
		
		Пока ОбратныйИндекс > -1 Цикл
			
			Строка= ТаблицаДокументовДиадок[ОбратныйИндекс];
			
			Если Строка.DocumentType = "UniversalTransferDocument" Тогда
				
				DocumentIdBoxId = Строка.DocumentId + Строка.BoxId;
				
				// Если документ уже есть в СоответствиеУПД значит текущий можно удалить.
				Если СоответствиеУПД[DocumentIdBoxId] = Истина Тогда
					ТаблицаДокументовДиадок.Удалить(ОбратныйИндекс);
				Иначе
					СоответствиеУПД.Вставить(DocumentIdBoxId, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
			ОбратныйИндекс = ОбратныйИндекс - 1;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ВернутьВыборкуРНКИСчетовФактурДиадок(ДатаНачала, ДатаОкончания, Организация = Неопределено, counterAgentBoxId = "", ПараметрыВыборки) Экспорт
			
		Направление				= ?(ПараметрыВыборки.Свойство("Направление"), ПараметрыВыборки.Направление, "Inbound");
		СписокДокументооборота	= ?(ПараметрыВыборки.Свойство("СписокДокументооборота"), ПараметрыВыборки.СписокДокументооборота, 0);
		ТипыДокументов			= ?(ПараметрыВыборки.Свойство("ТипыДокументов"), ПараметрыВыборки.ТипыДокументов, "");
		
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = Дата("20500101");
		КонецЕсли;
		
		СписокФильтров = ПолучитьСписокФильтровДляДокументовДиадок(Направление, СписокДокументооборота, ТипыДокументов);
		
		СписокЯщиков= МетодСервера(,"ПолучитьТаблицуЯщиковДиадокОрганизации", Организация, Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком, Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.ПредставлениеПользователя);
		МассивЗадач	= ПолучитьМассивАсинхронныхЗадач(СписокФильтров, ДатаНачала, ДатаОкончания, СписокЯщиков, counterAgentBoxId, ПараметрыВыборки);
		Результат	= ПолучитьРезультатВыполненияЗадач(МассивЗадач, ПараметрыВыборки);
				
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьМассивСтруктурКонтент() Экспорт
		
		МассивЗадачПолучениеКонтента = Новый Массив;
		
		Если НЕ МассивСтруктурКонтент = Неопределено Тогда
		
			Для каждого СтрокаМассива Из МассивСтруктурКонтент Цикл
				
				ОбработкаПрерыванияПользователя();
				
				Пока МассивЗадачПолучениеКонтента.Количество() = МаксимальноеКоличествоЗаданий Цикл
					ОбработатьМассивЗадачКонтента(МассивЗадачПолучениеКонтента, МассивСтруктурКонтент);
				КонецЦикла;

				Попытка
					ДобавитьЗадачуПолучитьКонтент(МассивЗадачПолучениеКонтента, СтрокаМассива.DocumentId, СтрокаМассива.BoxId, СтрокаМассива.Document);
				Исключение
										
				КонецПопытки;
				
			КонецЦикла;
			
			Пока НЕ МассивЗадачПолучениеКонтента.Количество() = 0 Цикл
				ОбработатьМассивЗадачКонтента(МассивЗадачПолучениеКонтента, МассивСтруктурКонтент);
			КонецЦикла;
			
		Иначе	
			
		КонецЕсли;
		
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьЗадачуПолучитьКонтент(МассивЗадачПолучениеКонтента, DocumentId, BoxId, Document)
		
		Попытка
			
			ЭтоНеформализованныйДокумент = ?(НЕ Найти(Document.Type,"Nonformalized")=0 ИЛИ Document.Type="Contract", Истина, Ложь);
			Если НЕ ЭтоНеформализованныйДокумент Тогда 
			
				СтруктураЗадачи = Новый Структура();
				СтруктураЗадачи.Вставить("DocumentId", DocumentId);
				СтруктураЗадачи.Вставить("BoxId", BoxId);
				СтруктураЗадачи.Вставить("Task", Document.GetContentAsync());
			
				МассивЗадачПолучениеКонтента.Добавить(СтруктураЗадачи);
			
			КонецЕсли;
			
		Исключение
			
		КонецПопытки;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьМассивЗадачКонтента(МассивЗадачПолучениеКонтента, МассивСтруктурКонтент)
		
		МассивУдаляемых = Новый Массив();
		
		Для каждого ЗадачаПолучениеКонтента Из МассивЗадачПолучениеКонтента Цикл
			Если ЗадачаПолучениеКонтента.Task.IsCompleted Тогда
				
				Попытка
					
					DocumentContent = ЗадачаПолучениеКонтента.Task.Result;
					
					СтрокаМассива = ПолучитьЗначениеКонтентаКэш(ЗадачаПолучениеКонтента.BoxId, ЗадачаПолучениеКонтента.DocumentId);
					
					Если НЕ СтрокаМассива = Неопределено Тогда
						СтрокаМассива.Content = DocumentContent;
					Иначе
						
					КонецЕсли;
														
				Исключение
					
				КонецПопытки;		
				
				МассивУдаляемых.Добавить(ЗадачаПолучениеКонтента);
				
			КонецЕсли;
		КонецЦикла;
		
		Для каждого УдаляемыйЭлемент Из МассивУдаляемых Цикл
			Индекс=	МассивЗадачПолучениеКонтента.Найти(УдаляемыйЭлемент);
			Если НЕ Индекс = Неопределено Тогда
				МассивЗадачПолучениеКонтента.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
		
	&НаКлиенте
	Функция ПолучитьЗначениеКонтентаКэш(BoxID, DocumentId) Экспорт
		й=1;
		Если МассивСтруктурКонтент.Количество()=0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Для каждого СтрокаМассива из МассивСтруктурКонтент Цикл
			
			Если СтрокаМассива.BoxID = BoxID
				И СтрокаМассива.DocumentId = DocumentId Тогда
				
				Возврат СтрокаМассива;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецФункции
			
	&НаКлиенте
	Процедура ЗаполнитьСтрокуТаблицыДокумента(Document, СтруктураДокумента, НаименованиеЯщика = Неопределено, ЗаполнятьПервичныйДокумент = Истина, ПолучатьРезолюции = Ложь) Экспорт
			
		СтруктураДокумента.Вставить("ТипДокумента", 	 ПредставлениеТипаЭД(Document));
		СтруктураДокумента.Вставить("BoxID", 			 "" + Document.OrganizationID);
		СтруктураДокумента.Вставить("DocumentId", 		 "" + Document.DocumentId);
		СтруктураДокумента.Вставить("DocumentType", 	 Document.Type);
		СтруктураДокумента.Вставить("DocumentFunction",  ?(Document.Type = "UniversalTransferDocument", Document.Function, ""));
		СтруктураДокумента.Вставить("DocumentDirection", Document.Direction);
		СтруктураДокумента.Вставить("CounteragentId", 	 Document.counteragent.id);
		СтруктураДокумента.Вставить("Дата", 			 ?(Document.DocumentDate<'20000101', "" ,Document.DocumentDate));
		СтруктураДокумента.Вставить("Номер", 			 ПредсталениеНомераЭД(Document));
		СтруктураДокумента.Вставить("Продавец", 		 ПредставлениеПродавца(Document, НаименованиеЯщика)); 
		СтруктураДокумента.Вставить("Покупатель", 		 ПредставлениеПокупателя(Document, НаименованиеЯщика)); 
		СтруктураДокумента.Вставить("Подразделение", 	 ПредставлениеПодразделения(Document));
		СтруктураДокумента.Вставить("Сумма", 			 ПредставлениеСуммы(Document));
		СтруктураДокумента.Вставить("СостояниеДокументооборота", 			ПредставлениеСтатуса(Document));
		СтруктураДокумента.Вставить("СостояниеСогласования", 				ПредставлениеСтатусаСогласования(Document));
		СтруктураДокумента.Вставить("СостояниеПередачиЧерезРоуминг", 		ПредставлениеСтатусаРоуминг(Document));
		СтруктураДокумента.Вставить("СостояниеПередачиЧерезРоумингДетали", 	?(Document.RoamingNotificationStatus = "RoamingNotificationStatusError", Document.RoamingNotificationStatusDescription, ""));
		СтруктураДокумента.Вставить("Status", 			 "" + Document.Status);
		СтруктураДокумента.Вставить("ЭтоТестовыйДок", 	 Document.IsTest);
		
		Если Document.RoamingNotificationStatus <> "RoamingNotificationStatusNone" И Document.RoamingNotificationStatus <> "RoamingNotificationStatusError" Тогда
			СтруктураДокумента.СостояниеДокументооборота=		СтруктураДокумента.СостояниеПередачиЧерезРоуминг + ?(ЗначениеЗаполнено(СтруктураДокумента.СостояниеДокументооборота), " " + СтруктураДокумента.СостояниеДокументооборота, "");
			СтруктураДокумента.СостояниеПередачиЧерезРоуминг= 	"";
		КонецЕсли;
		
		Если МассивСтруктурКонтент = Неопределено Тогда
			МассивСтруктурКонтент= Новый Массив;
		КонецЕсли;
		
		МассивСтруктурКонтент.Добавить(Новый Структура("BoxID, DocumentId, Document, Content", Document.OrganizationID, Document.DocumentId, Document));
				
		Department= Document.Department;
		
		Resolutions= Новый Массив();
		Если ПолучатьРезолюции Тогда
			Если Document.Type = "XmlTorg12" ИЛИ Document.Type = "XmlAcceptanceCertificate" Тогда
				Для Индекс = 0 По Document.Resolutions.Count - 1 Цикл
					Резолюция= Document.Resolutions.GetItem(Индекс);
					Resolutions.Добавить(Новый Структура("Author, CreationDate, ResolutionType", Резолюция.Author, Резолюция.CreationDate, Резолюция.ResolutionType));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		СтруктураДокумента.Вставить("Resolutions", Resolutions);
		
		Если Найти(Document.Type,"Invoice")>0 Тогда
			СтруктураДокумента.Вставить("СуммаНДС", ПредставлениеСуммыНДС(Document));
			СтруктураДокумента.Вставить("ДатаУчета", Document.ConfirmationDate);
		Иначе
			СтруктураДокумента.Вставить("СуммаНДС", 0);
			СтруктураДокумента.Вставить("Валюта", "");
			СтруктураДокумента.Вставить("ДатаУчета", Document.Timestamp+4*60*60);  // Timestamp - по UTC, переводим в МСК +4 часа
		КонецЕсли;
		
		СтруктураДокумента.Вставить("MessageId", Сред(СокрЛП(Document.DocumentId), 1, 36));
		
		Если Document.Type = "NonformalizedProforma" Тогда
			СтруктураДокумента.Вставить("ПозицияСортировки", 1);
		ИначеЕсли 	Document.Type = "XmlTorg12" 
				ИЛИ Document.Type = "XmlAcceptanceCertificate" 
				ИЛИ (Document.Type = "UniversalTransferDocument" И ФункцияУПД(СтруктураДокумента.ТипДокумента) = "ДОП") Тогда
				
			СтруктураДокумента.Вставить("ПозицияСортировки", 2);
			
		ИначеЕсли 	Document.Type = "Invoice"
				ИЛИ (Document.Type = "UniversalTransferDocument" И ФункцияУПД(СтруктураДокумента.ТипДокумента) = ФункцияУПД("СЧФДОП")) 
				ИЛИ (Document.Type = "UniversalTransferDocument" И ФункцияУПД(СтруктураДокумента.ТипДокумента) = ФункцияУПД("СЧФ")) Тогда
				
			СтруктураДокумента.Вставить("ПозицияСортировки", 4);
			
		Иначе
			СтруктураДокумента.Вставить("ПозицияСортировки", 3);
		КонецЕсли;
		
		СтруктураДокумента.Вставить("ИндексИконкиПакета", 0);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьЯщикДиадокДляОрганизации(Организация, ОтпечатокСертификата=неопределено, BoxID=неопределено, Connection = неопределено) Экспорт
		
		Если BoxID = неопределено тогда
			BoxID= МетодСервера(,"Организация_2_BoxID", Организация);
			Если BoxID = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		НайденныеСтроки =  НайтиСтрокиКонтекстДиадокаПоОтбору(Новый Структура("Организация", Организация));
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда 
			Connection = НайденныеСтроки[0].Connection;
			Возврат НайденныеСтроки[0].Box
		КонецЕсли;
		
		НайденныеСтроки =  НайтиСтрокиКонтекстДиадокаПоОтбору(Новый Структура("BoxID", BoxID));
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда 
			Connection = НайденныеСтроки[0].Connection;
			Возврат НайденныеСтроки[0].Box
		КонецЕсли;
		
		Connection = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection;
		Box = Connection.GetOrganizationById(BoxID);  
		
		СтрокаКонтекста = Новый Структура("BoxId, Организация, Box, Connection, ОтпечатокСертификата, ОшибкаСертификата, Magic");
		
		СтрокаКонтекста.Организация= Организация;
		СтрокаКонтекста.Connection=  Connection;
		СтрокаКонтекста.Box=   Box;
		СтрокаКонтекста.BoxId= Box.Id;
		
		Если Connection.AuthenticateType = "Certificate" Тогда
			СтрокаКонтекста.ОтпечатокСертификата= Connection.Certificate.Thumbprint;
			Если Не СтрокаКонтекста.Box.IsPilot И Не СтрокаКонтекста.Box.IsTest Тогда
				СтрокаКонтекста.ОшибкаСертификата= СтрокаКонтекста.Box.CanSendInvoice(СтрокаКонтекста.ОтпечатокСертификата);
			КонецЕсли;
		КонецЕсли;
		
		Платформа.ПараметрыКлиент.КонтекстДиадока.Добавить(СтрокаКонтекста);
		
		ИнициализироватьMagic();
		
		//Поместим во временное хранилище данные подписанта по организации
		
		МассивДанныхПодписантовОрганизаций = ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресПодписантыОрганизаций);
		
		Если МассивДанныхПодписантовОрганизаций = Неопределено Тогда
			МассивДанныхПодписантовОрганизаций = Новый Массив;
		КонецЕсли;
		
		Users = Box.GetUsers();
		ВГраница = Users.Count - 1;
		
		Для ИндексЦикла= 0 ПО ВГраница Цикл			
			User = Users.GetItem(ИндексЦикла);			
			Если User.IsCurrentUser = Истина Тогда				
				МассивДанныхПодписантовОрганизаций.Добавить(Новый Структура("Организация, BoxID, ФИО, Должность", Организация, BoxID, User.Name, User.Position));
				Прервать;				
			КонецЕсли;			
		КонецЦикла;
		
		ПоместитьВоВременноеХранилище(МассивДанныхПодписантовОрганизаций, Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресПодписантыОрганизаций);
		
		Возврат Box;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ИнициализироватьMagic() Экспорт
		
		Для каждого СтрокаКонтекста Из Платформа.ПараметрыКлиент.КонтекстДиадока Цикл
			
			Если  СтрокаКонтекста.Box.AuthenticateType = "Certificate"
				И СтрокаКонтекста.Magic = Неопределено
				И НЕ ЗначениеЗаполнено(СтрокаКонтекста.ОшибкаСертификата) Тогда
				
				СтрокаКонтекста.Magic = СтрокаКонтекста.Box.GetReceiptGenerationProcess();
				СтрокаКонтекста.Magic.Start();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПроверитьСертификат(BoxId) Экспорт
		
		СтрокаКонтекста= НайтиСтрокиКонтекстДиадокаПоОтбору(Новый Структура("BoxId", BoxId))[0];
		
		Если НЕ ЗначениеЗаполнено(СтрокаКонтекста.ОшибкаСертификата) Тогда
			Возврат;
		КонецЕсли;
		
		Если	Найти(СтрокаКонтекста.ОшибкаСертификата, "FNS reg message was not sent for box") > 0
			ИЛИ Найти(СтрокаКонтекста.ОшибкаСертификата, "is not registered in FNS for box") > 0
			ИЛИ Найти(СтрокаКонтекста.ОшибкаСертификата, "No registration message to FNS found for boxId") > 0 
			ИЛИ Найти(СтрокаКонтекста.ОшибкаСертификата, "Unknown FnsRegStatus") > 0 Тогда
			
			СтрокаКонтекста.Box.SendFnsRegistrationMessage(СтрокаКонтекста.ОтпечатокСертификата);
			
			Если Не СтрокаКонтекста.Box.IsPilot И Не СтрокаКонтекста.Box.IsTest Тогда
				СтрокаКонтекста.ОшибкаСертификата= СтрокаКонтекста.Box.CanSendInvoice(СтрокаКонтекста.ОтпечатокСертификата);
			КонецЕсли;
			
			ИнициализироватьMagic();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаКонтекста.ОшибкаСертификата) Тогда
			ВызватьИсключение "##9[]" + СтрокаКонтекста.ОшибкаСертификата;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция НайтиСтрокиКонтекстДиадокаПоОтбору(СтруктураОтбор)
		Возврат НайтиСтрокиВМассивеСтруктур(Платформа.ПараметрыКлиент.КонтекстДиадока, СтруктураОтбор);//КонтекстДиадока.НайтиСтроки(СтруктураОтбор);
	КонецФункции
	
	&НаКлиенте
	Функция РазвернутьGUID(СтрНач) Экспорт
		
		СтрРез = "";
		Если СтрДлина(Стрнач) > 36 Тогда
			СтрРез = лев(Стрнач, 32);
			СтрРез = Сред(СтрРез, 1, 8) + "-" + Сред(СтрРез, 9, 4) + "-" + Сред(СтрРез, 13, 4) + "-" + Сред(СтрРез, 17, 4) + "-" + Сред(СтрРез, 21, 12);
		ИначеЕсли СтрДлина(Стрнач) < 36 Тогда
			СтрРез = Сред(Стрнач, 1, 8) + "-" + Сред(Стрнач, 9, 4) + "-" + Сред(Стрнач, 13, 4) + "-" + Сред(Стрнач, 17, 4) + "-" + Сред(Стрнач, 21, 12);
		Иначе
			СтрРез = СтрНач;
		КонецЕсли;
		
		Возврат СтрРез;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьURLНаДокументДиадока(BoxId, DocumentId)  
		
		MessageId = Сред(DocumentId, 1, 36);
		EntityId = Сред(DocumentId, 37, 36);
		
		Возврат  РазвернутьGUID(BoxId) + "/Document/Show?letterId=" + РазвернутьGUID(MessageId) + "&documentId=" + РазвернутьGUID(EntityId);
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьПутьКWEBСерверу()
		
		Возврат МетодСервера(,"ПолучитьПутьКWEBСерверу");
		
	КонецФункции
	
	&НаКлиенте
	Процедура ОткрытьСтраницуВДиадоке(ПутьПослеСлэша)
		
		ТекстURL = ПолучитьПутьКWEBСерверу() + ПутьПослеСлэша;
		
		//// Открытие ссылки в IE
		//Попытка
		//	IE=	Новый COMОбъект("InternetExplorer.Application"); 
		//Исключение
		//	Сообщить("Ошибка при открытии приложения Internet Explorer");
		//	Сообщить(ОписаниеОшибки());
		//	Возврат;
		//КонецПопытки;
		//
		//IE.Visible=	True; 
		//IE.Navigate2(ТекстURL);
		
		ЗапуститьПриложение(текстURL);
		
	КонецПроцедуры 
	
	&НаКлиенте
	Процедура  ПоказатьДокументВДиадоке(OrganizationId, DocumentId) Экспорт
		
		ТекстURL = ПолучитьURLНаДокументДиадока(OrganizationId, DocumentId);
		ОткрытьСтраницуВДиадоке(ТекстURL);
		
	КонецПроцедуры 
	
	&НаСервере
	Функция ОбновитьДанныеДокумента(ДокументСсылка, DocumentDate, DocumentNumber)
		
		Возврат МетодСервера(,"ОбновитьДанныеДокумента", ДокументСсылка, DocumentDate, DocumentNumber);
		
	КонецФункции
	
	&НаКлиенте
	Процедура ОбработчикСозданиеДокумента(ДокументССылка, ЭДОбъект) Экспорт
		
		РезультатОбновления=	ОбновитьДанныеДокумента(ДокументССылка, ЭДОбъект.DocumentDate, ЭДОбъект.DocumentNumber);
		Если РезультатОбновления.ДанныеОбновлены = Истина Тогда
			ОтобразитьИзменениеДанных(ДокументССылка, ВидИзмененияДанных.Изменение);
		КонецЕсли;
		
		Если НЕ РезультатОбновления.ОписаниеОшибки = "" Тогда
			ПоказатьПредупреждение(, РезультатОбновления.ОписаниеОшибки, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		КонецЕсли;
		
		МетодСервера(,"Установить_DocumentID_Для_Документ", ДокументССылка, ЭДОбъект.DocumentId, ЭДОбъект.OrganizationId);
		
		ПараметрыОповещения=	Новый Структура;
		ПараметрыОповещения.Вставить("ТипСущности", "Документ");
		ПараметрыОповещения.Вставить("BoxID", 		ЭДОбъект.OrganizationID);
		ПараметрыОповещения.Вставить("DocumentID", 	ЭДОбъект.DocumentID);
		ПараметрыОповещения.Вставить("Документ1С",	ДокументССылка);
		
		МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьContent(Источник, Приемник) Экспорт
		
		Для каждого ЭлементИсточника Из Источник Цикл
			Попытка
				Если ЭлементИсточника.Ключ = "Signers" Тогда
					Для Каждого ExtendedSigner_1С ИЗ ЭлементИсточника.Значение Цикл
						ExtendedSigner_COM= Приемник.AddSigner();
						Если ЗначениеЗаполнено(ExtendedSigner_1С.BoxId) Тогда
							ExtendedSigner_COM.BoxId= 				  ExtendedSigner_1С.BoxId;
							ExtendedSigner_COM.CertificateThumbprint= ExtendedSigner_1С.CertificateThumbprint;
						Иначе
							ЗаполнитьContent(ЭлементИсточника.Значение, ExtendedSigner_COM.SignerDetails);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипЗнч(ЭлементИсточника.Значение) = Тип("Структура") Тогда
					ЗаполнитьContent(ЭлементИсточника.Значение, Приемник[ЭлементИсточника.Ключ]);
				Иначе
					Приемник[ЭлементИсточника.Ключ]=	ЭлементИсточника.Значение;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьПодписанта(Content, Organization, ПараметрыОтправкиНаСогласование= Неопределено) Экспорт
		
		Если Content.Type = "UniversalTransferDocument" Тогда
			
			ExtendedSigner= Content.AddSigner();
			
			Если ПараметрыОтправкиНаСогласование <> Неопределено Тогда 
				
				Если ПараметрыОтправкиНаСогласование.ResolutionRequestType = "SignatureRequest" Тогда
					ФИОПодписанта= ПараметрыОтправкиНаСогласование.ФИОПолучателя;
				Иначе
					ФИОПодписанта= ПараметрыОтправкиНаСогласование.ФИОПодписанта;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ФИОПодписанта) Тогда
					ExtendedSigner.SignerDetails.Surname=	 ВыделитьСлово(ФИОПодписанта);
					ExtendedSigner.SignerDetails.FirstName=  ВыделитьСлово(ФИОПодписанта);
					ExtendedSigner.SignerDetails.Patronymic= ВыделитьСлово(ФИОПодписанта);
				Иначе
					ExtendedSigner.SignerDetails.Surname=	 "-";
					ExtendedSigner.SignerDetails.FirstName=	 "-";
				КонецЕсли;
				
				ExtendedSigner.SignerDetails.SignerType= "IndividualEntity";
				ExtendedSigner.SignerDetails.Status= 	 "InformationCreatorEmployee";
				
				ExtendedSigner.SignerDetails.Powers= 	 "PersonDocumentedOperation";
				ExtendedSigner.SignerDetails.Inn= 	 	 "999999999950";
				
			ИначеЕсли Organization.AuthenticateType = "Certificate" Тогда
				
				ExtendedSigner.BoxId= Organization.Id;
				ExtendedSigner.CertificateThumbprint= Organization.Certificate.thumbprint;
				
			Иначе
				
				UserPermissions= Organization.GetUserPermissions();
			
				Если НЕ UserPermissions.CanSignDocuments Тогда
					
					ExtendedSigner.SignerDetails.Surname=	 "-";
					ExtendedSigner.SignerDetails.FirstName=	 "-";
					
					ExtendedSigner.SignerDetails.SignerType= "IndividualEntity";
					ExtendedSigner.SignerDetails.Status= 	 "InformationCreatorEmployee";
					ExtendedSigner.SignerDetails.Powers= 	 "PersonDocumentedOperation";
					ExtendedSigner.SignerDetails.Inn= 	 	 "999999999950";
					
				Иначе
					
					User= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьТекущегоПользователяДиадок", Organization);
					
					ExtendedSigner.SignerDetails.Surname=	 User.LastName;
					ExtendedSigner.SignerDetails.FirstName=	 User.FirstName;
					ExtendedSigner.SignerDetails.Patronymic= User.MiddleName ;
					
					ExtendedSigner.SignerDetails.SignerType= "LegalEntity";
					ExtendedSigner.SignerDetails.Status= 	 "SellerEmployee";
					ExtendedSigner.SignerDetails.JobTitle=   UserPermissions.JobTitle;
					ExtendedSigner.SignerDetails.Powers=   	 "MadeAndResponsibleForOperationAndSignedInvoice";
					ExtendedSigner.SignerDetails.Inn= 		 Organization.Inn;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			UserPermissions= Organization.GetUserPermissions();
			
			Если НЕ UserPermissions.CanSignDocuments Тогда
				
				Content.Signer.Surname=		"-";
				Content.Signer.FirstName=	"-";
				
			Иначе
				
				User= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьТекущегоПользователяДиадок", Organization);
				
				Content.Signer.Surname=		User.LastName;
				Content.Signer.FirstName=	User.FirstName;
				Content.Signer.Patronymic=	User.MiddleName ;
				Content.Signer.JobTitle= 	UserPermissions.JobTitle;
				
			КонецЕсли;
			
			Content.Signer.Inn= Organization.Inn;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ТипДокументаУПД(ФункцияУПД) Экспорт
		
		Если ФункцияУПД = "СЧФДОП" ИЛИ ФункцияУПД = "InvoiceAndBasic" Тогда
			Возврат "УПД Счф Доп";
		ИначеЕсли ФункцияУПД = "ДОП" ИЛИ ФункцияУПД = "Basic" Тогда
			Возврат "УПД Доп";
		ИначеЕсли ФункцияУПД = "СЧФ" ИЛИ ФункцияУПД = "Invoice" Тогда
			Возврат "УПД Счф";
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ФункцияУПД(ТипДокументаУПД) Экспорт
		
		Если ТипДокументаУПД = ТипДокументаУПД("СЧФДОП") ИЛИ ТипДокументаУПД = ТипДокументаУПД("СЧФДОП") + " (тестовый)" Тогда
			Возврат "СЧФДОП";
		ИначеЕсли ТипДокументаУПД = ТипДокументаУПД("ДОП") ИЛИ ТипДокументаУПД = ТипДокументаУПД("ДОП") + " (тестовый)" Тогда
			Возврат "ДОП";
		ИначеЕсли ТипДокументаУПД = ТипДокументаУПД("СЧФ") ИЛИ ТипДокументаУПД = ТипДокументаУПД("СЧФ") + " (тестовый)" Тогда
			Возврат "СЧФ";
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ЭтоУПД_ТипаСЧФДОП(Document) Экспорт
		
		Возврат ?(Document <> Неопределено, Document.Type = "UniversalTransferDocument" И ТипДокументаУПД(Document.Function) = ТипДокументаУПД("СЧФДОП"), Ложь);
		
	КонецФункции
	
	&НаКлиенте
	Функция ЭтоУПД_ТипаДОП(Document) Экспорт
		
		Возврат ?(Document <> Неопределено, Document.Type = "UniversalTransferDocument" И ТипДокументаУПД(Document.Function) = ТипДокументаУПД("ДОП"), Ложь);
		
	КонецФункции
		
	&НаКлиенте
	Функция ОбластьПолномочийУПД_ОтветственныйЗаПодписаниеСЧФ(Powers) Экспорт
		
		Возврат
		
			Powers = "InvoiceSigner"
		ИЛИ Powers = "MadeOperationAndSignedInvoice"
		ИЛИ Powers = "MadeAndResponsibleForOperationAndSignedInvoice"
		ИЛИ Powers = "ResponsibleForOperationAndSignerForInvoice"

	КонецФункции

	&НаКлиенте
	Функция ОбластьПолномочийУПД_ЛицоСовершившееСделку(Powers) Экспорт
		
		Возврат
		
			Powers = "PersonMadeOperation"
		ИЛИ Powers = "MadeAndSignOperation"
		ИЛИ Powers = "MadeOperationAndSignedInvoice"
		ИЛИ Powers = "MadeAndResponsibleForOperationAndSignedInvoice"

	КонецФункции

	&НаКлиенте
	Функция ОбластьПолномочийУПД_ОтветственныйЗаОформление(Powers) Экспорт
		
		Возврат
		
			Powers = "MadeAndSignOperation"
		ИЛИ Powers = "PersonDocumentedOperation" 
		ИЛИ Powers = "MadeAndResponsibleForOperationAndSignedInvoice"
		ИЛИ Powers = "ResponsibleForOperationAndSignerForInvoice"

	КонецФункции

	&НаКлиенте
	Процедура ЗаполнитьСтруктуруПоКонтенту(Content, СтруктураДанных, описаниеСтруктурыДанных = "") Экспорт
		
		Если типЗнч(СтруктураДанных) = тип("Структура") Тогда
			Для Каждого Элемент Из СтруктураДанных Цикл
				Если типЗнч(Элемент.значение)=тип("Структура") Тогда
					Попытка
						ЭлементКонтента =  content[Элемент.Ключ];
					Исключение
						ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
					КонецПопытки;
					ЗаполнитьСтруктуруПоКонтенту(ЭлементКонтента, Элемент.Значение, описаниеСтруктурыДанных+"."+Элемент.Ключ);
				ИначеЕсли Элемент.Ключ = "AddressString" Тогда
					Попытка
						СтруктураДанных.Вставить(Элемент.Ключ, content.GetAddressString());
					Исключение
						ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
					КонецПопытки			
				ИначеЕсли Элемент.Ключ = "Items" Тогда 

					Если описаниеСтруктурыДанных = "UniversalTransferDocument.InvoiceTable" Тогда
						СтруктураItem =	Новый_ExtendedInvoiceItem();
					Иначе
						Если Content.Type = "InvoiceContent" Тогда
							СтруктураItem= Новый_InvoiceItem();
						ИначеЕсли Content.Type = "InvoiceCorrectionContent" Тогда
							СтруктураItem=	Новый_InvoiceCorrectionItem();
						ИначеЕсли Content.Type = "XmlAcceptanceCertificateContent" Тогда
							СтруктураItem=	Новый_AcceptanceCertificateItem();
						Иначе
							СтруктураItem=	Новый_Torg12Item();
						КонецЕсли;
					КонецЕсли;

					Для ц = 0 По content.Items.Count-1 Цикл
						ContentItem=	СкопироватьСтруктуру(СтруктураItem);
						Попытка 
							item =content.Items.getItem(ц);  
						Исключение 	
							ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
						КонецПопытки;
						ЗаполнитьСтруктуруПоКонтенту(item, ContentItem, описаниеСтруктурыДанных+".Items");
						СтруктураДанных.Items.Добавить(ContentItem);
					КонецЦикла;
					
				ИначеЕсли Элемент.Ключ = "AmountsDec" Или Элемент.Ключ = "AmountsInc" Или Элемент.Ключ = "OriginalValues" Или Элемент.Ключ = "CorrectedValues" Тогда

					СтруктураДанных[Элемент.Ключ] = ?(Элемент.Ключ = "AmountsDec" ИЛИ Элемент.Ключ = "AmountsInc",  Новый_AmountsDiff(),  Новый_InvoiceItemFields());

					попытка 
						ЭлементКонтента =  content[Элемент.Ключ];
					Исключение
						ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
					КонецПопытки;
					ЗаполнитьСтруктуруПоКонтенту(ЭлементКонтента, СтруктураДанных[Элемент.Ключ], описаниеСтруктурыДанных + "." + Элемент.Ключ);
					
				ИначеЕсли Элемент.Ключ = "PaymentDocuments"  тогда 

					СтруктураPaymentDocuments= Новый_PaymentDocument();

					для ц = 0 по  content.PaymentDocuments.Count-1 цикл
						
						ContentPaymentDocuments=	СкопироватьСтруктуру(СтруктураPaymentDocuments);
						
						попытка 
							PaymentDocument =content.PaymentDocuments.getItem(ц);  
						Исключение 	
							ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки;
						ЗаполнитьСтруктуруПоКонтенту(PaymentDocument, ContentPaymentDocuments, описаниеСтруктурыДанных+".PaymentDocuments");
						СтруктураДанных.PaymentDocuments.Добавить(ContentPaymentDocuments);
					конеццикла;
					
				ИначеЕсли Элемент.Ключ = "StructedAdditionalInfos" Тогда 

					СтруктураAdditionalInfo = МетодКлиента("Модуль_Клиент", "Новый_StructedAdditionalInfo");

					Для ц = 0 По content.StructedAdditionalInfos.Count-1 Цикл
						ContentAdditionalInfo=	СкопироватьСтруктуру(СтруктураAdditionalInfo);
						Попытка 
							AdditionalInfo =content.StructedAdditionalInfos.getItem(ц);  
						Исключение 	
							ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки;
						ЗаполнитьСтруктуруПоКонтенту(AdditionalInfo, ContentAdditionalInfo, описаниеСтруктурыДанных+".Items");
						СтруктураДанных.StructedAdditionalInfos.Добавить(ContentAdditionalInfo);	
					КонецЦикла;

				ИначеЕсли Элемент.Ключ = "OriginalInvoices" Тогда 

					СтруктураOriginalInvoice= Новый_OriginalInvoice();

					Для ц = 0 По content.OriginalInvoices.Count-1 Цикл
						ContentInvoice =	СкопироватьСтруктуру(СтруктураOriginalInvoice);
						Попытка 
							Invoice =content.OriginalInvoices.getItem(ц);  
						Исключение 	
							ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки;
						ЗаполнитьСтруктуруПоКонтенту(Invoice, ContentInvoice, описаниеСтруктурыДанных+".OriginalInvoices");
						СтруктураДанных.OriginalInvoices.Добавить(ContentInvoice);
					КонецЦикла;

				ИначеЕсли Элемент.Ключ = "Signers" Тогда 
					
					СтруктураSignersUTD = Новый_ExtendedSigners();
					
					Для ц = 0 По content.Signers.Count-1 Цикл
						ContentUTD =	СкопироватьСтруктуру(СтруктураSignersUTD);
						Попытка 
							UTD =content.Signers.getItem(ц);  
						Исключение 	
							ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки;
						ЗаполнитьСтруктуруПоКонтенту(UTD, ContentUTD, описаниеСтруктурыДанных+".Signers");
						СтруктураSignerDetailsUTD = Новый_ExtendedSignerDetails();
						ContentSignerDetailsUTD   = СкопироватьСтруктуру(СтруктураSignerDetailsUTD);
						ЗаполнитьСтруктуруПоКонтенту(UTD.SignerDetails, ContentSignerDetailsUTD, описаниеСтруктурыДанных+".SignerDetails");
						ContentUTD.SignerDetails = ContentSignerDetailsUTD;
						СтруктураДанных.Signers.Добавить(ContentUTD);
					КонецЦикла;

				ИначеЕсли Элемент.Ключ = "StructedAdditionalInfos" Тогда 
					
					СтруктураStructedAdditionalInfos = Новый_StructedAdditionalInfo();
					
					Для ц = 0 По content.StructedAdditionalInfos.Count-1 Цикл
						ContentStructedAdditionalInfo=	СкопироватьСтруктуру(СтруктураStructedAdditionalInfos);
						Попытка 
							StructedAdditionalInfo =content.StructedAdditionalInfos.getItem(ц);  
						Исключение 	
							ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки;
						ЗаполнитьСтруктуруПоКонтенту(StructedAdditionalInfo, ContentStructedAdditionalInfo, описаниеСтруктурыДанных+".Items");
						СтруктураДанных.StructedAdditionalInfos.Добавить(ContentStructedAdditionalInfo);	
					КонецЦикла;

				ИначеЕсли Элемент.Ключ = "CustomDeclarations" Тогда 
					
					СтруктураCustomDeclarations = Новый_CustomDeclaration();
					
					Для ц = 0 По content.CustomDeclarations.Count-1 Цикл
						ContentUTD =	СкопироватьСтруктуру(СтруктураCustomDeclarations);
						Попытка 
							UTD =content.CustomDeclarations.getItem(ц);  
						Исключение 	
							ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки;
						ЗаполнитьСтруктуруПоКонтенту(UTD, ContentUTD, описаниеСтруктурыДанных+".CustomDeclarations");
						СтруктураДанных.CustomDeclarations.Добавить(ContentUTD);
					КонецЦикла;

				ИначеЕсли Элемент.Ключ = "Waybills" Тогда 
					
					СтруктураWaybills = Новый_Waybill();
					
					Для ц = 0 По content.Waybills.Count-1 Цикл
						ContentUTD =	СкопироватьСтруктуру(СтруктураWaybills);
						Попытка 
							UTD =content.Waybills.getItem(ц);  
						Исключение 	
							ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки;
						ЗаполнитьСтруктуруПоКонтенту(UTD, ContentUTD, описаниеСтруктурыДанных+".Waybills");
						СтруктураДанных.Waybills.Добавить(ContentUTD);
					КонецЦикла;

				ИначеЕсли Элемент.Ключ = "TransferBases" Тогда 
					
					СтруктураTransferBases = Новый_TransferBase();
					
					Для ц = 0 По content.TransferBases.Count-1 Цикл
						ContentUTD =	СкопироватьСтруктуру(СтруктураTransferBases);
						Попытка 
							UTD =content.TransferBases.getItem(ц);  
						Исключение 	
							ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки;
						ЗаполнитьСтруктуруПоКонтенту(UTD, ContentUTD, описаниеСтруктурыДанных+".TransferBases");
						СтруктураДанных.TransferBases.Добавить(ContentUTD);
					КонецЦикла;

				ИначеЕсли найти(Элемент.Ключ, "Ссылка")=0 тогда  
					Попытка
						СтруктураДанных.вставить(Элемент.Ключ, content[Элемент.Ключ]);
					Исключение
						ВызватьИсключение("Не удается инициализировать реквизит "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
					КонецПопытки
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция СкопироватьСтруктуру(Знач СтруктураИсходник)
		
		СтруктураПриемник =	Новый Структура;
		Для каждого ЭлементИсходник Из СтруктураИсходник Цикл
			Если ТипЗнч(ЭлементИсходник.Значение) = Тип("Массив") Тогда
				СтруктураПриемник.Вставить(ЭлементИсходник.Ключ, Новый Массив);	
			Иначе
				СтруктураПриемник.Вставить(ЭлементИсходник.Ключ, Неопределено);	
			КонецЕсли;
		КонецЦикла;
		
		Возврат СтруктураПриемник;
		
	КонецФункции	
	
	&НаКлиенте
	Функция ДанныеСертифкатаАвторизации(Организация) Экспорт
		
		Organization = ПолучитьЯщикДиадокДляОрганизации(Организация);
		
		Значение1С = Новый_PersonalCertificate();
		
		ЗаполнитьСтруктуруПоКонтенту(Organization.Certificate, Значение1С);
		
		Возврат Значение1С;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПрочитатьДанныеПодписанта(Организация, IsSeller, forCorrection) Экспорт
		
		ExtendedSignerDetailsToPost_1С = Новый_ExtendedSignerDetailsToPost();
		
		Organization = ПолучитьЯщикДиадокДляОрганизации(Организация);
		
		Попытка
			ExtendedSignerDetailsToPost_COM = Organization.GetExtendedSignerDetails(Organization.Certificate.thumbprint, IsSeller, forCorrection);
		Исключение
			
			ОписаниеОшибки= ОписаниеОшибки();
			
			Если Найти(нрег(ОписаниеОшибки), "signer details not found") = 0 
				И Найти(нрег(ОписаниеОшибки), "signerdetails not found") = 0 Тогда
				ВызватьИсключение ОписаниеОшибки;
			Иначе
				Возврат ExtendedSignerDetailsToPost_1С;
			КонецЕсли;
		
		КонецПопытки;
		
		ЗаполнитьСтруктуруПоКонтенту(ExtendedSignerDetailsToPost_COM, ExtendedSignerDetailsToPost_1С, "ExtendedSignerDetailsToPost");
		
		Возврат ExtendedSignerDetailsToPost_1С;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаписатьДанныеПодписанта(Организация, ExtendedSignerDetailsToPost_1С, IsSeller) Экспорт
		
		Organization = ПолучитьЯщикДиадокДляОрганизации(Организация);
		
		SetExtendedSignerDetailsTask = Organization.CreateSetExtendedSignerDetailsTask(Organization.Certificate.thumbprint);
		
		МетодКлиента("Модуль_Выгрузка", "ЗаполнитьContentПоСтруктуре", SetExtendedSignerDetailsTask.ExtendedSignerDetailsToPost, ExtendedSignerDetailsToPost_1С, "ExtendedSignerDetailsToPost");
		
		SetExtendedSignerDetailsTask.IsSeller = IsSeller;
		
		SetExtendedSignerDetailsTask.Send();
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция УдалитьЛидирующиеНули(Строка) Экспорт
		
		ДлинаСтроки= СтрДлина(Строка);
		
		Для Сч=1 ПО ДлинаСтроки Цикл
			Если Сред(Строка, Сч, 1) <> "0" Тогда
				Возврат Сред(Строка, Сч);
			КонецЕсли;
		КонецЦикла;
		
		Возврат "";
	
	КонецФункции
	
//} ИНТЕГРАЦИЯ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ИНИЦАЛИЗАЦИЯ content

// описанные функции вызываются на клиенте из форм,
// должны совпадать с описанием функций инициализации контентов на сервере ("Модуль_ИнтеграцияУниверсальный")

//{ документ

	&НаКлиенте
	Функция Новый_Torg12SellerContent() Экспорт
		
		Content = Новый Структура("Date, Number, WaybillDate, WaybillNumber, OperationCode, 
								  |GroundName, GroundDate,	GroundNumber, Seller, Buyer, 
								  |Shipper, Consignee, ShipperDepartment, ShipperOkdp, SupplyDate, 
								  |AttachmentSheetsQuantity, ChiefAccountant, AdditionalInfo, 
								  |SupplyAllowedBy, ChiefAccountant, SupplyPerformedBy, Commons, Totals, Items");
								  
		Content.Seller 		= Новый_OrganizationInfo();
		Content.Buyer 		= Новый_OrganizationInfo();
		Content.Shipper 	= Новый_OrganizationInfo();
		Content.Consignee 	= Новый_OrganizationInfo();
		Content.SupplyAllowedBy	  = Новый_Official();
		Content.ChiefAccountant	  = Новый_Official();
		Content.SupplyPerformedBy = Новый_Official();
		Content.Commons     = Новый_Torg12Commons();
		Content.Totals      = Новый_Torg12Totals();
		
		Content.items 		= Новый Массив;
		
		Возврат Content;
		
	КонецФункции	

	&НаКлиенте
	Функция Новый_Torg12BuyerContent() Экспорт
		
		Content = Новый Структура("Accepter, Attorney, Receiver, ShipmentReceiptDate, AdditionalInfo"); 
		Content.Accepter = Новый_Official();
		Content.Receiver = Новый_Official();
		Content.Attorney = Новый_Attorney();
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_AcceptanceCertificateSellerContent() Экспорт
		
		Content = Новый Структура("Date, Number, Title, SignatureDate, Official, Attorney,  
								  |Seller, Items, AdditionalInfo, SignatureDate");
								  
		Content.Seller   = Новый_OrganizationInfo();
		Content.Official = Новый_Official();
		Content.Attorney = Новый_Attorney();
		Content.items    = Новый Массив;
		
		Возврат Content;
		
	КонецФункции	

	&НаКлиенте
	Функция Новый_AcceptanceCertificateBuyerContent() Экспорт
		
		Content = Новый Структура("Signer, Attorney, Complaints, SignatureDate, AdditionalInfo"); 
		Content.Signer   = Новый_Official();
		Content.Attorney = Новый_Attorney();
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceContent() Экспорт
		
		Content = Новый Структура("Date, Number, InvoiceRevisionDate, InvoiceRevisionNumber, 
								  |Currency, ВалютаСсылка, PaymentDocuments, Seller, Shipper, 
								  |Consignee, Buyer, Signer, Totals, Items, StructedAdditionalInfos");
		
		Content.Seller 	  = Новый_OrganizationInfo();
		Content.Buyer     = Новый_OrganizationInfo();
		Content.Consignee = Новый_ShipperOrConsigneeInfo();
		Content.Shipper   = Новый_ShipperOrConsigneeInfo();
		Content.Totals    = Новый_InvoiceTotals();
		Content.Signer    = Новый_Signer();

		Content.items 	  				= Новый Массив;
		Content.StructedAdditionalInfos = Новый Массив;
		Content.PaymentDocuments 		= Новый Массив;
		
		Возврат content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceCorrectionContent() Экспорт
		
		Content = Новый Структура("InvoiceCorrectionDate, InvoiceCorrectionNumber,  
								  |InvoiceCorrectionRevisionDate, InvoiceCorrectionRevisionNumber, 
								  |Currency, ВалютаСсылка, Seller, Buyer, Signer, Items, TotalsDec, 
								  |TotalsInc, OriginalInvoices, StructedAdditionalInfos");
								  
		Content.Seller    = Новый_OrganizationInfo();
		Content.Buyer     = Новый_OrganizationInfo();
		Content.Signer    = Новый_Signer();
		Content.TotalsDec = Новый_InvoiceTotalsDiff();
		Content.TotalsInc = Новый_InvoiceTotalsDiff();
		
		Content.items 	  				= Новый Массив;
		Content.OriginalInvoices		= Новый Массив;
		Content.StructedAdditionalInfos = Новый Массив;
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_UtdSellerContent() Экспорт
		
		Content = Новый Структура("Function, СчетФактураСсылка, Name, Date, Number,
								  |Seller, Buyer, Shipper, Consignee, InvoiceTable,
								  |Currency, ВалютаСсылка, CurrencyRate,
								  |RevisionDate, RevisionNumber, AdditionalInfoId,
								  |TransferInfo, Creator, CreatorBase, GovermentContractInfo,
								  |Signers, PaymentDocuments");
								  
		Content.Seller 			 = Новый_ExtendedOrganizationInfo();
		Content.Buyer 			 = Новый_ExtendedOrganizationInfo();
		Content.Consignee	 	 = Новый_ExtendedOrganizationInfo();
		Content.Shipper		 	 = Новый_Shipper();
		Content.TransferInfo 	 = Новый_TransferInfo();
		Content.InvoiceTable 	 = Новый_InvoiceTable();
		Content.AdditionalInfoId = Новый_AdditionalInfoId();
		
		Content.Signers          = Новый Массив;
		Content.PaymentDocuments = Новый Массив;
		
		Возврат Content;
		
	КонецФункции	

	&НаКлиенте
	Функция Новый_UtdBuyerContent() Экспорт
		
		Content = Новый Структура("Creator, CreatorBase, OperationCode, OperationContent, 
								  |AcceptanceDate, Employee, OtherIssuer, AdditionalInfoId, Signers");
		
		Content.Employee   		 = Новый_Employee();
		Content.OtherIssuer		 = Новый_OtherIssuer();
		Content.AdditionalInfoId = Новый_AdditionalInfoId();
		
		Content.Signers    		 = Новый Массив;
		
		Возврат Content;
		
	КонецФункции
	
//} документ

//{ шапка
	
	&НаКлиенте
	Функция Новый_OrganizationInfo() 
		
		Content = Новый Структура("IsSoleProprietor, Name, Inn, Kpp,  Address, BankAccountNumber, 
								  |BankName, BankId, Phone, Fax, Okopf, Okpo");
		
		Content.Address = Новый_AddressInfo();
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_ExtendedOrganizationInfo() 
		
		Content = Новый Структура("BoxId, Name, Inn, Kpp,  Address, FnsParticipantId, Type,
								  |Okopf, Okpo, Okdp, Phone, Email, CorrespondentAccount,
								  |BankAccountNumber, BankName, BankId,  Department, AdditionalInfo,
								  |OrganizationOrPersonInfo, IndividualEntityRegistrationCertificate");
		
		Content.Address = Новый_AddressInfo();
		
		Content.Вставить("Ссылка");
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Shipper()
		
		Content = Новый Структура("OrganizationInfo, SameAsSeller");
		
		Content.OrganizationInfo = Новый_ExtendedOrganizationInfo();
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_ShipperOrConsigneeInfo()
		
		Content = Новый Структура("IsSoleProprietor, Name, Address, SameAsSellerOrBuyer");
		
		Content.Address = Новый_AddressInfo();
		
		Content.Вставить("Ссылка");
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_AddressInfo()
		
		Возврат Новый Структура("IsForeign, ZipCode, RegionCode, Territory, City, Locality, 
								|Street, Building, Block, Apartment, CountryCode, AddressText, 
								|AddressCode, AddressString");

	КонецФункции	

	&НаКлиенте
	Функция Новый_AdditionalInfoId()
		
		Content = Новый Структура("InfoFileId, StructedAdditionalInfos");
		
		Content.StructedAdditionalInfos = Новый Массив;
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_StructedAdditionalInfo() Экспорт
		
		Возврат Новый Структура("Key, Value");
		
	КонецФункции
	
//} шапка

//{ ТЧ
	
	&НаКлиенте
	Функция Новый_Torg12Item() Экспорт
		
		Возврат Новый Структура("Product, UnitCode, Quantity, Price, TaxRate, TotalWithVatExcluded, 
								|Vat, Total, Feature, Sort, Article, ProductCode, UnitName, ParcelType, 
								|ParcelCapacity, ParcelsQuantity, GrossQuantity, AdditionalInfo, СсылкаНаЕИ"); 
		
	КонецФункции

	&НаКлиенте
	Функция Новый_AcceptanceCertificateItem() Экспорт
		
		Возврат Новый Структура("Name, Description, UnitCode, UnitName, Quantity, Price, TotalWithVatExcluded, Vat, Total, AdditionalInfo, СсылкаНаЕИ"); 
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceItem() Экспорт
		
		Content = Новый Структура("Product, UnitCode, ЕдиницаИзмеренияСсылка, 
								  |Quantity, Price, CountriesOfOrigin, СтранаПроисхожденияСсылка, 
								  |CustomsDeclarationNumbers, Excise, TaxRate, TotalWithVatExcluded, 
								  |Vat, Total, СсылкаНаЕИ, StructedAdditionalInfos"); 
								  
		Content.StructedAdditionalInfos = Новый Массив;
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceCorrectionItem() Экспорт
		
		Content = Новый Структура("Product, AmountsDec, AmountsInc, OriginalValues, CorrectedValues, StructedAdditionalInfos"); 
		Content.StructedAdditionalInfos = Новый Массив;
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceTable()
		
		Content = Новый Структура("TotalWithVatExcluded, Vat, Total, TotalNet, Items");
		
		Content.Items = Новый Массив;
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_ExtendedInvoiceItem() Экспорт
		
		Content = Новый Структура("Product, UnitCode, UnitName, Quantity, Price, Excise, 
								  |TaxRate, SubtotalWithVatExcluded, Vat, Subtotal, ItemMark, 
								  |AdditionalProperty, VendorCode, ToRelease, AccountDebit, 
								  |AccountCredit, CustomDeclarations, StructedAdditionalInfos");
		
		Content.CustomDeclarations = Новый Массив;
		Content.StructedAdditionalInfos = Новый Массив;
		
		Content.Вставить("ЕдиницаИзмеренияСсылка");
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_OriginalInvoice() Экспорт
		
		Возврат Новый Структура("Date, Number, InvoiceRevisionDate, InvoiceRevisionNumber"); 
		
	КонецФункции

	&НаКлиенте
	Функция Новый_PaymentDocument() Экспорт
		
		Возврат Новый Структура("Date, Number");
		
	КонецФункции

	&НаКлиенте
	Функция Новый_CustomDeclaration() Экспорт
		
		Возврат Новый Структура("CountryCode, DeclarationNumber, СтранаПроисхожденияСсылка");
		
	КонецФункции

	&НаКлиенте
	Функция Новый_TransferInfo()
		
	 	Content = Новый Структура("OperationInfo, OperationType, TransferDate, TransferTextInfo,
								  |Carrier, Employee, OtherIssuer, CreatedThingTransferDate,
								  |CreatedThingInfo, AdditionalInfoId, TransferBases, Waybills");
		
		Content.TransferBases    = Новый Массив;
		Content.Waybills         = Новый Массив;
		Content.Carrier			 = Новый_ExtendedOrganizationInfo();
		Content.Employee		 = Новый_Employee();
		Content.OtherIssuer		 = Новый_OtherIssuer();
		Content.AdditionalInfoId = Новый_AdditionalInfoId();
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_TransferBase() Экспорт
		
		Возврат Новый Структура("DocumentName, DocumentNumber, DocumentDate, DocumentInfo"); 
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Waybill() Экспорт
		
		Возврат Новый Структура("DocumentNumber, DocumentDate"); 
		
	КонецФункции
	
//} ТЧ

//{ ответственные, подписи
	
	&НаКлиенте
	Функция Новый_Signer() Экспорт
		
		Возврат Новый Структура("Surname, FirstName, Patronymic, INN, IsSoleProprietor, 
								|SoleProprietorRegistrationCertificate, JobTitle");
		
	КонецФункции

	&НаКлиенте
	Функция Новый_ExtendedSigners() Экспорт
		
		Content = Новый Структура("BoxId, CertificateThumbprint, SignerDetails"); 
		Content.SignerDetails = Новый Структура("Surname, FirstName, Patronymic, JobTitle, inn, RegistrationCertificate, SignerType, OrganizationName, SignerInfo, Powers, Status, PowersBase, OrganizationPowersBase");
		
		Возврат Content;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_ExtendedSignerDetails() Экспорт
		
		Возврат Новый Структура("Surname, FirstName, Patronymic, JobTitle, inn, RegistrationCertificate, SignerType, 
								|OrganizationName, SignerInfo, Powers, Status, PowersBase, OrganizationPowersBase"); 
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Signature() Экспорт
		
		Content = Новый Структура("Certificate, SignDate, SignatureAuthenticityDate");
		
		Content.Certificate = Новый_PersonalCertificate();
		
		Возврат Content;
		
	КонецФункции
		
	&НаКлиенте
	Функция Новый_PersonalCertificate() Экспорт
		
		Возврат Новый Структура("BeginDate, EndDate, Inn, IsKontur, IsQualifiedElectronicSignature, IssuerName, Kpp, Name, OrganizationName, SerialNumber, Thumbprint");
		
	КонецФункции
		
	&НаКлиенте
	Функция Новый_ExtendedSignerDetailsToPost() Экспорт
		
		Возврат Новый Структура("JobTitle, RegistrationCertificate, SignerType, SignerInfo, Powers, Status, PowersBase, OrganizationPowersBase"); 
		
	КонецФункции
		
	&НаКлиенте
	Функция Новый_Official()
		
		Возврат Новый Структура("JobTitle, Surname, FirstName, Patronymic");
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Employee()
		
		Возврат Новый Структура("EmployeePosition, EmployeeInfo, EmployeeBase, Surname, FirstName, Patronymic");
		
	КонецФункции

	&НаКлиенте
	Функция Новый_OtherIssuer()
		
		Возврат Новый Структура("EmployeePosition, EmployeeInfo, OrganizationName, OrganizationBase, 
								|EmployeeBase, Surname, FirstName, Patronymic");
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Attorney() Экспорт
		
		Content =  Новый Структура("Date, Number, Issuer, IssuerOrganizationName,  IssuerAdditionalInfo, Recipient, RecipientAdditionalInfo");
		Content.Issuer    = Новый_Official();
		Content.Recipient = Новый_Official();
		
		Возврат Content;
		
	КонецФункции
	
//} ответственные, подписи

//{ итоги
	
	&НаКлиенте
	Функция Новый_Torg12Commons()
		
		Возврат Новый Структура("TotalGrossQuantity, TotalGrossQuantityInWords, TotalParcelsQuantity, 
								|TotalParcelsQuantityInWords, TotalQuantity, TotalQuantityInWords, 
								|TotalSum, TotalSumInWords");
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Torg12Totals()
		
		Возврат Новый Структура("GrossQuantity, Quantity, ParcelsQuantity, TotalWithVatExcluded, Total, Vat");
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceTotals()
		
		Возврат Новый Структура("TotalWithVatExcluded, Total, Vat");
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceTotalsDiff()
		
		Возврат Новый Структура("TotalWithVatExcluded, Vat, Total");
		
	КонецФункции

	&НаКлиенте
	Функция Новый_AmountsDiff()  Экспорт 
		
		Возврат Новый Структура("Excise, TotalWithVatExcluded, Vat, Total");
		
	конецФункции	

	&НаКлиенте
	Функция Новый_InvoiceItemFields() Экспорт 
		
		Возврат Новый Структура("Excise, TotalWithVatExcluded, Vat, Total, Quantity, Price, 
								|UnitCode, ЕдиницаИзмеренияСсылка, Taxrate");
		
	конецФункции	
	
//} итоги
	
//} ИНИЦАЛИЗАЦИЯ content
////////////////////////////////////////////////////////////////////////////////

//{ ИНТЕРАКТИВНЫЕ ДЕЙСТВИЯ

	&НаКлиенте
	Функция ОтправитьНаОбработку(ЭДОбъект, ПараметрыОтправкиНаСогласование) Экспорт
		
		Если НЕ ПараметрыОтправкиНаСогласование = Неопределено Тогда
			
			Если ПустаяСтрока(ПараметрыОтправкиНаСогласование.TargetUserId) И ПустаяСтрока(ПараметрыОтправкиНаСогласование.TargetDepartmentId) Тогда
				
				ПараметрыФормы=	Новый Структура();
				ПараметрыФормы.Вставить("Заголовок", 		"Ошибка работы с контрагентом");
				ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не указан получатель документа.");
				ПараметрыФормы.Вставить("Подробности", 		"Не указан получатель документа.");
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы,);

				Возврат Ложь;
			ИначеЕсли ПараметрыОтправкиНаСогласование.ЭтоТекущийПользователь = истина Тогда
				//если пользователь передает на согласование самому себе - то просто оставляем документ в исходящих неотправленных 
			Иначе
				
				Попытка
					
					ЗаданиеНаСогласование=							ЭДОбъект.CreateResolutionRequestTask();
					ЗаданиеНаСогласование.ResolutionRequestType=	ПараметрыОтправкиНаСогласование.ResolutionRequestType;
					Если ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.TargetUserId) Тогда
						ЗаданиеНаСогласование.TargetUserId=			ПараметрыОтправкиНаСогласование.TargetUserId;
					ИначеЕсли ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.TargetDepartmentId) Тогда
						ЗаданиеНаСогласование.TargetDepartmentId=	ПараметрыОтправкиНаСогласование.TargetDepartmentId;
					КонецЕсли;
					ЗаданиеНаСогласование.Comment=					ПараметрыОтправкиНаСогласование.Комментарий;
					ЗаданиеНаСогласование.Send();
					
					Возврат Истина;
					
				Исключение
					
					ОписаниеОшибки=	ОписаниеОшибки();
					Если Найти(ОписаниеОшибки, "Resolution request author user id and target user id must differ")>0 Тогда
						ОписаниеОшибки=	"Нельзя отправить документ на согласование или подписание самому себе";
					ИначеЕсли Найти(ОписаниеОшибки, "User can not add signature request to document")>0
						ИЛИ Найти(ОписаниеОшибки, "User can not add approvement request to document")>0
						ИЛИ Найти(ОписаниеОшибки, "document that cannot be rejected")>0 Тогда
						ОписаниеОшибки=	"Документ уже отправлен на подписание или согласование";
					Иначе
						ОписаниеОшибки=	"Неизвестная ошибка обработки";
					КонецЕсли;
					
					ПараметрыФормы=	Новый Структура();
					ПараметрыФормы.Вставить("Заголовок", 		"Ошибка обработки");
					ПараметрыФормы.Вставить("ОписаниеОшибки", 	ОписаниеОшибки);
					ПараметрыФормы.Вставить("Подробности", 		ОписаниеОшибки());
					
					МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы,);
					
					Возврат Ложь;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПодписатьВДиадоке(Document, Подписать, BoxID, DocumentID, ТекстОтказа = "", СтруктураДляТитула = Неопределено) Экспорт
		
		Если ЭтоФормализованныйДокумент(Document.Type) Тогда
			ПроверитьСертификат(BoxID);
		КонецЕсли;
		
		Если Подписать = Истина Тогда 
			
			Если СтруктураДляТитула = Неопределено Тогда
				Document.Accept();
			Иначе
				Если Document.Type <> "UniversalTransferDocument" Тогда
					ТекстОшибки = ПроверитьТитулПолучателяТорг12(СтруктураДляТитула);
					Если ТекстОшибки <>"" Тогда
						ВызватьИсключение("##9[]" + ТекстОшибки);
					КонецЕсли;	
				КонецЕсли;
				
				Если Document.Type = "Nonformalized" Тогда
					Document.Accept();
				Иначе
					ReplySendTask=	Document.CreateReplySendTask();
					ЗаполнитьContent(СтруктураДляТитула, ReplySendTask.Content);
					ReplySendTask.Send();
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе 	
			Если Document.Type = "UniversalTransferDocument" Тогда
				
				Организация   =	МетодСервера(, "BoxID_2_Организация", BoxID);
				Organization  = МетодКлиента("Модуль_Клиент", "ПолучитьЯщикДиадокДляОрганизации", Организация); 
				
				ReplySendTask= Document.CreateReplySendTask("RejectDocument");
				ReplySendTask.Content.Comment= ТекстОтказа;
				ЗаполнитьПодписанта(ReplySendTask.Content, Organization);
				ReplySendTask.Send();
				
			Иначе
				Document.Reject(ТекстОтказа);
			КонецЕсли;
		КонецЕсли;	
		
	КонецПроцедуры

	&НаКлиенте
	Функция ПолучитьКраткоеИмяФайла(ПолноеИмяФайла)
		
		Результат =  ПолноеИмяФайла;
		Пока Найти(Результат, "\")>0 цикл 
			Результат = Прав(Результат, СтрДлина(Результат) -  Найти(Результат, "\"));
		КонецЦикла;
		
		Возврат Результат;
		
		
	КонецФункции	
	
	&НаКлиенте
	Функция ОтправитьПринятьПриглашениеКонтрагенту(Organization, CounteragentId, ИНН, Комментарий, ИмяФайла = "", КонтрагентСсылка = Неопределено) Экспорт
		
		Результат=	Ложь;
		
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			
			TrustConnectionRequest=					Organization.CreateAcquireCounteragentTask(ИмяФайла);
			
			TrustConnectionRequest.CounteragentBoxId= CounteragentId;
			TrustConnectionRequest.Inn  			= ИНН;
			TrustConnectionRequest.Message 			= Комментарий;
			TrustConnectionRequest.FileName 		= ПолучитьКраткоеИмяФайла(ИмяФайла);
			
			Попытка
				TrustConnectionRequest.SendAsync();
				Результат=	Истина;
			Исключение 
				
				ПараметрыФормы=	Новый Структура();
				ПараметрыФормы.Вставить("Заголовок", 		"Ошибка работы с контрагентом");
				ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось обработать контрагента");
				ПараметрыФормы.Вставить("Подробности", 		ОписаниеОшибки());
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы,);

				Результат=	Ложь;
			КонецПопытки;
			
		Иначе
			
			Counteragent=	Organization.GetCounteragentById(CounteragentId);
			Попытка
				Counteragent.AcquireCounteragent(Комментарий);
				Результат=	Истина;
			Исключение 
				
				ПараметрыФормы=	Новый Структура();
				ПараметрыФормы.Вставить("Заголовок", 		"Ошибка работы с контрагентом");
				ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось обработать контрагента");
				ПараметрыФормы.Вставить("Подробности", 		ОписаниеОшибки());
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы,);

				Результат=	Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
		Если НЕ КонтрагентСсылка = Неопределено Тогда
			УстановитьРеквизитКонтрагента(КонтрагентСсылка, CounteragentId);
		КонецЕсли;	
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ВыбратьПараметрыПолучателяПриОтправкеНаСогласование(ОбъектВладелецОбработчика, Организация, НаборДанных, ResolutionRequestType, Режим) Экспорт
		
		Organization= ПолучитьЯщикДиадокДляОрганизации(Организация);
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("ResolutionRequestType", 	ResolutionRequestType);
		ПараметрыФормы.Вставить("Режим", 					Режим);
		ПараметрыФормы.Вставить("Организация", 				Организация);
		ПараметрыФормы.Вставить("OrganizationId", 			Organization.Id);
		
		МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаВыбораПолучателя", ПараметрыФормы, ОбъектВладелецОбработчика, "ОбработчикОткрытиеФормыВыбораПолучателя", НаборДанных, ОбъектВладелецОбработчика);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтправитьЭДОбъектНаСогласование(ОбъектВладелецОбработчика, Организация, НаборДанных = Неопределено, ResolutionRequestType, Режим) Экспорт
		
		ВыбратьПараметрыПолучателяПриОтправкеНаСогласование(ОбъектВладелецОбработчика, Организация, НаборДанных, ResolutionRequestType, Режим);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодтверждениеВыполненияОперации(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика= Неопределено) Экспорт
		
		ПоказатьВопрос(Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика), "Подтвердите выполнение операции", РежимДиалогаВопрос.ОКОтмена, 120, КодВозвратаДиалога.Отмена);
		
	КонецПроцедуры
	
//} ИНТЕРАКТИВНЫЕ ДЕЙСТВИЯ

//{ ПОЛУЧИТЬ...

	&НаСервере
	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер(МассивСсылок, OrganizationId)
		
		Результат=	Новый Массив;
		
		Для Каждого InitialDocumentId Из МассивСсылок Цикл
			СсылкаРНК = ПолучитьDocumentID_2_Документ(InitialDocumentId, OrganizationId);
			Если СсылкаРНК <> Неопределено И ТипЗнч(СсылкаРНК) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				Результат.Добавить(СсылкаРНК);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок(ОбъектДиадок) Экспорт
		
		InitialDocumentIds=	Новый Массив;
		Для Индекс = 0 По ОбъектДиадок.InitialDocumentIds.Count - 1 Цикл
			InitialDocumentIds.Добавить(ОбъектДиадок.InitialDocumentIds.GetItem(Индекс));
		КонецЦикла;
		
		OrganizationId=		ОбъектДиадок.Organization.Id;
		МассивСсылок=		ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер(InitialDocumentIds, OrganizationId);
		
		Возврат МассивСсылок;
		
	КонецФункции	
		
	&НаСервере
	Функция НайтиПодходящийСчетФактуруИзРНК(Знач МассивСсылокРНК, Знач ИдентификаторДокументаВДиадок, ЭтоВходящийДокумент)

		Запрос= Новый Запрос;

		ПредставлениеСФ = Объект.ПараметрыКлиентСервер.ПредставлениеДокументов.СчетФактураВыданный;

		Если (ЭтоВходящийДокумент И НЕ Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено) 
		  ИЛИ (НЕ ЭтоВходящийДокумент И НЕ Метаданные.Документы[ПредставлениеСФ].ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено) Тогда

		  Запрос.Текст=	
				"ВЫБРАТЬ
				|	СчетФактура.Ссылка,
				|	ВЫБОР
				|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
				|				ИЛИ УжеСопоставленные.Значение = """"
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК УжеСопоставлен
				|ИЗ
				|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактура
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ДополнительныеСведения.Объект КАК Объект,
				|			ДополнительныеСведения.Свойство КАК Свойство,
				|			ДополнительныеСведения.Значение КАК Значение
				|		ИЗ
				|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				|		ГДЕ
				|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
				|		ПО СчетФактура.Ссылка = УжеСопоставленные.Объект
				|ГДЕ
				|	СчетФактура.ДокументОснование В (&МассивСсылокРНК)";
			
		Иначе
			
			Запрос.Текст=	
				"ВЫБРАТЬ
				|	СчетФактура.Ссылка,
				|	ВЫБОР
				|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
				|				ИЛИ УжеСопоставленные.Значение = """"
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК УжеСопоставлен
				|ИЗ
				|	Документ.СчетФактураПолученный КАК СчетФактура
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ДополнительныеСведения.Объект КАК Объект,
				|			ДополнительныеСведения.Свойство КАК Свойство,
				|			ДополнительныеСведения.Значение КАК Значение
				|		ИЗ
				|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				|		ГДЕ
				|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
				|		ПО СчетФактура.Ссылка = УжеСопоставленные.Объект
				|ГДЕ
				|	СчетФактура.ДокументОснование В (&МассивСсылокРНК)";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылокРНК", МассивСсылокРНК);
		Запрос.УстановитьПараметр("Свойство", ИдентификаторДокументаВДиадок);
		
		Если НЕ ЭтоВходящийДокумент Тогда
			Запрос.Текст= СтрЗаменить(Запрос.Текст, "СчетФактураПолученный", ПредставлениеСФ);
		КонецЕсли;

		РезультатЗапроса=	Запрос.Выполнить();
		Выборка=			РезультатЗапроса.Выбрать();
		
		Возврат Выборка;
		
	КонецФункции

	&НаСервере
	Функция ПолучитьПодходящуюСФ(МассивСсылокРНК, ЭтоВходящийДокумент = Истина)

		ИдентификаторДокументаВДиадок=	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(МетодСервера(,"ИдентификаторСвойстваИдентификаторДокументаВДиадок"));
		ВыборкаПодходящихСФ=	НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК, ИдентификаторДокументаВДиадок, ЭтоВходящийДокумент);

		Если ВыборкаПодходящихСФ.Количество() > 0 Тогда
			ВыборкаПодходящихСФ.Следующий();
			Возврат ВыборкаПодходящихСФ.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьМассивТиповДокументов(ФильтрПоТипамДокументов, ВидТипаДокумента)
		
		//ВидТипаДокумента = 0  все виды 	
		//ВидТипаДокумента = 1  документооборот СФ
		//ВидТипаДокумента = 2  строго двусторонний документ
		//ВидТипаДокумента = 3  строго односторонний документ
		//ВидТипаДокумента = 4  односторонний или двусторонний документ
		
		МассивТиповДокументов = Новый Массив;
		
		Если ФильтрПоТипамДокументов= "" И ВидТипаДокумента=0 Тогда
			МассивТиповДокументов.Добавить("Any");
			Возврат МассивТиповДокументов;			
		КонецЕсли;
		
		Если ФильтрПотипамДокументов = "" ИЛИ ФильтрПотипамДокументов = "1" Тогда // Накладные
			Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=2 Тогда
				МассивТиповДокументов.Добавить("NonformalizedTorg12");
				МассивТиповДокументов.Добавить("NonformalizedAcceptanceCertificate");
				МассивТиповДокументов.Добавить("XmlTorg12");
				МассивТиповДокументов.Добавить("XmlAcceptanceCertificate");
				МассивТиповДокументов.Добавить("UniversalTransferDocument");
			КонецЕсли;	
		ИначеЕсли ФильтрПотипамДокументов = "11" Тогда // только Торг-12
			Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=2 Тогда
				МассивТиповДокументов.Добавить("NonformalizedTorg12");
				МассивТиповДокументов.Добавить("XmlTorg12");
				МассивТиповДокументов.Добавить("UniversalTransferDocument");
			КонецЕсли;	
		ИначеЕсли ФильтрПотипамДокументов = "12" Тогда // только Акт
			Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=2 Тогда
				МассивТиповДокументов.Добавить("NonformalizedAcceptanceCertificate");
				МассивТиповДокументов.Добавить("XmlAcceptanceCertificate");
			КонецЕсли;
	   ИначеЕсли  ФильтрПотипамДокументов = "13" Тогда // УПД (ПД)
			Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
				МассивТиповДокументов.Добавить("UniversalTransferDocument");
			КонецЕсли;
		КонецЕсли;		
		
		Если ФильтрПотипамДокументов = "" ИЛИ ФильтрПотипамДокументов = "2" Тогда // Счет-фактуры
			Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=1 Тогда
				МассивТиповДокументов.Добавить("AnyInvoiceDocumentType");
				МассивТиповДокументов.Добавить("UniversalTransferDocument");
	   		КонецЕсли;	   
	   	ИначеЕсли ФильтрПотипамДокументов = "21" Тогда // только Счет-фактура
	    	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=1 Тогда
	    		МассивТиповДокументов.Добавить("Invoice");
			КонецЕсли;	   
	   	ИначеЕсли ФильтрПотипамДокументов = "22" Тогда // только ИСФ
			Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=1 Тогда
				МассивТиповДокументов.Добавить("InvoiceRevision");
	       	КонецЕсли; 	   
	   	ИначеЕсли ФильтрПотипамДокументов = "23" Тогда // только КСФ и ИКСФ
	   		Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=1 Тогда
	    		МассивТиповДокументов.Добавить("InvoiceCorrection");
	    	   	МассивТиповДокументов.Добавить("InvoiceCorrectionRevision");
			КонецЕсли; 
	    ИначеЕсли ФильтрПотипамДокументов = "24" Тогда // УПД (СФ)
	   	   Если ВидТипаДокумента = 0 или ВидТипаДокумента = 1 Тогда
			   МассивТиповДокументов.Добавить("UniversalTransferDocument");
		   КонецЕсли;
	   	КонецЕсли;
	   
	   	Если ФильтрПотипамДокументов = "" ИЛИ ФильтрПотипамДокументов = "3" Тогда // Счет на оплату
	    	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=3 Тогда
	    		МассивТиповДокументов.Добавить("NonformalizedProforma");
	    	КонецЕсли;	
	   	КонецЕсли;
	   
	   	Если ФильтрПотипамДокументов = "" ИЛИ ФильтрПотипамДокументов = "4" Тогда 	// Неформализованные документы
	    	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=2 Тогда 			//строго двусторонний док
	    		МассивТиповДокументов.Добавить("ReconciliationAct"); 		//акт сверки
	    		МассивТиповДокументов.Добавить("Contract"); 				//договор
	    		МассивТиповДокументов.Добавить("TrustConnectionRequest");	//приглашение к ЭДО
	    		МассивТиповДокументов.Добавить("PriceList"); 				//ценовой лист
	    	КонецЕсли;	
	    	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=3 Тогда 		//строго односторонний док
	    		МассивТиповДокументов.Добавить("ServiceDetails"); 		//детализация
	    	КонецЕсли;	
	    	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=4 Тогда 		//как односторонний так и двусторонний док
	    		МассивТиповДокументов.Добавить("PriceListAgreement"); 	//протокол согласования цены
	    		МассивТиповДокументов.Добавить("CertificateRegistry"); 	//реестр сертификатов
	    		МассивТиповДокументов.Добавить("Nonformalized");  		//прочее
	    	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "41" Тогда 
	    	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=2 Тогда
	    		МассивТиповДокументов.Добавить("ReconciliationAct");
	    	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "42" Тогда 
	    	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=3 Тогда
	    		МассивТиповДокументов.Добавить("ServiceDetails");
	    	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "43" Тогда 
	    	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=2 Тогда
	    		МассивТиповДокументов.Добавить("Contract"); 
	    	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "44" Тогда 
	    	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=4 Тогда
	    		МассивТиповДокументов.Добавить("PriceListAgreement");
	    	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "45" Тогда 
	    	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=2 Тогда
	    		МассивТиповДокументов.Добавить("TrustConnectionRequest");
	    	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "46" Тогда 
	    	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=4 Тогда
	    		МассивТиповДокументов.Добавить("CertificateRegistry");
	    	КонецЕсли;	
	   //ИначеЕсли ФильтрПотипамДокументов = "47" Тогда
	   // 	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=2 Тогда
	   // 		МассивТиповДокументов.Добавить("PriceList"); 
	   // 	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "47" Тогда 
	    	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=4 Тогда
	    		МассивТиповДокументов.Добавить("Nonformalized");
			КонецЕсли;	
		ИначеЕсли ФильтрПотипамДокументов = "5" Тогда
			Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 1 Тогда
				МассивТиповДокументов.Добавить("UniversalTransferDocument");
			КонецЕсли;
		КонецЕсли;

		Возврат МассивТиповДокументов;
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
		
		Возврат Ссылка[ИмяРеквизита];
		
	КонецФункции

	&НаСервере
	Функция ПолучитьНастройкиОрганизации(Организация)
				
		СтруктураНастройки = Новый Структура();
		СтруктураНастройки.Вставить("Организация", Организация);
		
		ПечатнаяФормаДляТоваров = МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваПечатнаяФормаДляТоваров"));
		СтруктураНастройки.Вставить("ПечатнаяФормаДляТоваров", 		?(ЗначениеЗаполнено(ПечатнаяФормаДляТоваров), ПечатнаяФормаДляТоваров, "Торг-12"));
		
		ПечатнаяФормаДляУслуг = МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваПечатнаяФормаДляУслуг"));
		СтруктураНастройки.Вставить("ПечатнаяФормаДляУслуг", 		?(ЗначениеЗаполнено(ПечатнаяФормаДляУслуг), ПечатнаяФормаДляУслуг, "Акт"));
		СтруктураНастройки.Вставить("ОтправкаНепроведенных", 		МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваОтправлятьНеПроведенные")));
		СтруктураНастройки.Вставить("ФормироватьУПД", 				МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваФормироватьУПД")));
		
		СтруктураНастройки.Вставить("ФормироватьСчетНаОсновании", 	МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваФормироватьСчетНаОсновании")));
		ИДВнешнейПечатнойФормыСчета = МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваВнешняяПечатнаяФормаСчета"));
		Если ЗначениеЗаполнено(ИДВнешнейПечатнойФормыСчета) = Истина Тогда
			ВнешняяПечатнаяФормаСчета =	Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДВнешнейПечатнойФормыСчета));
		Иначе
			ВнешняяПечатнаяФормаСчета =	Неопределено;
		КонецЕсли;
		СтруктураНастройки.Вставить("ВнешняяПечатнаяФормаСчета", ВнешняяПечатнаяФормаСчета);
		
		ИДВнешнейПечатнойФормыАкта = МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваВнешняяПечатнаяФормаАкта"));
		Если ЗначениеЗаполнено(ИДВнешнейПечатнойФормыАкта) = Истина Тогда
			ВнешняяПечатнаяФормаАкта = Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДВнешнейПечатнойФормыАкта));
			СтруктураНастройки.Вставить("СпособФормированияАкта", 1);  // принудительно заставим формировать внушнюю печатную форму
		Иначе
			ВнешняяПечатнаяФормаАкта = Неопределено;
			СтруктураНастройки.Вставить("СпособФормированияАкта", МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваСпособФормированияАкта")));
		КонецЕсли;
		СтруктураНастройки.Вставить("ВнешняяПечатнаяФормаАкта", ВнешняяПечатнаяФормаАкта);

		ИДВнешнейПечатнойФормыАктаСверки = МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки"));
		Если ЗначениеЗаполнено(ИДВнешнейПечатнойФормыАктаСверки) = Истина Тогда
			ВнешняяПечатнаяФормаАктаСверки = Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДВнешнейПечатнойФормыАктаСверки));
			СтруктураНастройки.Вставить("СпособФормированияАктаСверки", 1);  // принудительно заставим формировать внушнюю печатную форму
		Иначе
			ВнешняяПечатнаяФормаАктаСверки = Неопределено;
			СтруктураНастройки.Вставить("СпособФормированияАктаСверки", МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваСпособФормированияАктаСверки")));
		КонецЕсли;
		СтруктураНастройки.Вставить("ВнешняяПечатнаяФормаАктаСверки", ВнешняяПечатнаяФормаАктаСверки);
		
		МассивДополнительныхВнешнихПечатныхФорм = ПолучитьМассивДополнительныхВнешнихПечатныхФорм(Организация);
		СписокДополнительныхВнешнихПечатныхФорм = Новый СписокЗначений;
		Для каждого ВнешняПФ из МассивДополнительныхВнешнихПечатныхФорм Цикл
			СписокДополнительныхВнешнихПечатныхФорм.Добавить(ВнешняПФ, ВнешняПФ.Наименование);
		КонецЦикла;
		
		СтруктураНастройки.Вставить("СписокДополнительныхВнешнихПечатныхФорм", СписокДополнительныхВнешнихПечатныхФорм);
		
		
		СтруктураНастройки.Вставить("ПодставлятьКППГрузоотправителя",	МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваПодставлятьКППГрузоотправителя")));
		СтруктураНастройки.Вставить("ТекстКомментарияДиадок",			МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификатрСвойстваТекстКомментарияДиадок")));
				
		Возврат СтруктураНастройки;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьМассивДополнительныхВнешнихПечатныхФорм(Организация)
		
		МассивНомеров = ПолучитьМассивНумерованныхВнешнихпечатныхФорм();
		Результат = Новый Массив;
		
		ТекущийСписокФорм = МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификаторСвойстваСписокДопВПФ"));
		Для ц = 1 по СтрДлина(ТекущийСписокФорм) цикл 
			Если Сред(ТекущийСписокФорм, ц, 1) = "1" Тогда
				ВПФ = ПолучитьВнешнююПечатнуюФормуПоНомеру(МассивНомеров, ц);
				Если НЕ ВПФ = Неопределено Тогда 
					Результат.Добавить(ВПФ);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьМассивНумерованныхВнешнихПечатныхФорм()
		
		Результат = Новый массив;
		
		Запрос = Новый запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	ДополнительныеСведения.Объект 	КАК Объект,
			|	ДополнительныеСведения.Значение КАК Значение
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|ГДЕ
			|	ДополнительныеСведения.Свойство.Наименование = &Наименование
			|	И НЕ ДополнительныеСведения.Значение = """"";
			
		Запрос.УстановитьПараметр("Наименование", МетодСервера(,"ИдентификаторСвойстваНомерВПФ"));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			Результат.Добавить(Новый Структура("ВнешняяПечатнаяФорма, Номер", Выборка.Объект, Число(Выборка.Значение)));
		КонецЦикла;	
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьВнешнююПечатнуюФормуПоНомеру(МассивНомеров, ПорядковыйНомер)
		
		Для каждого Элемент из МассивНомеров Цикл
			Если Элемент.Номер = ПорядковыйНомер Тогда 
				Возврат Элемент.ВнешняяПечатнаяФорма
			КонецЕсли;
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ПолучитьЗначениеРеквизитаОбъекта(Объект, Реквизит)
		
		Возврат Объект[Реквизит];
		
	КонецФункции
	
	&НаКлиенте
	Функция ДокументНеСогласованРанее(Document) Экспорт
		
		Если Document.Resolutions = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
				
		Для Ц=0 по Document.Resolutions.Count-1 Цикл
			
			ItemResolution= Document.Resolutions.GetItem(Ц);
			
			Если ItemResolution.ResolutionType = "ResolutionApprove" Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПроверитьРазмерВыбранныхФайлов(МассивАдресовФайлов, МассивБольшиеФайлы) Экспорт
		
		Индекс= 0;
		
		Пока Индекс <= МассивАдресовФайлов.ВГраница() Цикл
			
			ЭлементМассива= МассивАдресовФайлов[Индекс];
						
			ФайлДанных = Новый Файл(ЭлементМассива);
			Если ФайлДанных.Размер() > (5*1024*1024) Тогда
				МассивБольшиеФайлы.Добавить(ФайлДанных);
				МассивАдресовФайлов.Удалить(Индекс);
			Иначе
				Индекс= Индекс + 1;
			КонецЕсли;
				
		КонецЦикла;
						
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьМассивБольшихФайлов(МассивБольшиеФайлы, ФормаИнициатор) Экспорт
		
		СтрПредупреждения= "Невозможно добавить следующие файлы:";
		Для каждого БольшойФайл Из МассивБольшиеФайлы Цикл
			СтрПредупреждения = СтрПредупреждения + "
			|- " + БольшойФайл.Имя;
		КонецЦикла;
				
		ПараметрыФормы= Новый Структура();
		ПараметрыФормы.Вставить("Заголовок", 		"Не добавленные файлы");
		ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Размер отправляемого файла не должен превышать 5Мб. См. ""Подробно"".");
		ПараметрыФормы.Вставить("Подробности", 		СтрПредупреждения);
		МетодКлиента(, "ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ФормаИнициатор);
						
	КонецПроцедуры
		
	МаксимальноеКоличествоЗаданий= 100;