
#Область ПЕРЕМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем ПараметрыКлиент Экспорт;

&НаКлиенте
Перем КэшМодулей, Манифест Экспорт;

&НаКлиенте
Перем ОткрытыеФормы;

&НаКлиенте
Перем КэшНаВремяВыполнения, КэшНаВремяСеанса;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОГРАММЫНЙ_ИНТЕРФЕЙС

&НаКлиенте
Функция МетодКлиента(Знач ИмяМодуля, ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Если ПустаяСтрока(ИмяМодуля) Тогда
		ИмяМодуля= "Платформа";
	КонецЕсли;
		
	Модуль= ПолучитьМодуль(ИмяМодуля);
	
	Если Модуль = Неопределено Тогда
		
		ВызватьИсключение "Модуль объекта не обнаружен ("+ИмяМодуля+")
		|	"+ИмяМодуля+"."+ИмяМетода+"();";
		
	КонецЕсли;
	
	ПараметрыСтрокой= ПараметрыСтрокой(
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
	Результат= ВыполнитьМетод(Модуль, ИмяМетода, ПараметрыСтрокой,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
	Если Модуль <> ЭтаФорма Тогда
		Модуль.ОчиститьПеременные();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9) Экспорт		
		
	Возврат МетодСервера(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции


&НаКлиенте
Функция ШаблонМанифеста(ИмяМодуля) Экспорт
	
	Возврат Новый Структура("ИмяМодуля, Функции, Процедуры", ИмяМодуля, Новый Структура, Новый Структура);
	
КонецФункции

&НаКлиенте
Функция МанифестМодуля(ИмяМодуля) Экспорт
	
	Модуль= ПолучитьМодуль(ИмяМодуля);
	
	Если Модуль <> Неопределено Тогда
		
		Попытка
			Возврат Модуль.Манифест;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ОповеститьФормы(ИмяСобытия= Неопределено, Параметр= Неопределено, Источник= Неопределено, ИмяОповещяемойФормы= "") Экспорт
	
	Для Каждого ОткрытаяФорма ИЗ ОткрытыеФормы Цикл
		
		Если ОткрытаяФорма.Значение <> Истина ИЛИ ОткрытаяФорма.Ключ = Источник 
			 ИЛИ НЕ ПустаяСтрока(ИмяОповещяемойФормы) И ОткрытаяФорма.Ключ.ИмяФормы <> ПараметрыКлиент.ПутьКФормам + ИмяОповещяемойФормы Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ОткрытаяФорма.Ключ.ОбработкаОповещения(ИмяСобытия, Параметр, Источник);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяНовойФормы, ПараметрыНовойФормы= Неопределено, ВладелецНовойФормы= Неопределено, УникальностьНовойФормы= Ложь) Экспорт
	
	Если ПараметрыНовойФормы = Неопределено Тогда
		ПараметрыНовойФормы= Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыНовойФормы.Свойство("ЗакрыватьПриЗакрытииВладельца") Тогда
		ПараметрыНовойФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	КонецЕсли;
	
	ПараметрыНовойФормы.Вставить("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
	Если ВладелецНовойФормы = Неопределено Тогда
		ВладелецНовойФормы= ВладелецФормы;
	КонецЕсли;
	
	ПолучаемаяФорма= ПолучитьФорму(ПараметрыКлиент.ПутьКФормам+ИмяНовойФормы
	, ПараметрыНовойФормы
	, ВладелецНовойФормы
	, УникальностьНовойФормы);
	
	ПолучаемаяФорма.Объект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции


&НаКлиенте
Процедура ОткрытьФормуОбработки(ИмяНовойФормы, ПараметрыНовойФормы= Неопределено, ВладелецНовойФормы= Неопределено,
								ИмяОбработчика= "", ПараметрыОбработчика= Неопределено, ВладелецОбработчика= Неопределено, УникальностьНовойФормы= Ложь, РежимОткрытияОкнаНовойФормы= Неопределено) Экспорт
	
	Перем ОписаниеОбработчика;
	
	Если ВладелецНовойФормы = Неопределено Тогда
		ВладелецНовойФормы= ВладелецФормы;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяОбработчика) Тогда
		ОписаниеОбработчика= Новый ОписаниеОповещения(ИмяОбработчика,
		?(ТипЗнч(ВладелецОбработчика) = Тип("Строка"), ПолучитьМодуль(ВладелецОбработчика), ?(ВладелецОбработчика = Неопределено, ВладелецНовойФормы, ВладелецОбработчика)),
		ПараметрыОбработчика);
	КонецЕсли;
	
	Если ПараметрыНовойФормы = Неопределено Тогда
		ПараметрыНовойФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыНовойФормы.Вставить("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);

	Если НЕ ПараметрыНовойФормы.Свойство("ЗакрыватьПриЗакрытииВладельца") Тогда
		ПараметрыНовойФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	КонецЕсли;
	
	ОткрытьФорму(ПараметрыКлиент.ПутьКФормам + ИмяНовойФормы, ПараметрыНовойФормы, ВладелецНовойФормы,,,,ОписаниеОбработчика, РежимОткрытияОкнаНовойФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбработкиМодально(ИмяНовойФормы, ПараметрыНовойФормы= Неопределено, ВладелецНовойФормы= Неопределено,
										ИмяОбработчика= "", ПараметрыОбработчика= Неопределено, ВладелецОбработчика= Неопределено, УникальностьНовойФормы= Ложь) Экспорт
										
  	//ОткрытьФормуОбработки(ИмяНовойФормы, ПараметрыНовойФормы, ВладелецНовойФормы, ИмяОбработчика, ПараметрыОбработчика, ВладелецОбработчика, УникальностьНовойФормы, ПредопределенноеЗначение("РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс"));
	ОткрытьФормуОбработки(ИмяНовойФормы, ПараметрыНовойФормы, ВладелецНовойФормы, ИмяОбработчика, ПараметрыОбработчика, ВладелецОбработчика, УникальностьНовойФормы, ПредопределенноеЗначение("РежимОткрытияОкнаФормы.БлокироватьОкноВладельца"));
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуОбъектаИБ(Ссылка= Неопределено, ИмяНовойФормы="", ПараметрыНовойФормы= Неопределено, ВладелецНовойФормы= Неопределено,
													  ИмяОбработчика= "", ПараметрыОбработчика= Неопределено, ВладелецОбработчика= Неопределено, РежимОткрытияОкнаНовойФормы= Неопределено) Экспорт
	
	Перем ОписаниеОбработчика;
	
	Если НЕ ПустаяСтрока(ИмяОбработчика) Тогда
		ОписаниеОбработчика= Новый ОписаниеОповещения(ИмяОбработчика,
		?(ТипЗнч(ВладелецОбработчика) = Тип("Строка"), ПолучитьМодуль(ВладелецОбработчика), ?(ВладелецОбработчика = Неопределено, ВладелецНовойФормы, ВладелецОбработчика)),
		ПараметрыОбработчика);
	КонецЕсли;
	
	Если ПараметрыНовойФормы = Неопределено Тогда
		ПараметрыНовойФормы= Новый Структура;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяНовойФормы) Тогда
		ИмяНовойФормы= МетодКлиента("Модуль_Клиент", "ПолучитьОписаниеФормы", Ссылка);
	КонецЕсли;
		
	Если НЕ ПараметрыНовойФормы.Свойство("Ключ") И ЗначениеЗаполнено(Ссылка) Тогда
		ПараметрыНовойФормы.Вставить("Ключ", Ссылка);
	КонецЕсли;
	
	ОткрытьФорму(ИмяНовойФормы, ПараметрыНовойФормы, ВладелецНовойФормы,,,,ОписаниеОбработчика, РежимОткрытияОкнаНовойФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбъектаИБМодально(Ссылка= Неопределено, ИмяНовойФормы="", ПараметрыНовойФормы= Неопределено, ВладелецНовойФормы= Неопределено,
													  		  ИмяОбработчика= "", ПараметрыОбработчика= Неопределено, ВладелецОбработчика= Неопределено) Экспорт
	
	//ОткрытьФормуОбъектаИБ(Ссылка, ИмяНовойФормы, ПараметрыНовойФормы, ВладелецНовойФормы, ИмяОбработчика, ПараметрыОбработчика, ВладелецОбработчика, ПредопределенноеЗначение("РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс"));
	ОткрытьФормуОбъектаИБ(Ссылка, ИмяНовойФормы, ПараметрыНовойФормы, ВладелецНовойФормы, ИмяОбработчика, ПараметрыОбработчика, ВладелецОбработчика, ПредопределенноеЗначение("РежимОткрытияОкнаФормы.БлокироватьОкноВладельца"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКлиентскиеМодули() Экспорт
	
	УдаляемыеМодули= Новый Массив;
	
	Для Каждого КлючИзначение ИЗ КэшМодулей Цикл
		Если НРег(Прав(КлючИзначение.Ключ, 16)) = "переопределяемый" Тогда
			УдаляемыеМодули.Добавить(КлючИзначение.Ключ);
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого УдаляемыйМодуль ИЗ УдаляемыеМодули Цикл
		КэшМодулей.Удалить(УдаляемыйМодуль);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьСерверныеМодули(ВыгружатьМодулиПМ) Экспорт
	
	ВыгрузитьМакеты(ОбработкаОбъект());
	
	Если ВыгружатьМодулиПМ Тогда
		
		Модуль= МетодСервера(,"ПолучитьМодуль", Объект.ПараметрыКлиентСервер.ИмяОбработки+"Переопределяемый");
		
		ВыгрузитьМакеты(Модуль);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьШаблонПодключаемогоМодуля(ПолноеИмяФайла)
	
	ВыгрузитьМакеты(ОбработкаОбъект(), "ШаблонПодключаемогоМодуля", ПолноеИмяФайла)
	
КонецПроцедуры

#КонецОбласти

#Область МАНИФЕСТ

// Все функции и процедуры тела модуля должны быть экспортными и добавлены в соответствующую структуру!

&НаКлиенте
Функция ФункцииМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: ДобавитьФункциюВМанифест(СтруктураМетодов, <Имя функции>, <Параметры строкой>, <Вариант кэширования>, <Переопределение>);
	//ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НеИспользовать", Истина);
	//ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяВыполнения", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ШаблонМанифеста", "ИмяМодуля",,Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "МанифестМодуля", "ИмяМодуля",,Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьФормуОбработки", "ИмяНовойФормы, ПараметрыНовойФормы= Неопределено, ВладелецНовойФормы= Неопределено, УникальностьНовойФормы= Ложь",,Истина);
	//...
	
	Возврат СтруктураМетодов;
	
КонецФункции

&НаКлиенте
Функция ПроцедурыМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: ДобавитьПроцедуруВМанифест(СтруктураМетодов, <Имя процедуры>, <Параметры строкой>, <Переопределение>);
	//ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПримерПроцедуры", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", Истина);
	//...
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОповеститьФормы", "ИмяСобытия= Неопределено, Параметр= Неопределено, Источник= Неопределено, ИмяОповещяемойФормы= """"", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОткрытьФормуОбработки", "ИмяНовойФормы, ПараметрыНовойФормы = Неопределено, ВладелецНовойФормы= Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено, УникальностьНовойФормы= Ложь, РежимОткрытияОкнаНовойФормы= Неопределено", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОткрытьФормуОбработкиМодально", "ИмяНовойФормы, ПараметрыНовойФормы = Неопределено, ВладелецНовойФормы= Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено, УникальностьНовойФормы= Ложь", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОткрытьФормуОбъектаИБ", "Ссылка= Неопределено, ИмяНовойФормы="", ПараметрыНовойФормы = Неопределено, ВладелецНовойФормы= Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено, РежимОткрытияОкнаНовойФормы= Неопределено", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОткрытьФормуОбъектаИБМодально", "Ссылка= Неопределено, ИмяНовойФормы="", ПараметрыНовойФормы = Неопределено, ВладелецНовойФормы= Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "СохранитьНастройкиПодключаемогоМодуля",, Ложь);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УдалитьКлиентскиеМодули",, Ложь);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ВыгрузитьСерверныеМодули",, Ложь);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ВыгрузитьШаблонПодключаемогоМодуля",, Ложь);
	
	Возврат СтруктураМетодов;
	
КонецФункции

#КонецОбласти

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМ_МОДУЛЯ

&НаКлиенте
Процедура ПриОткрытииФормыОбработки(ФормаОбработки, Отказ= Ложь) Экспорт
	
	ФормаОбработки.Объект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
	
	ОткрытыеФормы.Вставить(ФормаОбработки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыОбработки(ФормаОбработки, ЗакрытиеОсновнойФормы= Ложь) Экспорт
	
	Если ЗакрытиеОсновнойФормы Тогда // Выполняется закрытие основной формы обработки
		
		Если ПараметрыКлиент.ПодключаемыйМодуль.Свойство("НастройкиМодуляОбновлены") Тогда
			МетодКлиента(,"СохранитьНастройкиПодключаемогоМодуля");
		КонецЕсли;
		
		Попытка
			МетодСервера(,"УдалитьПодключенныеОбработки");
		Исключение
		КонецПопытки;
		
		КэшНаВремяСеанса.Очистить();
		
		ПараметрыКлиент.Очистить();
		
		КэшМодулей.Очистить();
		
		Объект.ПараметрыКлиентСервер.Очистить();
		
	КонецЕсли;
	
	ФормаОбработки.Платформа= Неопределено;
	
	ОткрытыеФормы.Удалить(ФормаОбработки);
	
КонецПроцедуры

#КонецОбласти

#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции


&НаКлиенте
Процедура ИнициализироватьПлатформу() Экспорт
	
	ЗаполнитьМанифест(ЭтаФорма, "Платформа");
	
	ОткрытыеФормы.Вставить(ВладелецФормы, Истина);
	
	Объект.ПараметрыКлиентСервер= ВладелецФормы.Объект.ПараметрыКлиентСервер;	
	
	ПараметрыКлиент.Вставить("ВыполнениеАлгоритмаЗапущено"	, Ложь);
	ПараметрыКлиент.Вставить("ИерархияОрганизацийDiadoc"	, Новый Соответствие);
	
	ПараметрыКлиент.Вставить("КонтекстРаботаССерверомДиадок"); 
	ПараметрыКлиент.Вставить("КонтекстДиадока"				, Новый Массив);
	ПараметрыКлиент.Вставить("ОрганизацииФилиалыСопоставленныеСДиадоком", Новый Массив);
	
	ПараметрыКлиент.Вставить("СинонимКонфигурации", Объект.ПараметрыКлиентСервер.СинонимКонфигурации);
	
	Для Каждого КлючИЗначение ИЗ Объект.ПараметрыКлиентСервер.ПараметрыКлиент Цикл
		ПараметрыКлиент.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Объект.ПараметрыКлиентСервер.Удалить("ПараметрыКлиент");
	
	ПараметрыКлиент.Вставить("ПодключаемыйМодуль"				 , Новый Структура);
	ПараметрыКлиент.ПодключаемыйМодуль.Вставить("ПутьКФормам"	 , Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКФормам);
	ПараметрыКлиент.ПодключаемыйМодуль.Вставить("Инициализирован", Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.Инициализирован);
	ПараметрыКлиент.ПодключаемыйМодуль.Вставить("ОписаниеОшибки" , "");
	
	Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.Удалить("ПутьКФормам");
	Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.Удалить("Инициализирован");
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьМетод(Модуль, ИмяМетода, ПараметрыСтрокой,
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	Перем СтруктураМетода, ПереопределениеВыполнено;
	
	Если Модуль.Манифест.Функции.Свойство(ИмяМетода, СтруктураМетода) Тогда
		
		Если СтруктураМетода.Переопределение Тогда
			
			Результат= Переопределение(Модуль, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
			
			Если ПереопределениеВыполнено Тогда
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураМетода.ВариантКэширования <> "НеИспользовать" Тогда
			Возврат ПовторноеИспользование(Модуль, СтруктураМетода, ПараметрыСтрокой,
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		КонецЕсли;
		
		Возврат Вычислить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
		
	ИначеЕсли Модуль.Манифест.Процедуры.Свойство(ИмяМетода, СтруктураМетода) Тогда
		
		Если СтруктураМетода.Переопределение Тогда
			
			Результат= Переопределение(Модуль, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
			
			Если ПереопределениеВыполнено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Выполнить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
		
	Иначе
		
		ВызватьИсключение "Метод объекта не обнаружен ("+ИмяМетода+")
		|	"+Модуль.Манифест.ИмяМодуля+"."+ИмяМетода+"();";
		
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Функция Переопределение(Модуль, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	ПереопределениеВыполнено= Ложь;
	
	МодульПереопределяемый= ПолучитьМодуль(Модуль.Манифест.ИмяМодуля+"Переопределяемый");
	
	Если МодульПереопределяемый = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульПереопределяемый.СтандартныйМодуль= 		 Модуль;
	МодульПереопределяемый.ПереопределениеВыполнено= Ложь;
	
	Результат= ВыполнитьМетодПереопределения(МодульПереопределяемый, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
	МодульПереопределяемый.ОчиститьПеременные();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьМетодПереопределения(Модуль, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
												Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
												Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	Перем СтруктураМетода, Результат;
	
	Если Модуль.Манифест.Функции.Свойство(ИмяМетода, СтруктураМетода) Тогда
		
		Если СтруктураМетода.ВариантКэширования <> "НеИспользовать" Тогда
			Возврат ПовторноеИспользованиеПереопределения(ПереопределениеВыполнено, Модуль, СтруктураМетода, ПараметрыСтрокой,
																		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
																		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		КонецЕсли;
		
		Результат= Вычислить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
		
	ИначеЕсли Модуль.Манифест.Процедуры.Свойство(ИмяМетода, СтруктураМетода) Тогда
		
		Выполнить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
		
	КонецЕсли;
	
	ПереопределениеВыполнено= Модуль.ПереопределениеВыполнено;
	
	Возврат Результат;
	
КонецФункции


&НаКлиенте
Функция ПовторноеИспользование(Модуль, СтруктураМетода, ПараметрыСтрокой,
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	Перем Результат, ВходящийМассивПараметров;
	
	МассивПараметров= МассивПараметров(
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
	ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Получить", Модуль.Манифест.ИмяМодуля, СтруктураМетода.ИмяМетода, МассивПараметров, Результат);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат.Результат;
	Иначе
		
		Результат= Вычислить("Модуль."+СтруктураМетода.ИмяМетода+"("+ПараметрыСтрокой+")");
		
		ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Обновить", Модуль.Манифест.ИмяМодуля, СтруктураМетода.ИмяМетода, МассивПараметров, Новый Структура("Результат", Результат));
		
		МассивПараметров= Неопределено;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПовторноеИспользованиеПереопределения(ПереопределениеВыполнено, Модуль, СтруктураМетода, ПараметрыСтрокой,
											  Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
											  Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	Перем Результат;
	
	МассивПараметров= МассивПараметров(
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
	ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Получить", Модуль.Манифест.ИмяМодуля, СтруктураМетода.ИмяМетода, МассивПараметров, Результат);
	
	Если Результат <> Неопределено Тогда
		ПереопределениеВыполнено= Истина;
		Возврат Результат.Результат;
	Иначе
		
		Результат= Вычислить("Модуль."+СтруктураМетода.ИмяМетода+"("+ПараметрыСтрокой+")");
		
		ПереопределениеВыполнено= Модуль.ПереопределениеВыполнено;
		
		Если ПереопределениеВыполнено Тогда
			ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Обновить", Модуль.Манифест.ИмяМодуля, СтруктураМетода.ИмяМетода, МассивПараметров, Новый Структура("Результат", Результат));
		КонецЕсли;
		
		МассивПараметров= Неопределено;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПовторноеИспользованиеСброситьЗначение(ИмяМодуля, ИмяМетода,
		  Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		  Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Перем СтруктураМетода, СтруктураМетодаПереопределяемый;
	
	Модуль= ПолучитьМодуль(ИмяМодуля);
	
	Если Модуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Модуль.Манифест.Функции.Свойство(ИмяМетода, СтруктураМетода) И СтруктураМетода.ВариантКэширования <> "НеИспользовать" Тогда
		
		Если СтруктураМетода.Переопределение Тогда
			
			МодульПереопределяемый= ПолучитьМодуль(ИмяМодуля+"Переопределяемый");
			
			Если МодульПереопределяемый <> Неопределено Тогда
				Если МодульПереопределяемый.Манифест.Функции.Свойство(ИмяМетода, СтруктураМетодаПереопределяемый) Тогда
					Если СтруктураМетодаПереопределяемый.ВариантКэширования <> "НеИспользовать" Тогда
						
						МассивПараметров= МассивПараметров(
						Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
						Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
						
						ПовторноеИспользованиеДействияСКэшем(СтруктураМетодаПереопределяемый.ВариантКэширования, "Удалить", МодульПереопределяемый.Манифест.ИмяМодуля, ИмяМетода, МассивПараметров);
						
						Возврат;
						
					Иначе // Это значит переопределяемая функция меняет входящие параметры продуктовой функции, придется её выполнить чтобы получить сигнатуру измененных параметров.
						
						ПараметрыСтрокой= ПараметрыСтрокой(
						Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
						Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
						
						ПереопределениеВыполнено= Ложь;
						
						МодульПереопределяемый.СтандартныйМодуль=	 	 Модуль;
						МодульПереопределяемый.ПереопределениеВыполнено= Ложь;
						
						Результат= ВыполнитьМетодПереопределения(МодульПереопределяемый, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
						Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
						Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
						
						МодульПереопределяемый.СтандартныйМодуль= 		 Неопределено;
						МодульПереопределяемый.ПереопределениеВыполнено= Ложь;
						
						Если ПереопределениеВыполнено Тогда // Это значит манифест заполнен с ошибкой и функция все-же вернула результат, сбрасывать кэш продуктовой функции не нужно.
							Возврат;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		МассивПараметров= МассивПараметров(
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
		ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Удалить", Модуль.Манифест.ИмяМодуля, ИмяМетода, МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторноеИспользованиеДействияСКэшем(ВариантКэширования, Действие, ИмяМодуля, ИмяМетода, МассивПараметров, Результат= Неопределено)
	
	Если ВариантКэширования = "НаВремяВыполнения" Тогда
		
		Если НЕ ПараметрыКлиент.ВыполнениеАлгоритмаЗапущено Тогда
			Возврат;
		КонецЕсли;
		
		Кэш= КэшНаВремяВыполнения;
		
	ИначеЕсли ВариантКэширования = "НаВремяСеанса" Тогда
		Кэш= КэшНаВремяСеанса;
	КонецЕсли;
	
	Если НЕ Кэш.Свойство(ИмяМодуля) Тогда
		Кэш.Вставить(ИмяМодуля, Новый Структура);
	КонецЕсли;
	
	Если НЕ Кэш[ИмяМодуля].Свойство(ИмяМетода) Тогда
		Кэш[ИмяМодуля].Вставить(ИмяМетода, Новый Структура("МатрицаАдресов, Хранилище, НовыйКлюч", Новый Соответствие, Новый Соответствие, 1));
	КонецЕсли;
	
	КэшМетода= Кэш[ИмяМодуля][ИмяМетода];
	
	АдресКэша= "";
	Разделитель= "";
	
	МассивПараметровВГраница= МассивПараметров.ВГраница();
	
	Для ИндексПараметра=0 ПО МассивПараметровВГраница Цикл
		
		Параметр = МассивПараметров[ИндексПараметра];
		
		Если Параметр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КэшМетода.МатрицаАдресов[ИндексПараметра] = Неопределено Тогда
			КэшМетода.МатрицаАдресов.Вставить(ИндексПараметра, Новый Соответствие);
		КонецЕсли;
		
		КлючЯчейкиПараметра= КэшМетода.МатрицаАдресов[ИндексПараметра][Параметр];
		
		Если КлючЯчейкиПараметра = Неопределено Тогда
			КлючЯчейкиПараметра= Формат(КэшМетода.НовыйКлюч, "ЧГ=");
			КэшМетода.НовыйКлюч= КэшМетода.НовыйКлюч + 1;
			КэшМетода.МатрицаАдресов[ИндексПараметра].Вставить(Параметр, КлючЯчейкиПараметра);
		КонецЕсли;
		
		АдресКэша= АдресКэша + Разделитель + КлючЯчейкиПараметра;
		Разделитель= ".";
		
	КонецЦикла;
	
	Если Действие = "Получить" Тогда
		Результат = КэшМетода.Хранилище[АдресКэша];
	ИначеЕсли Действие = "Обновить" Тогда
		КэшМетода.Хранилище.Вставить(АдресКэша, Результат);
	ИначеЕсли Действие = "Удалить" Тогда
		КэшМетода.Хранилище.Удалить(АдресКэша);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьМодуль(ИмяМодуля) Экспорт
	
	Если НРег(ИмяМодуля)= "платформа" Тогда
		Возврат ЭтаФорма;
	КонецЕсли;
	
	Модуль= КэшМодулей[ИмяМодуля];
		
	Если Модуль = Неопределено Тогда // Модуль еще не создан
		
		Если ПараметрыКлиент.ПодключаемыйМодуль.Инициализирован И НРег(Прав(ИмяМодуля, 16)) = "переопределяемый" Тогда
			
			Попытка
				Модуль= ПолучитьФорму(ПараметрыКлиент.ПодключаемыйМодуль.ПутьКФормам+ИмяМодуля,,ЭтаФорма, Истина);
			Исключение
			КонецПопытки;
				
		КонецЕсли;
		
		Если Модуль = Неопределено Тогда
			
			Попытка
				Модуль= ПолучитьФорму(ПараметрыКлиент.ПутьКФормам+ИмяМодуля,,,Истина);
			Исключение
				Модуль= Неопределено;
			КонецПопытки;
			
		КонецЕсли;
		
		КэшМодулей.Вставить(ИмяМодуля, ?(Модуль = Неопределено, Ложь, Модуль));
	
	КонецЕсли;
	
	Если Модуль = Ложь Тогда // Модуль получить невозможно
		
		Модуль= Неопределено;
		
	ИначеЕсли Модуль <> Неопределено Тогда
		
		// Инициализация модуля
		Попытка
			Модуль.Платформа= ЭтаФорма;
			Модуль.Объект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
			Модуль.Инициализировать(ИмяМодуля);
		Исключение
			Модуль= Неопределено;
		КонецПопытки;
	
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

&НаКлиенте
Функция ПараметрыСтрокой(
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	ПараметрыСтрокой= "";
	Разделитель= "";
	ДобавитьПустойПараметр= Ложь;
	Если Параметр9 <> NULL Тогда
		ПараметрыСтрокой= "Параметр9";
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Разделитель= "";
	КонецЕсли;
	Если Параметр8 <> NULL Тогда
		ПараметрыСтрокой= "Параметр8"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	Если Параметр7 <> NULL Тогда
		ПараметрыСтрокой= "Параметр7"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	Если Параметр6 <> NULL Тогда
		ПараметрыСтрокой= "Параметр6"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	Если Параметр5 <> NULL Тогда
		ПараметрыСтрокой= "Параметр5"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	Если Параметр4 <> NULL Тогда
		ПараметрыСтрокой= "Параметр4"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	Если Параметр3 <> NULL Тогда
		ПараметрыСтрокой= "Параметр3"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	Если Параметр2 <> NULL Тогда
		ПараметрыСтрокой= "Параметр2"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	Если Параметр1 <> NULL Тогда
		ПараметрыСтрокой= "Параметр1"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	Если Параметр0 <> NULL Тогда
		ПараметрыСтрокой= "Параметр0"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
		КонецЕсли;
	КонецЕсли;
	
	//МассивПараметровВГраница= МассивПараметров.ВГраница();
	//Разделитель= "";
	//Для ИндексПараметра= 0 ПО МассивПараметровВГраница Цикл
	//	
	//	Если МассивПараметров[ИндексПараметра] = NULL Тогда
	//		ПараметрыСтрокой= ПараметрыСтрокой + Разделитель;
	//	Иначе
	//		ПараметрыСтрокой= ПараметрыСтрокой + Разделитель + "Параметр"+ИндексПараметра
	//	КонецЕсли;
	//	
	//	Разделитель= ", ";
	//	
	//КонецЦикла;
	
	Возврат ПараметрыСтрокой;
	
КонецФункции

&НаКлиенте
Функция МассивПараметров(
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	МассивПараметров= Новый Массив(10);
	МассивПараметров[0]= Параметр0; МассивПараметров[1]= Параметр1; МассивПараметров[2]= Параметр2; МассивПараметров[3]= Параметр3; МассивПараметров[4]= Параметр4;
	МассивПараметров[5]= Параметр5; МассивПараметров[6]= Параметр6; МассивПараметров[7]= Параметр7; МассивПараметров[8]= Параметр8; МассивПараметров[9]= Параметр9;
	
	ОбратныйИндекс= 9;
	Пока ОбратныйИндекс > -1 Цикл
		Если МассивПараметров[ОбратныйИндекс] = NULL Тогда
			МассивПараметров.Удалить(ОбратныйИндекс);
		Иначе
			Прервать;
		КонецЕсли;
		ОбратныйИндекс= ОбратныйИндекс-1;
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции


&НаКлиенте
Процедура НачалоВыполненияАлгоритма() Экспорт
	
	КэшНаВремяВыполнения.Очистить();
	
	ПараметрыКлиент.ВыполнениеАлгоритмаЗапущено= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВыполненияАлгоритма() Экспорт
	
	КэшНаВремяВыполнения.Очистить();
	
	ПараметрыКлиент.ВыполнениеАлгоритмаЗапущено= Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьМанифест(Модуль, ИмяМодуля) Экспорт
	
	Если Модуль <> ЭтаФорма Тогда
		
		Модуль.Манифест= ШаблонМанифеста(ИмяМодуля);
		Модуль.Манифест.Функции=   Модуль.ФункцииМодуля();
		Модуль.Манифест.Процедуры= Модуль.ПроцедурыМодуля();
		
	Иначе
		
		Манифест= ШаблонМанифеста(ИмяМодуля);
		Манифест.Функции=   ФункцииМодуля();
		Манифест.Процедуры= ПроцедурыМодуля();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьФункциюВМанифест(СтруктураМетодов, ИмяМетода, ПараметрыСтрокой= "", ВариантКэширования= "НеИспользовать", Переопределение= Ложь) Экспорт
	
	СтруктураМетодов.Вставить(ИмяМетода, Новый Структура("ИмяМетода, ПараметрыСтрокой, ВариантКэширования, Переопределение", ИмяМетода, ПараметрыСтрокой, ВариантКэширования, Переопределение));
	
КонецФункции

&НаКлиенте
Функция ДобавитьПроцедуруВМанифест(СтруктураМетодов, ИмяМетода, ПараметрыСтрокой= "", Переопределение= Ложь) Экспорт
	
	СтруктураМетодов.Вставить(ИмяМетода, Новый Структура("ИмяМетода, ПараметрыСтрокой, Переопределение", ИмяМетода, ПараметрыСтрокой, Переопределение));
	
КонецФункции


&НаСервере
Процедура СохранитьНастройкиПодключаемогоМодуля()
	
	МетодСервера(,"УстановитьЗначениеКонстанты", "ИспользоватьПодключаемыйМодуль" , Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль);
	МетодСервера(,"УстановитьЗначениеКонстанты", "РасположениеПодключаемогоМодуля", Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля);
	МетодСервера(,"УстановитьЗначениеКонстанты", "ПутьКПодключаемомуМодулю"		  , Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю);
	
КонецПроцедуры


&НаСервере
Процедура ВыгрузитьМакеты(ОбъектКоллекции, ИмяМакета= "", ПолноеИмяФайла= "")
	
	Если НЕ ПустаяСтрока(ИмяМакета) Тогда
		ОбъектКоллекции.ПолучитьМакет(ИмяМакета).Записать(ПолноеИмяФайла);
	Иначе
		
		МетаданныеМакеты= ОбъектКоллекции.Метаданные().Макеты;
		
		Для каждого МетаданныеМакет Из МетаданныеМакеты Цикл
			Если Лев(НРег(МетаданныеМакет.Имя), 7) = НРег("Модуль_") Тогда
				ОбъектКоллекции.ПолучитьМакет(МетаданныеМакет.Имя).Записать( Объект.ПараметрыКлиентСервер.КаталогМодулейСервера + ПолучитьРазделительПути() + МетаданныеМакет.Имя + ".epf");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИНИЦИАЛИЗАЦИЯ_ПЕРЕМЕННЫХ_ПЛАТФОРМЫ

#Если Клиент Тогда
	
	КэшНаВремяВыполнения= Новый Структура;
	КэшНаВремяСеанса= 	  Новый Структура;
	ПараметрыКлиент=	  Новый Структура;
	ОткрытыеФормы=		  Новый Соответствие;
	КэшМодулей= 	  	  Новый Соответствие;
	
#КонецЕсли

#КонецОбласти
