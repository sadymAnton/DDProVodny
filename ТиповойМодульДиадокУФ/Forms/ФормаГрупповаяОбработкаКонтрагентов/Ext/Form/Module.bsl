//{ ПЕРЕМЕННЫЕ МОДУЛЯ

	&НаКлиенте
	Перем ВнесеныИзменения;
	
	&НаКлиенте
	Перем ПараметрЗакрытия;
	
//} ПЕРЕМЕННЫЕ МОДУЛЯ


#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

//{ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		Организация= Параметры.Организация;
		
		Заголовок= "Групповая обработка контрагентов организации " + Организация;
		
		ПолучитьТаблицуКонтрагентов(Параметры.Контрагенты);
		ПолеВыбораДействия = "Сопоставить";
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		ПлатформаПриОткрытии(Отказ);
		
		ВнесеныИзменения= Ложь;
		
		ПолеВыбораДействияЗаполнить();
		УстановитьПометки("");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
		
		Если ПараметрЗакрытия = Неопределено Тогда
			
			ПараметрЗакрытия= Новый Структура("ВнесеныИзменения", ВнесеныИзменения);
			
			Закрыть(ПараметрЗакрытия);
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры
	
//} ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


//{ ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

	&НаКлиенте
	Процедура ПолеВыбораДействияПриИзменении(Элемент)
		УстановитьПометки("");
	КонецПроцедуры
	
//} ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ


//{ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ

	&НаКлиенте
	Процедура КонтрагентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		Отказ = Истина;
	КонецПроцедуры

	&НаКлиенте
	Процедура КонтрагентыПередУдалением(Элемент, Отказ)
		Отказ = Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		Если Поле.Имя = "КонтрагентыСостояниеОбработки" Тогда
			ТекстСообщения = Элемент.ТекущиеДанные.ТекстОшибкиОбработки;
			ПоказатьПредупреждение(, ТекстСообщения, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		Иначе
			ОткрытьКарточкуКонтрагента();
		КонецЕсли;
		
	КонецПроцедуры
	
//} ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ

//{ ОБРАБОТЧИКИ КОМАНД ФОРМЫ

	&НаКлиенте
	Процедура УстановитьПометки(Команда)
		Для Каждого Строка Из Контрагенты Цикл
			Если ПолеВыбораДействия = "Сопоставить" Тогда
				Строка.Пометка = ?(НЕ ЗначениеЗаполнено(Строка.ПредставлениеСпискаКонтрагентов1С), Истина, Ложь);
			ИначеЕсли ПолеВыбораДействия = "ПринятьПриглашения" Тогда
				Строка.Пометка = ?(Строка.ТекущийСтатус = "InvitesMe", Истина, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СнятьПометки(Команда)
		Для каждого Строка Из Контрагенты Цикл
		    Строка.Пометка = Ложь;
		КонецЦикла;
	КонецПроцедуры

	&НаКлиенте
	Процедура Обработать(Команда)
		
		Если ПолеВыбораДействия = "Сопоставить" Тогда
			Сопоставить();
		ИначеЕсли ПолеВыбораДействия = "ПринятьПриглашения" Тогда
			ПринятьПриглашения();
		КонецЕсли;
		
	КонецПроцедуры
	
//} ОБРАБОТЧИКИ КОМАНД ФОРМЫ

//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

	&НаСервере
	Процедура ПолучитьТаблицуКонтрагентов(парКонтрагенты)
		
		Для каждого Элемент Из парКонтрагенты Цикл
			Строка = Контрагенты.Добавить();
			
			Строка.Контрагент 							= Элемент.Контрагент;
			Строка.ИНН 									= Элемент.ИНН;
			Строка.КПП 									= Элемент.КПП;
			Строка.ПредставлениеСпискаКонтрагентов1С 	= Элемент.ПредставлениеСпискаКонтрагентов1С;
			Строка.ТекущийСтатус 						= Элемент.ТекущийСтатус;
			Строка.ТекущийСтатусРасшифровка 			= Элемент.ТекущийСтатусРасшифровка;
			Строка.ID 									= Элемент.ID;
			
			парДеревоКонтаргентов = Элемент.СписокКонтрагентовВ1С.ПолучитьЭлементы();
			стрДеревоКонтаргентов = Строка.СписокКонтрагентовВ1С.ПолучитьЭлементы();
			
			Для Каждого парКонтаргент Из парДеревоКонтаргентов Цикл
				стрКонтаргент = стрДеревоКонтаргентов.Добавить();
				
				стрКонтаргент.ToDepartmentID 			= парКонтаргент.ToDepartmentID;
				стрКонтаргент.Договор 					= парКонтаргент.Договор;
				стрКонтаргент.КонтрагентВ1С 			= парКонтаргент.КонтрагентВ1С;
				стрКонтаргент.ПодразделениеКонтрагента 	= парКонтаргент.ПодразделениеКонтрагента;
				
			КонецЦикла;
		
		КонецЦикла;
	
	КонецПроцедуры

	&НаКлиенте
	Процедура ПолеВыбораДействияЗаполнить()
	
		Элементы.ПолеВыбораДействия.СписокВыбора.Очистить();
		Элементы.ПолеВыбораДействия.СписокВыбора.Добавить("Сопоставить", "Сопоставить");
		Элементы.ПолеВыбораДействия.СписокВыбора.Добавить("ПринятьПриглашения", "Принять приглашения");
	
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Сопоставить()
		
		Для каждого Стр Из Контрагенты Цикл
		    Стр.СостояниеОбработки = "";
			Стр.ТекстОшибкиОбработки = "";
			
			ПредставлениеКонтрагентов = "";
			
			Если Стр.Пометка = Истина Тогда
				
				Стр.Пометка = Ложь;
				СписокКонтаргентов = НайтиКонтрагентовПоИНН(Стр.ИНН);
				
				Если СписокКонтаргентов.Количество() > 0 Тогда
					ДеревоКонтрагентов = Стр.СписокКонтрагентовВ1С.ПолучитьЭлементы();	
					
					Для Каждого Контрагент Из СписокКонтаргентов Цикл
						новКонтрагент = ДеревоКонтрагентов.Добавить();
						новКонтрагент.КонтрагентВ1С	= Контрагент.Значение;
						
						МетодСервераБезКонтекста(,"Установить_CounteragentBoxID_для_Контрагент", Контрагент.Значение, Стр.ID);

						ПредставлениеКонтрагентов =	ПредставлениеКонтрагентов + ?(ПустаяСтрока(ПредставлениеКонтрагентов), "", "; ") + Контрагент;
					КонецЦикла;
					
					Если СписокКонтаргентов.Количество() > 1 Тогда
						ПредставлениеКонтрагентов =	ПредставлениеКонтрагентов + ";";
					КонецЕсли;
					
					Стр.СостояниеОбработки	= "Контрагент сопоставлен";
					Стр.ТекстОшибкиОбработки= "Контрагент сопоставлен";
					
					Стр.ПредставлениеСпискаКонтрагентов1С = ПредставлениеКонтрагентов;
				Иначе
					Стр.СостояниеОбработки	= "Ошибка сопоставления";
					Стр.ТекстОшибкиОбработки= "Не найден контрагент 1С с ИНН " + Стр.ИНН;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ВнесеныИзменения = Истина;
		
	КонецПроцедуры
	
	&НаСервереБезКонтекста
	Функция НайтиКонтрагентовПоИНН(ИНН)
		
		СписокКонтрагентов = Новый СписокЗначений;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН";
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокКонтрагентов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
		Возврат СписокКонтрагентов;
		
	КонецФункции 
	
	&НаКлиенте
	Процедура ПринятьПриглашения()
	
		Для каждого Стр Из Контрагенты Цикл
		    Стр.СостояниеОбработки = "";
			Стр.ТекстОшибкиОбработки = "";
			
			Если Стр.Пометка = Истина Тогда
				
				Стр.Пометка = Ложь;
				Если Стр.ТекущийСтатус = "InvitesMe" Тогда
					Попытка
						ПараметрыПриглашения=	Новый Структура();
						ПараметрыПриглашения.Вставить("ТекущиеДанные", 	Стр);
						ПараметрыПриглашения.Вставить("Комментарий", 	"");
						ПараметрыПриглашения.Вставить("ПутьКФайлу", 	"");
						
			            ОсновнаяФорма = ЭтаФорма.ВладелецФормы;
						ОсновнаяФорма.ОтправитьПринятьПриглашениеКонтрагенту(ПараметрыПриглашения);
						
						Стр.ТекущийСтатусРасшифровка = "Партнерские отношения";
						
						Стр.СостояниеОбработки	= "Приглашение принято";
						Стр.ТекстОшибкиОбработки= "Приглашение принято";
					Исключение
						Стр.СостояниеОбработки	= "Ошибка";
						Стр.ТекстОшибкиОбработки= ОписаниеОшибки();
					КонецПопытки;
				Иначе
					Стр.СостояниеОбработки	= "Ошибка обработки";
					Стр.ТекстОшибкиОбработки= "Контрагент " + Стр.Контрагент + " не отправлял запрос на установление партнерских взаимоотношений";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ВнесеныИзменения = Истина;
	
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОткрытьКарточкуКонтрагента()
	
		ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("СписокКонтрагентовВ1С", ТекущиеДанные.СписокКонтрагентовВ1С);
		ПараметрыФормы.Вставить("CounteragentID"	   , ТекущиеДанные.ID);
		ПараметрыФормы.Вставить("НаименованиеДД"	   , ТекущиеДанные.Контрагент + ?(ПустаяСтрока(ТекущиеДанные.ИНН), "", " (" + ТекущиеДанные.ИНН) + ?(ПустаяСтрока(ТекущиеДанные.КПП), "", "/" + ТекущиеДанные.ИНН) + ")");
		ПараметрыФормы.Вставить("Организация"	   	   , Организация);
		ПараметрыФормы.Вставить("ИНН"				   , ТекущиеДанные.ИНН);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОткрытиеФормыКарточкиКонтрагента", ЭтаФорма, ТекущиеДанные);
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаКарточкиКонтрагента", ПараметрыФормы, ЭтаФорма);
	
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыКарточкиКонтрагента(РезультатЗакрытия, ТекущиеДанные) Экспорт
	
		Если РезультатЗакрытия.Свойство("ВнесеныИзменения") <> Неопределено И РезультатЗакрытия.ВнесеныИзменения = Истина Тогда
			Если РезультатЗакрытия.Свойство("СписокКонтрагентовВ1С") <> Неопределено Тогда
				
				ОтборСтрок = Новый Структура("ИНН", ТекущиеДанные.ИНН);
				НайденнаяСтрока	= Контрагенты.НайтиСтроки(ОтборСтрок)[0];
				
				новСписокКонтрагентов 		= РезультатЗакрытия.СписокКонтрагентовВ1С.ПолучитьЭлементы();
				текСписокКонтрагентов 		= НайденнаяСтрока.СписокКонтрагентовВ1С.ПолучитьЭлементы();
				
				текСписокКонтрагентов.Очистить();
				ПредставлениеКонтрагентов = "";
				
				Для каждого Элемент Из новСписокКонтрагентов Цикл
					Контрагент = текСписокКонтрагентов.Добавить();
					
					Контрагент.ToDepartmentID 			= Элемент.ToDepartmentID;
					Контрагент.Договор 					= Элемент.Договор;
					Контрагент.КонтрагентВ1С 			= Элемент.КонтрагентВ1С;
					Контрагент.ПодразделениеКонтрагента = Элемент.ПодразделениеКонтрагента;
					
					ПредставлениеКонтрагентов =	ПредставлениеКонтрагентов + ?(ПустаяСтрока(ПредставлениеКонтрагентов), "", "; ") + Контрагент.КонтрагентВ1С;
				КонецЦикла;
				
				Если текСписокКонтрагентов.Количество() > 1 Тогда
					ПредставлениеКонтрагентов =	ПредставлениеКонтрагентов + ";";
				КонецЕсли;
				
				НайденнаяСтрока.ПредставлениеСпискаКонтрагентов1С = ПредставлениеКонтрагентов;
				
				УстановитьПометки("");
			КонецЕсли;
		КонецЕсли;
	
	КонецПроцедуры
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

